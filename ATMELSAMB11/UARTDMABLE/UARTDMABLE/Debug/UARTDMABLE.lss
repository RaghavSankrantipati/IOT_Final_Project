
UARTDMABLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000c19c  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000084  1001419c  1001419c  0001419c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00003130  10014220  10014220  00014220  2**2
                  ALLOC
  3 .stack        00000800  10017350  10017350  00014220  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00014220  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00014248  2**0
                  CONTENTS, READONLY
  6 .debug_info   00032497  00000000  00000000  000142fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000387d  00000000  00000000  00046793  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000077d9  00000000  00000000  0004a010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000870  00000000  00000000  000517e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000008e0  00000000  00000000  00052059  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00008d5f  00000000  00000000  00052939  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f3d3  00000000  00000000  0005b698  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0010dfb5  00000000  00000000  0006aa6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000207c  00000000  00000000  00178a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001419c 	.word	0x1001419c
10008068:	1001419c 	.word	0x1001419c
1000806c:	10014220 	.word	0x10014220
10008070:	10017350 	.word	0x10017350
10008074:	10014220 	.word	0x10014220
10008078:	100141a0 	.word	0x100141a0
1000807c:	10014224 	.word	0x10014224
10008080:	10011bf9 	.word	0x10011bf9
10008084:	1000c7d9 	.word	0x1000c7d9

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10014220 	.word	0x10014220
100080a8:	00000000 	.word	0x00000000
100080ac:	1001419c 	.word	0x1001419c

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10014224 	.word	0x10014224
100080dc:	1001419c 	.word	0x1001419c
100080e0:	1001419c 	.word	0x1001419c
100080e4:	00000000 	.word	0x00000000

100080e8 <dma_isr_handler>:
/**
 * \brief DMA interrupt service routine.
 *
 */
static void dma_isr_handler( void )
{
100080e8:	b5f0      	push	{r4, r5, r6, r7, lr}
100080ea:	4647      	mov	r7, r8
100080ec:	b480      	push	{r7}
100080ee:	b082      	sub	sp, #8
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;

	/* Get active channel */
	active_channel =  PROV_DMA_CTRL0->CORE_INT_STATUS.reg & 
100080f0:	2380      	movs	r3, #128	; 0x80
100080f2:	011b      	lsls	r3, r3, #4
100080f4:	4a3a      	ldr	r2, [pc, #232]	; (100081e0 <dma_isr_handler+0xf8>)
100080f6:	5cd4      	ldrb	r4, [r2, r3]
{
	uint8_t active_channel;
	static uint8_t channel_index; //
	struct dma_resource *resource;
	uint8_t isr;
	uint8_t isr_flag = 0;
100080f8:	2600      	movs	r6, #0
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
100080fa:	230f      	movs	r3, #15
100080fc:	401c      	ands	r4, r3
100080fe:	9401      	str	r4, [sp, #4]
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008100:	4b38      	ldr	r3, [pc, #224]	; (100081e4 <dma_isr_handler+0xfc>)
10008102:	4698      	mov	r8, r3
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
10008104:	2501      	movs	r5, #1
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;

	channel = channel & 0x0f;
10008106:	9a01      	ldr	r2, [sp, #4]
 * \param[in]  channel  Channel active
 *
 */
static uint8_t get_channel_index(uint8_t channel)
{
	uint8_t index = 0;
10008108:	2100      	movs	r1, #0
1000810a:	e000      	b.n	1000810e <dma_isr_handler+0x26>

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
		index++;
1000810c:	0019      	movs	r1, r3
{
	uint8_t index = 0;

	channel = channel & 0x0f;
	do {
		channel = channel >> 1;
1000810e:	0852      	lsrs	r2, r2, #1
		index++;
10008110:	1c4b      	adds	r3, r1, #1
10008112:	b2db      	uxtb	r3, r3
	} while (channel);
10008114:	2a00      	cmp	r2, #0
10008116:	d1f9      	bne.n	1000810c <dma_isr_handler+0x24>
			PROV_DMA_CTRL_CORE_INT_STATUS_CHANNEL__Msk;
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
10008118:	0089      	lsls	r1, r1, #2
1000811a:	4643      	mov	r3, r8
1000811c:	58c8      	ldr	r0, [r1, r3]
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
1000811e:	7803      	ldrb	r3, [r0, #0]
10008120:	021b      	lsls	r3, r3, #8
10008122:	4a31      	ldr	r2, [pc, #196]	; (100081e8 <dma_isr_handler+0x100>)
10008124:	589c      	ldr	r4, [r3, r2]
				
	do {
		channel_index = get_channel_index(active_channel);
		/* Get active DMA resource based on channel */
		resource = _dma_active_resource[channel_index];
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
10008126:	b2e1      	uxtb	r1, r4
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
10008128:	4a30      	ldr	r2, [pc, #192]	; (100081ec <dma_isr_handler+0x104>)
1000812a:	589a      	ldr	r2, [r3, r2]
1000812c:	6282      	str	r2, [r0, #40]	; 0x28
		isr = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
		/* Calculate block transfer size of the DMA transfer */
		resource->transfered_size = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_COUNT_REG.reg);

		/* DMA channel interrupt handler */
		if (isr & (1 << DMA_CALLBACK_TRANSFER_DONE)) {
1000812e:	22ff      	movs	r2, #255	; 0xff
10008130:	4022      	ands	r2, r4
10008132:	4215      	tst	r5, r2
10008134:	d003      	beq.n	1000813e <dma_isr_handler+0x56>
			/* Transfer complete flag */
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
10008136:	2600      	movs	r6, #0
10008138:	2225      	movs	r2, #37	; 0x25
1000813a:	5486      	strb	r6, [r0, r2]
1000813c:	e02f      	b.n	1000819e <dma_isr_handler+0xb6>
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
1000813e:	0797      	lsls	r7, r2, #30
10008140:	d504      	bpl.n	1000814c <dma_isr_handler+0x64>
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008142:	2610      	movs	r6, #16
10008144:	2225      	movs	r2, #37	; 0x25
10008146:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_TRANSFER_DONE;
			/* Set job status */
			resource->job_status = STATUS_OK;
		} else if (isr & (1 << DMA_CALLBACK_READ_ERR)) {
			/* Read error flag */
			isr_flag = DMA_CALLBACK_READ_ERR;
10008148:	002e      	movs	r6, r5
1000814a:	e028      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
1000814c:	0757      	lsls	r7, r2, #29
1000814e:	d504      	bpl.n	1000815a <dma_isr_handler+0x72>
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008150:	2610      	movs	r6, #16
10008152:	2225      	movs	r2, #37	; 0x25
10008154:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_ERR)) {
			/* Write error flag */
			isr_flag = DMA_CALLBACK_WRITE_ERR;
10008156:	3e0e      	subs	r6, #14
10008158:	e021      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
1000815a:	0717      	lsls	r7, r2, #28
1000815c:	d504      	bpl.n	10008168 <dma_isr_handler+0x80>
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000815e:	2610      	movs	r6, #16
10008160:	2225      	movs	r2, #37	; 0x25
10008162:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_ERR;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_OVERFLOW)) {
			/* Overflow flag */
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
10008164:	3e0d      	subs	r6, #13
10008166:	e01a      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
10008168:	06d7      	lsls	r7, r2, #27
1000816a:	d504      	bpl.n	10008176 <dma_isr_handler+0x8e>
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000816c:	2610      	movs	r6, #16
1000816e:	2225      	movs	r2, #37	; 0x25
10008170:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_OVERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_FIFO_UNDERFLOW)) {
			/* Underflow flag */
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
10008172:	3e0c      	subs	r6, #12
10008174:	e013      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
10008176:	0697      	lsls	r7, r2, #26
10008178:	d504      	bpl.n	10008184 <dma_isr_handler+0x9c>
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
1000817a:	2610      	movs	r6, #16
1000817c:	2225      	movs	r2, #37	; 0x25
1000817e:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_FIFO_UNDERFLOW;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_READ_TIMEOUT)) {
			/* Read timeout flag */
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
10008180:	3e0b      	subs	r6, #11
10008182:	e00c      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
10008184:	0652      	lsls	r2, r2, #25
10008186:	d504      	bpl.n	10008192 <dma_isr_handler+0xaa>
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008188:	2610      	movs	r6, #16
1000818a:	2225      	movs	r2, #37	; 0x25
1000818c:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_READ_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WRITE_TIMEOUT)) {
			/* Write timeout flag */
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
1000818e:	3e0a      	subs	r6, #10
10008190:	e005      	b.n	1000819e <dma_isr_handler+0xb6>
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
10008192:	0622      	lsls	r2, r4, #24
10008194:	d503      	bpl.n	1000819e <dma_isr_handler+0xb6>
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
10008196:	2610      	movs	r6, #16
10008198:	2225      	movs	r2, #37	; 0x25
1000819a:	5486      	strb	r6, [r0, r2]
			isr_flag = DMA_CALLBACK_WRITE_TIMEOUT;
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		} else if (isr & (1 << DMA_CALLBACK_WDT_TRIGGER)) {
			/* Watchdog error flag */
			isr_flag = DMA_CALLBACK_WDT_TRIGGER;
1000819c:	3e09      	subs	r6, #9
			/* Set I/O ERROR status */
			resource->job_status = STATUS_ERR_IO;
		}
		
		if (isr) {
1000819e:	2900      	cmp	r1, #0
100081a0:	d00e      	beq.n	100081c0 <dma_isr_handler+0xd8>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100081a2:	4913      	ldr	r1, [pc, #76]	; (100081f0 <dma_isr_handler+0x108>)
100081a4:	002a      	movs	r2, r5
100081a6:	40b2      	lsls	r2, r6
100081a8:	505a      	str	r2, [r3, r1]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
100081aa:	2324      	movs	r3, #36	; 0x24
100081ac:	5cc3      	ldrb	r3, [r0, r3]
100081ae:	4133      	asrs	r3, r6
100081b0:	421d      	tst	r5, r3
100081b2:	d005      	beq.n	100081c0 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
100081b4:	00b3      	lsls	r3, r6, #2
100081b6:	18c3      	adds	r3, r0, r3
100081b8:	685b      	ldr	r3, [r3, #4]
		
		if (isr) {
			/* Clear the watch dog error flag */
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, 1<<isr_flag);
			/* Execute the callback function */
			if ((resource->callback_enable & (1<<isr_flag)) &&
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <dma_isr_handler+0xd8>
					(resource->callback[isr_flag])) {
				resource->callback[isr_flag](resource);
100081be:	4798      	blx	r3
			}
		}
		isr &= ~(1<<isr_flag);
	} while (isr);
100081c0:	002b      	movs	r3, r5
100081c2:	40b3      	lsls	r3, r6
100081c4:	439c      	bics	r4, r3
100081c6:	b263      	sxtb	r3, r4
100081c8:	2b00      	cmp	r3, #0
100081ca:	d19c      	bne.n	10008106 <dma_isr_handler+0x1e>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100081cc:	2180      	movs	r1, #128	; 0x80
100081ce:	0209      	lsls	r1, r1, #8
100081d0:	3381      	adds	r3, #129	; 0x81
100081d2:	33ff      	adds	r3, #255	; 0xff
100081d4:	4a07      	ldr	r2, [pc, #28]	; (100081f4 <dma_isr_handler+0x10c>)
100081d6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(PROV_DMA_CTRL0_IRQn);
}
100081d8:	b002      	add	sp, #8
100081da:	bc04      	pop	{r2}
100081dc:	4690      	mov	r8, r2
100081de:	bdf0      	pop	{r4, r5, r6, r7, pc}
100081e0:	40002000 	.word	0x40002000
100081e4:	1001423c 	.word	0x1001423c
100081e8:	400020ac 	.word	0x400020ac
100081ec:	40002050 	.word	0x40002050
100081f0:	400020a4 	.word	0x400020a4
100081f4:	e000e100 	.word	0xe000e100

100081f8 <dma_get_config_defaults>:
 *
 */
void dma_get_config_defaults(struct dma_resource_config *config)
{
	/* DMA source configuration */
	config->src.max_burst = 1;
100081f8:	2201      	movs	r2, #1
100081fa:	7002      	strb	r2, [r0, #0]
	config->src.tokens = 1;
100081fc:	7042      	strb	r2, [r0, #1]
	config->src.enable_inc_addr = true;
100081fe:	7082      	strb	r2, [r0, #2]
	config->src.periph = MEMORY_DMA_PERIPHERAL;
10008200:	2300      	movs	r3, #0
10008202:	70c3      	strb	r3, [r0, #3]
	config->src.periph_delay = 0;
10008204:	7103      	strb	r3, [r0, #4]
	config->src.enable_proi_top = false;
10008206:	7143      	strb	r3, [r0, #5]
	config->src.proi_top_index = 0;
10008208:	7183      	strb	r3, [r0, #6]
	config->src.enable_proi_high = false;
1000820a:	71c3      	strb	r3, [r0, #7]
	config->src.proi_high_index = 0;
1000820c:	7203      	strb	r3, [r0, #8]
	/* DMA destination configuration */
	config->des.max_burst = 1;
1000820e:	7242      	strb	r2, [r0, #9]
	config->des.tokens = 1;
10008210:	7282      	strb	r2, [r0, #10]
	config->des.enable_inc_addr = true;
10008212:	72c2      	strb	r2, [r0, #11]
	config->des.periph = MEMORY_DMA_PERIPHERAL;
10008214:	7303      	strb	r3, [r0, #12]
	config->des.periph_delay = 0;
10008216:	7343      	strb	r3, [r0, #13]
	config->des.enable_proi_top = false;
10008218:	7383      	strb	r3, [r0, #14]
	config->des.proi_top_index = 0;
1000821a:	73c3      	strb	r3, [r0, #15]
	config->des.enable_proi_high = false;
1000821c:	7403      	strb	r3, [r0, #16]
	config->des.proi_high_index = 0;
1000821e:	7443      	strb	r3, [r0, #17]
	/* DMA channel configuration */
	config->enable_joint_mode = false;
10008220:	7483      	strb	r3, [r0, #18]
	config->swap = DMA_ENDIAN_NO_SWAP;
10008222:	74c3      	strb	r3, [r0, #19]
}
10008224:	4770      	bx	lr
10008226:	46c0      	nop			; (mov r8, r8)

10008228 <dma_add_descriptor>:
 * \retval STATUS_OK The descriptor is added to the DMA resource
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
10008228:	b510      	push	{r4, lr}
 *
 * \return Status of the DMA resource.
 */
static inline enum status_code dma_get_job_status(struct dma_resource *resource)
{
	return resource->job_status;
1000822a:	2325      	movs	r3, #37	; 0x25
1000822c:	5cc3      	ldrb	r3, [r0, r3]
1000822e:	b2db      	uxtb	r3, r3
	struct dma_descriptor *desc = resource->descriptor;

	/* Check if channel is busy */
	if (dma_get_job_status(resource) == STATUS_BUSY) {
10008230:	2b05      	cmp	r3, #5
10008232:	d042      	beq.n	100082ba <dma_add_descriptor+0x92>
 * \retval STATUS_BUSY The DMA resource was busy and the descriptor is not added
 */
enum status_code dma_add_descriptor(struct dma_resource *resource,
		struct dma_descriptor *descriptor)
{
	struct dma_descriptor *desc = resource->descriptor;
10008234:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
	if (dma_get_job_status(resource) == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
10008236:	2a00      	cmp	r2, #0
10008238:	d007      	beq.n	1000824a <dma_add_descriptor+0x22>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
1000823a:	2303      	movs	r3, #3
1000823c:	68d4      	ldr	r4, [r2, #12]
1000823e:	439c      	bics	r4, r3
10008240:	0023      	movs	r3, r4
10008242:	2403      	movs	r4, #3
10008244:	2b00      	cmp	r3, #0
10008246:	d11f      	bne.n	10008288 <dma_add_descriptor+0x60>
10008248:	e02d      	b.n	100082a6 <dma_add_descriptor+0x7e>
		return STATUS_BUSY;
	}

	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
1000824a:	62c1      	str	r1, [r0, #44]	; 0x2c
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000824c:	7803      	ldrb	r3, [r0, #0]
1000824e:	021b      	lsls	r3, r3, #8
10008250:	4a1b      	ldr	r2, [pc, #108]	; (100082c0 <dma_add_descriptor+0x98>)
10008252:	4694      	mov	ip, r2
10008254:	4463      	add	r3, ip
10008256:	680a      	ldr	r2, [r1, #0]
10008258:	601a      	str	r2, [r3, #0]
1000825a:	7803      	ldrb	r3, [r0, #0]
1000825c:	021b      	lsls	r3, r3, #8
1000825e:	4a19      	ldr	r2, [pc, #100]	; (100082c4 <dma_add_descriptor+0x9c>)
10008260:	4694      	mov	ip, r2
10008262:	4463      	add	r3, ip
10008264:	684a      	ldr	r2, [r1, #4]
10008266:	601a      	str	r2, [r3, #0]
	/* Look up for an empty space for the descriptor */
	if (desc == NULL) {
		resource->descriptor = descriptor;
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG0.reg, descriptor->read_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
10008268:	688a      	ldr	r2, [r1, #8]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
1000826a:	7803      	ldrb	r3, [r0, #0]
1000826c:	021b      	lsls	r3, r3, #8
1000826e:	4916      	ldr	r1, [pc, #88]	; (100082c8 <dma_add_descriptor+0xa0>)
10008270:	468c      	mov	ip, r1
10008272:	4463      	add	r3, ip
10008274:	601a      	str	r2, [r3, #0]
10008276:	7803      	ldrb	r3, [r0, #0]
10008278:	021b      	lsls	r3, r3, #8
1000827a:	4a14      	ldr	r2, [pc, #80]	; (100082cc <dma_add_descriptor+0xa4>)
1000827c:	4694      	mov	ip, r2
1000827e:	4463      	add	r3, ip
10008280:	2203      	movs	r2, #3
10008282:	601a      	str	r2, [r3, #0]
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008284:	2300      	movs	r3, #0
10008286:	e018      	b.n	100082ba <dma_add_descriptor+0x92>
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
			desc = (struct dma_descriptor*)((uint32_t)desc->next);
10008288:	68d2      	ldr	r2, [r2, #12]
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG1.reg, descriptor->write_start_addr);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG2.reg, descriptor->buffer_size);
		set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, 3);
	} else {
		/* Looking for end of descriptor link */
		while(((uint32_t)desc->cmd.next_addr) != 0) {
1000828a:	68d3      	ldr	r3, [r2, #12]
1000828c:	43a3      	bics	r3, r4
1000828e:	d1fb      	bne.n	10008288 <dma_add_descriptor+0x60>
		}
		if (resource->descriptor->cmd.next_addr == 0x0) {
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
10008290:	60d1      	str	r1, [r2, #12]
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
10008292:	2303      	movs	r3, #3
10008294:	68ca      	ldr	r2, [r1, #12]
10008296:	439a      	bics	r2, r3
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
10008298:	2300      	movs	r3, #0
			set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CMD_REG3.reg, ((uint32_t)descriptor & (~0x3)));
		}
		/* Set to the end of descriptor list */
		desc->next = (uint32_t)descriptor;
		/* The end of list should point to 0 */
		if (descriptor->cmd.next_addr != 0) {
1000829a:	2a00      	cmp	r2, #0
1000829c:	d00d      	beq.n	100082ba <dma_add_descriptor+0x92>
			/* Enable transferred interrupt, and channel stops when buffer done */
			descriptor->next = 0x3;
1000829e:	3303      	adds	r3, #3
100082a0:	60cb      	str	r3, [r1, #12]
		}
	}

	return STATUS_OK;
100082a2:	2300      	movs	r3, #0
100082a4:	e009      	b.n	100082ba <dma_add_descriptor+0x92>
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100082a6:	7803      	ldrb	r3, [r0, #0]
100082a8:	021b      	lsls	r3, r3, #8
100082aa:	4808      	ldr	r0, [pc, #32]	; (100082cc <dma_add_descriptor+0xa4>)
100082ac:	4684      	mov	ip, r0
100082ae:	4463      	add	r3, ip
100082b0:	2003      	movs	r0, #3
100082b2:	000c      	movs	r4, r1
100082b4:	4384      	bics	r4, r0
100082b6:	601c      	str	r4, [r3, #0]
100082b8:	e7ea      	b.n	10008290 <dma_add_descriptor+0x68>
			descriptor->next = 0x3;
		}
	}

	return STATUS_OK;
}
100082ba:	0018      	movs	r0, r3
100082bc:	bd10      	pop	{r4, pc}
100082be:	46c0      	nop			; (mov r8, r8)
100082c0:	40002000 	.word	0x40002000
100082c4:	40002004 	.word	0x40002004
100082c8:	40002008 	.word	0x40002008
100082cc:	4000200c 	.word	0x4000200c

100082d0 <dma_start_transfer_job>:
 * \retval STATUS_OK The transfer was started successfully
 * \retval STATUS_BUSY The DMA resource was busy and the transfer was not started
 * \retval STATUS_ERR_INVALID_ARG Transfer size is 0 and transfer was not started
 */
enum status_code dma_start_transfer_job(struct dma_resource *resource)
{
100082d0:	b082      	sub	sp, #8
100082d2:	0002      	movs	r2, r0
	volatile uint32_t regval;

	/* Check if resource was busy */
	if (resource->job_status == STATUS_BUSY) {
100082d4:	2325      	movs	r3, #37	; 0x25
100082d6:	5cc3      	ldrb	r3, [r0, r3]
100082d8:	b2d8      	uxtb	r0, r3
100082da:	2805      	cmp	r0, #5
100082dc:	d027      	beq.n	1000832e <dma_start_transfer_job+0x5e>
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
100082de:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
100082e0:	689b      	ldr	r3, [r3, #8]
		return STATUS_ERR_INVALID_ARG;
100082e2:	2017      	movs	r0, #23
	if (resource->job_status == STATUS_BUSY) {
		return STATUS_BUSY;
	}

	/* Check if transfer size is valid */
	if (resource->descriptor->buffer_size == 0) {
100082e4:	2b00      	cmp	r3, #0
100082e6:	d022      	beq.n	1000832e <dma_start_transfer_job+0x5e>
 *
 * \return The value of DMA register.
 */
static uint32_t get_channel_reg_val(uint8_t channel, uint32_t reg)
{
	return *(uint32_t*)(reg + 0x100*channel);
100082e8:	7813      	ldrb	r3, [r2, #0]
100082ea:	021b      	lsls	r3, r3, #8
100082ec:	4911      	ldr	r1, [pc, #68]	; (10008334 <dma_start_transfer_job+0x64>)
100082ee:	5859      	ldr	r1, [r3, r1]
	if (resource->descriptor->buffer_size == 0) {
		return STATUS_ERR_INVALID_ARG;
	}
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
100082f0:	9101      	str	r1, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
100082f2:	9801      	ldr	r0, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100082f4:	4910      	ldr	r1, [pc, #64]	; (10008338 <dma_start_transfer_job+0x68>)
100082f6:	5058      	str	r0, [r3, r1]
	
	/* Clear the interrupt flag */
	regval = get_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_STATUS_REG.reg);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
100082f8:	2324      	movs	r3, #36	; 0x24
100082fa:	5cd3      	ldrb	r3, [r2, r3]
100082fc:	9301      	str	r3, [sp, #4]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
100082fe:	9901      	ldr	r1, [sp, #4]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008300:	7813      	ldrb	r3, [r2, #0]
10008302:	021b      	lsls	r3, r3, #8
10008304:	480d      	ldr	r0, [pc, #52]	; (1000833c <dma_start_transfer_job+0x6c>)
10008306:	4684      	mov	ip, r0
10008308:	4463      	add	r3, ip
1000830a:	6019      	str	r1, [r3, #0]
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_CLEAR_REG.reg, regval);
	/* Set the interrupt flag */
	regval = PROV_DMA_CTRL_CH0_INT_ENABLE_REG_MASK & resource->callback_enable;
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_INT_ENABLE_REG.reg, regval);
	/* Set job status */
	resource->job_status = STATUS_BUSY;
1000830c:	2105      	movs	r1, #5
1000830e:	2325      	movs	r3, #37	; 0x25
10008310:	54d1      	strb	r1, [r2, r3]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
10008312:	7813      	ldrb	r3, [r2, #0]
10008314:	021b      	lsls	r3, r3, #8
10008316:	490a      	ldr	r1, [pc, #40]	; (10008340 <dma_start_transfer_job+0x70>)
10008318:	468c      	mov	ip, r1
1000831a:	4463      	add	r3, ip
1000831c:	2101      	movs	r1, #1
1000831e:	6019      	str	r1, [r3, #0]
10008320:	7813      	ldrb	r3, [r2, #0]
10008322:	021b      	lsls	r3, r3, #8
10008324:	4a07      	ldr	r2, [pc, #28]	; (10008344 <dma_start_transfer_job+0x74>)
10008326:	4694      	mov	ip, r2
10008328:	4463      	add	r3, ip
1000832a:	6019      	str	r1, [r3, #0]
	/* Enable the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_ENABLE_REG.reg, 1);
	/* Start the transfer channel */
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CH0_CH_START_REG.reg, 1);

	return STATUS_OK;
1000832c:	2000      	movs	r0, #0
}
1000832e:	b002      	add	sp, #8
10008330:	4770      	bx	lr
10008332:	46c0      	nop			; (mov r8, r8)
10008334:	400020ac 	.word	0x400020ac
10008338:	400020a4 	.word	0x400020a4
1000833c:	400020a8 	.word	0x400020a8
10008340:	40002040 	.word	0x40002040
10008344:	40002044 	.word	0x40002044

10008348 <dma_allocate>:
 * \retval STATUS_OK The DMA resource was allocated successfully
 * \retval STATUS_ERR_NOT_FOUND DMA resource allocation failed
 */
enum status_code dma_allocate(struct dma_resource *resource,
		struct dma_resource_config *config)
{
10008348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000834a:	0004      	movs	r4, r0
1000834c:	000d      	movs	r5, r1
	uint8_t new_channel;

	if (!_dma_inst._dma_init) {
1000834e:	4b62      	ldr	r3, [pc, #392]	; (100084d8 <dma_allocate+0x190>)
10008350:	781b      	ldrb	r3, [r3, #0]
10008352:	2b00      	cmp	r3, #0
10008354:	d112      	bne.n	1000837c <dma_allocate+0x34>
		/* Perform a reset before enable DMA controller */
		system_peripheral_reset(PERIPHERAL_DMA);
10008356:	2043      	movs	r0, #67	; 0x43
10008358:	4b60      	ldr	r3, [pc, #384]	; (100084dc <dma_allocate+0x194>)
1000835a:	4798      	blx	r3
		/* Select Mux 15 as PROV_DMA_CTRL0 interrupt source */
		LPMCU_MISC_REGS0->IRQ_MUX_IO_SEL_3.bit.MUX_15 = LPMCU_MISC_REGS_IRQ_MUX_IO_SEL_3_MUX_15_16_Val;
1000835c:	4960      	ldr	r1, [pc, #384]	; (100084e0 <dma_allocate+0x198>)
1000835e:	22cc      	movs	r2, #204	; 0xcc
10008360:	5888      	ldr	r0, [r1, r2]
10008362:	4b60      	ldr	r3, [pc, #384]	; (100084e4 <dma_allocate+0x19c>)
10008364:	4003      	ands	r3, r0
10008366:	2080      	movs	r0, #128	; 0x80
10008368:	0540      	lsls	r0, r0, #21
1000836a:	4303      	orrs	r3, r0
1000836c:	508b      	str	r3, [r1, r2]
		system_register_isr(31, (uint32_t)dma_isr_handler);
1000836e:	495e      	ldr	r1, [pc, #376]	; (100084e8 <dma_allocate+0x1a0>)
10008370:	201f      	movs	r0, #31
10008372:	4b5e      	ldr	r3, [pc, #376]	; (100084ec <dma_allocate+0x1a4>)
10008374:	4798      	blx	r3
		
		_dma_inst._dma_init = true;
10008376:	2201      	movs	r2, #1
10008378:	4b57      	ldr	r3, [pc, #348]	; (100084d8 <dma_allocate+0x190>)
1000837a:	701a      	strb	r2, [r3, #0]
{
	uint8_t count;
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;
1000837c:	4b56      	ldr	r3, [pc, #344]	; (100084d8 <dma_allocate+0x190>)
1000837e:	685a      	ldr	r2, [r3, #4]

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
		if (!(tmp & 0x00000001)) {
10008380:	07d3      	lsls	r3, r2, #31
10008382:	d500      	bpl.n	10008386 <dma_allocate+0x3e>
10008384:	e0a2      	b.n	100084cc <dma_allocate+0x184>
10008386:	e002      	b.n	1000838e <dma_allocate+0x46>
10008388:	4211      	tst	r1, r2
1000838a:	d10e      	bne.n	100083aa <dma_allocate+0x62>
1000838c:	e000      	b.n	10008390 <dma_allocate+0x48>
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
1000838e:	2300      	movs	r3, #0
		if (!(tmp & 0x00000001)) {
			/* If free channel found, set as allocated and return
			 *number */

			_dma_inst.allocated_channels |= 1 << count;
10008390:	4a51      	ldr	r2, [pc, #324]	; (100084d8 <dma_allocate+0x190>)
10008392:	6850      	ldr	r0, [r2, #4]
10008394:	2101      	movs	r1, #1
10008396:	4099      	lsls	r1, r3
10008398:	4301      	orrs	r1, r0
1000839a:	6051      	str	r1, [r2, #4]
			_dma_inst.free_channels--;
1000839c:	7a11      	ldrb	r1, [r2, #8]
1000839e:	3901      	subs	r1, #1
100083a0:	7211      	strb	r1, [r2, #8]
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
100083a2:	2014      	movs	r0, #20
		_dma_inst._dma_init = true;
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
100083a4:	2bff      	cmp	r3, #255	; 0xff
100083a6:	d107      	bne.n	100083b8 <dma_allocate+0x70>
100083a8:	e094      	b.n	100084d4 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
100083aa:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
100083ac:	3301      	adds	r3, #1
100083ae:	b2db      	uxtb	r3, r3
100083b0:	2b05      	cmp	r3, #5
100083b2:	d1e9      	bne.n	10008388 <dma_allocate+0x40>
	}

	new_channel = _dma_find_first_free_channel_and_allocate();
	/* If no channel available, return not found */
	if (new_channel == DMA_INVALID_CHANNEL) {
		return STATUS_ERR_NOT_FOUND;
100083b4:	2014      	movs	r0, #20
100083b6:	e08d      	b.n	100084d4 <dma_allocate+0x18c>
	}
	
	/* Set the channel */
	resource->channel_id = new_channel;
100083b8:	7023      	strb	r3, [r4, #0]
 * \param[in] The value to be set
 *
 */
static void set_channel_reg_val(uint8_t channel, uint32_t reg, uint32_t val)
{
	*(uint32_t*)(reg + 0x100*channel) = val;
100083ba:	021b      	lsls	r3, r3, #8
100083bc:	4a4c      	ldr	r2, [pc, #304]	; (100084f0 <dma_allocate+0x1a8>)
100083be:	4694      	mov	ip, r2
100083c0:	4463      	add	r3, ip
100083c2:	782a      	ldrb	r2, [r5, #0]
100083c4:	267f      	movs	r6, #127	; 0x7f
100083c6:	4032      	ands	r2, r6
100083c8:	78a9      	ldrb	r1, [r5, #2]
100083ca:	07c9      	lsls	r1, r1, #31
100083cc:	430a      	orrs	r2, r1
100083ce:	7869      	ldrb	r1, [r5, #1]
100083d0:	0409      	lsls	r1, r1, #16
100083d2:	20fc      	movs	r0, #252	; 0xfc
100083d4:	0380      	lsls	r0, r0, #14
100083d6:	4001      	ands	r1, r0
100083d8:	430a      	orrs	r2, r1
100083da:	601a      	str	r2, [r3, #0]
100083dc:	7823      	ldrb	r3, [r4, #0]
100083de:	021b      	lsls	r3, r3, #8
100083e0:	4a44      	ldr	r2, [pc, #272]	; (100084f4 <dma_allocate+0x1ac>)
100083e2:	4694      	mov	ip, r2
100083e4:	4463      	add	r3, ip
100083e6:	7a6a      	ldrb	r2, [r5, #9]
100083e8:	4032      	ands	r2, r6
100083ea:	7ae9      	ldrb	r1, [r5, #11]
100083ec:	07c9      	lsls	r1, r1, #31
100083ee:	430a      	orrs	r2, r1
100083f0:	7aa9      	ldrb	r1, [r5, #10]
100083f2:	0409      	lsls	r1, r1, #16
100083f4:	4008      	ands	r0, r1
100083f6:	4310      	orrs	r0, r2
100083f8:	6018      	str	r0, [r3, #0]
100083fa:	7823      	ldrb	r3, [r4, #0]
100083fc:	021b      	lsls	r3, r3, #8
100083fe:	4a3e      	ldr	r2, [pc, #248]	; (100084f8 <dma_allocate+0x1b0>)
10008400:	4694      	mov	ip, r2
10008402:	4463      	add	r3, ip
10008404:	7cea      	ldrb	r2, [r5, #19]
10008406:	0712      	lsls	r2, r2, #28
10008408:	21c0      	movs	r1, #192	; 0xc0
1000840a:	0589      	lsls	r1, r1, #22
1000840c:	400a      	ands	r2, r1
1000840e:	7ca9      	ldrb	r1, [r5, #18]
10008410:	0409      	lsls	r1, r1, #16
10008412:	430a      	orrs	r2, r1
10008414:	601a      	str	r2, [r3, #0]
10008416:	7823      	ldrb	r3, [r4, #0]
10008418:	021b      	lsls	r3, r3, #8
1000841a:	4a38      	ldr	r2, [pc, #224]	; (100084fc <dma_allocate+0x1b4>)
1000841c:	4694      	mov	ip, r2
1000841e:	4463      	add	r3, ip
10008420:	792f      	ldrb	r7, [r5, #4]
10008422:	023f      	lsls	r7, r7, #8
10008424:	21e0      	movs	r1, #224	; 0xe0
10008426:	00c9      	lsls	r1, r1, #3
10008428:	003a      	movs	r2, r7
1000842a:	400a      	ands	r2, r1
1000842c:	7b2e      	ldrb	r6, [r5, #12]
1000842e:	0436      	lsls	r6, r6, #16
10008430:	20f8      	movs	r0, #248	; 0xf8
10008432:	0340      	lsls	r0, r0, #13
10008434:	4006      	ands	r6, r0
10008436:	4332      	orrs	r2, r6
10008438:	0017      	movs	r7, r2
1000843a:	78e8      	ldrb	r0, [r5, #3]
1000843c:	221f      	movs	r2, #31
1000843e:	4002      	ands	r2, r0
10008440:	003e      	movs	r6, r7
10008442:	4316      	orrs	r6, r2
10008444:	7b6a      	ldrb	r2, [r5, #13]
10008446:	0612      	lsls	r2, r2, #24
10008448:	20e0      	movs	r0, #224	; 0xe0
1000844a:	04c0      	lsls	r0, r0, #19
1000844c:	4002      	ands	r2, r0
1000844e:	4332      	orrs	r2, r6
10008450:	601a      	str	r2, [r3, #0]
10008452:	7820      	ldrb	r0, [r4, #0]
10008454:	0200      	lsls	r0, r0, #8
10008456:	4b2a      	ldr	r3, [pc, #168]	; (10008500 <dma_allocate+0x1b8>)
10008458:	469c      	mov	ip, r3
1000845a:	4460      	add	r0, ip
1000845c:	79ab      	ldrb	r3, [r5, #6]
1000845e:	2607      	movs	r6, #7
10008460:	4033      	ands	r3, r6
10008462:	796e      	ldrb	r6, [r5, #5]
10008464:	2208      	movs	r2, #8
10008466:	40b2      	lsls	r2, r6
10008468:	4313      	orrs	r3, r2
1000846a:	79ee      	ldrb	r6, [r5, #7]
1000846c:	2280      	movs	r2, #128	; 0x80
1000846e:	40b2      	lsls	r2, r6
10008470:	4313      	orrs	r3, r2
10008472:	7bae      	ldrb	r6, [r5, #14]
10008474:	2280      	movs	r2, #128	; 0x80
10008476:	0112      	lsls	r2, r2, #4
10008478:	40b2      	lsls	r2, r6
1000847a:	4313      	orrs	r3, r2
1000847c:	7c2e      	ldrb	r6, [r5, #16]
1000847e:	2280      	movs	r2, #128	; 0x80
10008480:	0212      	lsls	r2, r2, #8
10008482:	40b2      	lsls	r2, r6
10008484:	4313      	orrs	r3, r2
10008486:	001e      	movs	r6, r3
10008488:	7a2a      	ldrb	r2, [r5, #8]
1000848a:	0112      	lsls	r2, r2, #4
1000848c:	2370      	movs	r3, #112	; 0x70
1000848e:	401a      	ands	r2, r3
10008490:	0033      	movs	r3, r6
10008492:	4313      	orrs	r3, r2
10008494:	7bea      	ldrb	r2, [r5, #15]
10008496:	0212      	lsls	r2, r2, #8
10008498:	4011      	ands	r1, r2
1000849a:	430b      	orrs	r3, r1
1000849c:	7c69      	ldrb	r1, [r5, #17]
1000849e:	0309      	lsls	r1, r1, #12
100084a0:	22e0      	movs	r2, #224	; 0xe0
100084a2:	01d2      	lsls	r2, r2, #7
100084a4:	4011      	ands	r1, r2
100084a6:	430b      	orrs	r3, r1
100084a8:	6003      	str	r3, [r0, #0]
100084aa:	1d23      	adds	r3, r4, #4
100084ac:	0021      	movs	r1, r4
100084ae:	3124      	adds	r1, #36	; 0x24
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
		resource->callback[i] = NULL;
100084b0:	2200      	movs	r2, #0
100084b2:	c304      	stmia	r3!, {r2}
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_TOP << config->des.enable_proi_top) |
			PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH_NUM(config->des.proi_high_index) |
			(PROV_DMA_CTRL_CORE_PRIORITY_WR_PRIO_HIGH << config->des.enable_proi_high);
	set_channel_reg_val(resource->channel_id, (uint32_t)&PROV_DMA_CTRL0->CORE_PRIORITY.reg, regval);
	/* Initial the global variety */
	for (int i = 0; i < DMA_CALLBACK_N; i++) {
100084b4:	428b      	cmp	r3, r1
100084b6:	d1fc      	bne.n	100084b2 <dma_allocate+0x16a>
		resource->callback[i] = NULL;
	}
	resource->callback_enable = 0;
100084b8:	2300      	movs	r3, #0
100084ba:	2224      	movs	r2, #36	; 0x24
100084bc:	54a3      	strb	r3, [r4, r2]
	/* Set the channel */
	resource->channel_id = new_channel;
	/* Configure the DMA control,channel registers and descriptors here */
	_dma_set_config(resource, config);
	
	resource->descriptor = NULL;
100084be:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;
100084c0:	7823      	ldrb	r3, [r4, #0]
100084c2:	009b      	lsls	r3, r3, #2
100084c4:	4a0f      	ldr	r2, [pc, #60]	; (10008504 <dma_allocate+0x1bc>)
100084c6:	509c      	str	r4, [r3, r2]

	return STATUS_OK;
100084c8:	2000      	movs	r0, #0
100084ca:	e003      	b.n	100084d4 <dma_allocate+0x18c>
			allocated = true;

			break;
		}

		tmp = tmp >> 1;
100084cc:	0852      	lsrs	r2, r2, #1
	uint32_t tmp;
	bool allocated = false;

	tmp = _dma_inst.allocated_channels;

	for (count = 0; count < CONF_MAX_USED_CHANNEL_NUM; ++count) {
100084ce:	2301      	movs	r3, #1
		if (!(tmp & 0x00000001)) {
100084d0:	2101      	movs	r1, #1
100084d2:	e759      	b.n	10008388 <dma_allocate+0x40>

	/* Log the DMA resource into the internal DMA resource pool */
	_dma_active_resource[resource->channel_id] = resource;

	return STATUS_OK;
100084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100084d6:	46c0      	nop			; (mov r8, r8)
100084d8:	1001419c 	.word	0x1001419c
100084dc:	1000916d 	.word	0x1000916d
100084e0:	4000b000 	.word	0x4000b000
100084e4:	e0ffffff 	.word	0xe0ffffff
100084e8:	100080e9 	.word	0x100080e9
100084ec:	100095d5 	.word	0x100095d5
100084f0:	40002010 	.word	0x40002010
100084f4:	40002014 	.word	0x40002014
100084f8:	40002018 	.word	0x40002018
100084fc:	40002020 	.word	0x40002020
10008500:	40002838 	.word	0x40002838
10008504:	1001423c 	.word	0x1001423c

10008508 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10008508:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000850a:	4b0d      	ldr	r3, [pc, #52]	; (10008540 <dualtimer_isr_handler+0x38>)
1000850c:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000850e:	2b00      	cmp	r3, #0
10008510:	d007      	beq.n	10008522 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10008512:	2201      	movs	r2, #1
10008514:	4b0a      	ldr	r3, [pc, #40]	; (10008540 <dualtimer_isr_handler+0x38>)
10008516:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10008518:	4b0a      	ldr	r3, [pc, #40]	; (10008544 <dualtimer_isr_handler+0x3c>)
1000851a:	681b      	ldr	r3, [r3, #0]
1000851c:	2b00      	cmp	r3, #0
1000851e:	d000      	beq.n	10008522 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10008520:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10008522:	2334      	movs	r3, #52	; 0x34
10008524:	4a06      	ldr	r2, [pc, #24]	; (10008540 <dualtimer_isr_handler+0x38>)
10008526:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10008528:	2b00      	cmp	r3, #0
1000852a:	d007      	beq.n	1000853c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000852c:	2101      	movs	r1, #1
1000852e:	232c      	movs	r3, #44	; 0x2c
10008530:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10008532:	4b05      	ldr	r3, [pc, #20]	; (10008548 <dualtimer_isr_handler+0x40>)
10008534:	681b      	ldr	r3, [r3, #0]
10008536:	2b00      	cmp	r3, #0
10008538:	d000      	beq.n	1000853c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000853a:	4798      	blx	r3
	}
}
1000853c:	bd10      	pop	{r4, pc}
1000853e:	46c0      	nop			; (mov r8, r8)
10008540:	40001000 	.word	0x40001000
10008544:	10014250 	.word	0x10014250
10008548:	10014254 	.word	0x10014254

1000854c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000854c:	2301      	movs	r3, #1
1000854e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10008550:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10008552:	2202      	movs	r2, #2
10008554:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10008556:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10008558:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000855a:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000855c:	2200      	movs	r2, #0
1000855e:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10008560:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10008562:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10008564:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10008566:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10008568:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000856a:	7602      	strb	r2, [r0, #24]
}
1000856c:	4770      	bx	lr
1000856e:	46c0      	nop			; (mov r8, r8)

10008570 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10008570:	2800      	cmp	r0, #0
10008572:	d107      	bne.n	10008584 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008574:	2900      	cmp	r1, #0
10008576:	d102      	bne.n	1000857e <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10008578:	4b06      	ldr	r3, [pc, #24]	; (10008594 <dualtimer_set_counter+0x24>)
1000857a:	601a      	str	r2, [r3, #0]
1000857c:	e009      	b.n	10008592 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000857e:	4b05      	ldr	r3, [pc, #20]	; (10008594 <dualtimer_set_counter+0x24>)
10008580:	619a      	str	r2, [r3, #24]
10008582:	e006      	b.n	10008592 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10008584:	2900      	cmp	r1, #0
10008586:	d102      	bne.n	1000858e <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10008588:	4b02      	ldr	r3, [pc, #8]	; (10008594 <dualtimer_set_counter+0x24>)
1000858a:	621a      	str	r2, [r3, #32]
1000858c:	e001      	b.n	10008592 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000858e:	4b01      	ldr	r3, [pc, #4]	; (10008594 <dualtimer_set_counter+0x24>)
10008590:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10008592:	4770      	bx	lr
10008594:	40001000 	.word	0x40001000

10008598 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10008598:	2800      	cmp	r0, #0
1000859a:	d105      	bne.n	100085a8 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000859c:	4a06      	ldr	r2, [pc, #24]	; (100085b8 <dualtimer_enable+0x20>)
1000859e:	7a11      	ldrb	r1, [r2, #8]
100085a0:	2380      	movs	r3, #128	; 0x80
100085a2:	430b      	orrs	r3, r1
100085a4:	7213      	strb	r3, [r2, #8]
100085a6:	e005      	b.n	100085b4 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100085a8:	4903      	ldr	r1, [pc, #12]	; (100085b8 <dualtimer_enable+0x20>)
100085aa:	2228      	movs	r2, #40	; 0x28
100085ac:	5c88      	ldrb	r0, [r1, r2]
100085ae:	2380      	movs	r3, #128	; 0x80
100085b0:	4303      	orrs	r3, r0
100085b2:	548b      	strb	r3, [r1, r2]
	}
}
100085b4:	4770      	bx	lr
100085b6:	46c0      	nop			; (mov r8, r8)
100085b8:	40001000 	.word	0x40001000

100085bc <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
100085bc:	2800      	cmp	r0, #0
100085be:	d105      	bne.n	100085cc <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
100085c0:	4a06      	ldr	r2, [pc, #24]	; (100085dc <dualtimer_disable+0x20>)
100085c2:	7a11      	ldrb	r1, [r2, #8]
100085c4:	237f      	movs	r3, #127	; 0x7f
100085c6:	400b      	ands	r3, r1
100085c8:	7213      	strb	r3, [r2, #8]
100085ca:	e005      	b.n	100085d8 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
100085cc:	4903      	ldr	r1, [pc, #12]	; (100085dc <dualtimer_disable+0x20>)
100085ce:	2228      	movs	r2, #40	; 0x28
100085d0:	5c88      	ldrb	r0, [r1, r2]
100085d2:	237f      	movs	r3, #127	; 0x7f
100085d4:	4003      	ands	r3, r0
100085d6:	548b      	strb	r3, [r1, r2]
	}
}
100085d8:	4770      	bx	lr
100085da:	46c0      	nop			; (mov r8, r8)
100085dc:	40001000 	.word	0x40001000

100085e0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
100085e0:	b570      	push	{r4, r5, r6, lr}
100085e2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
100085e4:	2004      	movs	r0, #4
100085e6:	4b39      	ldr	r3, [pc, #228]	; (100086cc <dualtimer_init+0xec>)
100085e8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
100085ea:	7823      	ldrb	r3, [r4, #0]
100085ec:	2b00      	cmp	r3, #0
100085ee:	d102      	bne.n	100085f6 <dualtimer_init+0x16>
100085f0:	7b23      	ldrb	r3, [r4, #12]
100085f2:	2b00      	cmp	r3, #0
100085f4:	d065      	beq.n	100086c2 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
100085f6:	4936      	ldr	r1, [pc, #216]	; (100086d0 <dualtimer_init+0xf0>)
100085f8:	68ca      	ldr	r2, [r1, #12]
100085fa:	2320      	movs	r3, #32
100085fc:	4313      	orrs	r3, r2
100085fe:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
10008600:	7e22      	ldrb	r2, [r4, #24]
10008602:	698b      	ldr	r3, [r1, #24]
10008604:	2003      	movs	r0, #3
10008606:	4002      	ands	r2, r0
10008608:	0112      	lsls	r2, r2, #4
1000860a:	302d      	adds	r0, #45	; 0x2d
1000860c:	4383      	bics	r3, r0
1000860e:	4313      	orrs	r3, r2
10008610:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10008612:	7823      	ldrb	r3, [r4, #0]
10008614:	2b00      	cmp	r3, #0
10008616:	d026      	beq.n	10008666 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10008618:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000861a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CONTROL.bit.DUALTIMER_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000861c:	2b00      	cmp	r3, #0
1000861e:	d003      	beq.n	10008628 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10008620:	3b02      	subs	r3, #2
10008622:	425d      	negs	r5, r3
10008624:	415d      	adcs	r5, r3
10008626:	01a9      	lsls	r1, r5, #6
		}
		regval |= DUALTIMER_TIMER1CONTROL_TIMER_SIZE(config->timer1.counter_size) |
10008628:	78a2      	ldrb	r2, [r4, #2]
1000862a:	0052      	lsls	r2, r2, #1
1000862c:	2502      	movs	r5, #2
1000862e:	402a      	ands	r2, r5
10008630:	78e3      	ldrb	r3, [r4, #3]
10008632:	009b      	lsls	r3, r3, #2
10008634:	350a      	adds	r5, #10
10008636:	402b      	ands	r3, r5
10008638:	431a      	orrs	r2, r3
1000863a:	0015      	movs	r5, r2
1000863c:	430d      	orrs	r5, r1
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000863e:	7923      	ldrb	r3, [r4, #4]
10008640:	2b00      	cmp	r3, #0
10008642:	d001      	beq.n	10008648 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10008644:	2320      	movs	r3, #32
10008646:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10008648:	4b22      	ldr	r3, [pc, #136]	; (100086d4 <dualtimer_init+0xf4>)
1000864a:	68a2      	ldr	r2, [r4, #8]
1000864c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000864e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
10008650:	491f      	ldr	r1, [pc, #124]	; (100086d0 <dualtimer_init+0xf0>)
10008652:	22c4      	movs	r2, #196	; 0xc4
10008654:	0052      	lsls	r2, r2, #1
10008656:	5c88      	ldrb	r0, [r1, r2]
10008658:	2301      	movs	r3, #1
1000865a:	4303      	orrs	r3, r0
1000865c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000865e:	2000      	movs	r0, #0
10008660:	4b1d      	ldr	r3, [pc, #116]	; (100086d8 <dualtimer_init+0xf8>)
10008662:	4798      	blx	r3
10008664:	e000      	b.n	10008668 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10008666:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10008668:	7b23      	ldrb	r3, [r4, #12]
1000866a:	2b00      	cmp	r3, #0
1000866c:	d029      	beq.n	100086c2 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000866e:	7b63      	ldrb	r3, [r4, #13]
10008670:	2b00      	cmp	r3, #0
10008672:	d005      	beq.n	10008680 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10008674:	2b01      	cmp	r3, #1
10008676:	d005      	beq.n	10008684 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10008678:	2b02      	cmp	r3, #2
1000867a:	d104      	bne.n	10008686 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000867c:	2540      	movs	r5, #64	; 0x40
1000867e:	e002      	b.n	10008686 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10008680:	2501      	movs	r5, #1
10008682:	e000      	b.n	10008686 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10008684:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= DUALTIMER_TIMER2CONTROL_TIMER_SIZE(config->timer2.counter_size) |
10008686:	7ba3      	ldrb	r3, [r4, #14]
10008688:	005b      	lsls	r3, r3, #1
1000868a:	2102      	movs	r1, #2
1000868c:	4019      	ands	r1, r3
1000868e:	7be2      	ldrb	r2, [r4, #15]
10008690:	0092      	lsls	r2, r2, #2
10008692:	230c      	movs	r3, #12
10008694:	4013      	ands	r3, r2
10008696:	430b      	orrs	r3, r1
10008698:	431d      	orrs	r5, r3
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000869a:	7c23      	ldrb	r3, [r4, #16]
1000869c:	2b00      	cmp	r3, #0
1000869e:	d001      	beq.n	100086a4 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
100086a0:	2320      	movs	r3, #32
100086a2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
100086a4:	6962      	ldr	r2, [r4, #20]
100086a6:	4b0b      	ldr	r3, [pc, #44]	; (100086d4 <dualtimer_init+0xf4>)
100086a8:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
100086aa:	2228      	movs	r2, #40	; 0x28
100086ac:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER_CTRL_CNTR_2_ENABLE;
100086ae:	4908      	ldr	r1, [pc, #32]	; (100086d0 <dualtimer_init+0xf0>)
100086b0:	3261      	adds	r2, #97	; 0x61
100086b2:	32ff      	adds	r2, #255	; 0xff
100086b4:	5c88      	ldrb	r0, [r1, r2]
100086b6:	2302      	movs	r3, #2
100086b8:	4303      	orrs	r3, r0
100086ba:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
100086bc:	2001      	movs	r0, #1
100086be:	4b06      	ldr	r3, [pc, #24]	; (100086d8 <dualtimer_init+0xf8>)
100086c0:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
100086c2:	4906      	ldr	r1, [pc, #24]	; (100086dc <dualtimer_init+0xfc>)
100086c4:	201e      	movs	r0, #30
100086c6:	4b06      	ldr	r3, [pc, #24]	; (100086e0 <dualtimer_init+0x100>)
100086c8:	4798      	blx	r3
}
100086ca:	bd70      	pop	{r4, r5, r6, pc}
100086cc:	1000916d 	.word	0x1000916d
100086d0:	4000b000 	.word	0x4000b000
100086d4:	40001000 	.word	0x40001000
100086d8:	10008599 	.word	0x10008599
100086dc:	10008509 	.word	0x10008509
100086e0:	100095d5 	.word	0x100095d5

100086e4 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
100086e4:	2800      	cmp	r0, #0
100086e6:	d102      	bne.n	100086ee <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
100086e8:	4b02      	ldr	r3, [pc, #8]	; (100086f4 <dualtimer_register_callback+0x10>)
100086ea:	6019      	str	r1, [r3, #0]
100086ec:	e001      	b.n	100086f2 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
100086ee:	4b02      	ldr	r3, [pc, #8]	; (100086f8 <dualtimer_register_callback+0x14>)
100086f0:	6019      	str	r1, [r3, #0]
	}
}
100086f2:	4770      	bx	lr
100086f4:	10014250 	.word	0x10014250
100086f8:	10014254 	.word	0x10014254

100086fc <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
100086fc:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
100086fe:	4b16      	ldr	r3, [pc, #88]	; (10008758 <gpio_port0_isr_handler+0x5c>)
10008700:	681d      	ldr	r5, [r3, #0]
10008702:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10008704:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
10008706:	07cb      	lsls	r3, r1, #31
10008708:	d407      	bmi.n	1000871a <gpio_port0_isr_handler+0x1e>
1000870a:	2301      	movs	r3, #1
1000870c:	2401      	movs	r4, #1
1000870e:	0018      	movs	r0, r3
10008710:	0022      	movs	r2, r4
10008712:	409a      	lsls	r2, r3
10008714:	4211      	tst	r1, r2
10008716:	d014      	beq.n	10008742 <gpio_port0_isr_handler+0x46>
10008718:	e001      	b.n	1000871e <gpio_port0_isr_handler+0x22>
1000871a:	2201      	movs	r2, #1
1000871c:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000871e:	b292      	uxth	r2, r2
10008720:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10008722:	2346      	movs	r3, #70	; 0x46
10008724:	4a0c      	ldr	r2, [pc, #48]	; (10008758 <gpio_port0_isr_handler+0x5c>)
10008726:	5ad3      	ldrh	r3, [r2, r3]
10008728:	4103      	asrs	r3, r0
1000872a:	07db      	lsls	r3, r3, #31
1000872c:	d50c      	bpl.n	10008748 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000872e:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10008730:	5ad3      	ldrh	r3, [r2, r3]
10008732:	4103      	asrs	r3, r0
10008734:	07db      	lsls	r3, r3, #31
10008736:	d507      	bpl.n	10008748 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
10008738:	0080      	lsls	r0, r0, #2
1000873a:	1810      	adds	r0, r2, r0
1000873c:	6843      	ldr	r3, [r0, #4]
1000873e:	4798      	blx	r3
10008740:	e002      	b.n	10008748 <gpio_port0_isr_handler+0x4c>
10008742:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10008744:	2b10      	cmp	r3, #16
10008746:	d1e2      	bne.n	1000870e <gpio_port0_isr_handler+0x12>
10008748:	2180      	movs	r1, #128	; 0x80
1000874a:	0409      	lsls	r1, r1, #16
1000874c:	23c0      	movs	r3, #192	; 0xc0
1000874e:	005b      	lsls	r3, r3, #1
10008750:	4a02      	ldr	r2, [pc, #8]	; (1000875c <gpio_port0_isr_handler+0x60>)
10008752:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
10008754:	bd70      	pop	{r4, r5, r6, pc}
10008756:	46c0      	nop			; (mov r8, r8)
10008758:	10015d14 	.word	0x10015d14
1000875c:	e000e100 	.word	0xe000e100

10008760 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
10008762:	4b18      	ldr	r3, [pc, #96]	; (100087c4 <gpio_port1_isr_handler+0x64>)
10008764:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10008766:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
10008768:	b2b6      	uxth	r6, r6
1000876a:	0037      	movs	r7, r6
1000876c:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000876e:	0b76      	lsrs	r6, r6, #13
10008770:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10008772:	4d14      	ldr	r5, [pc, #80]	; (100087c4 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10008774:	2e00      	cmp	r6, #0
10008776:	d001      	beq.n	1000877c <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
10008778:	4b13      	ldr	r3, [pc, #76]	; (100087c8 <gpio_port1_isr_handler+0x68>)
1000877a:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000877c:	0022      	movs	r2, r4
1000877e:	2301      	movs	r3, #1
10008780:	40a3      	lsls	r3, r4
10008782:	421f      	tst	r7, r3
10008784:	d013      	beq.n	100087ae <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10008786:	b29b      	uxth	r3, r3
10008788:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000878a:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000878c:	238e      	movs	r3, #142	; 0x8e
1000878e:	5aeb      	ldrh	r3, [r5, r3]
10008790:	4123      	asrs	r3, r4
10008792:	07db      	lsls	r3, r3, #31
10008794:	d50b      	bpl.n	100087ae <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10008796:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10008798:	490a      	ldr	r1, [pc, #40]	; (100087c4 <gpio_port1_isr_handler+0x64>)
1000879a:	5acb      	ldrh	r3, [r1, r3]
1000879c:	4123      	asrs	r3, r4
1000879e:	07db      	lsls	r3, r3, #31
100087a0:	d505      	bpl.n	100087ae <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
100087a2:	3212      	adds	r2, #18
100087a4:	0092      	lsls	r2, r2, #2
100087a6:	188a      	adds	r2, r1, r2
100087a8:	6853      	ldr	r3, [r2, #4]
100087aa:	4798      	blx	r3
				break;
100087ac:	e002      	b.n	100087b4 <gpio_port1_isr_handler+0x54>
100087ae:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
100087b0:	2c10      	cmp	r4, #16
100087b2:	d1df      	bne.n	10008774 <gpio_port1_isr_handler+0x14>
100087b4:	2180      	movs	r1, #128	; 0x80
100087b6:	0449      	lsls	r1, r1, #17
100087b8:	23c0      	movs	r3, #192	; 0xc0
100087ba:	005b      	lsls	r3, r3, #1
100087bc:	4a03      	ldr	r2, [pc, #12]	; (100087cc <gpio_port1_isr_handler+0x6c>)
100087be:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
100087c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100087c2:	46c0      	nop			; (mov r8, r8)
100087c4:	10015d14 	.word	0x10015d14
100087c8:	0001bc51 	.word	0x0001bc51
100087cc:	e000e100 	.word	0xe000e100

100087d0 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
100087d0:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
100087d2:	2390      	movs	r3, #144	; 0x90
100087d4:	4a1b      	ldr	r2, [pc, #108]	; (10008844 <gpio_port2_isr_handler+0x74>)
100087d6:	58d2      	ldr	r2, [r2, r3]
100087d8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
100087da:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
100087dc:	04d9      	lsls	r1, r3, #19
100087de:	d414      	bmi.n	1000880a <gpio_port2_isr_handler+0x3a>
100087e0:	0499      	lsls	r1, r3, #18
100087e2:	d40a      	bmi.n	100087fa <gpio_port2_isr_handler+0x2a>
100087e4:	0459      	lsls	r1, r3, #17
100087e6:	d40c      	bmi.n	10008802 <gpio_port2_isr_handler+0x32>
100087e8:	0bdb      	lsrs	r3, r3, #15
100087ea:	03db      	lsls	r3, r3, #15
100087ec:	b29b      	uxth	r3, r3
100087ee:	2b00      	cmp	r3, #0
100087f0:	d020      	beq.n	10008834 <gpio_port2_isr_handler+0x64>
100087f2:	2380      	movs	r3, #128	; 0x80
100087f4:	021b      	lsls	r3, r3, #8
100087f6:	210f      	movs	r1, #15
100087f8:	e00a      	b.n	10008810 <gpio_port2_isr_handler+0x40>
100087fa:	2380      	movs	r3, #128	; 0x80
100087fc:	019b      	lsls	r3, r3, #6
100087fe:	210d      	movs	r1, #13
10008800:	e006      	b.n	10008810 <gpio_port2_isr_handler+0x40>
10008802:	2380      	movs	r3, #128	; 0x80
10008804:	01db      	lsls	r3, r3, #7
10008806:	210e      	movs	r1, #14
10008808:	e002      	b.n	10008810 <gpio_port2_isr_handler+0x40>
1000880a:	2380      	movs	r3, #128	; 0x80
1000880c:	015b      	lsls	r3, r3, #5
1000880e:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
10008810:	b29b      	uxth	r3, r3
10008812:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008814:	23d6      	movs	r3, #214	; 0xd6
10008816:	4a0b      	ldr	r2, [pc, #44]	; (10008844 <gpio_port2_isr_handler+0x74>)
10008818:	5ad3      	ldrh	r3, [r2, r3]
1000881a:	410b      	asrs	r3, r1
1000881c:	07db      	lsls	r3, r3, #31
1000881e:	d509      	bpl.n	10008834 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
10008820:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10008822:	5ad3      	ldrh	r3, [r2, r3]
10008824:	410b      	asrs	r3, r1
10008826:	07db      	lsls	r3, r3, #31
10008828:	d504      	bpl.n	10008834 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000882a:	3124      	adds	r1, #36	; 0x24
1000882c:	0089      	lsls	r1, r1, #2
1000882e:	1851      	adds	r1, r2, r1
10008830:	684b      	ldr	r3, [r1, #4]
10008832:	4798      	blx	r3
10008834:	2180      	movs	r1, #128	; 0x80
10008836:	0489      	lsls	r1, r1, #18
10008838:	23c0      	movs	r3, #192	; 0xc0
1000883a:	005b      	lsls	r3, r3, #1
1000883c:	4a02      	ldr	r2, [pc, #8]	; (10008848 <gpio_port2_isr_handler+0x78>)
1000883e:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
10008840:	bd10      	pop	{r4, pc}
10008842:	46c0      	nop			; (mov r8, r8)
10008844:	10015d14 	.word	0x10015d14
10008848:	e000e100 	.word	0xe000e100

1000884c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000884c:	2300      	movs	r3, #0
1000884e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10008850:	2201      	movs	r2, #1
10008852:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10008854:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10008856:	70c3      	strb	r3, [r0, #3]
}
10008858:	4770      	bx	lr
1000885a:	46c0      	nop			; (mov r8, r8)

1000885c <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000885c:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000885e:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10008860:	2801      	cmp	r0, #1
10008862:	d800      	bhi.n	10008866 <gpio_pin_set_config+0xa>
10008864:	e0c8      	b.n	100089f8 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10008866:	2807      	cmp	r0, #7
10008868:	d809      	bhi.n	1000887e <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000886a:	4d64      	ldr	r5, [pc, #400]	; (100089fc <gpio_pin_set_config+0x1a0>)
1000886c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000886e:	3b10      	subs	r3, #16
10008870:	4003      	ands	r3, r0
10008872:	009b      	lsls	r3, r3, #2
10008874:	2407      	movs	r4, #7
10008876:	409c      	lsls	r4, r3
10008878:	43a2      	bics	r2, r4
1000887a:	646a      	str	r2, [r5, #68]	; 0x44
1000887c:	e029      	b.n	100088d2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000887e:	280f      	cmp	r0, #15
10008880:	d809      	bhi.n	10008896 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008882:	4d5e      	ldr	r5, [pc, #376]	; (100089fc <gpio_pin_set_config+0x1a0>)
10008884:	6caa      	ldr	r2, [r5, #72]	; 0x48
10008886:	2307      	movs	r3, #7
10008888:	4003      	ands	r3, r0
1000888a:	009b      	lsls	r3, r3, #2
1000888c:	2407      	movs	r4, #7
1000888e:	409c      	lsls	r4, r3
10008890:	43a2      	bics	r2, r4
10008892:	64aa      	str	r2, [r5, #72]	; 0x48
10008894:	e01d      	b.n	100088d2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10008896:	2817      	cmp	r0, #23
10008898:	d809      	bhi.n	100088ae <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000889a:	4d58      	ldr	r5, [pc, #352]	; (100089fc <gpio_pin_set_config+0x1a0>)
1000889c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000889e:	2307      	movs	r3, #7
100088a0:	4003      	ands	r3, r0
100088a2:	009b      	lsls	r3, r3, #2
100088a4:	2407      	movs	r4, #7
100088a6:	409c      	lsls	r4, r3
100088a8:	43a2      	bics	r2, r4
100088aa:	64ea      	str	r2, [r5, #76]	; 0x4c
100088ac:	e011      	b.n	100088d2 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
100088ae:	0003      	movs	r3, r0
100088b0:	3b2c      	subs	r3, #44	; 0x2c
100088b2:	2b03      	cmp	r3, #3
100088b4:	d80d      	bhi.n	100088d2 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
100088b6:	4d52      	ldr	r5, [pc, #328]	; (10008a00 <gpio_pin_set_config+0x1a4>)
100088b8:	2482      	movs	r4, #130	; 0x82
100088ba:	00e4      	lsls	r4, r4, #3
100088bc:	5d2a      	ldrb	r2, [r5, r4]
100088be:	0712      	lsls	r2, r2, #28
100088c0:	2601      	movs	r6, #1
100088c2:	409e      	lsls	r6, r3
100088c4:	0f12      	lsrs	r2, r2, #28
100088c6:	5d2b      	ldrb	r3, [r5, r4]
100088c8:	43b2      	bics	r2, r6
100088ca:	260f      	movs	r6, #15
100088cc:	43b3      	bics	r3, r6
100088ce:	4313      	orrs	r3, r2
100088d0:	552b      	strb	r3, [r5, r4]
		}
		
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
100088d2:	0003      	movs	r3, r0
100088d4:	3b1d      	subs	r3, #29
100088d6:	2b02      	cmp	r3, #2
100088d8:	d829      	bhi.n	1000892e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
100088da:	784b      	ldrb	r3, [r1, #1]
100088dc:	2b01      	cmp	r3, #1
100088de:	d108      	bne.n	100088f2 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
100088e0:	4d47      	ldr	r5, [pc, #284]	; (10008a00 <gpio_pin_set_config+0x1a4>)
100088e2:	7d2b      	ldrb	r3, [r5, #20]
100088e4:	241f      	movs	r4, #31
100088e6:	1a24      	subs	r4, r4, r0
100088e8:	2201      	movs	r2, #1
100088ea:	40a2      	lsls	r2, r4
100088ec:	4393      	bics	r3, r2
100088ee:	752b      	strb	r3, [r5, #20]
100088f0:	e008      	b.n	10008904 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
100088f2:	4c43      	ldr	r4, [pc, #268]	; (10008a00 <gpio_pin_set_config+0x1a4>)
100088f4:	7d25      	ldrb	r5, [r4, #20]
100088f6:	221f      	movs	r2, #31
100088f8:	1a12      	subs	r2, r2, r0
100088fa:	2301      	movs	r3, #1
100088fc:	4093      	lsls	r3, r2
100088fe:	432b      	orrs	r3, r5
10008900:	b2db      	uxtb	r3, r3
10008902:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10008904:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008906:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10008908:	2a00      	cmp	r2, #0
1000890a:	d075      	beq.n	100089f8 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000890c:	493c      	ldr	r1, [pc, #240]	; (10008a00 <gpio_pin_set_config+0x1a4>)
1000890e:	880c      	ldrh	r4, [r1, #0]
10008910:	221f      	movs	r2, #31
10008912:	1a10      	subs	r0, r2, r0
10008914:	0080      	lsls	r0, r0, #2
10008916:	3301      	adds	r3, #1
10008918:	4083      	lsls	r3, r0
1000891a:	4323      	orrs	r3, r4
1000891c:	b29b      	uxth	r3, r3
1000891e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10008920:	4a38      	ldr	r2, [pc, #224]	; (10008a04 <gpio_pin_set_config+0x1a8>)
10008922:	7811      	ldrb	r1, [r2, #0]
10008924:	2302      	movs	r3, #2
10008926:	430b      	orrs	r3, r1
10008928:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000892a:	2300      	movs	r3, #0
1000892c:	e064      	b.n	100089f8 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000892e:	780a      	ldrb	r2, [r1, #0]
10008930:	2a00      	cmp	r2, #0
10008932:	d140      	bne.n	100089b6 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10008934:	280f      	cmp	r0, #15
10008936:	d808      	bhi.n	1000894a <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10008938:	2301      	movs	r3, #1
1000893a:	4083      	lsls	r3, r0
1000893c:	b29b      	uxth	r3, r3
1000893e:	4a32      	ldr	r2, [pc, #200]	; (10008a08 <gpio_pin_set_config+0x1ac>)
10008940:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10008942:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10008944:	281f      	cmp	r0, #31
10008946:	d857      	bhi.n	100089f8 <gpio_pin_set_config+0x19c>
10008948:	e012      	b.n	10008970 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000894a:	281f      	cmp	r0, #31
1000894c:	d807      	bhi.n	1000895e <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000894e:	220f      	movs	r2, #15
10008950:	4002      	ands	r2, r0
10008952:	2301      	movs	r3, #1
10008954:	4093      	lsls	r3, r2
10008956:	b29b      	uxth	r3, r3
10008958:	4a2c      	ldr	r2, [pc, #176]	; (10008a0c <gpio_pin_set_config+0x1b0>)
1000895a:	8293      	strh	r3, [r2, #20]
1000895c:	e008      	b.n	10008970 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000895e:	230f      	movs	r3, #15
10008960:	4018      	ands	r0, r3
10008962:	3b0e      	subs	r3, #14
10008964:	4083      	lsls	r3, r0
10008966:	b29b      	uxth	r3, r3
10008968:	4a29      	ldr	r2, [pc, #164]	; (10008a10 <gpio_pin_set_config+0x1b4>)
1000896a:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000896c:	2300      	movs	r3, #0
1000896e:	e043      	b.n	100089f8 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10008970:	784b      	ldrb	r3, [r1, #1]
10008972:	2b01      	cmp	r3, #1
10008974:	d00c      	beq.n	10008990 <gpio_pin_set_config+0x134>
10008976:	2b00      	cmp	r3, #0
10008978:	d002      	beq.n	10008980 <gpio_pin_set_config+0x124>
1000897a:	2b02      	cmp	r3, #2
1000897c:	d010      	beq.n	100089a0 <gpio_pin_set_config+0x144>
1000897e:	e03a      	b.n	100089f6 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10008980:	491e      	ldr	r1, [pc, #120]	; (100089fc <gpio_pin_set_config+0x1a0>)
10008982:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10008984:	2301      	movs	r3, #1
10008986:	4083      	lsls	r3, r0
10008988:	4313      	orrs	r3, r2
1000898a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000898c:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000898e:	e033      	b.n	100089f8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10008990:	491a      	ldr	r1, [pc, #104]	; (100089fc <gpio_pin_set_config+0x1a0>)
10008992:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10008994:	2201      	movs	r2, #1
10008996:	4082      	lsls	r2, r0
10008998:	4393      	bics	r3, r2
1000899a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000899c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000899e:	e02b      	b.n	100089f8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
100089a0:	4b16      	ldr	r3, [pc, #88]	; (100089fc <gpio_pin_set_config+0x1a0>)
100089a2:	6d59      	ldr	r1, [r3, #84]	; 0x54
100089a4:	2201      	movs	r2, #1
100089a6:	4082      	lsls	r2, r0
100089a8:	4311      	orrs	r1, r2
100089aa:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
100089ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
100089ae:	4391      	bics	r1, r2
100089b0:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089b2:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
100089b4:	e020      	b.n	100089f8 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089b6:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
100089b8:	2a01      	cmp	r2, #1
100089ba:	d11d      	bne.n	100089f8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
100089bc:	280f      	cmp	r0, #15
100089be:	d806      	bhi.n	100089ce <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
100089c0:	3301      	adds	r3, #1
100089c2:	4083      	lsls	r3, r0
100089c4:	b29b      	uxth	r3, r3
100089c6:	4a10      	ldr	r2, [pc, #64]	; (10008a08 <gpio_pin_set_config+0x1ac>)
100089c8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089ca:	2300      	movs	r3, #0
100089cc:	e014      	b.n	100089f8 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
100089ce:	281f      	cmp	r0, #31
100089d0:	d808      	bhi.n	100089e4 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
100089d2:	230f      	movs	r3, #15
100089d4:	4018      	ands	r0, r3
100089d6:	3b0e      	subs	r3, #14
100089d8:	4083      	lsls	r3, r0
100089da:	b29b      	uxth	r3, r3
100089dc:	4a0b      	ldr	r2, [pc, #44]	; (10008a0c <gpio_pin_set_config+0x1b0>)
100089de:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089e0:	2300      	movs	r3, #0
100089e2:	e009      	b.n	100089f8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
100089e4:	230f      	movs	r3, #15
100089e6:	4018      	ands	r0, r3
100089e8:	3b0e      	subs	r3, #14
100089ea:	4083      	lsls	r3, r0
100089ec:	b29b      	uxth	r3, r3
100089ee:	4a08      	ldr	r2, [pc, #32]	; (10008a10 <gpio_pin_set_config+0x1b4>)
100089f0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
100089f2:	2300      	movs	r3, #0
100089f4:	e000      	b.n	100089f8 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
100089f6:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
100089f8:	0018      	movs	r0, r3
100089fa:	bd70      	pop	{r4, r5, r6, pc}
100089fc:	4000b000 	.word	0x4000b000
10008a00:	4000f000 	.word	0x4000f000
10008a04:	4000e000 	.word	0x4000e000
10008a08:	40010000 	.word	0x40010000
10008a0c:	40011000 	.word	0x40011000
10008a10:	40013000 	.word	0x40013000

10008a14 <gpio_pin_toggle_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to toggle.
 */
void gpio_pin_toggle_output_level(const uint8_t gpio_pin)
{
	if (gpio_pin < 16) {
10008a14:	280f      	cmp	r0, #15
10008a16:	d807      	bhi.n	10008a28 <gpio_pin_toggle_output_level+0x14>
		GPIO0->DATAOUT.reg ^= (1 << gpio_pin);
10008a18:	4a0e      	ldr	r2, [pc, #56]	; (10008a54 <gpio_pin_toggle_output_level+0x40>)
10008a1a:	8891      	ldrh	r1, [r2, #4]
10008a1c:	2301      	movs	r3, #1
10008a1e:	4083      	lsls	r3, r0
10008a20:	404b      	eors	r3, r1
10008a22:	b29b      	uxth	r3, r3
10008a24:	8093      	strh	r3, [r2, #4]
10008a26:	e014      	b.n	10008a52 <gpio_pin_toggle_output_level+0x3e>
	} else if (gpio_pin < 32) {
10008a28:	281f      	cmp	r0, #31
10008a2a:	d809      	bhi.n	10008a40 <gpio_pin_toggle_output_level+0x2c>
		GPIO1->DATAOUT.reg ^= (1 << (gpio_pin % 16));
10008a2c:	4a0a      	ldr	r2, [pc, #40]	; (10008a58 <gpio_pin_toggle_output_level+0x44>)
10008a2e:	8891      	ldrh	r1, [r2, #4]
10008a30:	230f      	movs	r3, #15
10008a32:	4018      	ands	r0, r3
10008a34:	3b0e      	subs	r3, #14
10008a36:	4083      	lsls	r3, r0
10008a38:	404b      	eors	r3, r1
10008a3a:	b29b      	uxth	r3, r3
10008a3c:	8093      	strh	r3, [r2, #4]
10008a3e:	e008      	b.n	10008a52 <gpio_pin_toggle_output_level+0x3e>
	} else {
		GPIO2->DATAOUT.reg ^= (1 << (gpio_pin % 16));
10008a40:	4a06      	ldr	r2, [pc, #24]	; (10008a5c <gpio_pin_toggle_output_level+0x48>)
10008a42:	8891      	ldrh	r1, [r2, #4]
10008a44:	230f      	movs	r3, #15
10008a46:	4018      	ands	r0, r3
10008a48:	3b0e      	subs	r3, #14
10008a4a:	4083      	lsls	r3, r0
10008a4c:	404b      	eors	r3, r1
10008a4e:	b29b      	uxth	r3, r3
10008a50:	8093      	strh	r3, [r2, #4]
	}
}
10008a52:	4770      	bx	lr
10008a54:	40010000 	.word	0x40010000
10008a58:	40011000 	.word	0x40011000
10008a5c:	40013000 	.word	0x40013000

10008a60 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
10008a60:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
10008a62:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
10008a64:	23ff      	movs	r3, #255	; 0xff
10008a66:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
10008a68:	2807      	cmp	r0, #7
10008a6a:	d833      	bhi.n	10008ad4 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008a6c:	4a4e      	ldr	r2, [pc, #312]	; (10008ba8 <gpio_pinmux_cofiguration+0x148>)
10008a6e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008a70:	3bf8      	subs	r3, #248	; 0xf8
10008a72:	4003      	ands	r3, r0
10008a74:	009b      	lsls	r3, r3, #2
10008a76:	2607      	movs	r6, #7
10008a78:	409e      	lsls	r6, r3
10008a7a:	43b4      	bics	r4, r6
10008a7c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008a7e:	6c54      	ldr	r4, [r2, #68]	; 0x44
10008a80:	000e      	movs	r6, r1
10008a82:	409e      	lsls	r6, r3
10008a84:	0033      	movs	r3, r6
10008a86:	4323      	orrs	r3, r4
10008a88:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
10008a8a:	2901      	cmp	r1, #1
10008a8c:	d000      	beq.n	10008a90 <gpio_pinmux_cofiguration+0x30>
10008a8e:	e08a      	b.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
10008a90:	2803      	cmp	r0, #3
10008a92:	d80f      	bhi.n	10008ab4 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008a94:	0011      	movs	r1, r2
10008a96:	22d0      	movs	r2, #208	; 0xd0
10008a98:	0052      	lsls	r2, r2, #1
10008a9a:	588c      	ldr	r4, [r1, r2]
10008a9c:	2303      	movs	r3, #3
10008a9e:	4018      	ands	r0, r3
10008aa0:	00c0      	lsls	r0, r0, #3
10008aa2:	333c      	adds	r3, #60	; 0x3c
10008aa4:	4083      	lsls	r3, r0
10008aa6:	439c      	bics	r4, r3
10008aa8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008aaa:	588b      	ldr	r3, [r1, r2]
10008aac:	4085      	lsls	r5, r0
10008aae:	431d      	orrs	r5, r3
10008ab0:	508d      	str	r5, [r1, r2]
10008ab2:	e078      	b.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008ab4:	493c      	ldr	r1, [pc, #240]	; (10008ba8 <gpio_pinmux_cofiguration+0x148>)
10008ab6:	22d2      	movs	r2, #210	; 0xd2
10008ab8:	0052      	lsls	r2, r2, #1
10008aba:	588c      	ldr	r4, [r1, r2]
10008abc:	2303      	movs	r3, #3
10008abe:	4018      	ands	r0, r3
10008ac0:	00c0      	lsls	r0, r0, #3
10008ac2:	333c      	adds	r3, #60	; 0x3c
10008ac4:	4083      	lsls	r3, r0
10008ac6:	439c      	bics	r4, r3
10008ac8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008aca:	588b      	ldr	r3, [r1, r2]
10008acc:	4085      	lsls	r5, r0
10008ace:	431d      	orrs	r5, r3
10008ad0:	508d      	str	r5, [r1, r2]
10008ad2:	e068      	b.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
10008ad4:	280f      	cmp	r0, #15
10008ad6:	d832      	bhi.n	10008b3e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008ad8:	4a33      	ldr	r2, [pc, #204]	; (10008ba8 <gpio_pinmux_cofiguration+0x148>)
10008ada:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008adc:	2307      	movs	r3, #7
10008ade:	4003      	ands	r3, r0
10008ae0:	009b      	lsls	r3, r3, #2
10008ae2:	2607      	movs	r6, #7
10008ae4:	409e      	lsls	r6, r3
10008ae6:	43b4      	bics	r4, r6
10008ae8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008aea:	6c94      	ldr	r4, [r2, #72]	; 0x48
10008aec:	000e      	movs	r6, r1
10008aee:	409e      	lsls	r6, r3
10008af0:	0033      	movs	r3, r6
10008af2:	4323      	orrs	r3, r4
10008af4:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
10008af6:	2901      	cmp	r1, #1
10008af8:	d155      	bne.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
10008afa:	280b      	cmp	r0, #11
10008afc:	d80f      	bhi.n	10008b1e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008afe:	0011      	movs	r1, r2
10008b00:	22d4      	movs	r2, #212	; 0xd4
10008b02:	0052      	lsls	r2, r2, #1
10008b04:	588c      	ldr	r4, [r1, r2]
10008b06:	2303      	movs	r3, #3
10008b08:	4018      	ands	r0, r3
10008b0a:	00c0      	lsls	r0, r0, #3
10008b0c:	333c      	adds	r3, #60	; 0x3c
10008b0e:	4083      	lsls	r3, r0
10008b10:	439c      	bics	r4, r3
10008b12:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b14:	588b      	ldr	r3, [r1, r2]
10008b16:	4085      	lsls	r5, r0
10008b18:	431d      	orrs	r5, r3
10008b1a:	508d      	str	r5, [r1, r2]
10008b1c:	e043      	b.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b1e:	4922      	ldr	r1, [pc, #136]	; (10008ba8 <gpio_pinmux_cofiguration+0x148>)
10008b20:	22d6      	movs	r2, #214	; 0xd6
10008b22:	0052      	lsls	r2, r2, #1
10008b24:	588c      	ldr	r4, [r1, r2]
10008b26:	2303      	movs	r3, #3
10008b28:	4018      	ands	r0, r3
10008b2a:	00c0      	lsls	r0, r0, #3
10008b2c:	333c      	adds	r3, #60	; 0x3c
10008b2e:	4083      	lsls	r3, r0
10008b30:	439c      	bics	r4, r3
10008b32:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b34:	588b      	ldr	r3, [r1, r2]
10008b36:	4085      	lsls	r5, r0
10008b38:	431d      	orrs	r5, r3
10008b3a:	508d      	str	r5, [r1, r2]
10008b3c:	e033      	b.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
10008b3e:	2817      	cmp	r0, #23
10008b40:	d831      	bhi.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10008b42:	4a19      	ldr	r2, [pc, #100]	; (10008ba8 <gpio_pinmux_cofiguration+0x148>)
10008b44:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008b46:	2307      	movs	r3, #7
10008b48:	4003      	ands	r3, r0
10008b4a:	009b      	lsls	r3, r3, #2
10008b4c:	2607      	movs	r6, #7
10008b4e:	409e      	lsls	r6, r3
10008b50:	43b4      	bics	r4, r6
10008b52:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
10008b54:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
10008b56:	000e      	movs	r6, r1
10008b58:	409e      	lsls	r6, r3
10008b5a:	0033      	movs	r3, r6
10008b5c:	4323      	orrs	r3, r4
10008b5e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
10008b60:	2901      	cmp	r1, #1
10008b62:	d120      	bne.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
10008b64:	2813      	cmp	r0, #19
10008b66:	d80f      	bhi.n	10008b88 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b68:	0011      	movs	r1, r2
10008b6a:	22d8      	movs	r2, #216	; 0xd8
10008b6c:	0052      	lsls	r2, r2, #1
10008b6e:	588c      	ldr	r4, [r1, r2]
10008b70:	2303      	movs	r3, #3
10008b72:	4018      	ands	r0, r3
10008b74:	00c0      	lsls	r0, r0, #3
10008b76:	333c      	adds	r3, #60	; 0x3c
10008b78:	4083      	lsls	r3, r0
10008b7a:	439c      	bics	r4, r3
10008b7c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b7e:	588b      	ldr	r3, [r1, r2]
10008b80:	4085      	lsls	r5, r0
10008b82:	431d      	orrs	r5, r3
10008b84:	508d      	str	r5, [r1, r2]
10008b86:	e00e      	b.n	10008ba6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
10008b88:	4a07      	ldr	r2, [pc, #28]	; (10008ba8 <gpio_pinmux_cofiguration+0x148>)
10008b8a:	23da      	movs	r3, #218	; 0xda
10008b8c:	005b      	lsls	r3, r3, #1
10008b8e:	58d1      	ldr	r1, [r2, r3]
10008b90:	2403      	movs	r4, #3
10008b92:	4020      	ands	r0, r4
10008b94:	00c0      	lsls	r0, r0, #3
10008b96:	343c      	adds	r4, #60	; 0x3c
10008b98:	4084      	lsls	r4, r0
10008b9a:	43a1      	bics	r1, r4
10008b9c:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
10008b9e:	58d1      	ldr	r1, [r2, r3]
10008ba0:	4085      	lsls	r5, r0
10008ba2:	430d      	orrs	r5, r1
10008ba4:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
10008ba6:	bd70      	pop	{r4, r5, r6, pc}
10008ba8:	4000b000 	.word	0x4000b000

10008bac <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
10008bac:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
10008bae:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
10008bb0:	280f      	cmp	r0, #15
10008bb2:	d904      	bls.n	10008bbe <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
10008bb4:	241f      	movs	r4, #31
10008bb6:	4284      	cmp	r4, r0
10008bb8:	415b      	adcs	r3, r3
10008bba:	3c1d      	subs	r4, #29
10008bbc:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
10008bbe:	2a01      	cmp	r2, #1
10008bc0:	d016      	beq.n	10008bf0 <gpio_register_callback+0x44>
10008bc2:	2a00      	cmp	r2, #0
10008bc4:	d004      	beq.n	10008bd0 <gpio_register_callback+0x24>
10008bc6:	2a02      	cmp	r2, #2
10008bc8:	d022      	beq.n	10008c10 <gpio_register_callback+0x64>
10008bca:	2a03      	cmp	r2, #3
10008bcc:	d030      	beq.n	10008c30 <gpio_register_callback+0x84>
10008bce:	e03e      	b.n	10008c4e <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
10008bd0:	4e29      	ldr	r6, [pc, #164]	; (10008c78 <gpio_register_callback+0xcc>)
10008bd2:	00dc      	lsls	r4, r3, #3
10008bd4:	18e2      	adds	r2, r4, r3
10008bd6:	00d2      	lsls	r2, r2, #3
10008bd8:	5997      	ldr	r7, [r2, r6]
10008bda:	250f      	movs	r5, #15
10008bdc:	4005      	ands	r5, r0
10008bde:	2201      	movs	r2, #1
10008be0:	40aa      	lsls	r2, r5
10008be2:	b292      	uxth	r2, r2
10008be4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
10008be6:	18e4      	adds	r4, r4, r3
10008be8:	00e4      	lsls	r4, r4, #3
10008bea:	59a4      	ldr	r4, [r4, r6]
10008bec:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
10008bee:	e02e      	b.n	10008c4e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
10008bf0:	4e21      	ldr	r6, [pc, #132]	; (10008c78 <gpio_register_callback+0xcc>)
10008bf2:	00dc      	lsls	r4, r3, #3
10008bf4:	18e2      	adds	r2, r4, r3
10008bf6:	00d2      	lsls	r2, r2, #3
10008bf8:	5997      	ldr	r7, [r2, r6]
10008bfa:	250f      	movs	r5, #15
10008bfc:	4005      	ands	r5, r0
10008bfe:	2201      	movs	r2, #1
10008c00:	40aa      	lsls	r2, r5
10008c02:	b292      	uxth	r2, r2
10008c04:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
10008c06:	18e4      	adds	r4, r4, r3
10008c08:	00e4      	lsls	r4, r4, #3
10008c0a:	59a4      	ldr	r4, [r4, r6]
10008c0c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
10008c0e:	e01e      	b.n	10008c4e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
10008c10:	4e19      	ldr	r6, [pc, #100]	; (10008c78 <gpio_register_callback+0xcc>)
10008c12:	00dc      	lsls	r4, r3, #3
10008c14:	18e2      	adds	r2, r4, r3
10008c16:	00d2      	lsls	r2, r2, #3
10008c18:	5997      	ldr	r7, [r2, r6]
10008c1a:	250f      	movs	r5, #15
10008c1c:	4005      	ands	r5, r0
10008c1e:	2201      	movs	r2, #1
10008c20:	40aa      	lsls	r2, r5
10008c22:	b292      	uxth	r2, r2
10008c24:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
10008c26:	18e4      	adds	r4, r4, r3
10008c28:	00e4      	lsls	r4, r4, #3
10008c2a:	59a4      	ldr	r4, [r4, r6]
10008c2c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
10008c2e:	e00e      	b.n	10008c4e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
10008c30:	4e11      	ldr	r6, [pc, #68]	; (10008c78 <gpio_register_callback+0xcc>)
10008c32:	00dc      	lsls	r4, r3, #3
10008c34:	18e2      	adds	r2, r4, r3
10008c36:	00d2      	lsls	r2, r2, #3
10008c38:	5997      	ldr	r7, [r2, r6]
10008c3a:	250f      	movs	r5, #15
10008c3c:	4005      	ands	r5, r0
10008c3e:	2201      	movs	r2, #1
10008c40:	40aa      	lsls	r2, r5
10008c42:	b292      	uxth	r2, r2
10008c44:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
10008c46:	18e4      	adds	r4, r4, r3
10008c48:	00e4      	lsls	r4, r4, #3
10008c4a:	59a4      	ldr	r4, [r4, r6]
10008c4c:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
10008c4e:	220f      	movs	r2, #15
10008c50:	4010      	ands	r0, r2
10008c52:	4c09      	ldr	r4, [pc, #36]	; (10008c78 <gpio_register_callback+0xcc>)
10008c54:	00dd      	lsls	r5, r3, #3
10008c56:	18ea      	adds	r2, r5, r3
10008c58:	0052      	lsls	r2, r2, #1
10008c5a:	1812      	adds	r2, r2, r0
10008c5c:	0092      	lsls	r2, r2, #2
10008c5e:	18a2      	adds	r2, r4, r2
10008c60:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
10008c62:	18ea      	adds	r2, r5, r3
10008c64:	00d2      	lsls	r2, r2, #3
10008c66:	18a2      	adds	r2, r4, r2
10008c68:	3244      	adds	r2, #68	; 0x44
10008c6a:	2101      	movs	r1, #1
10008c6c:	4081      	lsls	r1, r0
10008c6e:	8813      	ldrh	r3, [r2, #0]
10008c70:	430b      	orrs	r3, r1
10008c72:	8013      	strh	r3, [r2, #0]
}
10008c74:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008c76:	46c0      	nop			; (mov r8, r8)
10008c78:	10015d14 	.word	0x10015d14

10008c7c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
10008c7c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
10008c7e:	280f      	cmp	r0, #15
10008c80:	d805      	bhi.n	10008c8e <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10008c82:	2280      	movs	r2, #128	; 0x80
10008c84:	0412      	lsls	r2, r2, #16
10008c86:	4b12      	ldr	r3, [pc, #72]	; (10008cd0 <gpio_enable_callback+0x54>)
10008c88:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
10008c8a:	2200      	movs	r2, #0
10008c8c:	e00c      	b.n	10008ca8 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
10008c8e:	281f      	cmp	r0, #31
10008c90:	d805      	bhi.n	10008c9e <gpio_enable_callback+0x22>
10008c92:	2280      	movs	r2, #128	; 0x80
10008c94:	0452      	lsls	r2, r2, #17
10008c96:	4b0e      	ldr	r3, [pc, #56]	; (10008cd0 <gpio_enable_callback+0x54>)
10008c98:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
10008c9a:	2201      	movs	r2, #1
10008c9c:	e004      	b.n	10008ca8 <gpio_enable_callback+0x2c>
10008c9e:	2280      	movs	r2, #128	; 0x80
10008ca0:	0492      	lsls	r2, r2, #18
10008ca2:	4b0b      	ldr	r3, [pc, #44]	; (10008cd0 <gpio_enable_callback+0x54>)
10008ca4:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
10008ca6:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
10008ca8:	230f      	movs	r3, #15
10008caa:	4018      	ands	r0, r3
10008cac:	2101      	movs	r1, #1
10008cae:	4081      	lsls	r1, r0
10008cb0:	4c08      	ldr	r4, [pc, #32]	; (10008cd4 <gpio_enable_callback+0x58>)
10008cb2:	00d5      	lsls	r5, r2, #3
10008cb4:	18ab      	adds	r3, r5, r2
10008cb6:	00db      	lsls	r3, r3, #3
10008cb8:	18e3      	adds	r3, r4, r3
10008cba:	3346      	adds	r3, #70	; 0x46
10008cbc:	8818      	ldrh	r0, [r3, #0]
10008cbe:	4308      	orrs	r0, r1
10008cc0:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
10008cc2:	18aa      	adds	r2, r5, r2
10008cc4:	00d2      	lsls	r2, r2, #3
10008cc6:	5913      	ldr	r3, [r2, r4]
10008cc8:	b289      	uxth	r1, r1
10008cca:	8419      	strh	r1, [r3, #32]
}
10008ccc:	bd30      	pop	{r4, r5, pc}
10008cce:	46c0      	nop			; (mov r8, r8)
10008cd0:	e000e100 	.word	0xe000e100
10008cd4:	10015d14 	.word	0x10015d14

10008cd8 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
10008cd8:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
10008cda:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
10008cdc:	280f      	cmp	r0, #15
10008cde:	d904      	bls.n	10008cea <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
10008ce0:	221f      	movs	r2, #31
10008ce2:	4282      	cmp	r2, r0
10008ce4:	415b      	adcs	r3, r3
10008ce6:	3a1d      	subs	r2, #29
10008ce8:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
10008cea:	220f      	movs	r2, #15
10008cec:	4010      	ands	r0, r2
10008cee:	2101      	movs	r1, #1
10008cf0:	4081      	lsls	r1, r0
10008cf2:	4c07      	ldr	r4, [pc, #28]	; (10008d10 <gpio_disable_callback+0x38>)
10008cf4:	00dd      	lsls	r5, r3, #3
10008cf6:	18ea      	adds	r2, r5, r3
10008cf8:	00d2      	lsls	r2, r2, #3
10008cfa:	18a2      	adds	r2, r4, r2
10008cfc:	3246      	adds	r2, #70	; 0x46
10008cfe:	8810      	ldrh	r0, [r2, #0]
10008d00:	4388      	bics	r0, r1
10008d02:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
10008d04:	18eb      	adds	r3, r5, r3
10008d06:	00db      	lsls	r3, r3, #3
10008d08:	591b      	ldr	r3, [r3, r4]
10008d0a:	b289      	uxth	r1, r1
10008d0c:	8499      	strh	r1, [r3, #36]	; 0x24
}
10008d0e:	bd30      	pop	{r4, r5, pc}
10008d10:	10015d14 	.word	0x10015d14

10008d14 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
10008d14:	b510      	push	{r4, lr}
10008d16:	4a11      	ldr	r2, [pc, #68]	; (10008d5c <gpio_init+0x48>)
10008d18:	0010      	movs	r0, r2
10008d1a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
10008d1c:	2100      	movs	r1, #0
10008d1e:	e007      	b.n	10008d30 <gpio_init+0x1c>
10008d20:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
10008d22:	4293      	cmp	r3, r2
10008d24:	d1fc      	bne.n	10008d20 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
10008d26:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
10008d28:	8011      	strh	r1, [r2, #0]
10008d2a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
10008d2c:	4282      	cmp	r2, r0
10008d2e:	d002      	beq.n	10008d36 <gpio_init+0x22>
10008d30:	0013      	movs	r3, r2
10008d32:	3b40      	subs	r3, #64	; 0x40
10008d34:	e7f4      	b.n	10008d20 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
10008d36:	4b0a      	ldr	r3, [pc, #40]	; (10008d60 <gpio_init+0x4c>)
10008d38:	4a0a      	ldr	r2, [pc, #40]	; (10008d64 <gpio_init+0x50>)
10008d3a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
10008d3c:	4a0a      	ldr	r2, [pc, #40]	; (10008d68 <gpio_init+0x54>)
10008d3e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
10008d40:	490a      	ldr	r1, [pc, #40]	; (10008d6c <gpio_init+0x58>)
10008d42:	2290      	movs	r2, #144	; 0x90
10008d44:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
10008d46:	490a      	ldr	r1, [pc, #40]	; (10008d70 <gpio_init+0x5c>)
10008d48:	2027      	movs	r0, #39	; 0x27
10008d4a:	4c0a      	ldr	r4, [pc, #40]	; (10008d74 <gpio_init+0x60>)
10008d4c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
10008d4e:	490a      	ldr	r1, [pc, #40]	; (10008d78 <gpio_init+0x64>)
10008d50:	2028      	movs	r0, #40	; 0x28
10008d52:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
10008d54:	4909      	ldr	r1, [pc, #36]	; (10008d7c <gpio_init+0x68>)
10008d56:	2029      	movs	r0, #41	; 0x29
10008d58:	47a0      	blx	r4
}
10008d5a:	bd10      	pop	{r4, pc}
10008d5c:	10015d58 	.word	0x10015d58
10008d60:	10015d14 	.word	0x10015d14
10008d64:	40010000 	.word	0x40010000
10008d68:	40011000 	.word	0x40011000
10008d6c:	40013000 	.word	0x40013000
10008d70:	100086fd 	.word	0x100086fd
10008d74:	100095d5 	.word	0x100095d5
10008d78:	10008761 	.word	0x10008761
10008d7c:	100087d1 	.word	0x100087d1

10008d80 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
10008d80:	2801      	cmp	r0, #1
10008d82:	d00d      	beq.n	10008da0 <system_clock_config+0x20>
10008d84:	2800      	cmp	r0, #0
10008d86:	d002      	beq.n	10008d8e <system_clock_config+0xe>
10008d88:	2802      	cmp	r0, #2
10008d8a:	d01c      	beq.n	10008dc6 <system_clock_config+0x46>
10008d8c:	e02e      	b.n	10008dec <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008d8e:	4a18      	ldr	r2, [pc, #96]	; (10008df0 <system_clock_config+0x70>)
10008d90:	6990      	ldr	r0, [r2, #24]
10008d92:	230c      	movs	r3, #12
10008d94:	4303      	orrs	r3, r0
10008d96:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
10008d98:	4a16      	ldr	r2, [pc, #88]	; (10008df4 <system_clock_config+0x74>)
10008d9a:	4b17      	ldr	r3, [pc, #92]	; (10008df8 <system_clock_config+0x78>)
10008d9c:	601a      	str	r2, [r3, #0]
			break;
10008d9e:	e01a      	b.n	10008dd6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008da0:	4b13      	ldr	r3, [pc, #76]	; (10008df0 <system_clock_config+0x70>)
10008da2:	6998      	ldr	r0, [r3, #24]
10008da4:	2208      	movs	r2, #8
10008da6:	4302      	orrs	r2, r0
10008da8:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008daa:	699a      	ldr	r2, [r3, #24]
10008dac:	2004      	movs	r0, #4
10008dae:	4382      	bics	r2, r0
10008db0:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
10008db2:	4a12      	ldr	r2, [pc, #72]	; (10008dfc <system_clock_config+0x7c>)
10008db4:	6853      	ldr	r3, [r2, #4]
10008db6:	2080      	movs	r0, #128	; 0x80
10008db8:	0300      	lsls	r0, r0, #12
10008dba:	4303      	orrs	r3, r0
10008dbc:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
10008dbe:	4a10      	ldr	r2, [pc, #64]	; (10008e00 <system_clock_config+0x80>)
10008dc0:	4b0d      	ldr	r3, [pc, #52]	; (10008df8 <system_clock_config+0x78>)
10008dc2:	601a      	str	r2, [r3, #0]
			break;
10008dc4:	e007      	b.n	10008dd6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008dc6:	4a0a      	ldr	r2, [pc, #40]	; (10008df0 <system_clock_config+0x70>)
10008dc8:	6993      	ldr	r3, [r2, #24]
10008dca:	200c      	movs	r0, #12
10008dcc:	4383      	bics	r3, r0
10008dce:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CONTROL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
10008dd0:	4a08      	ldr	r2, [pc, #32]	; (10008df4 <system_clock_config+0x74>)
10008dd2:	4b09      	ldr	r3, [pc, #36]	; (10008df8 <system_clock_config+0x78>)
10008dd4:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg &= \
10008dd6:	4b06      	ldr	r3, [pc, #24]	; (10008df0 <system_clock_config+0x70>)
10008dd8:	699a      	ldr	r2, [r3, #24]
10008dda:	2003      	movs	r0, #3
10008ddc:	4382      	bics	r2, r0
10008dde:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
10008de0:	699a      	ldr	r2, [r3, #24]
10008de2:	4001      	ands	r1, r0
10008de4:	4311      	orrs	r1, r2
10008de6:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
10008de8:	2000      	movs	r0, #0
10008dea:	e000      	b.n	10008dee <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CONTROL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
10008dec:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CONTROL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CONTROL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
10008dee:	4770      	bx	lr
10008df0:	4000b000 	.word	0x4000b000
10008df4:	018cba80 	.word	0x018cba80
10008df8:	10015dec 	.word	0x10015dec
10008dfc:	4000f000 	.word	0x4000f000
10008e00:	001e8480 	.word	0x001e8480

10008e04 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
10008e04:	4b01      	ldr	r3, [pc, #4]	; (10008e0c <system_clock_get_value+0x8>)
10008e06:	6818      	ldr	r0, [r3, #0]
}
10008e08:	4770      	bx	lr
10008e0a:	46c0      	nop			; (mov r8, r8)
10008e0c:	10015dec 	.word	0x10015dec

10008e10 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
10008e10:	b500      	push	{lr}
	switch (peripheral) {
10008e12:	2835      	cmp	r0, #53	; 0x35
10008e14:	d900      	bls.n	10008e18 <system_clock_peripheral_enable+0x8>
10008e16:	e1a2      	b.n	1000915e <system_clock_peripheral_enable+0x34e>
10008e18:	0080      	lsls	r0, r0, #2
10008e1a:	4bd2      	ldr	r3, [pc, #840]	; (10009164 <system_clock_peripheral_enable+0x354>)
10008e1c:	581b      	ldr	r3, [r3, r0]
10008e1e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e20:	4ad1      	ldr	r2, [pc, #836]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e22:	68d1      	ldr	r1, [r2, #12]
10008e24:	2302      	movs	r3, #2
10008e26:	430b      	orrs	r3, r1
10008e28:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e2a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPIFLASH_CLK_EN;
		break;
10008e2c:	e198      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e2e:	4ace      	ldr	r2, [pc, #824]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e30:	68d1      	ldr	r1, [r2, #12]
10008e32:	2304      	movs	r3, #4
10008e34:	430b      	orrs	r3, r1
10008e36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI0_CORE_CLK_EN;
		break;
10008e3a:	e191      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e3c:	4aca      	ldr	r2, [pc, #808]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e3e:	68d1      	ldr	r1, [r2, #12]
10008e40:	2308      	movs	r3, #8
10008e42:	430b      	orrs	r3, r1
10008e44:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_SPI1_CORE_CLK_EN;
		break;
10008e48:	e18a      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e4a:	4ac7      	ldr	r2, [pc, #796]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e4c:	68d1      	ldr	r1, [r2, #12]
10008e4e:	2310      	movs	r3, #16
10008e50:	430b      	orrs	r3, r1
10008e52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C0_CORE_CLK_EN;
		break;
10008e56:	e183      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e58:	4ac3      	ldr	r2, [pc, #780]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e5a:	68d1      	ldr	r1, [r2, #12]
10008e5c:	2320      	movs	r3, #32
10008e5e:	430b      	orrs	r3, r1
10008e60:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER_CLK_EN;
		break;
10008e64:	e17c      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e66:	4ac0      	ldr	r2, [pc, #768]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e68:	68d1      	ldr	r1, [r2, #12]
10008e6a:	2380      	movs	r3, #128	; 0x80
10008e6c:	430b      	orrs	r3, r1
10008e6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
10008e72:	e175      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e74:	4abc      	ldr	r2, [pc, #752]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e76:	68d3      	ldr	r3, [r2, #12]
10008e78:	2180      	movs	r1, #128	; 0x80
10008e7a:	0049      	lsls	r1, r1, #1
10008e7c:	430b      	orrs	r3, r1
10008e7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_COUNTER_0_CLK_EN;
		break;
10008e82:	e16d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e84:	4ab8      	ldr	r2, [pc, #736]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e86:	68d3      	ldr	r3, [r2, #12]
10008e88:	2180      	movs	r1, #128	; 0x80
10008e8a:	0109      	lsls	r1, r1, #4
10008e8c:	430b      	orrs	r3, r1
10008e8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008e90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_0_CLK_EN;
		break;
10008e92:	e165      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008e94:	4ab4      	ldr	r2, [pc, #720]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008e96:	68d3      	ldr	r3, [r2, #12]
10008e98:	2180      	movs	r1, #128	; 0x80
10008e9a:	0149      	lsls	r1, r1, #5
10008e9c:	430b      	orrs	r3, r1
10008e9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ea0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN;
		break;
10008ea2:	e15d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ea4:	4ab0      	ldr	r2, [pc, #704]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008ea6:	68d3      	ldr	r3, [r2, #12]
10008ea8:	2180      	movs	r1, #128	; 0x80
10008eaa:	0189      	lsls	r1, r1, #6
10008eac:	430b      	orrs	r3, r1
10008eae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008eb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN;
		break;
10008eb2:	e155      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008eb4:	4aac      	ldr	r2, [pc, #688]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008eb6:	68d3      	ldr	r3, [r2, #12]
10008eb8:	2180      	movs	r1, #128	; 0x80
10008eba:	01c9      	lsls	r1, r1, #7
10008ebc:	430b      	orrs	r3, r1
10008ebe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ec0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN;
		break;
10008ec2:	e14d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ec4:	4aa8      	ldr	r2, [pc, #672]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008ec6:	68d3      	ldr	r3, [r2, #12]
10008ec8:	2180      	movs	r1, #128	; 0x80
10008eca:	0209      	lsls	r1, r1, #8
10008ecc:	430b      	orrs	r3, r1
10008ece:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ed0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN;
		break;
10008ed2:	e145      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ed4:	4aa4      	ldr	r2, [pc, #656]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008ed6:	68d3      	ldr	r3, [r2, #12]
10008ed8:	2180      	movs	r1, #128	; 0x80
10008eda:	0249      	lsls	r1, r1, #9
10008edc:	430b      	orrs	r3, r1
10008ede:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ee0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN;
		break;
10008ee2:	e13d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ee4:	4aa0      	ldr	r2, [pc, #640]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008ee6:	68d3      	ldr	r3, [r2, #12]
10008ee8:	2180      	movs	r1, #128	; 0x80
10008eea:	0289      	lsls	r1, r1, #10
10008eec:	430b      	orrs	r3, r1
10008eee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ef0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
10008ef2:	e135      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008ef4:	4a9c      	ldr	r2, [pc, #624]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008ef6:	68d3      	ldr	r3, [r2, #12]
10008ef8:	2180      	movs	r1, #128	; 0x80
10008efa:	02c9      	lsls	r1, r1, #11
10008efc:	430b      	orrs	r3, r1
10008efe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
10008f02:	e12d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f04:	4a98      	ldr	r2, [pc, #608]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f06:	68d3      	ldr	r3, [r2, #12]
10008f08:	2180      	movs	r1, #128	; 0x80
10008f0a:	0309      	lsls	r1, r1, #12
10008f0c:	430b      	orrs	r3, r1
10008f0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
10008f12:	e125      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f14:	4a94      	ldr	r2, [pc, #592]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f16:	68d3      	ldr	r3, [r2, #12]
10008f18:	2180      	movs	r1, #128	; 0x80
10008f1a:	0349      	lsls	r1, r1, #13
10008f1c:	430b      	orrs	r3, r1
10008f1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
10008f22:	e11d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f24:	4a90      	ldr	r2, [pc, #576]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f26:	68d3      	ldr	r3, [r2, #12]
10008f28:	2180      	movs	r1, #128	; 0x80
10008f2a:	0389      	lsls	r1, r1, #14
10008f2c:	430b      	orrs	r3, r1
10008f2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
10008f32:	e115      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f34:	4a8c      	ldr	r2, [pc, #560]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f36:	68d3      	ldr	r3, [r2, #12]
10008f38:	2180      	movs	r1, #128	; 0x80
10008f3a:	03c9      	lsls	r1, r1, #15
10008f3c:	430b      	orrs	r3, r1
10008f3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
10008f42:	e10d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f44:	4a88      	ldr	r2, [pc, #544]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f46:	68d3      	ldr	r3, [r2, #12]
10008f48:	2180      	movs	r1, #128	; 0x80
10008f4a:	0409      	lsls	r1, r1, #16
10008f4c:	430b      	orrs	r3, r1
10008f4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
10008f52:	e105      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f54:	4a84      	ldr	r2, [pc, #528]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f56:	68d3      	ldr	r3, [r2, #12]
10008f58:	2180      	movs	r1, #128	; 0x80
10008f5a:	0449      	lsls	r1, r1, #17
10008f5c:	430b      	orrs	r3, r1
10008f5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
10008f62:	e0fd      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f64:	4a80      	ldr	r2, [pc, #512]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f66:	68d3      	ldr	r3, [r2, #12]
10008f68:	2180      	movs	r1, #128	; 0x80
10008f6a:	0489      	lsls	r1, r1, #18
10008f6c:	430b      	orrs	r3, r1
10008f6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
10008f72:	e0f5      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f74:	4a7c      	ldr	r2, [pc, #496]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f76:	68d3      	ldr	r3, [r2, #12]
10008f78:	2180      	movs	r1, #128	; 0x80
10008f7a:	04c9      	lsls	r1, r1, #19
10008f7c:	430b      	orrs	r3, r1
10008f7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_1_CLK_EN;
		break;
10008f82:	e0ed      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f84:	4a78      	ldr	r2, [pc, #480]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f86:	68d3      	ldr	r3, [r2, #12]
10008f88:	2180      	movs	r1, #128	; 0x80
10008f8a:	0509      	lsls	r1, r1, #20
10008f8c:	430b      	orrs	r3, r1
10008f8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008f90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_2_CLK_EN;
		break;
10008f92:	e0e5      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008f94:	4a74      	ldr	r2, [pc, #464]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008f96:	68d3      	ldr	r3, [r2, #12]
10008f98:	2180      	movs	r1, #128	; 0x80
10008f9a:	0549      	lsls	r1, r1, #21
10008f9c:	430b      	orrs	r3, r1
10008f9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC_3_CLK_EN;
		break;
10008fa2:	e0dd      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fa4:	4a70      	ldr	r2, [pc, #448]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008fa6:	68d3      	ldr	r3, [r2, #12]
10008fa8:	2180      	movs	r1, #128	; 0x80
10008faa:	0589      	lsls	r1, r1, #22
10008fac:	430b      	orrs	r3, r1
10008fae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN;
		break;
10008fb2:	e0d5      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
10008fb4:	4a6c      	ldr	r2, [pc, #432]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008fb6:	68d3      	ldr	r3, [r2, #12]
10008fb8:	2180      	movs	r1, #128	; 0x80
10008fba:	05c9      	lsls	r1, r1, #23
10008fbc:	430b      	orrs	r3, r1
10008fbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
10008fc2:	e0cd      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fc4:	4a68      	ldr	r2, [pc, #416]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008fc6:	6911      	ldr	r1, [r2, #16]
10008fc8:	2301      	movs	r3, #1
10008fca:	430b      	orrs	r3, r1
10008fcc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_1_CLK_EN;
		break;
10008fd0:	e0c6      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fd2:	4a65      	ldr	r2, [pc, #404]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008fd4:	6911      	ldr	r1, [r2, #16]
10008fd6:	2302      	movs	r3, #2
10008fd8:	430b      	orrs	r3, r1
10008fda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_2_CLK_EN;
		break;
10008fde:	e0bf      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fe0:	4a61      	ldr	r2, [pc, #388]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008fe2:	6911      	ldr	r1, [r2, #16]
10008fe4:	2304      	movs	r3, #4
10008fe6:	430b      	orrs	r3, r1
10008fe8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008fea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_3_CLK_EN;
		break;
10008fec:	e0b8      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008fee:	4a5e      	ldr	r2, [pc, #376]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008ff0:	6911      	ldr	r1, [r2, #16]
10008ff2:	2308      	movs	r3, #8
10008ff4:	430b      	orrs	r3, r1
10008ff6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10008ff8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN;
		break;
10008ffa:	e0b1      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10008ffc:	4a5a      	ldr	r2, [pc, #360]	; (10009168 <system_clock_peripheral_enable+0x358>)
10008ffe:	6911      	ldr	r1, [r2, #16]
10009000:	2310      	movs	r3, #16
10009002:	430b      	orrs	r3, r1
10009004:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009006:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN;
		break;
10009008:	e0aa      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000900a:	4a57      	ldr	r2, [pc, #348]	; (10009168 <system_clock_peripheral_enable+0x358>)
1000900c:	6911      	ldr	r1, [r2, #16]
1000900e:	2320      	movs	r3, #32
10009010:	430b      	orrs	r3, r1
10009012:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009014:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN;
		break;
10009016:	e0a3      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009018:	4a53      	ldr	r2, [pc, #332]	; (10009168 <system_clock_peripheral_enable+0x358>)
1000901a:	6911      	ldr	r1, [r2, #16]
1000901c:	2340      	movs	r3, #64	; 0x40
1000901e:	430b      	orrs	r3, r1
10009020:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009022:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_1_CLK_EN;
		break;
10009024:	e09c      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009026:	4a50      	ldr	r2, [pc, #320]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009028:	6911      	ldr	r1, [r2, #16]
1000902a:	2380      	movs	r3, #128	; 0x80
1000902c:	430b      	orrs	r3, r1
1000902e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009030:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_2_CLK_EN;
		break;
10009032:	e095      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009034:	4a4c      	ldr	r2, [pc, #304]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009036:	6913      	ldr	r3, [r2, #16]
10009038:	2180      	movs	r1, #128	; 0x80
1000903a:	0049      	lsls	r1, r1, #1
1000903c:	430b      	orrs	r3, r1
1000903e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009040:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_3_CLK_EN;
		break;
10009042:	e08d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009044:	4a48      	ldr	r2, [pc, #288]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009046:	6913      	ldr	r3, [r2, #16]
10009048:	2180      	movs	r1, #128	; 0x80
1000904a:	0089      	lsls	r1, r1, #2
1000904c:	430b      	orrs	r3, r1
1000904e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009050:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM_4_CLK_EN;
		break;
10009052:	e085      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009054:	4a44      	ldr	r2, [pc, #272]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009056:	6913      	ldr	r3, [r2, #16]
10009058:	2180      	movs	r1, #128	; 0x80
1000905a:	00c9      	lsls	r1, r1, #3
1000905c:	430b      	orrs	r3, r1
1000905e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009060:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
10009062:	e07d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009064:	4a40      	ldr	r2, [pc, #256]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009066:	6913      	ldr	r3, [r2, #16]
10009068:	2180      	movs	r1, #128	; 0x80
1000906a:	0109      	lsls	r1, r1, #4
1000906c:	430b      	orrs	r3, r1
1000906e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009070:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
10009072:	e075      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009074:	4a3c      	ldr	r2, [pc, #240]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009076:	6913      	ldr	r3, [r2, #16]
10009078:	2180      	movs	r1, #128	; 0x80
1000907a:	0149      	lsls	r1, r1, #5
1000907c:	430b      	orrs	r3, r1
1000907e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009080:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
10009082:	e06d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009084:	4a38      	ldr	r2, [pc, #224]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009086:	6913      	ldr	r3, [r2, #16]
10009088:	2180      	movs	r1, #128	; 0x80
1000908a:	0189      	lsls	r1, r1, #6
1000908c:	430b      	orrs	r3, r1
1000908e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009090:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
10009092:	e065      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009094:	4a34      	ldr	r2, [pc, #208]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009096:	6913      	ldr	r3, [r2, #16]
10009098:	2180      	movs	r1, #128	; 0x80
1000909a:	01c9      	lsls	r1, r1, #7
1000909c:	430b      	orrs	r3, r1
1000909e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_COUNTER_0_PGCLK_EN;
		break;
100090a2:	e05d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090a4:	4a30      	ldr	r2, [pc, #192]	; (10009168 <system_clock_peripheral_enable+0x358>)
100090a6:	6913      	ldr	r3, [r2, #16]
100090a8:	2180      	movs	r1, #128	; 0x80
100090aa:	0209      	lsls	r1, r1, #8
100090ac:	430b      	orrs	r3, r1
100090ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
100090b2:	e055      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090b4:	4a2c      	ldr	r2, [pc, #176]	; (10009168 <system_clock_peripheral_enable+0x358>)
100090b6:	6913      	ldr	r3, [r2, #16]
100090b8:	2180      	movs	r1, #128	; 0x80
100090ba:	0249      	lsls	r1, r1, #9
100090bc:	430b      	orrs	r3, r1
100090be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
100090c2:	e04d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090c4:	4a28      	ldr	r2, [pc, #160]	; (10009168 <system_clock_peripheral_enable+0x358>)
100090c6:	6913      	ldr	r3, [r2, #16]
100090c8:	2180      	movs	r1, #128	; 0x80
100090ca:	0289      	lsls	r1, r1, #10
100090cc:	430b      	orrs	r3, r1
100090ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
100090d2:	e045      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090d4:	4a24      	ldr	r2, [pc, #144]	; (10009168 <system_clock_peripheral_enable+0x358>)
100090d6:	6913      	ldr	r3, [r2, #16]
100090d8:	2180      	movs	r1, #128	; 0x80
100090da:	02c9      	lsls	r1, r1, #11
100090dc:	430b      	orrs	r3, r1
100090de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
100090e2:	e03d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090e4:	4a20      	ldr	r2, [pc, #128]	; (10009168 <system_clock_peripheral_enable+0x358>)
100090e6:	6913      	ldr	r3, [r2, #16]
100090e8:	2180      	movs	r1, #128	; 0x80
100090ea:	0309      	lsls	r1, r1, #12
100090ec:	430b      	orrs	r3, r1
100090ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100090f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
100090f2:	e035      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
100090f4:	4a1c      	ldr	r2, [pc, #112]	; (10009168 <system_clock_peripheral_enable+0x358>)
100090f6:	6913      	ldr	r3, [r2, #16]
100090f8:	2180      	movs	r1, #128	; 0x80
100090fa:	0349      	lsls	r1, r1, #13
100090fc:	430b      	orrs	r3, r1
100090fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009100:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
10009102:	e02d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009104:	4a18      	ldr	r2, [pc, #96]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009106:	6913      	ldr	r3, [r2, #16]
10009108:	2180      	movs	r1, #128	; 0x80
1000910a:	0389      	lsls	r1, r1, #14
1000910c:	430b      	orrs	r3, r1
1000910e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009110:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
10009112:	e025      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009114:	4a14      	ldr	r2, [pc, #80]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009116:	6913      	ldr	r3, [r2, #16]
10009118:	2180      	movs	r1, #128	; 0x80
1000911a:	03c9      	lsls	r1, r1, #15
1000911c:	430b      	orrs	r3, r1
1000911e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009120:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
10009122:	e01d      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
10009124:	4a10      	ldr	r2, [pc, #64]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009126:	6913      	ldr	r3, [r2, #16]
10009128:	2180      	movs	r1, #128	; 0x80
1000912a:	0409      	lsls	r1, r1, #16
1000912c:	430b      	orrs	r3, r1
1000912e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009130:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
10009132:	e015      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009134:	4a0c      	ldr	r2, [pc, #48]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009136:	7d11      	ldrb	r1, [r2, #20]
10009138:	2301      	movs	r3, #1
1000913a:	430b      	orrs	r3, r1
1000913c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000913e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_RXTX_SEQ_CLK_EN;
		break;
10009140:	e00e      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009142:	4a09      	ldr	r2, [pc, #36]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009144:	7d11      	ldrb	r1, [r2, #20]
10009146:	2302      	movs	r3, #2
10009148:	430b      	orrs	r3, r1
1000914a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000914c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_AHB_CLK_EN;
		break;
1000914e:	e007      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
10009150:	4a05      	ldr	r2, [pc, #20]	; (10009168 <system_clock_peripheral_enable+0x358>)
10009152:	7d11      	ldrb	r1, [r2, #20]
10009154:	2304      	movs	r3, #4
10009156:	430b      	orrs	r3, r1
10009158:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000915a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CONTROL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CONTROL_PERIPH_REGS_CLK_EN;
		break;
1000915c:	e000      	b.n	10009160 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000915e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
10009160:	bd00      	pop	{pc}
10009162:	46c0      	nop			; (mov r8, r8)
10009164:	10012e88 	.word	0x10012e88
10009168:	4000b000 	.word	0x4000b000

1000916c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000916c:	b500      	push	{lr}
	switch (peripheral) {
1000916e:	2843      	cmp	r0, #67	; 0x43
10009170:	d900      	bls.n	10009174 <system_peripheral_reset+0x8>
10009172:	e223      	b.n	100095bc <system_peripheral_reset+0x450>
10009174:	0080      	lsls	r0, r0, #2
10009176:	4be0      	ldr	r3, [pc, #896]	; (100094f8 <system_peripheral_reset+0x38c>)
10009178:	581b      	ldr	r3, [r3, r0]
1000917a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000917c:	4bdf      	ldr	r3, [pc, #892]	; (100094fc <system_peripheral_reset+0x390>)
1000917e:	6859      	ldr	r1, [r3, #4]
10009180:	2202      	movs	r2, #2
10009182:	4391      	bics	r1, r2
10009184:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009186:	6859      	ldr	r1, [r3, #4]
10009188:	430a      	orrs	r2, r1
1000918a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000918c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000918e:	e216      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009190:	4bda      	ldr	r3, [pc, #872]	; (100094fc <system_peripheral_reset+0x390>)
10009192:	6859      	ldr	r1, [r3, #4]
10009194:	2204      	movs	r2, #4
10009196:	4391      	bics	r1, r2
10009198:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000919a:	6859      	ldr	r1, [r3, #4]
1000919c:	430a      	orrs	r2, r1
1000919e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091a0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_SYS_RSTN;
		break;
100091a2:	e20c      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091a4:	4bd5      	ldr	r3, [pc, #852]	; (100094fc <system_peripheral_reset+0x390>)
100091a6:	6859      	ldr	r1, [r3, #4]
100091a8:	2208      	movs	r2, #8
100091aa:	4391      	bics	r1, r2
100091ac:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ae:	6859      	ldr	r1, [r3, #4]
100091b0:	430a      	orrs	r2, r1
100091b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091b4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPIFLASH_RSTN;
		break;
100091b6:	e202      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091b8:	4bd0      	ldr	r3, [pc, #832]	; (100094fc <system_peripheral_reset+0x390>)
100091ba:	6859      	ldr	r1, [r3, #4]
100091bc:	2210      	movs	r2, #16
100091be:	4391      	bics	r1, r2
100091c0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091c2:	6859      	ldr	r1, [r3, #4]
100091c4:	430a      	orrs	r2, r1
100091c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091c8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_CORE_RSTN;
		break;
100091ca:	e1f8      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091cc:	4bcb      	ldr	r3, [pc, #812]	; (100094fc <system_peripheral_reset+0x390>)
100091ce:	6859      	ldr	r1, [r3, #4]
100091d0:	2220      	movs	r2, #32
100091d2:	4391      	bics	r1, r2
100091d4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091d6:	6859      	ldr	r1, [r3, #4]
100091d8:	430a      	orrs	r2, r1
100091da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091dc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI0_IF_RSTN;
		break;
100091de:	e1ee      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091e0:	4bc6      	ldr	r3, [pc, #792]	; (100094fc <system_peripheral_reset+0x390>)
100091e2:	6859      	ldr	r1, [r3, #4]
100091e4:	2240      	movs	r2, #64	; 0x40
100091e6:	4391      	bics	r1, r2
100091e8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091ea:	6859      	ldr	r1, [r3, #4]
100091ec:	430a      	orrs	r2, r1
100091ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100091f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_CORE_RSTN;
		break;
100091f2:	e1e4      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100091f4:	4bc1      	ldr	r3, [pc, #772]	; (100094fc <system_peripheral_reset+0x390>)
100091f6:	6859      	ldr	r1, [r3, #4]
100091f8:	2280      	movs	r2, #128	; 0x80
100091fa:	4391      	bics	r1, r2
100091fc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100091fe:	6859      	ldr	r1, [r3, #4]
10009200:	430a      	orrs	r2, r1
10009202:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009204:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_SPI1_IF_RSTN;
		break;
10009206:	e1da      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009208:	4bbc      	ldr	r3, [pc, #752]	; (100094fc <system_peripheral_reset+0x390>)
1000920a:	6859      	ldr	r1, [r3, #4]
1000920c:	4abc      	ldr	r2, [pc, #752]	; (10009500 <system_peripheral_reset+0x394>)
1000920e:	400a      	ands	r2, r1
10009210:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009212:	685a      	ldr	r2, [r3, #4]
10009214:	2180      	movs	r1, #128	; 0x80
10009216:	0049      	lsls	r1, r1, #1
10009218:	430a      	orrs	r2, r1
1000921a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000921c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_CORE_RSTN;
		break;
1000921e:	e1ce      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009220:	4bb6      	ldr	r3, [pc, #728]	; (100094fc <system_peripheral_reset+0x390>)
10009222:	6859      	ldr	r1, [r3, #4]
10009224:	4ab7      	ldr	r2, [pc, #732]	; (10009504 <system_peripheral_reset+0x398>)
10009226:	400a      	ands	r2, r1
10009228:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000922a:	685a      	ldr	r2, [r3, #4]
1000922c:	2180      	movs	r1, #128	; 0x80
1000922e:	0089      	lsls	r1, r1, #2
10009230:	430a      	orrs	r2, r1
10009232:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009234:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CORTUS_I2C0_IF_RSTN;
		break;
10009236:	e1c2      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009238:	4bb0      	ldr	r3, [pc, #704]	; (100094fc <system_peripheral_reset+0x390>)
1000923a:	6859      	ldr	r1, [r3, #4]
1000923c:	4ab2      	ldr	r2, [pc, #712]	; (10009508 <system_peripheral_reset+0x39c>)
1000923e:	400a      	ands	r2, r1
10009240:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009242:	685a      	ldr	r2, [r3, #4]
10009244:	2180      	movs	r1, #128	; 0x80
10009246:	00c9      	lsls	r1, r1, #3
10009248:	430a      	orrs	r2, r1
1000924a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000924c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000924e:	e1b6      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009250:	4baa      	ldr	r3, [pc, #680]	; (100094fc <system_peripheral_reset+0x390>)
10009252:	6859      	ldr	r1, [r3, #4]
10009254:	4aad      	ldr	r2, [pc, #692]	; (1000950c <system_peripheral_reset+0x3a0>)
10009256:	400a      	ands	r2, r1
10009258:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000925a:	685a      	ldr	r2, [r3, #4]
1000925c:	2180      	movs	r1, #128	; 0x80
1000925e:	0109      	lsls	r1, r1, #4
10009260:	430a      	orrs	r2, r1
10009262:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009264:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_COUNTER_0_RSTN;
		break;
10009266:	e1aa      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009268:	4ba4      	ldr	r3, [pc, #656]	; (100094fc <system_peripheral_reset+0x390>)
1000926a:	6859      	ldr	r1, [r3, #4]
1000926c:	4aa8      	ldr	r2, [pc, #672]	; (10009510 <system_peripheral_reset+0x3a4>)
1000926e:	400a      	ands	r2, r1
10009270:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009272:	685a      	ldr	r2, [r3, #4]
10009274:	2180      	movs	r1, #128	; 0x80
10009276:	0149      	lsls	r1, r1, #5
10009278:	430a      	orrs	r2, r1
1000927a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000927c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_CORE_RSTN;
		break;
1000927e:	e19e      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009280:	4b9e      	ldr	r3, [pc, #632]	; (100094fc <system_peripheral_reset+0x390>)
10009282:	6859      	ldr	r1, [r3, #4]
10009284:	4aa3      	ldr	r2, [pc, #652]	; (10009514 <system_peripheral_reset+0x3a8>)
10009286:	400a      	ands	r2, r1
10009288:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000928a:	685a      	ldr	r2, [r3, #4]
1000928c:	2180      	movs	r1, #128	; 0x80
1000928e:	0189      	lsls	r1, r1, #6
10009290:	430a      	orrs	r2, r1
10009292:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009294:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_IF_RSTN;
		break;
10009296:	e192      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009298:	4b98      	ldr	r3, [pc, #608]	; (100094fc <system_peripheral_reset+0x390>)
1000929a:	6859      	ldr	r1, [r3, #4]
1000929c:	4a9e      	ldr	r2, [pc, #632]	; (10009518 <system_peripheral_reset+0x3ac>)
1000929e:	400a      	ands	r2, r1
100092a0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092a2:	685a      	ldr	r2, [r3, #4]
100092a4:	2180      	movs	r1, #128	; 0x80
100092a6:	01c9      	lsls	r1, r1, #7
100092a8:	430a      	orrs	r2, r1
100092aa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092ac:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_CORE_RSTN;
		break;
100092ae:	e186      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092b0:	4b92      	ldr	r3, [pc, #584]	; (100094fc <system_peripheral_reset+0x390>)
100092b2:	6859      	ldr	r1, [r3, #4]
100092b4:	4a99      	ldr	r2, [pc, #612]	; (1000951c <system_peripheral_reset+0x3b0>)
100092b6:	400a      	ands	r2, r1
100092b8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092ba:	685a      	ldr	r2, [r3, #4]
100092bc:	2180      	movs	r1, #128	; 0x80
100092be:	0209      	lsls	r1, r1, #8
100092c0:	430a      	orrs	r2, r1
100092c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092c4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART_1_IF_RSTN;
		break;
100092c6:	e17a      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092c8:	4b8c      	ldr	r3, [pc, #560]	; (100094fc <system_peripheral_reset+0x390>)
100092ca:	6859      	ldr	r1, [r3, #4]
100092cc:	4a94      	ldr	r2, [pc, #592]	; (10009520 <system_peripheral_reset+0x3b4>)
100092ce:	400a      	ands	r2, r1
100092d0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092d2:	685a      	ldr	r2, [r3, #4]
100092d4:	2180      	movs	r1, #128	; 0x80
100092d6:	0249      	lsls	r1, r1, #9
100092d8:	430a      	orrs	r2, r1
100092da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092dc:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_0_RSTN;
		break;
100092de:	e16e      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092e0:	4b86      	ldr	r3, [pc, #536]	; (100094fc <system_peripheral_reset+0x390>)
100092e2:	6859      	ldr	r1, [r3, #4]
100092e4:	4a8f      	ldr	r2, [pc, #572]	; (10009524 <system_peripheral_reset+0x3b8>)
100092e6:	400a      	ands	r2, r1
100092e8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100092ea:	685a      	ldr	r2, [r3, #4]
100092ec:	2180      	movs	r1, #128	; 0x80
100092ee:	0289      	lsls	r1, r1, #10
100092f0:	430a      	orrs	r2, r1
100092f2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100092f4:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WATCHDOG_1_RSTN;
		break;
100092f6:	e162      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100092f8:	4b80      	ldr	r3, [pc, #512]	; (100094fc <system_peripheral_reset+0x390>)
100092fa:	6859      	ldr	r1, [r3, #4]
100092fc:	4a8a      	ldr	r2, [pc, #552]	; (10009528 <system_peripheral_reset+0x3bc>)
100092fe:	400a      	ands	r2, r1
10009300:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009302:	685a      	ldr	r2, [r3, #4]
10009304:	2180      	movs	r1, #128	; 0x80
10009306:	02c9      	lsls	r1, r1, #11
10009308:	430a      	orrs	r2, r1
1000930a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000930c:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000930e:	e156      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009310:	4b7a      	ldr	r3, [pc, #488]	; (100094fc <system_peripheral_reset+0x390>)
10009312:	6859      	ldr	r1, [r3, #4]
10009314:	4a85      	ldr	r2, [pc, #532]	; (1000952c <system_peripheral_reset+0x3c0>)
10009316:	400a      	ands	r2, r1
10009318:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000931a:	685a      	ldr	r2, [r3, #4]
1000931c:	2180      	movs	r1, #128	; 0x80
1000931e:	0309      	lsls	r1, r1, #12
10009320:	430a      	orrs	r2, r1
10009322:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009324:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
10009326:	e14a      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009328:	4b74      	ldr	r3, [pc, #464]	; (100094fc <system_peripheral_reset+0x390>)
1000932a:	6859      	ldr	r1, [r3, #4]
1000932c:	4a80      	ldr	r2, [pc, #512]	; (10009530 <system_peripheral_reset+0x3c4>)
1000932e:	400a      	ands	r2, r1
10009330:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009332:	685a      	ldr	r2, [r3, #4]
10009334:	2180      	movs	r1, #128	; 0x80
10009336:	0349      	lsls	r1, r1, #13
10009338:	430a      	orrs	r2, r1
1000933a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000933c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000933e:	e13e      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009340:	4b6e      	ldr	r3, [pc, #440]	; (100094fc <system_peripheral_reset+0x390>)
10009342:	6859      	ldr	r1, [r3, #4]
10009344:	4a7b      	ldr	r2, [pc, #492]	; (10009534 <system_peripheral_reset+0x3c8>)
10009346:	400a      	ands	r2, r1
10009348:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000934a:	685a      	ldr	r2, [r3, #4]
1000934c:	2180      	movs	r1, #128	; 0x80
1000934e:	0389      	lsls	r1, r1, #14
10009350:	430a      	orrs	r2, r1
10009352:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009354:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
10009356:	e132      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009358:	4b68      	ldr	r3, [pc, #416]	; (100094fc <system_peripheral_reset+0x390>)
1000935a:	6859      	ldr	r1, [r3, #4]
1000935c:	4a76      	ldr	r2, [pc, #472]	; (10009538 <system_peripheral_reset+0x3cc>)
1000935e:	400a      	ands	r2, r1
10009360:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009362:	685a      	ldr	r2, [r3, #4]
10009364:	2180      	movs	r1, #128	; 0x80
10009366:	03c9      	lsls	r1, r1, #15
10009368:	430a      	orrs	r2, r1
1000936a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000936c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000936e:	e126      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009370:	4b62      	ldr	r3, [pc, #392]	; (100094fc <system_peripheral_reset+0x390>)
10009372:	6859      	ldr	r1, [r3, #4]
10009374:	4a71      	ldr	r2, [pc, #452]	; (1000953c <system_peripheral_reset+0x3d0>)
10009376:	400a      	ands	r2, r1
10009378:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000937a:	685a      	ldr	r2, [r3, #4]
1000937c:	2180      	movs	r1, #128	; 0x80
1000937e:	0409      	lsls	r1, r1, #16
10009380:	430a      	orrs	r2, r1
10009382:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009384:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
10009386:	e11a      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009388:	4b5c      	ldr	r3, [pc, #368]	; (100094fc <system_peripheral_reset+0x390>)
1000938a:	6859      	ldr	r1, [r3, #4]
1000938c:	4a6c      	ldr	r2, [pc, #432]	; (10009540 <system_peripheral_reset+0x3d4>)
1000938e:	400a      	ands	r2, r1
10009390:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009392:	685a      	ldr	r2, [r3, #4]
10009394:	2180      	movs	r1, #128	; 0x80
10009396:	0449      	lsls	r1, r1, #17
10009398:	430a      	orrs	r2, r1
1000939a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000939c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000939e:	e10e      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093a0:	4b56      	ldr	r3, [pc, #344]	; (100094fc <system_peripheral_reset+0x390>)
100093a2:	6859      	ldr	r1, [r3, #4]
100093a4:	4a67      	ldr	r2, [pc, #412]	; (10009544 <system_peripheral_reset+0x3d8>)
100093a6:	400a      	ands	r2, r1
100093a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093aa:	685a      	ldr	r2, [r3, #4]
100093ac:	2180      	movs	r1, #128	; 0x80
100093ae:	0489      	lsls	r1, r1, #18
100093b0:	430a      	orrs	r2, r1
100093b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093b4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_1_RSTN;
		break;
100093b6:	e102      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093b8:	4b50      	ldr	r3, [pc, #320]	; (100094fc <system_peripheral_reset+0x390>)
100093ba:	6859      	ldr	r1, [r3, #4]
100093bc:	4a62      	ldr	r2, [pc, #392]	; (10009548 <system_peripheral_reset+0x3dc>)
100093be:	400a      	ands	r2, r1
100093c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093c2:	685a      	ldr	r2, [r3, #4]
100093c4:	2180      	movs	r1, #128	; 0x80
100093c6:	04c9      	lsls	r1, r1, #19
100093c8:	430a      	orrs	r2, r1
100093ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093cc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_2_RSTN;
		break;
100093ce:	e0f6      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093d0:	4b4a      	ldr	r3, [pc, #296]	; (100094fc <system_peripheral_reset+0x390>)
100093d2:	6859      	ldr	r1, [r3, #4]
100093d4:	4a5d      	ldr	r2, [pc, #372]	; (1000954c <system_peripheral_reset+0x3e0>)
100093d6:	400a      	ands	r2, r1
100093d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093da:	685a      	ldr	r2, [r3, #4]
100093dc:	2180      	movs	r1, #128	; 0x80
100093de:	0509      	lsls	r1, r1, #20
100093e0:	430a      	orrs	r2, r1
100093e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093e4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC_3_RSTN;
		break;
100093e6:	e0ea      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
100093e8:	4b44      	ldr	r3, [pc, #272]	; (100094fc <system_peripheral_reset+0x390>)
100093ea:	6859      	ldr	r1, [r3, #4]
100093ec:	4a58      	ldr	r2, [pc, #352]	; (10009550 <system_peripheral_reset+0x3e4>)
100093ee:	400a      	ands	r2, r1
100093f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
100093f2:	685a      	ldr	r2, [r3, #4]
100093f4:	2180      	movs	r1, #128	; 0x80
100093f6:	0549      	lsls	r1, r1, #21
100093f8:	430a      	orrs	r2, r1
100093fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100093fc:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_1_RSTN;
		break;
100093fe:	e0de      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009400:	4b3e      	ldr	r3, [pc, #248]	; (100094fc <system_peripheral_reset+0x390>)
10009402:	6859      	ldr	r1, [r3, #4]
10009404:	4a53      	ldr	r2, [pc, #332]	; (10009554 <system_peripheral_reset+0x3e8>)
10009406:	400a      	ands	r2, r1
10009408:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000940a:	685a      	ldr	r2, [r3, #4]
1000940c:	2180      	movs	r1, #128	; 0x80
1000940e:	0589      	lsls	r1, r1, #22
10009410:	430a      	orrs	r2, r1
10009412:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009414:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_2_RSTN;
		break;
10009416:	e0d2      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009418:	4b38      	ldr	r3, [pc, #224]	; (100094fc <system_peripheral_reset+0x390>)
1000941a:	6859      	ldr	r1, [r3, #4]
1000941c:	4a4e      	ldr	r2, [pc, #312]	; (10009558 <system_peripheral_reset+0x3ec>)
1000941e:	400a      	ands	r2, r1
10009420:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
10009422:	685a      	ldr	r2, [r3, #4]
10009424:	2180      	movs	r1, #128	; 0x80
10009426:	05c9      	lsls	r1, r1, #23
10009428:	430a      	orrs	r2, r1
1000942a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000942c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_3_RSTN;
		break;
1000942e:	e0c6      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
10009430:	4a32      	ldr	r2, [pc, #200]	; (100094fc <system_peripheral_reset+0x390>)
10009432:	6853      	ldr	r3, [r2, #4]
10009434:	005b      	lsls	r3, r3, #1
10009436:	085b      	lsrs	r3, r3, #1
10009438:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000943a:	6853      	ldr	r3, [r2, #4]
1000943c:	2180      	movs	r1, #128	; 0x80
1000943e:	0609      	lsls	r1, r1, #24
10009440:	430b      	orrs	r3, r1
10009442:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009444:	2000      	movs	r0, #0
		case PERIPHERAL_PWM4:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM_4_RSTN;
		break;
10009446:	e0ba      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009448:	4b2c      	ldr	r3, [pc, #176]	; (100094fc <system_peripheral_reset+0x390>)
1000944a:	891a      	ldrh	r2, [r3, #8]
1000944c:	2101      	movs	r1, #1
1000944e:	438a      	bics	r2, r1
10009450:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009452:	8919      	ldrh	r1, [r3, #8]
10009454:	2201      	movs	r2, #1
10009456:	430a      	orrs	r2, r1
10009458:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000945a:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER_RSTN;
		break;
1000945c:	e0af      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000945e:	4b27      	ldr	r3, [pc, #156]	; (100094fc <system_peripheral_reset+0x390>)
10009460:	891a      	ldrh	r2, [r3, #8]
10009462:	2102      	movs	r1, #2
10009464:	438a      	bics	r2, r1
10009466:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009468:	8919      	ldrh	r1, [r3, #8]
1000946a:	2202      	movs	r2, #2
1000946c:	430a      	orrs	r2, r1
1000946e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009470:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_CORE_RSTN;
		break;
10009472:	e0a4      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009474:	4b21      	ldr	r3, [pc, #132]	; (100094fc <system_peripheral_reset+0x390>)
10009476:	891a      	ldrh	r2, [r3, #8]
10009478:	2104      	movs	r1, #4
1000947a:	438a      	bics	r2, r1
1000947c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000947e:	8919      	ldrh	r1, [r3, #8]
10009480:	2204      	movs	r2, #4
10009482:	430a      	orrs	r2, r1
10009484:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009486:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_I2C1_IF_RSTN;
		break;
10009488:	e099      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000948a:	4b1c      	ldr	r3, [pc, #112]	; (100094fc <system_peripheral_reset+0x390>)
1000948c:	891a      	ldrh	r2, [r3, #8]
1000948e:	2108      	movs	r1, #8
10009490:	438a      	bics	r2, r1
10009492:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009494:	8919      	ldrh	r1, [r3, #8]
10009496:	2208      	movs	r2, #8
10009498:	430a      	orrs	r2, r1
1000949a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000949c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000949e:	e08e      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094a0:	4b16      	ldr	r3, [pc, #88]	; (100094fc <system_peripheral_reset+0x390>)
100094a2:	891a      	ldrh	r2, [r3, #8]
100094a4:	2110      	movs	r1, #16
100094a6:	438a      	bics	r2, r1
100094a8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094aa:	8919      	ldrh	r1, [r3, #8]
100094ac:	2210      	movs	r2, #16
100094ae:	430a      	orrs	r2, r1
100094b0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094b2:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
100094b4:	e083      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094b6:	4b11      	ldr	r3, [pc, #68]	; (100094fc <system_peripheral_reset+0x390>)
100094b8:	891a      	ldrh	r2, [r3, #8]
100094ba:	2120      	movs	r1, #32
100094bc:	438a      	bics	r2, r1
100094be:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094c0:	8919      	ldrh	r1, [r3, #8]
100094c2:	2220      	movs	r2, #32
100094c4:	430a      	orrs	r2, r1
100094c6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094c8:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
100094ca:	e078      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094cc:	4b0b      	ldr	r3, [pc, #44]	; (100094fc <system_peripheral_reset+0x390>)
100094ce:	891a      	ldrh	r2, [r3, #8]
100094d0:	2140      	movs	r1, #64	; 0x40
100094d2:	438a      	bics	r2, r1
100094d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094d6:	8919      	ldrh	r1, [r3, #8]
100094d8:	2240      	movs	r2, #64	; 0x40
100094da:	430a      	orrs	r2, r1
100094dc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094de:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
100094e0:	e06d      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100094e2:	4b06      	ldr	r3, [pc, #24]	; (100094fc <system_peripheral_reset+0x390>)
100094e4:	891a      	ldrh	r2, [r3, #8]
100094e6:	2180      	movs	r1, #128	; 0x80
100094e8:	438a      	bics	r2, r1
100094ea:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100094ec:	8919      	ldrh	r1, [r3, #8]
100094ee:	2280      	movs	r2, #128	; 0x80
100094f0:	430a      	orrs	r2, r1
100094f2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100094f4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_CLK_RSTN;
		break;
100094f6:	e062      	b.n	100095be <system_peripheral_reset+0x452>
100094f8:	10012f60 	.word	0x10012f60
100094fc:	4000b000 	.word	0x4000b000
10009500:	fffffeff 	.word	0xfffffeff
10009504:	fffffdff 	.word	0xfffffdff
10009508:	fffffbff 	.word	0xfffffbff
1000950c:	fffff7ff 	.word	0xfffff7ff
10009510:	ffffefff 	.word	0xffffefff
10009514:	ffffdfff 	.word	0xffffdfff
10009518:	ffffbfff 	.word	0xffffbfff
1000951c:	ffff7fff 	.word	0xffff7fff
10009520:	fffeffff 	.word	0xfffeffff
10009524:	fffdffff 	.word	0xfffdffff
10009528:	fffbffff 	.word	0xfffbffff
1000952c:	fff7ffff 	.word	0xfff7ffff
10009530:	ffefffff 	.word	0xffefffff
10009534:	ffdfffff 	.word	0xffdfffff
10009538:	ffbfffff 	.word	0xffbfffff
1000953c:	ff7fffff 	.word	0xff7fffff
10009540:	feffffff 	.word	0xfeffffff
10009544:	fdffffff 	.word	0xfdffffff
10009548:	fbffffff 	.word	0xfbffffff
1000954c:	f7ffffff 	.word	0xf7ffffff
10009550:	efffffff 	.word	0xefffffff
10009554:	dfffffff 	.word	0xdfffffff
10009558:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000955c:	4b18      	ldr	r3, [pc, #96]	; (100095c0 <system_peripheral_reset+0x454>)
1000955e:	8919      	ldrh	r1, [r3, #8]
10009560:	4a18      	ldr	r2, [pc, #96]	; (100095c4 <system_peripheral_reset+0x458>)
10009562:	400a      	ands	r2, r1
10009564:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009566:	8919      	ldrh	r1, [r3, #8]
10009568:	2280      	movs	r2, #128	; 0x80
1000956a:	0052      	lsls	r2, r2, #1
1000956c:	430a      	orrs	r2, r1
1000956e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009570:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_CLK_RSTN;
		break;
10009572:	e024      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
10009574:	4b12      	ldr	r3, [pc, #72]	; (100095c0 <system_peripheral_reset+0x454>)
10009576:	8919      	ldrh	r1, [r3, #8]
10009578:	4a13      	ldr	r2, [pc, #76]	; (100095c8 <system_peripheral_reset+0x45c>)
1000957a:	400a      	ands	r2, r1
1000957c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000957e:	8919      	ldrh	r1, [r3, #8]
10009580:	2280      	movs	r2, #128	; 0x80
10009582:	0092      	lsls	r2, r2, #2
10009584:	430a      	orrs	r2, r1
10009586:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
10009588:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000958a:	e018      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000958c:	4b0c      	ldr	r3, [pc, #48]	; (100095c0 <system_peripheral_reset+0x454>)
1000958e:	8919      	ldrh	r1, [r3, #8]
10009590:	4a0e      	ldr	r2, [pc, #56]	; (100095cc <system_peripheral_reset+0x460>)
10009592:	400a      	ands	r2, r1
10009594:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
10009596:	8919      	ldrh	r1, [r3, #8]
10009598:	2280      	movs	r2, #128	; 0x80
1000959a:	00d2      	lsls	r2, r2, #3
1000959c:	430a      	orrs	r2, r1
1000959e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095a0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_CORTUS_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
100095a2:	e00c      	b.n	100095be <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
100095a4:	4b06      	ldr	r3, [pc, #24]	; (100095c0 <system_peripheral_reset+0x454>)
100095a6:	8919      	ldrh	r1, [r3, #8]
100095a8:	4a09      	ldr	r2, [pc, #36]	; (100095d0 <system_peripheral_reset+0x464>)
100095aa:	400a      	ands	r2, r1
100095ac:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
100095ae:	8919      	ldrh	r1, [r3, #8]
100095b0:	2280      	movs	r2, #128	; 0x80
100095b2:	0112      	lsls	r2, r2, #4
100095b4:	430a      	orrs	r2, r1
100095b6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
100095b8:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DMA_CONTROLLER_RSTN;
		break;
100095ba:	e000      	b.n	100095be <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
100095bc:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
100095be:	bd00      	pop	{pc}
100095c0:	4000b000 	.word	0x4000b000
100095c4:	fffffeff 	.word	0xfffffeff
100095c8:	fffffdff 	.word	0xfffffdff
100095cc:	fffffbff 	.word	0xfffffbff
100095d0:	fffff7ff 	.word	0xfffff7ff

100095d4 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
100095d4:	2380      	movs	r3, #128	; 0x80
100095d6:	04db      	lsls	r3, r3, #19
100095d8:	469c      	mov	ip, r3
100095da:	4460      	add	r0, ip
100095dc:	0080      	lsls	r0, r0, #2
100095de:	6001      	str	r1, [r0, #0]
}
100095e0:	4770      	bx	lr
100095e2:	46c0      	nop			; (mov r8, r8)

100095e4 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
100095e4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
100095e6:	4b20      	ldr	r3, [pc, #128]	; (10009668 <uart_rx0_isr_handler+0x84>)
100095e8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100095ea:	6823      	ldr	r3, [r4, #0]
100095ec:	7d1d      	ldrb	r5, [r3, #20]
100095ee:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
100095f0:	066a      	lsls	r2, r5, #25
100095f2:	d513      	bpl.n	1000961c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
100095f4:	211e      	movs	r1, #30
100095f6:	2222      	movs	r2, #34	; 0x22
100095f8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
100095fa:	7e1a      	ldrb	r2, [r3, #24]
100095fc:	3123      	adds	r1, #35	; 0x23
100095fe:	438a      	bics	r2, r1
10009600:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009602:	2321      	movs	r3, #33	; 0x21
10009604:	5ce3      	ldrb	r3, [r4, r3]
10009606:	071b      	lsls	r3, r3, #28
10009608:	d506      	bpl.n	10009618 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000960a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000960c:	5ce3      	ldrb	r3, [r4, r3]
1000960e:	071b      	lsls	r3, r3, #28
10009610:	d502      	bpl.n	10009618 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009612:	0020      	movs	r0, r4
10009614:	6923      	ldr	r3, [r4, #16]
10009616:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
10009618:	6823      	ldr	r3, [r4, #0]
1000961a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000961c:	07eb      	lsls	r3, r5, #31
1000961e:	d522      	bpl.n	10009666 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009620:	6823      	ldr	r3, [r4, #0]
10009622:	7c1b      	ldrb	r3, [r3, #16]
10009624:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
10009626:	6962      	ldr	r2, [r4, #20]
10009628:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000962a:	6963      	ldr	r3, [r4, #20]
1000962c:	3301      	adds	r3, #1
1000962e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009630:	8ba3      	ldrh	r3, [r4, #28]
10009632:	3b01      	subs	r3, #1
10009634:	b29b      	uxth	r3, r3
10009636:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
10009638:	8ba3      	ldrh	r3, [r4, #28]
1000963a:	b29b      	uxth	r3, r3
1000963c:	2b00      	cmp	r3, #0
1000963e:	d112      	bne.n	10009666 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009640:	3321      	adds	r3, #33	; 0x21
10009642:	5ce3      	ldrb	r3, [r4, r3]
10009644:	075b      	lsls	r3, r3, #29
10009646:	d50e      	bpl.n	10009666 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
10009648:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000964a:	5ce3      	ldrb	r3, [r4, r3]
1000964c:	075b      	lsls	r3, r3, #29
1000964e:	d50a      	bpl.n	10009666 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009650:	2200      	movs	r2, #0
10009652:	2322      	movs	r3, #34	; 0x22
10009654:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
10009656:	6822      	ldr	r2, [r4, #0]
10009658:	7e13      	ldrb	r3, [r2, #24]
1000965a:	2101      	movs	r1, #1
1000965c:	438b      	bics	r3, r1
1000965e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009660:	68e3      	ldr	r3, [r4, #12]
10009662:	0020      	movs	r0, r4
10009664:	4798      	blx	r3
			}
		}
	}
}
10009666:	bd70      	pop	{r4, r5, r6, pc}
10009668:	10015df0 	.word	0x10015df0

1000966c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000966c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000966e:	4b21      	ldr	r3, [pc, #132]	; (100096f4 <uart_tx0_isr_handler+0x88>)
10009670:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009672:	6823      	ldr	r3, [r4, #0]
10009674:	791d      	ldrb	r5, [r3, #4]
10009676:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
10009678:	07ea      	lsls	r2, r5, #31
1000967a:	d517      	bpl.n	100096ac <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000967c:	69a2      	ldr	r2, [r4, #24]
1000967e:	7811      	ldrb	r1, [r2, #0]
10009680:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009682:	3201      	adds	r2, #1
10009684:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
10009686:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
10009688:	8be3      	ldrh	r3, [r4, #30]
1000968a:	3b01      	subs	r3, #1
1000968c:	b29b      	uxth	r3, r3
1000968e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
10009690:	8be3      	ldrh	r3, [r4, #30]
10009692:	b29b      	uxth	r3, r3
10009694:	2b00      	cmp	r3, #0
10009696:	d109      	bne.n	100096ac <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
10009698:	6822      	ldr	r2, [r4, #0]
1000969a:	7a13      	ldrb	r3, [r2, #8]
1000969c:	2101      	movs	r1, #1
1000969e:	438b      	bics	r3, r1
100096a0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100096a2:	6822      	ldr	r2, [r4, #0]
100096a4:	7a11      	ldrb	r1, [r2, #8]
100096a6:	2310      	movs	r3, #16
100096a8:	430b      	orrs	r3, r1
100096aa:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100096ac:	06eb      	lsls	r3, r5, #27
100096ae:	d512      	bpl.n	100096d6 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096b0:	2321      	movs	r3, #33	; 0x21
100096b2:	5ce3      	ldrb	r3, [r4, r3]
100096b4:	07db      	lsls	r3, r3, #31
100096b6:	d50e      	bpl.n	100096d6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100096b8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100096ba:	5ce3      	ldrb	r3, [r4, r3]
100096bc:	07db      	lsls	r3, r3, #31
100096be:	d50a      	bpl.n	100096d6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100096c0:	2200      	movs	r2, #0
100096c2:	2322      	movs	r3, #34	; 0x22
100096c4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100096c6:	6822      	ldr	r2, [r4, #0]
100096c8:	7a13      	ldrb	r3, [r2, #8]
100096ca:	2110      	movs	r1, #16
100096cc:	438b      	bics	r3, r1
100096ce:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100096d0:	0020      	movs	r0, r4
100096d2:	6863      	ldr	r3, [r4, #4]
100096d4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100096d6:	06ab      	lsls	r3, r5, #26
100096d8:	d50a      	bpl.n	100096f0 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100096da:	2321      	movs	r3, #33	; 0x21
100096dc:	5ce3      	ldrb	r3, [r4, r3]
100096de:	079b      	lsls	r3, r3, #30
100096e0:	d506      	bpl.n	100096f0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100096e2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100096e4:	5ce3      	ldrb	r3, [r4, r3]
100096e6:	079b      	lsls	r3, r3, #30
100096e8:	d502      	bpl.n	100096f0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
100096ea:	68a3      	ldr	r3, [r4, #8]
100096ec:	0020      	movs	r0, r4
100096ee:	4798      	blx	r3
		}

	}
}
100096f0:	bd70      	pop	{r4, r5, r6, pc}
100096f2:	46c0      	nop			; (mov r8, r8)
100096f4:	10015df0 	.word	0x10015df0

100096f8 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
100096f8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
100096fa:	4b20      	ldr	r3, [pc, #128]	; (1000977c <uart_rx1_isr_handler+0x84>)
100096fc:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
100096fe:	6823      	ldr	r3, [r4, #0]
10009700:	7d1d      	ldrb	r5, [r3, #20]
10009702:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
10009704:	066a      	lsls	r2, r5, #25
10009706:	d513      	bpl.n	10009730 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
10009708:	211e      	movs	r1, #30
1000970a:	2222      	movs	r2, #34	; 0x22
1000970c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000970e:	7e1a      	ldrb	r2, [r3, #24]
10009710:	3123      	adds	r1, #35	; 0x23
10009712:	438a      	bics	r2, r1
10009714:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009716:	2321      	movs	r3, #33	; 0x21
10009718:	5ce3      	ldrb	r3, [r4, r3]
1000971a:	071b      	lsls	r3, r3, #28
1000971c:	d506      	bpl.n	1000972c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000971e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
10009720:	5ce3      	ldrb	r3, [r4, r3]
10009722:	071b      	lsls	r3, r3, #28
10009724:	d502      	bpl.n	1000972c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
10009726:	0020      	movs	r0, r4
10009728:	6923      	ldr	r3, [r4, #16]
1000972a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000972c:	6823      	ldr	r3, [r4, #0]
1000972e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009730:	07eb      	lsls	r3, r5, #31
10009732:	d522      	bpl.n	1000977a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
10009734:	6823      	ldr	r3, [r4, #0]
10009736:	7c1b      	ldrb	r3, [r3, #16]
10009738:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000973a:	6962      	ldr	r2, [r4, #20]
1000973c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000973e:	6963      	ldr	r3, [r4, #20]
10009740:	3301      	adds	r3, #1
10009742:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
10009744:	8ba3      	ldrh	r3, [r4, #28]
10009746:	3b01      	subs	r3, #1
10009748:	b29b      	uxth	r3, r3
1000974a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000974c:	8ba3      	ldrh	r3, [r4, #28]
1000974e:	b29b      	uxth	r3, r3
10009750:	2b00      	cmp	r3, #0
10009752:	d112      	bne.n	1000977a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
10009754:	3321      	adds	r3, #33	; 0x21
10009756:	5ce3      	ldrb	r3, [r4, r3]
10009758:	075b      	lsls	r3, r3, #29
1000975a:	d50e      	bpl.n	1000977a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000975c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000975e:	5ce3      	ldrb	r3, [r4, r3]
10009760:	075b      	lsls	r3, r3, #29
10009762:	d50a      	bpl.n	1000977a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
10009764:	2200      	movs	r2, #0
10009766:	2322      	movs	r3, #34	; 0x22
10009768:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000976a:	6822      	ldr	r2, [r4, #0]
1000976c:	7e13      	ldrb	r3, [r2, #24]
1000976e:	2101      	movs	r1, #1
10009770:	438b      	bics	r3, r1
10009772:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
10009774:	68e3      	ldr	r3, [r4, #12]
10009776:	0020      	movs	r0, r4
10009778:	4798      	blx	r3
			}
		}
	}
}
1000977a:	bd70      	pop	{r4, r5, r6, pc}
1000977c:	10015df0 	.word	0x10015df0

10009780 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
10009780:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
10009782:	4b21      	ldr	r3, [pc, #132]	; (10009808 <uart_tx1_isr_handler+0x88>)
10009784:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
10009786:	6823      	ldr	r3, [r4, #0]
10009788:	791d      	ldrb	r5, [r3, #4]
1000978a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000978c:	07ea      	lsls	r2, r5, #31
1000978e:	d517      	bpl.n	100097c0 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
10009790:	69a2      	ldr	r2, [r4, #24]
10009792:	7811      	ldrb	r1, [r2, #0]
10009794:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
10009796:	3201      	adds	r2, #1
10009798:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000979a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000979c:	8be3      	ldrh	r3, [r4, #30]
1000979e:	3b01      	subs	r3, #1
100097a0:	b29b      	uxth	r3, r3
100097a2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
100097a4:	8be3      	ldrh	r3, [r4, #30]
100097a6:	b29b      	uxth	r3, r3
100097a8:	2b00      	cmp	r3, #0
100097aa:	d109      	bne.n	100097c0 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
100097ac:	6822      	ldr	r2, [r4, #0]
100097ae:	7a13      	ldrb	r3, [r2, #8]
100097b0:	2101      	movs	r1, #1
100097b2:	438b      	bics	r3, r1
100097b4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
100097b6:	6822      	ldr	r2, [r4, #0]
100097b8:	7a11      	ldrb	r1, [r2, #8]
100097ba:	2310      	movs	r3, #16
100097bc:	430b      	orrs	r3, r1
100097be:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
100097c0:	06eb      	lsls	r3, r5, #27
100097c2:	d512      	bpl.n	100097ea <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100097c4:	2321      	movs	r3, #33	; 0x21
100097c6:	5ce3      	ldrb	r3, [r4, r3]
100097c8:	07db      	lsls	r3, r3, #31
100097ca:	d50e      	bpl.n	100097ea <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
100097cc:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
100097ce:	5ce3      	ldrb	r3, [r4, r3]
100097d0:	07db      	lsls	r3, r3, #31
100097d2:	d50a      	bpl.n	100097ea <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
100097d4:	2200      	movs	r2, #0
100097d6:	2322      	movs	r3, #34	; 0x22
100097d8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
100097da:	6822      	ldr	r2, [r4, #0]
100097dc:	7a13      	ldrb	r3, [r2, #8]
100097de:	2110      	movs	r1, #16
100097e0:	438b      	bics	r3, r1
100097e2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
100097e4:	0020      	movs	r0, r4
100097e6:	6863      	ldr	r3, [r4, #4]
100097e8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
100097ea:	06ab      	lsls	r3, r5, #26
100097ec:	d50a      	bpl.n	10009804 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100097ee:	2321      	movs	r3, #33	; 0x21
100097f0:	5ce3      	ldrb	r3, [r4, r3]
100097f2:	079b      	lsls	r3, r3, #30
100097f4:	d506      	bpl.n	10009804 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
100097f6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
100097f8:	5ce3      	ldrb	r3, [r4, r3]
100097fa:	079b      	lsls	r3, r3, #30
100097fc:	d502      	bpl.n	10009804 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
100097fe:	68a3      	ldr	r3, [r4, #8]
10009800:	0020      	movs	r0, r4
10009802:	4798      	blx	r3
		}

	}
}
10009804:	bd70      	pop	{r4, r5, r6, pc}
10009806:	46c0      	nop			; (mov r8, r8)
10009808:	10015df0 	.word	0x10015df0

1000980c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000980c:	23e1      	movs	r3, #225	; 0xe1
1000980e:	025b      	lsls	r3, r3, #9
10009810:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
10009812:	2300      	movs	r3, #0
10009814:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
10009816:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
10009818:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000981a:	71c3      	strb	r3, [r0, #7]
	config->pin_number_pad[0] = PIN_LP_GPIO_2_MUX2_UART0_RXD;
1000981c:	3302      	adds	r3, #2
1000981e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3_MUX2_UART0_TXD;
10009820:	2203      	movs	r2, #3
10009822:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4_MUX2_UART0_CTS;
10009824:	3201      	adds	r2, #1
10009826:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5_MUX2_UART0_RTS;
10009828:	3201      	adds	r2, #1
1000982a:	6142      	str	r2, [r0, #20]
	
	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_MUX2_UART0_RXD;
1000982c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_MUX2_UART0_TXD;
1000982e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_MUX2_UART0_CTS;
10009830:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_MUX2_UART0_RTS;
10009832:	6243      	str	r3, [r0, #36]	; 0x24
}
10009834:	4770      	bx	lr
10009836:	46c0      	nop			; (mov r8, r8)

10009838 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000983a:	464f      	mov	r7, r9
1000983c:	4646      	mov	r6, r8
1000983e:	b4c0      	push	{r6, r7}
10009840:	0005      	movs	r5, r0
10009842:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
10009844:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
10009846:	2300      	movs	r3, #0
10009848:	6043      	str	r3, [r0, #4]
1000984a:	6083      	str	r3, [r0, #8]
1000984c:	60c3      	str	r3, [r0, #12]
1000984e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
10009850:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
10009852:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
10009854:	2200      	movs	r2, #0
10009856:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
10009858:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000985a:	3320      	adds	r3, #32
1000985c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000985e:	3301      	adds	r3, #1
10009860:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
10009862:	3301      	adds	r3, #1
10009864:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
10009866:	4b55      	ldr	r3, [pc, #340]	; (100099bc <uart_init+0x184>)
10009868:	4299      	cmp	r1, r3
1000986a:	d118      	bne.n	1000989e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000986c:	2009      	movs	r0, #9
1000986e:	4c54      	ldr	r4, [pc, #336]	; (100099c0 <uart_init+0x188>)
10009870:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
10009872:	200a      	movs	r0, #10
10009874:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
10009876:	2009      	movs	r0, #9
10009878:	4c52      	ldr	r4, [pc, #328]	; (100099c4 <uart_init+0x18c>)
1000987a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000987c:	200a      	movs	r0, #10
1000987e:	47a0      	blx	r4
		_uart_instances[0] = module;
10009880:	4b51      	ldr	r3, [pc, #324]	; (100099c8 <uart_init+0x190>)
10009882:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
10009884:	4951      	ldr	r1, [pc, #324]	; (100099cc <uart_init+0x194>)
10009886:	2010      	movs	r0, #16
10009888:	4c51      	ldr	r4, [pc, #324]	; (100099d0 <uart_init+0x198>)
1000988a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000988c:	4951      	ldr	r1, [pc, #324]	; (100099d4 <uart_init+0x19c>)
1000988e:	2011      	movs	r0, #17
10009890:	47a0      	blx	r4
10009892:	4b51      	ldr	r3, [pc, #324]	; (100099d8 <uart_init+0x1a0>)
10009894:	2201      	movs	r2, #1
10009896:	601a      	str	r2, [r3, #0]
10009898:	3201      	adds	r2, #1
1000989a:	601a      	str	r2, [r3, #0]
1000989c:	e01a      	b.n	100098d4 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000989e:	4b4f      	ldr	r3, [pc, #316]	; (100099dc <uart_init+0x1a4>)
100098a0:	4299      	cmp	r1, r3
100098a2:	d117      	bne.n	100098d4 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
100098a4:	200b      	movs	r0, #11
100098a6:	4c46      	ldr	r4, [pc, #280]	; (100099c0 <uart_init+0x188>)
100098a8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
100098aa:	200c      	movs	r0, #12
100098ac:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
100098ae:	200b      	movs	r0, #11
100098b0:	4c44      	ldr	r4, [pc, #272]	; (100099c4 <uart_init+0x18c>)
100098b2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
100098b4:	200c      	movs	r0, #12
100098b6:	47a0      	blx	r4
		_uart_instances[1] = module;
100098b8:	4b43      	ldr	r3, [pc, #268]	; (100099c8 <uart_init+0x190>)
100098ba:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
100098bc:	4948      	ldr	r1, [pc, #288]	; (100099e0 <uart_init+0x1a8>)
100098be:	2012      	movs	r0, #18
100098c0:	4c43      	ldr	r4, [pc, #268]	; (100099d0 <uart_init+0x198>)
100098c2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
100098c4:	4947      	ldr	r1, [pc, #284]	; (100099e4 <uart_init+0x1ac>)
100098c6:	2013      	movs	r0, #19
100098c8:	47a0      	blx	r4
100098ca:	4b43      	ldr	r3, [pc, #268]	; (100099d8 <uart_init+0x1a0>)
100098cc:	2204      	movs	r2, #4
100098ce:	601a      	str	r2, [r3, #0]
100098d0:	3204      	adds	r2, #4
100098d2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100098d4:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
100098d6:	2204      	movs	r2, #4
100098d8:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
100098da:	2b00      	cmp	r3, #0
100098dc:	d152      	bne.n	10009984 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
100098de:	3302      	adds	r3, #2
100098e0:	4698      	mov	r8, r3
100098e2:	e04f      	b.n	10009984 <uart_init+0x14c>
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
100098e4:	8a31      	ldrh	r1, [r6, #16]
100098e6:	ce01      	ldmia	r6!, {r0}
100098e8:	b2c0      	uxtb	r0, r0
100098ea:	47c8      	blx	r9
	if(config->flow_control) {
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
100098ec:	3401      	adds	r4, #1
100098ee:	b2e4      	uxtb	r4, r4
100098f0:	4544      	cmp	r4, r8
100098f2:	d3f7      	bcc.n	100098e4 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
100098f4:	682b      	ldr	r3, [r5, #0]
100098f6:	7d1a      	ldrb	r2, [r3, #20]
100098f8:	07d2      	lsls	r2, r2, #31
100098fa:	d504      	bpl.n	10009906 <uart_init+0xce>
100098fc:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
100098fe:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
10009900:	7d1a      	ldrb	r2, [r3, #20]
10009902:	420a      	tst	r2, r1
10009904:	d1fb      	bne.n	100098fe <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
10009906:	2100      	movs	r1, #0
10009908:	2220      	movs	r2, #32
1000990a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000990c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_UART_CONFIGURATION_CTS_ENABLE_1;
1000990e:	1e59      	subs	r1, r3, #1
10009910:	418b      	sbcs	r3, r1
10009912:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
10009914:	793b      	ldrb	r3, [r7, #4]
10009916:	797a      	ldrb	r2, [r7, #5]
10009918:	4313      	orrs	r3, r2
1000991a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000991c:	79ba      	ldrb	r2, [r7, #6]
1000991e:	2a02      	cmp	r2, #2
10009920:	d00d      	beq.n	1000993e <uart_init+0x106>
10009922:	b2d1      	uxtb	r1, r2
10009924:	2902      	cmp	r1, #2
10009926:	d802      	bhi.n	1000992e <uart_init+0xf6>
10009928:	2a01      	cmp	r2, #1
1000992a:	d005      	beq.n	10009938 <uart_init+0x100>
1000992c:	e00f      	b.n	1000994e <uart_init+0x116>
1000992e:	2a03      	cmp	r2, #3
10009930:	d008      	beq.n	10009944 <uart_init+0x10c>
10009932:	2a04      	cmp	r2, #4
10009934:	d009      	beq.n	1000994a <uart_init+0x112>
10009936:	e00a      	b.n	1000994e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
10009938:	2202      	movs	r2, #2
1000993a:	4313      	orrs	r3, r2
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000993c:	e007      	b.n	1000994e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_1;
1000993e:	2206      	movs	r2, #6
10009940:	4313      	orrs	r3, r2
			break;
10009942:	e004      	b.n	1000994e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_2;
10009944:	220a      	movs	r2, #10
10009946:	4313      	orrs	r3, r2
			break;
10009948:	e001      	b.n	1000994e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_UART_CONFIGURATION_PARITY_MODE_3;
1000994a:	220e      	movs	r2, #14
1000994c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000994e:	2220      	movs	r2, #32
10009950:	6829      	ldr	r1, [r5, #0]
10009952:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
10009954:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
10009956:	4b24      	ldr	r3, [pc, #144]	; (100099e8 <uart_init+0x1b0>)
10009958:	4798      	blx	r3
1000995a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000995c:	0031      	movs	r1, r6
1000995e:	4b23      	ldr	r3, [pc, #140]	; (100099ec <uart_init+0x1b4>)
10009960:	4798      	blx	r3
10009962:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
10009964:	0400      	lsls	r0, r0, #16
10009966:	0c00      	lsrs	r0, r0, #16
10009968:	4370      	muls	r0, r6
1000996a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000996c:	0931      	lsrs	r1, r6, #4
1000996e:	4288      	cmp	r0, r1
10009970:	d906      	bls.n	10009980 <uart_init+0x148>
10009972:	2300      	movs	r3, #0
		i++;
10009974:	3301      	adds	r3, #1
10009976:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
10009978:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000997a:	4288      	cmp	r0, r1
1000997c:	d8fa      	bhi.n	10009974 <uart_init+0x13c>
1000997e:	e007      	b.n	10009990 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
10009980:	2300      	movs	r3, #0
10009982:	e005      	b.n	10009990 <uart_init+0x158>
10009984:	003e      	movs	r6, r7
10009986:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
10009988:	2400      	movs	r4, #0
		index = 4;
	} else {
		index = 2;
	}
	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000998a:	4b19      	ldr	r3, [pc, #100]	; (100099f0 <uart_init+0x1b8>)
1000998c:	4699      	mov	r9, r3
1000998e:	e7a9      	b.n	100098e4 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_UART_CLOCK_SOURCE_CLOCK_SELECT_0;
10009990:	2100      	movs	r1, #0
10009992:	2028      	movs	r0, #40	; 0x28
10009994:	682c      	ldr	r4, [r5, #0]
10009996:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
10009998:	3301      	adds	r3, #1
1000999a:	071b      	lsls	r3, r3, #28
1000999c:	0f5b      	lsrs	r3, r3, #29
1000999e:	00d2      	lsls	r2, r2, #3
100099a0:	4313      	orrs	r3, r2
100099a2:	b29b      	uxth	r3, r3
100099a4:	682a      	ldr	r2, [r5, #0]
100099a6:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
100099a8:	682b      	ldr	r3, [r5, #0]
100099aa:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
100099ac:	682b      	ldr	r3, [r5, #0]
100099ae:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
100099b0:	2000      	movs	r0, #0
100099b2:	bc0c      	pop	{r2, r3}
100099b4:	4690      	mov	r8, r2
100099b6:	4699      	mov	r9, r3
100099b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100099ba:	46c0      	nop			; (mov r8, r8)
100099bc:	40004000 	.word	0x40004000
100099c0:	1000916d 	.word	0x1000916d
100099c4:	10008e11 	.word	0x10008e11
100099c8:	10015df0 	.word	0x10015df0
100099cc:	100095e5 	.word	0x100095e5
100099d0:	100095d5 	.word	0x100095d5
100099d4:	1000966d 	.word	0x1000966d
100099d8:	e000e100 	.word	0xe000e100
100099dc:	40005000 	.word	0x40005000
100099e0:	100096f9 	.word	0x100096f9
100099e4:	10009781 	.word	0x10009781
100099e8:	10008e05 	.word	0x10008e05
100099ec:	100103dd 	.word	0x100103dd
100099f0:	10008a61 	.word	0x10008a61

100099f4 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
100099f4:	6802      	ldr	r2, [r0, #0]
100099f6:	2001      	movs	r0, #1
100099f8:	7913      	ldrb	r3, [r2, #4]
100099fa:	4203      	tst	r3, r0
100099fc:	d0fc      	beq.n	100099f8 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
100099fe:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
10009a00:	2000      	movs	r0, #0
10009a02:	4770      	bx	lr

10009a04 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
10009a04:	6802      	ldr	r2, [r0, #0]
10009a06:	2001      	movs	r0, #1
10009a08:	7d13      	ldrb	r3, [r2, #20]
10009a0a:	4203      	tst	r3, r0
10009a0c:	d0fc      	beq.n	10009a08 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
10009a0e:	7c13      	ldrb	r3, [r2, #16]
10009a10:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
10009a12:	2000      	movs	r0, #0
10009a14:	4770      	bx	lr
10009a16:	46c0      	nop			; (mov r8, r8)

10009a18 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009a18:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
10009a1a:	2a00      	cmp	r2, #0
10009a1c:	d00d      	beq.n	10009a3a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
10009a1e:	330b      	adds	r3, #11
10009a20:	5cc3      	ldrb	r3, [r0, r3]
10009a22:	b2db      	uxtb	r3, r3
10009a24:	2b05      	cmp	r3, #5
10009a26:	d008      	beq.n	10009a3a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
10009a28:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
10009a2a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
10009a2c:	2205      	movs	r2, #5
10009a2e:	2322      	movs	r3, #34	; 0x22
10009a30:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009a32:	6803      	ldr	r3, [r0, #0]
10009a34:	3a04      	subs	r2, #4
10009a36:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
10009a38:	2300      	movs	r3, #0
}
10009a3a:	0018      	movs	r0, r3
10009a3c:	4770      	bx	lr
10009a3e:	46c0      	nop			; (mov r8, r8)

10009a40 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
10009a40:	0093      	lsls	r3, r2, #2
10009a42:	18c3      	adds	r3, r0, r3
10009a44:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
10009a46:	2120      	movs	r1, #32
10009a48:	2301      	movs	r3, #1
10009a4a:	4093      	lsls	r3, r2
10009a4c:	5c42      	ldrb	r2, [r0, r1]
10009a4e:	4313      	orrs	r3, r2
10009a50:	5443      	strb	r3, [r0, r1]
}
10009a52:	4770      	bx	lr

10009a54 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009a54:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
10009a56:	2221      	movs	r2, #33	; 0x21
10009a58:	2301      	movs	r3, #1
10009a5a:	408b      	lsls	r3, r1
10009a5c:	5c84      	ldrb	r4, [r0, r2]
10009a5e:	4323      	orrs	r3, r4
10009a60:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
10009a62:	2901      	cmp	r1, #1
10009a64:	d104      	bne.n	10009a70 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009a66:	6802      	ldr	r2, [r0, #0]
10009a68:	7a11      	ldrb	r1, [r2, #8]
10009a6a:	2320      	movs	r3, #32
10009a6c:	430b      	orrs	r3, r1
10009a6e:	7213      	strb	r3, [r2, #8]
	}
}
10009a70:	bd10      	pop	{r4, pc}
10009a72:	46c0      	nop			; (mov r8, r8)

10009a74 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
10009a74:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
10009a76:	2201      	movs	r2, #1
10009a78:	408a      	lsls	r2, r1
10009a7a:	2421      	movs	r4, #33	; 0x21
10009a7c:	5d03      	ldrb	r3, [r0, r4]
10009a7e:	4393      	bics	r3, r2
10009a80:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
10009a82:	2901      	cmp	r1, #1
10009a84:	d104      	bne.n	10009a90 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
10009a86:	6802      	ldr	r2, [r0, #0]
10009a88:	7a13      	ldrb	r3, [r2, #8]
10009a8a:	311f      	adds	r1, #31
10009a8c:	438b      	bics	r3, r1
10009a8e:	7213      	strb	r3, [r2, #8]
	}

}
10009a90:	bd10      	pop	{r4, pc}
10009a92:	46c0      	nop			; (mov r8, r8)

10009a94 <uart_enable_receive_dma>:
{
	/* Sanity check arguments */
	Assert(module);

	/* DMA need the interrupt signal to trigger */
	module->hw->RX_INTERRUPT_MASK.reg |= UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
10009a94:	6802      	ldr	r2, [r0, #0]
10009a96:	7e11      	ldrb	r1, [r2, #24]
10009a98:	2301      	movs	r3, #1
10009a9a:	430b      	orrs	r3, r1
10009a9c:	7613      	strb	r3, [r2, #24]

	/* Disable NVIC to avoid trigger the CPU interrupt */
	if (module->hw == UART0) {
10009a9e:	6803      	ldr	r3, [r0, #0]
10009aa0:	4a07      	ldr	r2, [pc, #28]	; (10009ac0 <uart_enable_receive_dma+0x2c>)
10009aa2:	4293      	cmp	r3, r2
10009aa4:	d104      	bne.n	10009ab0 <uart_enable_receive_dma+0x1c>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009aa6:	2102      	movs	r1, #2
10009aa8:	2380      	movs	r3, #128	; 0x80
10009aaa:	4a06      	ldr	r2, [pc, #24]	; (10009ac4 <uart_enable_receive_dma+0x30>)
10009aac:	50d1      	str	r1, [r2, r3]
10009aae:	e006      	b.n	10009abe <uart_enable_receive_dma+0x2a>
		NVIC_DisableIRQ(UART0_TX_IRQn);
	} else if (module->hw == UART1) {
10009ab0:	4a05      	ldr	r2, [pc, #20]	; (10009ac8 <uart_enable_receive_dma+0x34>)
10009ab2:	4293      	cmp	r3, r2
10009ab4:	d103      	bne.n	10009abe <uart_enable_receive_dma+0x2a>
10009ab6:	2108      	movs	r1, #8
10009ab8:	2380      	movs	r3, #128	; 0x80
10009aba:	4a02      	ldr	r2, [pc, #8]	; (10009ac4 <uart_enable_receive_dma+0x30>)
10009abc:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(UART1_TX_IRQn);
	}
}
10009abe:	4770      	bx	lr
10009ac0:	40004000 	.word	0x40004000
10009ac4:	e000e100 	.word	0xe000e100
10009ac8:	40005000 	.word	0x40005000

10009acc <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
10009acc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ace:	4647      	mov	r7, r8
10009ad0:	b480      	push	{r7}
10009ad2:	000c      	movs	r4, r1
10009ad4:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
10009ad6:	2800      	cmp	r0, #0
10009ad8:	d10d      	bne.n	10009af6 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
10009ada:	2a00      	cmp	r2, #0
10009adc:	dd0e      	ble.n	10009afc <_read+0x30>
10009ade:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
10009ae0:	4e08      	ldr	r6, [pc, #32]	; (10009b04 <_read+0x38>)
10009ae2:	4d09      	ldr	r5, [pc, #36]	; (10009b08 <_read+0x3c>)
10009ae4:	6830      	ldr	r0, [r6, #0]
10009ae6:	0021      	movs	r1, r4
10009ae8:	682b      	ldr	r3, [r5, #0]
10009aea:	4798      	blx	r3
		ptr++;
10009aec:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
10009aee:	42a7      	cmp	r7, r4
10009af0:	d1f8      	bne.n	10009ae4 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
10009af2:	4640      	mov	r0, r8
10009af4:	e003      	b.n	10009afe <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
10009af6:	2001      	movs	r0, #1
10009af8:	4240      	negs	r0, r0
10009afa:	e000      	b.n	10009afe <_read+0x32>
	}

	for (; len > 0; --len) {
10009afc:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
10009afe:	bc04      	pop	{r2}
10009b00:	4690      	mov	r8, r2
10009b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b04:	10015e00 	.word	0x10015e00
10009b08:	10015df8 	.word	0x10015df8

10009b0c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
10009b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b0e:	4647      	mov	r7, r8
10009b10:	b480      	push	{r7}
10009b12:	000e      	movs	r6, r1
10009b14:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
10009b16:	3801      	subs	r0, #1
10009b18:	2802      	cmp	r0, #2
10009b1a:	d811      	bhi.n	10009b40 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
10009b1c:	2a00      	cmp	r2, #0
10009b1e:	d012      	beq.n	10009b46 <_write+0x3a>
10009b20:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
10009b22:	4b0c      	ldr	r3, [pc, #48]	; (10009b54 <_write+0x48>)
10009b24:	4698      	mov	r8, r3
10009b26:	4f0c      	ldr	r7, [pc, #48]	; (10009b58 <_write+0x4c>)
10009b28:	4643      	mov	r3, r8
10009b2a:	6818      	ldr	r0, [r3, #0]
10009b2c:	5d31      	ldrb	r1, [r6, r4]
10009b2e:	683b      	ldr	r3, [r7, #0]
10009b30:	4798      	blx	r3
10009b32:	2800      	cmp	r0, #0
10009b34:	db09      	blt.n	10009b4a <_write+0x3e>
			return -1;
		}
		++nChars;
10009b36:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
10009b38:	42a5      	cmp	r5, r4
10009b3a:	d1f5      	bne.n	10009b28 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
10009b3c:	0020      	movs	r0, r4
10009b3e:	e006      	b.n	10009b4e <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
10009b40:	2001      	movs	r0, #1
10009b42:	4240      	negs	r0, r0
10009b44:	e003      	b.n	10009b4e <_write+0x42>
	}

	for (; len != 0; --len) {
10009b46:	2000      	movs	r0, #0
10009b48:	e001      	b.n	10009b4e <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
10009b4a:	2001      	movs	r0, #1
10009b4c:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
10009b4e:	bc04      	pop	{r2}
10009b50:	4690      	mov	r8, r2
10009b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b54:	10015e00 	.word	0x10015e00
10009b58:	10015dfc 	.word	0x10015dfc

10009b5c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
10009b5c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
10009b5e:	4a06      	ldr	r2, [pc, #24]	; (10009b78 <_sbrk+0x1c>)
10009b60:	6812      	ldr	r2, [r2, #0]
10009b62:	2a00      	cmp	r2, #0
10009b64:	d102      	bne.n	10009b6c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10009b66:	4905      	ldr	r1, [pc, #20]	; (10009b7c <_sbrk+0x20>)
10009b68:	4a03      	ldr	r2, [pc, #12]	; (10009b78 <_sbrk+0x1c>)
10009b6a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
10009b6c:	4a02      	ldr	r2, [pc, #8]	; (10009b78 <_sbrk+0x1c>)
10009b6e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10009b70:	18c3      	adds	r3, r0, r3
10009b72:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10009b74:	4770      	bx	lr
10009b76:	46c0      	nop			; (mov r8, r8)
10009b78:	10014258 	.word	0x10014258
10009b7c:	10017b50 	.word	0x10017b50

10009b80 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10009b80:	2001      	movs	r0, #1
10009b82:	4240      	negs	r0, r0
10009b84:	4770      	bx	lr
10009b86:	46c0      	nop			; (mov r8, r8)

10009b88 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10009b88:	2380      	movs	r3, #128	; 0x80
10009b8a:	019b      	lsls	r3, r3, #6
10009b8c:	604b      	str	r3, [r1, #4]

	return 0;
}
10009b8e:	2000      	movs	r0, #0
10009b90:	4770      	bx	lr
10009b92:	46c0      	nop			; (mov r8, r8)

10009b94 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10009b94:	2001      	movs	r0, #1
10009b96:	4770      	bx	lr

10009b98 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10009b98:	2000      	movs	r0, #0
10009b9a:	4770      	bx	lr

10009b9c <hr_sensor_disconnect_event_handler>:
at_ble_status_t hr_sensor_disconnect_event_handler(
		void *disconnect)
{
	ALL_UNUSED(disconnect);   
	return AT_BLE_SUCCESS;
}
10009b9c:	2000      	movs	r0, #0
10009b9e:	4770      	bx	lr

10009ba0 <hr_sensor_notification_cfm_handler>:
		DBG_LOG_DEV("Notification confirmation successful");
	} else { 
		DBG_LOG_DEV("Notification confirmation failure");
	}
	return AT_BLE_SUCCESS;
}
10009ba0:	2000      	movs	r0, #0
10009ba2:	4770      	bx	lr

10009ba4 <hr_sensor_connected_state_handler>:
 *  @param[in] at_ble_connected_t which has connection handle and the peer
 *device address
 */
at_ble_status_t hr_sensor_connected_state_handler(
							void *params)
{
10009ba4:	b510      	push	{r4, lr}
10009ba6:	b086      	sub	sp, #24
10009ba8:	0001      	movs	r1, r0
	at_ble_connected_t conn_params;
	memcpy(&conn_params,params,sizeof(at_ble_connected_t));
10009baa:	ac01      	add	r4, sp, #4
10009bac:	2212      	movs	r2, #18
10009bae:	0020      	movs	r0, r4
10009bb0:	4b03      	ldr	r3, [pc, #12]	; (10009bc0 <hr_sensor_connected_state_handler+0x1c>)
10009bb2:	4798      	blx	r3
	connection_handle = (at_ble_handle_t)conn_params.handle;
10009bb4:	8922      	ldrh	r2, [r4, #8]
10009bb6:	4b03      	ldr	r3, [pc, #12]	; (10009bc4 <hr_sensor_connected_state_handler+0x20>)
10009bb8:	801a      	strh	r2, [r3, #0]
	return AT_BLE_SUCCESS;
}
10009bba:	2000      	movs	r0, #0
10009bbc:	b006      	add	sp, #24
10009bbe:	bd10      	pop	{r4, pc}
10009bc0:	10011c63 	.word	0x10011c63
10009bc4:	10015ed0 	.word	0x10015ed0

10009bc8 <hr_sensor_char_write_request>:
/** @brief hr_sensor_char_write_request handles the write request for heart rate 
 *  control point characteristic.
 *  @param[in]	at_ble_characteristic_write_request_t parameters containing the value written
 */
at_ble_status_t hr_sensor_char_write_request(void * params)
{
10009bc8:	b580      	push	{r7, lr}
10009bca:	4f16      	ldr	r7, [pc, #88]	; (10009c24 <hr_sensor_char_write_request+0x5c>)
10009bcc:	44bd      	add	sp, r7
10009bce:	0001      	movs	r1, r0
	at_ble_characteristic_write_request_t request;
	at_ble_status_t status;
	
	memcpy(&request,params,sizeof(at_ble_characteristic_write_request_t));
10009bd0:	2282      	movs	r2, #130	; 0x82
10009bd2:	0092      	lsls	r2, r2, #2
10009bd4:	4668      	mov	r0, sp
10009bd6:	4b14      	ldr	r3, [pc, #80]	; (10009c28 <hr_sensor_char_write_request+0x60>)
10009bd8:	4798      	blx	r3
	if (request.char_handle == hr_service_handler.serv_chars[2].char_val_handle) {
10009bda:	466b      	mov	r3, sp
10009bdc:	885a      	ldrh	r2, [r3, #2]
10009bde:	238c      	movs	r3, #140	; 0x8c
10009be0:	4912      	ldr	r1, [pc, #72]	; (10009c2c <hr_sensor_char_write_request+0x64>)
10009be2:	5acb      	ldrh	r3, [r1, r3]
10009be4:	429a      	cmp	r2, r3
10009be6:	d118      	bne.n	10009c1a <hr_sensor_char_write_request+0x52>
			if (request.value[0] == HR_CONTROL_POINT_RESET_VAL) {
10009be8:	466b      	mov	r3, sp
10009bea:	7a1b      	ldrb	r3, [r3, #8]
10009bec:	2b01      	cmp	r3, #1
10009bee:	d110      	bne.n	10009c12 <hr_sensor_char_write_request+0x4a>
				status = at_ble_write_authorize_reply(&request,AT_BLE_SUCCESS);
10009bf0:	2100      	movs	r1, #0
10009bf2:	4668      	mov	r0, sp
10009bf4:	4b0e      	ldr	r3, [pc, #56]	; (10009c30 <hr_sensor_char_write_request+0x68>)
10009bf6:	4798      	blx	r3
				if (status != AT_BLE_SUCCESS) {
10009bf8:	2800      	cmp	r0, #0
10009bfa:	d006      	beq.n	10009c0a <hr_sensor_char_write_request+0x42>
					DBG_LOG("at_ble_write_authorize_reply failed");
10009bfc:	480d      	ldr	r0, [pc, #52]	; (10009c34 <hr_sensor_char_write_request+0x6c>)
10009bfe:	4b0e      	ldr	r3, [pc, #56]	; (10009c38 <hr_sensor_char_write_request+0x70>)
10009c00:	4798      	blx	r3
10009c02:	480e      	ldr	r0, [pc, #56]	; (10009c3c <hr_sensor_char_write_request+0x74>)
10009c04:	4b0e      	ldr	r3, [pc, #56]	; (10009c40 <hr_sensor_char_write_request+0x78>)
10009c06:	4798      	blx	r3
10009c08:	e007      	b.n	10009c1a <hr_sensor_char_write_request+0x52>
					} else  {
					reset_cb();
10009c0a:	4b0e      	ldr	r3, [pc, #56]	; (10009c44 <hr_sensor_char_write_request+0x7c>)
10009c0c:	681b      	ldr	r3, [r3, #0]
10009c0e:	4798      	blx	r3
10009c10:	e003      	b.n	10009c1a <hr_sensor_char_write_request+0x52>
				}
				
			} else {
				DBG_LOG_DEV("Sending an error code");
				at_ble_write_authorize_reply(&request,AT_BLE_ATT_APP_ERROR);
10009c12:	2180      	movs	r1, #128	; 0x80
10009c14:	4668      	mov	r0, sp
10009c16:	4b06      	ldr	r3, [pc, #24]	; (10009c30 <hr_sensor_char_write_request+0x68>)
10009c18:	4798      	blx	r3
			}
	}

	return AT_BLE_SUCCESS;
}
10009c1a:	2000      	movs	r0, #0
10009c1c:	2382      	movs	r3, #130	; 0x82
10009c1e:	009b      	lsls	r3, r3, #2
10009c20:	449d      	add	sp, r3
10009c22:	bd80      	pop	{r7, pc}
10009c24:	fffffdf8 	.word	0xfffffdf8
10009c28:	10011c63 	.word	0x10011c63
10009c2c:	10015e08 	.word	0x10015e08
10009c30:	1000e2e1 	.word	0x1000e2e1
10009c34:	10013098 	.word	0x10013098
10009c38:	10011da5 	.word	0x10011da5
10009c3c:	1001309c 	.word	0x1001309c
10009c40:	10011c85 	.word	0x10011c85
10009c44:	10015e04 	.word	0x10015e04

10009c48 <hr_sensor_char_changed_handler>:
 *  characteristic and new value
 *  @return AT_BLE_SUCCESS on success and AT_BLE_FAILURE on failure
 */
at_ble_status_t hr_sensor_char_changed_handler(
		void *params)
{
10009c48:	b580      	push	{r7, lr}
10009c4a:	4f0d      	ldr	r7, [pc, #52]	; (10009c80 <hr_sensor_char_changed_handler+0x38>)
10009c4c:	44bd      	add	sp, r7
10009c4e:	0001      	movs	r1, r0
	uint8_t action_event;

	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, params,
10009c50:	4a0c      	ldr	r2, [pc, #48]	; (10009c84 <hr_sensor_char_changed_handler+0x3c>)
10009c52:	a801      	add	r0, sp, #4
10009c54:	4b0c      	ldr	r3, [pc, #48]	; (10009c88 <hr_sensor_char_changed_handler+0x40>)
10009c56:	4798      	blx	r3
			sizeof(at_ble_characteristic_changed_t));

	action_event = hr_write_value_handler(&hr_service_handler,
10009c58:	a901      	add	r1, sp, #4
10009c5a:	480c      	ldr	r0, [pc, #48]	; (10009c8c <hr_sensor_char_changed_handler+0x44>)
10009c5c:	4b0c      	ldr	r3, [pc, #48]	; (10009c90 <hr_sensor_char_changed_handler+0x48>)
10009c5e:	4798      	blx	r3
			&change_params);

	if ((action_event == HR_NOTIFICATION_DISABLE) ||
10009c60:	2801      	cmp	r0, #1
10009c62:	d803      	bhi.n	10009c6c <hr_sensor_char_changed_handler+0x24>
			(action_event == HR_NOTIFICATION_ENABLE)) {
		notification_cb(action_event);
10009c64:	4b0b      	ldr	r3, [pc, #44]	; (10009c94 <hr_sensor_char_changed_handler+0x4c>)
10009c66:	681b      	ldr	r3, [r3, #0]
10009c68:	4798      	blx	r3
10009c6a:	e004      	b.n	10009c76 <hr_sensor_char_changed_handler+0x2e>
	} else if (action_event == HR_CONTROL_POINT_RESET) {
10009c6c:	2802      	cmp	r0, #2
10009c6e:	d102      	bne.n	10009c76 <hr_sensor_char_changed_handler+0x2e>
		reset_cb();
10009c70:	4b09      	ldr	r3, [pc, #36]	; (10009c98 <hr_sensor_char_changed_handler+0x50>)
10009c72:	681b      	ldr	r3, [r3, #0]
10009c74:	4798      	blx	r3
	}

	return AT_BLE_SUCCESS;
}
10009c76:	2000      	movs	r0, #0
10009c78:	2384      	movs	r3, #132	; 0x84
10009c7a:	009b      	lsls	r3, r3, #2
10009c7c:	449d      	add	sp, r3
10009c7e:	bd80      	pop	{r7, pc}
10009c80:	fffffdf0 	.word	0xfffffdf0
10009c84:	0000020a 	.word	0x0000020a
10009c88:	10011c63 	.word	0x10011c63
10009c8c:	10015e08 	.word	0x10015e08
10009c90:	1000b779 	.word	0x1000b779
10009c94:	10016104 	.word	0x10016104
10009c98:	10015e04 	.word	0x10015e04

10009c9c <register_hr_notification_handler>:
 *	function to be called
 */
void register_hr_notification_handler(
		hr_notification_callback_t hr_notificaton_handler)
{
	notification_cb = hr_notificaton_handler;
10009c9c:	4b01      	ldr	r3, [pc, #4]	; (10009ca4 <register_hr_notification_handler+0x8>)
10009c9e:	6018      	str	r0, [r3, #0]
}
10009ca0:	4770      	bx	lr
10009ca2:	46c0      	nop			; (mov r8, r8)
10009ca4:	10016104 	.word	0x10016104

10009ca8 <register_hr_reset_handler>:
 *  application
 *  @param[in]	hr_reset_callback_t address of the handler function to be called
 */
void register_hr_reset_handler(hr_reset_callback_t hr_reset_handler)
{
	reset_cb = hr_reset_handler;
10009ca8:	4b01      	ldr	r3, [pc, #4]	; (10009cb0 <register_hr_reset_handler+0x8>)
10009caa:	6018      	str	r0, [r3, #0]
}
10009cac:	4770      	bx	lr
10009cae:	46c0      	nop			; (mov r8, r8)
10009cb0:	10015e04 	.word	0x10015e04

10009cb4 <hr_sensor_send_notification>:
 * sends the notification
 *  @param[in] hr_data the new hr characteristic value needs to be updated
 *  @param[in] length length of new characteristic value
 */
bool hr_sensor_send_notification(uint8_t *hr_data, uint8_t length)
{
10009cb4:	b510      	push	{r4, lr}
10009cb6:	0003      	movs	r3, r0
	at_ble_status_t status;
	
	/** Updating the new characteristic value */
	if ((status = at_ble_characteristic_value_set(
10009cb8:	b28a      	uxth	r2, r1
10009cba:	4911      	ldr	r1, [pc, #68]	; (10009d00 <hr_sensor_send_notification+0x4c>)
10009cbc:	8a88      	ldrh	r0, [r1, #20]
10009cbe:	0019      	movs	r1, r3
10009cc0:	4b10      	ldr	r3, [pc, #64]	; (10009d04 <hr_sensor_send_notification+0x50>)
10009cc2:	4798      	blx	r3
10009cc4:	1e04      	subs	r4, r0, #0
10009cc6:	d008      	beq.n	10009cda <hr_sensor_send_notification+0x26>
							hr_service_handler.serv_chars[0].char_val_handle,
							hr_data, length)) != AT_BLE_SUCCESS) {
		DBG_LOG("Write value for notification failed,reason %d",
10009cc8:	480f      	ldr	r0, [pc, #60]	; (10009d08 <hr_sensor_send_notification+0x54>)
10009cca:	4b10      	ldr	r3, [pc, #64]	; (10009d0c <hr_sensor_send_notification+0x58>)
10009ccc:	4798      	blx	r3
10009cce:	0021      	movs	r1, r4
10009cd0:	480f      	ldr	r0, [pc, #60]	; (10009d10 <hr_sensor_send_notification+0x5c>)
10009cd2:	4b10      	ldr	r3, [pc, #64]	; (10009d14 <hr_sensor_send_notification+0x60>)
10009cd4:	4798      	blx	r3
				status);
		return false;
10009cd6:	2000      	movs	r0, #0
10009cd8:	e011      	b.n	10009cfe <hr_sensor_send_notification+0x4a>
	}

	/** Sending the notification for the updated characteristic */
	if ((status	= at_ble_notification_send(connection_handle,
10009cda:	4b09      	ldr	r3, [pc, #36]	; (10009d00 <hr_sensor_send_notification+0x4c>)
10009cdc:	8a99      	ldrh	r1, [r3, #20]
10009cde:	4b0e      	ldr	r3, [pc, #56]	; (10009d18 <hr_sensor_send_notification+0x64>)
10009ce0:	8818      	ldrh	r0, [r3, #0]
10009ce2:	4b0e      	ldr	r3, [pc, #56]	; (10009d1c <hr_sensor_send_notification+0x68>)
10009ce4:	4798      	blx	r3
10009ce6:	0004      	movs	r4, r0
										.char_val_handle))) {
		DBG_LOG("Send notification failed,reason %d", status);
		return false;	
	}
	
	return true;
10009ce8:	2001      	movs	r0, #1
				status);
		return false;
	}

	/** Sending the notification for the updated characteristic */
	if ((status	= at_ble_notification_send(connection_handle,
10009cea:	2c00      	cmp	r4, #0
10009cec:	d007      	beq.n	10009cfe <hr_sensor_send_notification+0x4a>
										hr_service_handler.serv_chars[0]
										.char_val_handle))) {
		DBG_LOG("Send notification failed,reason %d", status);
10009cee:	4806      	ldr	r0, [pc, #24]	; (10009d08 <hr_sensor_send_notification+0x54>)
10009cf0:	4b06      	ldr	r3, [pc, #24]	; (10009d0c <hr_sensor_send_notification+0x58>)
10009cf2:	4798      	blx	r3
10009cf4:	0021      	movs	r1, r4
10009cf6:	480a      	ldr	r0, [pc, #40]	; (10009d20 <hr_sensor_send_notification+0x6c>)
10009cf8:	4b06      	ldr	r3, [pc, #24]	; (10009d14 <hr_sensor_send_notification+0x60>)
10009cfa:	4798      	blx	r3
		return false;	
10009cfc:	2000      	movs	r0, #0
	}
	
	return true;
}
10009cfe:	bd10      	pop	{r4, pc}
10009d00:	10015e08 	.word	0x10015e08
10009d04:	1000e265 	.word	0x1000e265
10009d08:	10013098 	.word	0x10013098
10009d0c:	10011da5 	.word	0x10011da5
10009d10:	100130c0 	.word	0x100130c0
10009d14:	10011c85 	.word	0x10011c85
10009d18:	10015ed0 	.word	0x10015ed0
10009d1c:	1000e405 	.word	0x1000e405
10009d20:	100130f0 	.word	0x100130f0

10009d24 <hr_sensor_disconnect>:
/** @brief hr_sensor_disconnect disconnects with the peer device called by the
 * application
 *
 */
void hr_sensor_disconnect(void)
{
10009d24:	b510      	push	{r4, lr}
	at_ble_status_t status;

	if ((status
				= at_ble_disconnect(connection_handle,
10009d26:	4b0b      	ldr	r3, [pc, #44]	; (10009d54 <hr_sensor_disconnect+0x30>)
 */
void hr_sensor_disconnect(void)
{
	at_ble_status_t status;

	if ((status
10009d28:	8818      	ldrh	r0, [r3, #0]
10009d2a:	2113      	movs	r1, #19
10009d2c:	4b0a      	ldr	r3, [pc, #40]	; (10009d58 <hr_sensor_disconnect+0x34>)
10009d2e:	4798      	blx	r3
10009d30:	1e04      	subs	r4, r0, #0
10009d32:	d007      	beq.n	10009d44 <hr_sensor_disconnect+0x20>
				= at_ble_disconnect(connection_handle,
					AT_BLE_TERMINATED_BY_USER)) !=
			AT_BLE_SUCCESS) {
		DBG_LOG("Failed to disconnect , reason %x", status);
10009d34:	4809      	ldr	r0, [pc, #36]	; (10009d5c <hr_sensor_disconnect+0x38>)
10009d36:	4b0a      	ldr	r3, [pc, #40]	; (10009d60 <hr_sensor_disconnect+0x3c>)
10009d38:	4798      	blx	r3
10009d3a:	0021      	movs	r1, r4
10009d3c:	4809      	ldr	r0, [pc, #36]	; (10009d64 <hr_sensor_disconnect+0x40>)
10009d3e:	4b0a      	ldr	r3, [pc, #40]	; (10009d68 <hr_sensor_disconnect+0x44>)
10009d40:	4798      	blx	r3
10009d42:	e005      	b.n	10009d50 <hr_sensor_disconnect+0x2c>
	} else {
		DBG_LOG("Disconnection request successfull");
10009d44:	4805      	ldr	r0, [pc, #20]	; (10009d5c <hr_sensor_disconnect+0x38>)
10009d46:	4b06      	ldr	r3, [pc, #24]	; (10009d60 <hr_sensor_disconnect+0x3c>)
10009d48:	4798      	blx	r3
10009d4a:	4808      	ldr	r0, [pc, #32]	; (10009d6c <hr_sensor_disconnect+0x48>)
10009d4c:	4b06      	ldr	r3, [pc, #24]	; (10009d68 <hr_sensor_disconnect+0x44>)
10009d4e:	4798      	blx	r3
	}
}
10009d50:	bd10      	pop	{r4, pc}
10009d52:	46c0      	nop			; (mov r8, r8)
10009d54:	10015ed0 	.word	0x10015ed0
10009d58:	1000dae9 	.word	0x1000dae9
10009d5c:	10013098 	.word	0x10013098
10009d60:	10011da5 	.word	0x10011da5
10009d64:	10013114 	.word	0x10013114
10009d68:	10011c85 	.word	0x10011c85
10009d6c:	10013138 	.word	0x10013138

10009d70 <hr_sensor_adv>:
/** @brief hr_sensor_adv adds the advertisement data of the profile and starts
 * advertisement
 *
 */
void hr_sensor_adv(void)
{
10009d70:	b510      	push	{r4, lr}
10009d72:	b084      	sub	sp, #16
	at_ble_status_t status;
	/* Start of advertisement */
	if ((status
10009d74:	2300      	movs	r3, #0
10009d76:	9302      	str	r3, [sp, #8]
10009d78:	9301      	str	r3, [sp, #4]
10009d7a:	23c8      	movs	r3, #200	; 0xc8
10009d7c:	00db      	lsls	r3, r3, #3
10009d7e:	9300      	str	r3, [sp, #0]
10009d80:	2300      	movs	r3, #0
10009d82:	2200      	movs	r2, #0
10009d84:	2101      	movs	r1, #1
10009d86:	2000      	movs	r0, #0
10009d88:	4c09      	ldr	r4, [pc, #36]	; (10009db0 <hr_sensor_adv+0x40>)
10009d8a:	47a0      	blx	r4
10009d8c:	1e04      	subs	r4, r0, #0
10009d8e:	d106      	bne.n	10009d9e <hr_sensor_adv+0x2e>
					AT_BLE_ADV_GEN_DISCOVERABLE, NULL,
					AT_BLE_ADV_FP_ANY,
					HR_SENSOR_FAST_ADV,
					0,
					0)) == AT_BLE_SUCCESS) {
		DBG_LOG("Bluetooth device is in Advertising Mode");
10009d90:	4808      	ldr	r0, [pc, #32]	; (10009db4 <hr_sensor_adv+0x44>)
10009d92:	4b09      	ldr	r3, [pc, #36]	; (10009db8 <hr_sensor_adv+0x48>)
10009d94:	4798      	blx	r3
10009d96:	4809      	ldr	r0, [pc, #36]	; (10009dbc <hr_sensor_adv+0x4c>)
10009d98:	4b09      	ldr	r3, [pc, #36]	; (10009dc0 <hr_sensor_adv+0x50>)
10009d9a:	4798      	blx	r3
10009d9c:	e006      	b.n	10009dac <hr_sensor_adv+0x3c>
	} else {
		DBG_LOG(
10009d9e:	4805      	ldr	r0, [pc, #20]	; (10009db4 <hr_sensor_adv+0x44>)
10009da0:	4b05      	ldr	r3, [pc, #20]	; (10009db8 <hr_sensor_adv+0x48>)
10009da2:	4798      	blx	r3
10009da4:	0021      	movs	r1, r4
10009da6:	4807      	ldr	r0, [pc, #28]	; (10009dc4 <hr_sensor_adv+0x54>)
10009da8:	4b05      	ldr	r3, [pc, #20]	; (10009dc0 <hr_sensor_adv+0x50>)
10009daa:	4798      	blx	r3
				"Bluetooth LE Advertisement failed start Failed,reason %d",
				status);
	}
}
10009dac:	b004      	add	sp, #16
10009dae:	bd10      	pop	{r4, pc}
10009db0:	1000d98d 	.word	0x1000d98d
10009db4:	10013098 	.word	0x10013098
10009db8:	10011da5 	.word	0x10011da5
10009dbc:	1001315c 	.word	0x1001315c
10009dc0:	10011c85 	.word	0x10011c85
10009dc4:	10013184 	.word	0x10013184

10009dc8 <hr_sensor_service_define>:

/** @brief hr_sensor_service_define defines the services of the profile
 *
 */
void hr_sensor_service_define(void)
{
10009dc8:	b510      	push	{r4, lr}
	at_ble_status_t status;

	if ((status = hr_primary_service_define(&hr_service_handler)) !=
10009dca:	480c      	ldr	r0, [pc, #48]	; (10009dfc <hr_sensor_service_define+0x34>)
10009dcc:	4b0c      	ldr	r3, [pc, #48]	; (10009e00 <hr_sensor_service_define+0x38>)
10009dce:	4798      	blx	r3
10009dd0:	1e04      	subs	r4, r0, #0
10009dd2:	d006      	beq.n	10009de2 <hr_sensor_service_define+0x1a>
			AT_BLE_SUCCESS) {
		DBG_LOG("Heart Rate Service definition Failed,reason: %x",
10009dd4:	480b      	ldr	r0, [pc, #44]	; (10009e04 <hr_sensor_service_define+0x3c>)
10009dd6:	4b0c      	ldr	r3, [pc, #48]	; (10009e08 <hr_sensor_service_define+0x40>)
10009dd8:	4798      	blx	r3
10009dda:	0021      	movs	r1, r4
10009ddc:	480b      	ldr	r0, [pc, #44]	; (10009e0c <hr_sensor_service_define+0x44>)
10009dde:	4b0c      	ldr	r3, [pc, #48]	; (10009e10 <hr_sensor_service_define+0x48>)
10009de0:	4798      	blx	r3
				status);
	} else {
		DBG_LOG_DEV("hr service defined succesfully");
	} 
	
	if ((status = dis_primary_service_define(&dis_service_handler)) !=
10009de2:	480c      	ldr	r0, [pc, #48]	; (10009e14 <hr_sensor_service_define+0x4c>)
10009de4:	4b0c      	ldr	r3, [pc, #48]	; (10009e18 <hr_sensor_service_define+0x50>)
10009de6:	4798      	blx	r3
10009de8:	1e04      	subs	r4, r0, #0
10009dea:	d006      	beq.n	10009dfa <hr_sensor_service_define+0x32>
			AT_BLE_SUCCESS) {
		DBG_LOG("Dis Service definition failed,reason: %x", status);
10009dec:	4805      	ldr	r0, [pc, #20]	; (10009e04 <hr_sensor_service_define+0x3c>)
10009dee:	4b06      	ldr	r3, [pc, #24]	; (10009e08 <hr_sensor_service_define+0x40>)
10009df0:	4798      	blx	r3
10009df2:	0021      	movs	r1, r4
10009df4:	4809      	ldr	r0, [pc, #36]	; (10009e1c <hr_sensor_service_define+0x54>)
10009df6:	4b06      	ldr	r3, [pc, #24]	; (10009e10 <hr_sensor_service_define+0x48>)
10009df8:	4798      	blx	r3
	} else {
		DBG_LOG_DEV("dis service defined succesfully");
	}
}
10009dfa:	bd10      	pop	{r4, pc}
10009dfc:	10015e08 	.word	0x10015e08
10009e00:	1000b755 	.word	0x1000b755
10009e04:	10013098 	.word	0x10013098
10009e08:	10011da5 	.word	0x10011da5
10009e0c:	100131c0 	.word	0x100131c0
10009e10:	10011c85 	.word	0x10011c85
10009e14:	10015ed4 	.word	0x10015ed4
10009e18:	1000b605 	.word	0x1000b605
10009e1c:	100131f0 	.word	0x100131f0

10009e20 <hr_sensor_service_init>:

/**
 * \brief Initialization of profile services
 */
void hr_sensor_service_init(void)
{
10009e20:	b510      	push	{r4, lr}
	hr_init_service(&hr_service_handler);
10009e22:	4803      	ldr	r0, [pc, #12]	; (10009e30 <hr_sensor_service_init+0x10>)
10009e24:	4b03      	ldr	r3, [pc, #12]	; (10009e34 <hr_sensor_service_init+0x14>)
10009e26:	4798      	blx	r3

	dis_init_service(&dis_service_handler);
10009e28:	4803      	ldr	r0, [pc, #12]	; (10009e38 <hr_sensor_service_init+0x18>)
10009e2a:	4b04      	ldr	r3, [pc, #16]	; (10009e3c <hr_sensor_service_init+0x1c>)
10009e2c:	4798      	blx	r3
}
10009e2e:	bd10      	pop	{r4, pc}
10009e30:	10015e08 	.word	0x10015e08
10009e34:	1000b629 	.word	0x1000b629
10009e38:	10015ed4 	.word	0x10015ed4
10009e3c:	1000b1f9 	.word	0x1000b1f9

10009e40 <hr_sensor_init>:
 *
 *  @param[in] params are unused.
 *
 */
void hr_sensor_init(void *param)
{
10009e40:	b510      	push	{r4, lr}
	at_ble_status_t status;

	hr_sensor_service_init();
10009e42:	4b0c      	ldr	r3, [pc, #48]	; (10009e74 <hr_sensor_init+0x34>)
10009e44:	4798      	blx	r3
	hr_sensor_service_define();
10009e46:	4b0c      	ldr	r3, [pc, #48]	; (10009e78 <hr_sensor_init+0x38>)
10009e48:	4798      	blx	r3
	
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
10009e4a:	4a0c      	ldr	r2, [pc, #48]	; (10009e7c <hr_sensor_init+0x3c>)
10009e4c:	2100      	movs	r1, #0
10009e4e:	2000      	movs	r0, #0
10009e50:	4c0b      	ldr	r4, [pc, #44]	; (10009e80 <hr_sensor_init+0x40>)
10009e52:	47a0      	blx	r4
	BLE_GAP_EVENT_TYPE,
	hr_sensor_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
10009e54:	4a0b      	ldr	r2, [pc, #44]	; (10009e84 <hr_sensor_init+0x44>)
10009e56:	2102      	movs	r1, #2
10009e58:	2000      	movs	r0, #0
10009e5a:	47a0      	blx	r4
	BLE_GATT_SERVER_EVENT_TYPE,
	hr_sensor_gatt_server_handle);

	status = ble_advertisement_data_set();
10009e5c:	4b0a      	ldr	r3, [pc, #40]	; (10009e88 <hr_sensor_init+0x48>)
10009e5e:	4798      	blx	r3
10009e60:	1e04      	subs	r4, r0, #0
	if (status != AT_BLE_SUCCESS) {
10009e62:	d006      	beq.n	10009e72 <hr_sensor_init+0x32>
		DBG_LOG("Advertisement data set failed reason %d",status);
10009e64:	4809      	ldr	r0, [pc, #36]	; (10009e8c <hr_sensor_init+0x4c>)
10009e66:	4b0a      	ldr	r3, [pc, #40]	; (10009e90 <hr_sensor_init+0x50>)
10009e68:	4798      	blx	r3
10009e6a:	0021      	movs	r1, r4
10009e6c:	4809      	ldr	r0, [pc, #36]	; (10009e94 <hr_sensor_init+0x54>)
10009e6e:	4b0a      	ldr	r3, [pc, #40]	; (10009e98 <hr_sensor_init+0x58>)
10009e70:	4798      	blx	r3
						dis_service_handler.serv_chars[7].char_val_handle - 1);
	DBG_LOG_PTS("Characteristic 9 - 0x%04x",
						dis_service_handler.serv_chars[8].char_val_handle - 1);
											
    ALL_UNUSED(param);
}
10009e72:	bd10      	pop	{r4, pc}
10009e74:	10009e21 	.word	0x10009e21
10009e78:	10009dc9 	.word	0x10009dc9
10009e7c:	10013244 	.word	0x10013244
10009e80:	1000a921 	.word	0x1000a921
10009e84:	10013070 	.word	0x10013070
10009e88:	1000b165 	.word	0x1000b165
10009e8c:	10013098 	.word	0x10013098
10009e90:	10011da5 	.word	0x10011da5
10009e94:	1001321c 	.word	0x1001321c
10009e98:	10011c85 	.word	0x10011c85

10009e9c <bat_init_service>:
extern ble_connected_dev_info_t ble_dev_info[BLE_MAX_DEVICE_CONNECTED];

/**@brief Initialize the service with its included service, characteristics, and descriptors
 */
void bat_init_service(bat_gatt_service_handler_t *battery_serv, uint8_t *battery_value)
{
10009e9c:	b530      	push	{r4, r5, lr}
	battery_serv->serv_handle = 0;
10009e9e:	2300      	movs	r3, #0
10009ea0:	2200      	movs	r2, #0
10009ea2:	8243      	strh	r3, [r0, #18]
	battery_serv->serv_uuid.type = AT_BLE_UUID_16;
10009ea4:	7002      	strb	r2, [r0, #0]
	battery_serv->serv_uuid.uuid[0] = (uint8_t) BAT_SERVICE_UUID;
10009ea6:	210f      	movs	r1, #15
10009ea8:	7041      	strb	r1, [r0, #1]
	battery_serv->serv_uuid.uuid[1] = (uint8_t) (BAT_SERVICE_UUID >> 8);
10009eaa:	3109      	adds	r1, #9
10009eac:	7081      	strb	r1, [r0, #2]
	
	//Battery service characteristic
	battery_serv->serv_chars.char_val_handle = 0;          /* handle stored here */
10009eae:	8283      	strh	r3, [r0, #20]
	battery_serv->serv_chars.uuid.type = AT_BLE_UUID_16;
10009eb0:	7582      	strb	r2, [r0, #22]
	battery_serv->serv_chars.uuid.uuid[0] = (uint8_t) BAT_CHAR_BAT_LEVEL_UUID;          /* UUID : Manufacturer Name String */
10009eb2:	2419      	movs	r4, #25
10009eb4:	75c4      	strb	r4, [r0, #23]
	battery_serv->serv_chars.uuid.uuid[1] = (uint8_t) (BAT_CHAR_BAT_LEVEL_UUID >> 8);          /* UUID : Manufacturer Name String */
10009eb6:	3411      	adds	r4, #17
10009eb8:	7604      	strb	r4, [r0, #24]
	battery_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
10009eba:	3c18      	subs	r4, #24
10009ebc:	8504      	strh	r4, [r0, #40]	; 0x28
	battery_serv->serv_chars.init_value = &battery_init_value;             /* value */
10009ebe:	4c11      	ldr	r4, [pc, #68]	; (10009f04 <bat_init_service+0x68>)
10009ec0:	62c4      	str	r4, [r0, #44]	; 0x2c
	battery_serv->serv_chars.value_init_len = sizeof(uint8_t);
10009ec2:	2401      	movs	r4, #1
10009ec4:	8604      	strh	r4, [r0, #48]	; 0x30
	battery_serv->serv_chars.value_max_len = sizeof(uint8_t);
10009ec6:	8644      	strh	r4, [r0, #50]	; 0x32
#if BLE_PAIR_ENABLE
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR |
10009ec8:	2522      	movs	r5, #34	; 0x22
10009eca:	3433      	adds	r4, #51	; 0x33
10009ecc:	5505      	strb	r5, [r0, r4]
												 AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);   /* permissions */
#else
	battery_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR |
												 AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
#endif
	battery_serv->serv_chars.user_desc = NULL;           /* user defined name */
10009ece:	6383      	str	r3, [r0, #56]	; 0x38
	battery_serv->serv_chars.user_desc_len = 0;
10009ed0:	8783      	strh	r3, [r0, #60]	; 0x3c
	battery_serv->serv_chars.user_desc_max_len = 0;
10009ed2:	87c3      	strh	r3, [r0, #62]	; 0x3e
	battery_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
10009ed4:	3410      	adds	r4, #16
10009ed6:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
10009ed8:	3401      	adds	r4, #1
10009eda:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
10009edc:	3401      	adds	r4, #1
10009ede:	5502      	strb	r2, [r0, r4]
	battery_serv->serv_chars.user_desc_handle = 0;             /*user desc handles*/
10009ee0:	3402      	adds	r4, #2
10009ee2:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
10009ee4:	3402      	adds	r4, #2
10009ee6:	5303      	strh	r3, [r0, r4]
	battery_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
10009ee8:	3402      	adds	r4, #2
10009eea:	5303      	strh	r3, [r0, r4]
	
	presentation_format.format = AT_BLE_PRES_FORMAT_UINT8;
10009eec:	4b06      	ldr	r3, [pc, #24]	; (10009f08 <bat_init_service+0x6c>)
10009eee:	3c48      	subs	r4, #72	; 0x48
10009ef0:	701c      	strb	r4, [r3, #0]
	presentation_format.exponent = BAT_CHAR_PRESENTATION_FORMAT_EXPONENT;
10009ef2:	705a      	strb	r2, [r3, #1]
	presentation_format.unit = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_UNIT;
	presentation_format.unit = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_UNIT >> 8);
10009ef4:	8059      	strh	r1, [r3, #2]
	presentation_format.name_space = BAT_CHAR_PRESENTATION_FORMAT_NAMESPACE;
10009ef6:	2201      	movs	r2, #1
10009ef8:	711a      	strb	r2, [r3, #4]
	presentation_format.description = (uint8_t) BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR;
	presentation_format.description = (uint8_t) (BAT_CHAR_PRESENTATION_FORMAT_DESCRIPTOR >> 8);
10009efa:	2210      	movs	r2, #16
10009efc:	80da      	strh	r2, [r3, #6]
	
	battery_serv->serv_chars.presentation_format = &presentation_format;       /* presentation format */
10009efe:	6403      	str	r3, [r0, #64]	; 0x40
	ALL_UNUSED(battery_value);
}
10009f00:	bd30      	pop	{r4, r5, pc}
10009f02:	46c0      	nop			; (mov r8, r8)
10009f04:	100141a8 	.word	0x100141a8
10009f08:	10016108 	.word	0x10016108

10009f0c <bat_primary_service_define>:

/**@brief defining a initialized service 
 */
at_ble_status_t bat_primary_service_define(bat_gatt_service_handler_t *battery_service)
{
10009f0c:	b510      	push	{r4, lr}
10009f0e:	b082      	sub	sp, #8
	return(at_ble_primary_service_define(&battery_service->serv_uuid,
10009f10:	0001      	movs	r1, r0
10009f12:	3112      	adds	r1, #18
10009f14:	2301      	movs	r3, #1
10009f16:	9301      	str	r3, [sp, #4]
10009f18:	0003      	movs	r3, r0
10009f1a:	3314      	adds	r3, #20
10009f1c:	9300      	str	r3, [sp, #0]
10009f1e:	2300      	movs	r3, #0
10009f20:	2200      	movs	r2, #0
10009f22:	4c02      	ldr	r4, [pc, #8]	; (10009f2c <bat_primary_service_define+0x20>)
10009f24:	47a0      	blx	r4
	&battery_service->serv_handle,
	NULL, 0,
	&battery_service->serv_chars, 1));
}
10009f26:	b002      	add	sp, #8
10009f28:	bd10      	pop	{r4, pc}
10009f2a:	46c0      	nop			; (mov r8, r8)
10009f2c:	1000e245 	.word	0x1000e245

10009f30 <bat_update_char_value>:

/**@brief Function used to update characteristic value
 */
at_ble_status_t bat_update_char_value (at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_serv , uint8_t char_data,bool volatile *flag)
{
10009f30:	b5f0      	push	{r4, r5, r6, r7, lr}
10009f32:	b083      	sub	sp, #12
10009f34:	0006      	movs	r6, r0
10009f36:	000f      	movs	r7, r1
10009f38:	001d      	movs	r5, r3
10009f3a:	466b      	mov	r3, sp
10009f3c:	1dd9      	adds	r1, r3, #7
10009f3e:	700a      	strb	r2, [r1, #0]
	at_ble_status_t status = AT_BLE_SUCCESS;
	/* Updating the att data base */
	if ((status = at_ble_characteristic_value_set(battery_serv->serv_chars.char_val_handle, &char_data, sizeof(uint8_t))) != AT_BLE_SUCCESS){
10009f40:	8ab8      	ldrh	r0, [r7, #20]
10009f42:	2201      	movs	r2, #1
10009f44:	4b12      	ldr	r3, [pc, #72]	; (10009f90 <bat_update_char_value+0x60>)
10009f46:	4798      	blx	r3
10009f48:	1e04      	subs	r4, r0, #0
10009f4a:	d008      	beq.n	10009f5e <bat_update_char_value+0x2e>
		DBG_LOG("updating the characteristic failed%d",status);
10009f4c:	4811      	ldr	r0, [pc, #68]	; (10009f94 <bat_update_char_value+0x64>)
10009f4e:	4b12      	ldr	r3, [pc, #72]	; (10009f98 <bat_update_char_value+0x68>)
10009f50:	4798      	blx	r3
10009f52:	0021      	movs	r1, r4
10009f54:	4811      	ldr	r0, [pc, #68]	; (10009f9c <bat_update_char_value+0x6c>)
10009f56:	4b12      	ldr	r3, [pc, #72]	; (10009fa0 <bat_update_char_value+0x70>)
10009f58:	4798      	blx	r3
		return status;
10009f5a:	0020      	movs	r0, r4
10009f5c:	e016      	b.n	10009f8c <bat_update_char_value+0x5c>
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
10009f5e:	4b11      	ldr	r3, [pc, #68]	; (10009fa4 <bat_update_char_value+0x74>)
10009f60:	781b      	ldrb	r3, [r3, #0]
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
			return status;
		}
	}
	return status;
10009f62:	2000      	movs	r0, #0
		return status;
	} else {
		DBG_LOG_DEV("updating the characteristic value is successful");
	}

	if(bat_notification_flag){
10009f64:	2b00      	cmp	r3, #0
10009f66:	d011      	beq.n	10009f8c <bat_update_char_value+0x5c>
		/* sending notification to the peer about change in the battery level */ 
		if((status = at_ble_notification_send(conn_handle, battery_serv->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) {
10009f68:	8ab9      	ldrh	r1, [r7, #20]
10009f6a:	0030      	movs	r0, r6
10009f6c:	4b0e      	ldr	r3, [pc, #56]	; (10009fa8 <bat_update_char_value+0x78>)
10009f6e:	4798      	blx	r3
10009f70:	1e04      	subs	r4, r0, #0
10009f72:	d008      	beq.n	10009f86 <bat_update_char_value+0x56>
			DBG_LOG("sending notification failed%d",status);
10009f74:	4807      	ldr	r0, [pc, #28]	; (10009f94 <bat_update_char_value+0x64>)
10009f76:	4b08      	ldr	r3, [pc, #32]	; (10009f98 <bat_update_char_value+0x68>)
10009f78:	4798      	blx	r3
10009f7a:	0021      	movs	r1, r4
10009f7c:	480b      	ldr	r0, [pc, #44]	; (10009fac <bat_update_char_value+0x7c>)
10009f7e:	4b08      	ldr	r3, [pc, #32]	; (10009fa0 <bat_update_char_value+0x70>)
10009f80:	4798      	blx	r3
			return status;
10009f82:	0020      	movs	r0, r4
10009f84:	e002      	b.n	10009f8c <bat_update_char_value+0x5c>
		}
		else {
			DBG_LOG_DEV("sending notification successful");
			*flag = false;
10009f86:	2300      	movs	r3, #0
10009f88:	702b      	strb	r3, [r5, #0]
			return status;
10009f8a:	2000      	movs	r0, #0
		}
	}
	return status;
}
10009f8c:	b003      	add	sp, #12
10009f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009f90:	1000e265 	.word	0x1000e265
10009f94:	10013098 	.word	0x10013098
10009f98:	10011da5 	.word	0x10011da5
10009f9c:	10013290 	.word	0x10013290
10009fa0:	10011c85 	.word	0x10011c85
10009fa4:	1001425c 	.word	0x1001425c
10009fa8:	1000e405 	.word	0x1000e405
10009fac:	100132b8 	.word	0x100132b8

10009fb0 <bat_char_changed_event>:
/**@brief function to check the client characteristic configuration value. 
 */
at_ble_status_t bat_char_changed_event(at_ble_handle_t conn_handle, bat_gatt_service_handler_t *battery_service, at_ble_characteristic_changed_t *char_handle, bool volatile *flag)
{
10009fb0:	b570      	push	{r4, r5, r6, lr}
10009fb2:	4c19      	ldr	r4, [pc, #100]	; (1000a018 <bat_char_changed_event+0x68>)
10009fb4:	44a5      	add	sp, r4
10009fb6:	0006      	movs	r6, r0
10009fb8:	000c      	movs	r4, r1
10009fba:	0011      	movs	r1, r2
10009fbc:	001d      	movs	r5, r3
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
10009fbe:	4a17      	ldr	r2, [pc, #92]	; (1000a01c <bat_char_changed_event+0x6c>)
10009fc0:	a801      	add	r0, sp, #4
10009fc2:	4b17      	ldr	r3, [pc, #92]	; (1000a020 <bat_char_changed_event+0x70>)
10009fc4:	4798      	blx	r3
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
10009fc6:	234a      	movs	r3, #74	; 0x4a
10009fc8:	5ae2      	ldrh	r2, [r4, r3]
10009fca:	ab01      	add	r3, sp, #4
10009fcc:	885b      	ldrh	r3, [r3, #2]
		else
		{
			bat_notification_flag = false;			
		}
	}
	return status;
10009fce:	2000      	movs	r0, #0
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_characteristic_changed_t change_params;
	memcpy((uint8_t *)&change_params, char_handle, sizeof(at_ble_characteristic_changed_t));
	
	if(battery_service->serv_chars.client_config_handle == change_params.char_handle)
10009fd0:	429a      	cmp	r2, r3
10009fd2:	d11d      	bne.n	1000a010 <bat_char_changed_event+0x60>
	{
		if(change_params.char_new_value[0])
10009fd4:	ab01      	add	r3, sp, #4
10009fd6:	7a1b      	ldrb	r3, [r3, #8]
10009fd8:	2b00      	cmp	r3, #0
10009fda:	d015      	beq.n	1000a008 <bat_char_changed_event+0x58>
		{
			bat_notification_flag = true;
10009fdc:	2201      	movs	r2, #1
10009fde:	4b11      	ldr	r3, [pc, #68]	; (1000a024 <bat_char_changed_event+0x74>)
10009fe0:	701a      	strb	r2, [r3, #0]
			/* sending notification to the peer about change in the battery level */
			if((status = at_ble_notification_send(conn_handle, battery_service->serv_chars.char_val_handle)) != AT_BLE_SUCCESS) {
10009fe2:	8aa1      	ldrh	r1, [r4, #20]
10009fe4:	0030      	movs	r0, r6
10009fe6:	4b10      	ldr	r3, [pc, #64]	; (1000a028 <bat_char_changed_event+0x78>)
10009fe8:	4798      	blx	r3
10009fea:	1e04      	subs	r4, r0, #0
10009fec:	d008      	beq.n	1000a000 <bat_char_changed_event+0x50>
				DBG_LOG("sending notification failed%d",status);
10009fee:	480f      	ldr	r0, [pc, #60]	; (1000a02c <bat_char_changed_event+0x7c>)
10009ff0:	4b0f      	ldr	r3, [pc, #60]	; (1000a030 <bat_char_changed_event+0x80>)
10009ff2:	4798      	blx	r3
10009ff4:	0021      	movs	r1, r4
10009ff6:	480f      	ldr	r0, [pc, #60]	; (1000a034 <bat_char_changed_event+0x84>)
10009ff8:	4b0f      	ldr	r3, [pc, #60]	; (1000a038 <bat_char_changed_event+0x88>)
10009ffa:	4798      	blx	r3
				return status;
10009ffc:	0020      	movs	r0, r4
10009ffe:	e007      	b.n	1000a010 <bat_char_changed_event+0x60>
			}
			else {
				DBG_LOG_DEV("sending notification successful");
				*flag = false;
1000a000:	2300      	movs	r3, #0
1000a002:	702b      	strb	r3, [r5, #0]
				return status;
1000a004:	2000      	movs	r0, #0
1000a006:	e003      	b.n	1000a010 <bat_char_changed_event+0x60>
			}			
		}
		else
		{
			bat_notification_flag = false;			
1000a008:	2200      	movs	r2, #0
1000a00a:	4b06      	ldr	r3, [pc, #24]	; (1000a024 <bat_char_changed_event+0x74>)
1000a00c:	701a      	strb	r2, [r3, #0]
		}
	}
	return status;
1000a00e:	2000      	movs	r0, #0
}
1000a010:	2384      	movs	r3, #132	; 0x84
1000a012:	009b      	lsls	r3, r3, #2
1000a014:	449d      	add	sp, r3
1000a016:	bd70      	pop	{r4, r5, r6, pc}
1000a018:	fffffdf0 	.word	0xfffffdf0
1000a01c:	0000020a 	.word	0x0000020a
1000a020:	10011c63 	.word	0x10011c63
1000a024:	1001425c 	.word	0x1001425c
1000a028:	1000e405 	.word	0x1000e405
1000a02c:	10013098 	.word	0x10013098
1000a030:	10011da5 	.word	0x10011da5
1000a034:	100132b8 	.word	0x100132b8
1000a038:	10011c85 	.word	0x10011c85

1000a03c <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000a03c:	2000      	movs	r0, #0
1000a03e:	4770      	bx	lr

1000a040 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000a040:	2000      	movs	r0, #0
1000a042:	4770      	bx	lr

1000a044 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a044:	78c0      	ldrb	r0, [r0, #3]
1000a046:	2800      	cmp	r0, #0
1000a048:	d000      	beq.n	1000a04c <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a04a:	20e2      	movs	r0, #226	; 0xe2
}
1000a04c:	4770      	bx	lr
1000a04e:	46c0      	nop			; (mov r8, r8)

1000a050 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000a050:	2000      	movs	r0, #0
1000a052:	4770      	bx	lr

1000a054 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000a054:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000a056:	7800      	ldrb	r0, [r0, #0]
1000a058:	2800      	cmp	r0, #0
1000a05a:	d006      	beq.n	1000a06a <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000a05c:	4803      	ldr	r0, [pc, #12]	; (1000a06c <ble_scan_report_handler+0x18>)
1000a05e:	4b04      	ldr	r3, [pc, #16]	; (1000a070 <ble_scan_report_handler+0x1c>)
1000a060:	4798      	blx	r3
1000a062:	4804      	ldr	r0, [pc, #16]	; (1000a074 <ble_scan_report_handler+0x20>)
1000a064:	4b04      	ldr	r3, [pc, #16]	; (1000a078 <ble_scan_report_handler+0x24>)
1000a066:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000a068:	20e2      	movs	r0, #226	; 0xe2
}
1000a06a:	bd10      	pop	{r4, pc}
1000a06c:	10013098 	.word	0x10013098
1000a070:	10011da5 	.word	0x10011da5
1000a074:	10013448 	.word	0x10013448
1000a078:	10011c85 	.word	0x10011c85

1000a07c <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000a07c:	b510      	push	{r4, lr}
1000a07e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000a080:	78c0      	ldrb	r0, [r0, #3]
1000a082:	2800      	cmp	r0, #0
1000a084:	d008      	beq.n	1000a098 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000a086:	4805      	ldr	r0, [pc, #20]	; (1000a09c <ble_mtu_changed_cmd_complete_handler+0x20>)
1000a088:	4b05      	ldr	r3, [pc, #20]	; (1000a0a0 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000a08a:	4798      	blx	r3
1000a08c:	78a2      	ldrb	r2, [r4, #2]
1000a08e:	8821      	ldrh	r1, [r4, #0]
1000a090:	4804      	ldr	r0, [pc, #16]	; (1000a0a4 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000a092:	4b05      	ldr	r3, [pc, #20]	; (1000a0a8 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000a094:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000a096:	20e2      	movs	r0, #226	; 0xe2
}
1000a098:	bd10      	pop	{r4, pc}
1000a09a:	46c0      	nop			; (mov r8, r8)
1000a09c:	10013098 	.word	0x10013098
1000a0a0:	10011da5 	.word	0x10011da5
1000a0a4:	1001345c 	.word	0x1001345c
1000a0a8:	10011c85 	.word	0x10011c85

1000a0ac <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000a0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a0ae:	0004      	movs	r4, r0
1000a0b0:	4b19      	ldr	r3, [pc, #100]	; (1000a118 <ble_disconnected_state_handler+0x6c>)
1000a0b2:	229b      	movs	r2, #155	; 0x9b
1000a0b4:	0092      	lsls	r2, r2, #2
1000a0b6:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a0b8:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a0ba:	2600      	movs	r6, #0
1000a0bc:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a0be:	001a      	movs	r2, r3
1000a0c0:	3a56      	subs	r2, #86	; 0x56
1000a0c2:	8811      	ldrh	r1, [r2, #0]
1000a0c4:	8822      	ldrh	r2, [r4, #0]
1000a0c6:	4291      	cmp	r1, r2
1000a0c8:	d119      	bne.n	1000a0fe <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a0ca:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000a0cc:	2a05      	cmp	r2, #5
1000a0ce:	d001      	beq.n	1000a0d4 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000a0d0:	2a08      	cmp	r2, #8
1000a0d2:	d101      	bne.n	1000a0d8 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000a0d4:	7007      	strb	r7, [r0, #0]
1000a0d6:	e012      	b.n	1000a0fe <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000a0d8:	2a07      	cmp	r2, #7
1000a0da:	d80f      	bhi.n	1000a0fc <ble_disconnected_state_handler+0x50>
1000a0dc:	0092      	lsls	r2, r2, #2
1000a0de:	490f      	ldr	r1, [pc, #60]	; (1000a11c <ble_disconnected_state_handler+0x70>)
1000a0e0:	588a      	ldr	r2, [r1, r2]
1000a0e2:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a0e4:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000a0e6:	4a0e      	ldr	r2, [pc, #56]	; (1000a120 <ble_disconnected_state_handler+0x74>)
1000a0e8:	7812      	ldrb	r2, [r2, #0]
1000a0ea:	2a00      	cmp	r2, #0
1000a0ec:	d007      	beq.n	1000a0fe <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000a0ee:	4a0c      	ldr	r2, [pc, #48]	; (1000a120 <ble_disconnected_state_handler+0x74>)
1000a0f0:	7812      	ldrb	r2, [r2, #0]
1000a0f2:	3a01      	subs	r2, #1
1000a0f4:	b2d2      	uxtb	r2, r2
1000a0f6:	490a      	ldr	r1, [pc, #40]	; (1000a120 <ble_disconnected_state_handler+0x74>)
1000a0f8:	700a      	strb	r2, [r1, #0]
1000a0fa:	e000      	b.n	1000a0fe <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000a0fc:	7006      	strb	r6, [r0, #0]
1000a0fe:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a100:	42ab      	cmp	r3, r5
1000a102:	d1db      	bne.n	1000a0bc <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000a104:	4807      	ldr	r0, [pc, #28]	; (1000a124 <ble_disconnected_state_handler+0x78>)
1000a106:	4b08      	ldr	r3, [pc, #32]	; (1000a128 <ble_disconnected_state_handler+0x7c>)
1000a108:	4798      	blx	r3
1000a10a:	8822      	ldrh	r2, [r4, #0]
1000a10c:	78a1      	ldrb	r1, [r4, #2]
1000a10e:	4807      	ldr	r0, [pc, #28]	; (1000a12c <ble_disconnected_state_handler+0x80>)
1000a110:	4b07      	ldr	r3, [pc, #28]	; (1000a130 <ble_disconnected_state_handler+0x84>)
1000a112:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000a114:	2000      	movs	r0, #0
1000a116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a118:	10016186 	.word	0x10016186
1000a11c:	100132d8 	.word	0x100132d8
1000a120:	10016394 	.word	0x10016394
1000a124:	10013098 	.word	0x10013098
1000a128:	10011da5 	.word	0x10011da5
1000a12c:	10013494 	.word	0x10013494
1000a130:	10011c85 	.word	0x10011c85

1000a134 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000a134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a136:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a138:	8801      	ldrh	r1, [r0, #0]
1000a13a:	4b28      	ldr	r3, [pc, #160]	; (1000a1dc <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a13c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000a13e:	891a      	ldrh	r2, [r3, #8]
1000a140:	428a      	cmp	r2, r1
1000a142:	d104      	bne.n	1000a14e <ble_encryption_status_change_handler+0x1a>
1000a144:	001a      	movs	r2, r3
1000a146:	325e      	adds	r2, #94	; 0x5e
1000a148:	7812      	ldrb	r2, [r2, #0]
1000a14a:	2a06      	cmp	r2, #6
1000a14c:	d02e      	beq.n	1000a1ac <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a14e:	3401      	adds	r4, #1
1000a150:	b2e4      	uxtb	r4, r4
1000a152:	337c      	adds	r3, #124	; 0x7c
1000a154:	2c05      	cmp	r4, #5
1000a156:	d1f2      	bne.n	1000a13e <ble_encryption_status_change_handler+0xa>
1000a158:	e039      	b.n	1000a1ce <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000a15a:	4920      	ldr	r1, [pc, #128]	; (1000a1dc <ble_encryption_status_change_handler+0xa8>)
1000a15c:	0163      	lsls	r3, r4, #5
1000a15e:	1b1a      	subs	r2, r3, r4
1000a160:	0092      	lsls	r2, r2, #2
1000a162:	188a      	adds	r2, r1, r2
1000a164:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000a166:	0014      	movs	r4, r2
1000a168:	345e      	adds	r4, #94	; 0x5e
1000a16a:	2307      	movs	r3, #7
1000a16c:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000a16e:	481c      	ldr	r0, [pc, #112]	; (1000a1e0 <ble_encryption_status_change_handler+0xac>)
1000a170:	4b1c      	ldr	r3, [pc, #112]	; (1000a1e4 <ble_encryption_status_change_handler+0xb0>)
1000a172:	4798      	blx	r3
1000a174:	481c      	ldr	r0, [pc, #112]	; (1000a1e8 <ble_encryption_status_change_handler+0xb4>)
1000a176:	4b1d      	ldr	r3, [pc, #116]	; (1000a1ec <ble_encryption_status_change_handler+0xb8>)
1000a178:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a17a:	25e2      	movs	r5, #226	; 0xe2
1000a17c:	e02b      	b.n	1000a1d6 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000a17e:	4818      	ldr	r0, [pc, #96]	; (1000a1e0 <ble_encryption_status_change_handler+0xac>)
1000a180:	4b18      	ldr	r3, [pc, #96]	; (1000a1e4 <ble_encryption_status_change_handler+0xb0>)
1000a182:	4798      	blx	r3
1000a184:	481a      	ldr	r0, [pc, #104]	; (1000a1f0 <ble_encryption_status_change_handler+0xbc>)
1000a186:	4b19      	ldr	r3, [pc, #100]	; (1000a1ec <ble_encryption_status_change_handler+0xb8>)
1000a188:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000a18a:	4914      	ldr	r1, [pc, #80]	; (1000a1dc <ble_encryption_status_change_handler+0xa8>)
1000a18c:	0163      	lsls	r3, r4, #5
1000a18e:	1b1a      	subs	r2, r3, r4
1000a190:	0092      	lsls	r2, r2, #2
1000a192:	188a      	adds	r2, r1, r2
1000a194:	0010      	movs	r0, r2
1000a196:	305e      	adds	r0, #94	; 0x5e
1000a198:	2708      	movs	r7, #8
1000a19a:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000a19c:	78f0      	ldrb	r0, [r6, #3]
1000a19e:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000a1a0:	78b2      	ldrb	r2, [r6, #2]
1000a1a2:	1b1c      	subs	r4, r3, r4
1000a1a4:	00a4      	lsls	r4, r4, #2
1000a1a6:	190c      	adds	r4, r1, r4
1000a1a8:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000a1aa:	e014      	b.n	1000a1d6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a1ac:	78b5      	ldrb	r5, [r6, #2]
1000a1ae:	2d00      	cmp	r5, #0
1000a1b0:	d0e5      	beq.n	1000a17e <ble_encryption_status_change_handler+0x4a>
1000a1b2:	e7d2      	b.n	1000a15a <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000a1b4:	4e0a      	ldr	r6, [pc, #40]	; (1000a1e0 <ble_encryption_status_change_handler+0xac>)
1000a1b6:	0030      	movs	r0, r6
1000a1b8:	4d0a      	ldr	r5, [pc, #40]	; (1000a1e4 <ble_encryption_status_change_handler+0xb0>)
1000a1ba:	47a8      	blx	r5
1000a1bc:	480c      	ldr	r0, [pc, #48]	; (1000a1f0 <ble_encryption_status_change_handler+0xbc>)
1000a1be:	4c0b      	ldr	r4, [pc, #44]	; (1000a1ec <ble_encryption_status_change_handler+0xb8>)
1000a1c0:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000a1c2:	0030      	movs	r0, r6
1000a1c4:	47a8      	blx	r5
1000a1c6:	480b      	ldr	r0, [pc, #44]	; (1000a1f4 <ble_encryption_status_change_handler+0xc0>)
1000a1c8:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a1ca:	25e2      	movs	r5, #226	; 0xe2
1000a1cc:	e003      	b.n	1000a1d6 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000a1ce:	78b5      	ldrb	r5, [r6, #2]
1000a1d0:	2d00      	cmp	r5, #0
1000a1d2:	d1c2      	bne.n	1000a15a <ble_encryption_status_change_handler+0x26>
1000a1d4:	e7ee      	b.n	1000a1b4 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000a1d6:	0028      	movs	r0, r5
1000a1d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a1da:	46c0      	nop			; (mov r8, r8)
1000a1dc:	10016128 	.word	0x10016128
1000a1e0:	10013098 	.word	0x10013098
1000a1e4:	10011da5 	.word	0x10011da5
1000a1e8:	100134c4 	.word	0x100134c4
1000a1ec:	10011c85 	.word	0x10011c85
1000a1f0:	100134d8 	.word	0x100134d8
1000a1f4:	100134fc 	.word	0x100134fc

1000a1f8 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000a1f8:	b510      	push	{r4, lr}
1000a1fa:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000a1fc:	4b15      	ldr	r3, [pc, #84]	; (1000a254 <ble_scan_info_handler+0x5c>)
1000a1fe:	781b      	ldrb	r3, [r3, #0]
1000a200:	b2db      	uxtb	r3, r3
1000a202:	2b13      	cmp	r3, #19
1000a204:	d812      	bhi.n	1000a22c <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000a206:	4c13      	ldr	r4, [pc, #76]	; (1000a254 <ble_scan_info_handler+0x5c>)
1000a208:	7823      	ldrb	r3, [r4, #0]
1000a20a:	b2db      	uxtb	r3, r3
1000a20c:	0098      	lsls	r0, r3, #2
1000a20e:	18c0      	adds	r0, r0, r3
1000a210:	00c0      	lsls	r0, r0, #3
1000a212:	18c3      	adds	r3, r0, r3
1000a214:	4810      	ldr	r0, [pc, #64]	; (1000a258 <ble_scan_info_handler+0x60>)
1000a216:	1818      	adds	r0, r3, r0
1000a218:	2229      	movs	r2, #41	; 0x29
1000a21a:	4b10      	ldr	r3, [pc, #64]	; (1000a25c <ble_scan_info_handler+0x64>)
1000a21c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000a21e:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000a220:	7823      	ldrb	r3, [r4, #0]
1000a222:	3301      	adds	r3, #1
1000a224:	b2db      	uxtb	r3, r3
1000a226:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000a228:	2300      	movs	r3, #0
1000a22a:	e011      	b.n	1000a250 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000a22c:	480c      	ldr	r0, [pc, #48]	; (1000a260 <ble_scan_info_handler+0x68>)
1000a22e:	4b0d      	ldr	r3, [pc, #52]	; (1000a264 <ble_scan_info_handler+0x6c>)
1000a230:	4798      	blx	r3
1000a232:	480d      	ldr	r0, [pc, #52]	; (1000a268 <ble_scan_info_handler+0x70>)
1000a234:	4b0d      	ldr	r3, [pc, #52]	; (1000a26c <ble_scan_info_handler+0x74>)
1000a236:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a238:	4b0d      	ldr	r3, [pc, #52]	; (1000a270 <ble_scan_info_handler+0x78>)
1000a23a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a23c:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000a23e:	2800      	cmp	r0, #0
1000a240:	d006      	beq.n	1000a250 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000a242:	4807      	ldr	r0, [pc, #28]	; (1000a260 <ble_scan_info_handler+0x68>)
1000a244:	4b07      	ldr	r3, [pc, #28]	; (1000a264 <ble_scan_info_handler+0x6c>)
1000a246:	4798      	blx	r3
1000a248:	480a      	ldr	r0, [pc, #40]	; (1000a274 <ble_scan_info_handler+0x7c>)
1000a24a:	4b08      	ldr	r3, [pc, #32]	; (1000a26c <ble_scan_info_handler+0x74>)
1000a24c:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000a24e:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000a250:	0018      	movs	r0, r3
1000a252:	bd10      	pop	{r4, pc}
1000a254:	10014b44 	.word	0x10014b44
1000a258:	1001640c 	.word	0x1001640c
1000a25c:	10011c63 	.word	0x10011c63
1000a260:	10013098 	.word	0x10013098
1000a264:	10011da5 	.word	0x10011da5
1000a268:	10013524 	.word	0x10013524
1000a26c:	10011c85 	.word	0x10011c85
1000a270:	1000dac9 	.word	0x1000dac9
1000a274:	1001355c 	.word	0x1001355c

1000a278 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a27a:	464f      	mov	r7, r9
1000a27c:	4646      	mov	r6, r8
1000a27e:	b4c0      	push	{r6, r7}
1000a280:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a282:	8841      	ldrh	r1, [r0, #2]
1000a284:	4b3a      	ldr	r3, [pc, #232]	; (1000a370 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a286:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000a288:	891a      	ldrh	r2, [r3, #8]
1000a28a:	428a      	cmp	r2, r1
1000a28c:	d104      	bne.n	1000a298 <ble_pair_done_handler+0x20>
1000a28e:	001a      	movs	r2, r3
1000a290:	325e      	adds	r2, #94	; 0x5e
1000a292:	7812      	ldrb	r2, [r2, #0]
1000a294:	2a03      	cmp	r2, #3
1000a296:	d062      	beq.n	1000a35e <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a298:	3401      	adds	r4, #1
1000a29a:	b2e4      	uxtb	r4, r4
1000a29c:	337c      	adds	r3, #124	; 0x7c
1000a29e:	2c05      	cmp	r4, #5
1000a2a0:	d1f2      	bne.n	1000a288 <ble_pair_done_handler+0x10>
1000a2a2:	e02b      	b.n	1000a2fc <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000a2a4:	0163      	lsls	r3, r4, #5
1000a2a6:	1b1c      	subs	r4, r3, r4
1000a2a8:	00a4      	lsls	r4, r4, #2
1000a2aa:	4b31      	ldr	r3, [pc, #196]	; (1000a370 <ble_pair_done_handler+0xf8>)
1000a2ac:	191c      	adds	r4, r3, r4
1000a2ae:	345e      	adds	r4, #94	; 0x5e
1000a2b0:	7823      	ldrb	r3, [r4, #0]
1000a2b2:	2b01      	cmp	r3, #1
1000a2b4:	d913      	bls.n	1000a2de <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000a2b6:	482f      	ldr	r0, [pc, #188]	; (1000a374 <ble_pair_done_handler+0xfc>)
1000a2b8:	4b2f      	ldr	r3, [pc, #188]	; (1000a378 <ble_pair_done_handler+0x100>)
1000a2ba:	4798      	blx	r3
1000a2bc:	482f      	ldr	r0, [pc, #188]	; (1000a37c <ble_pair_done_handler+0x104>)
1000a2be:	4b30      	ldr	r3, [pc, #192]	; (1000a380 <ble_pair_done_handler+0x108>)
1000a2c0:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000a2c2:	8868      	ldrh	r0, [r5, #2]
1000a2c4:	2113      	movs	r1, #19
1000a2c6:	4b2f      	ldr	r3, [pc, #188]	; (1000a384 <ble_pair_done_handler+0x10c>)
1000a2c8:	4798      	blx	r3
1000a2ca:	1e06      	subs	r6, r0, #0
1000a2cc:	d04b      	beq.n	1000a366 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000a2ce:	4829      	ldr	r0, [pc, #164]	; (1000a374 <ble_pair_done_handler+0xfc>)
1000a2d0:	4b29      	ldr	r3, [pc, #164]	; (1000a378 <ble_pair_done_handler+0x100>)
1000a2d2:	4798      	blx	r3
1000a2d4:	482c      	ldr	r0, [pc, #176]	; (1000a388 <ble_pair_done_handler+0x110>)
1000a2d6:	4b2a      	ldr	r3, [pc, #168]	; (1000a380 <ble_pair_done_handler+0x108>)
1000a2d8:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a2da:	26e2      	movs	r6, #226	; 0xe2
1000a2dc:	e043      	b.n	1000a366 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000a2de:	2600      	movs	r6, #0
1000a2e0:	e041      	b.n	1000a366 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a2e2:	4e24      	ldr	r6, [pc, #144]	; (1000a374 <ble_pair_done_handler+0xfc>)
1000a2e4:	0030      	movs	r0, r6
1000a2e6:	4d24      	ldr	r5, [pc, #144]	; (1000a378 <ble_pair_done_handler+0x100>)
1000a2e8:	47a8      	blx	r5
1000a2ea:	4828      	ldr	r0, [pc, #160]	; (1000a38c <ble_pair_done_handler+0x114>)
1000a2ec:	4c24      	ldr	r4, [pc, #144]	; (1000a380 <ble_pair_done_handler+0x108>)
1000a2ee:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000a2f0:	0030      	movs	r0, r6
1000a2f2:	47a8      	blx	r5
1000a2f4:	4826      	ldr	r0, [pc, #152]	; (1000a390 <ble_pair_done_handler+0x118>)
1000a2f6:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000a2f8:	26e2      	movs	r6, #226	; 0xe2
1000a2fa:	e034      	b.n	1000a366 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a2fc:	792b      	ldrb	r3, [r5, #4]
1000a2fe:	2b00      	cmp	r3, #0
1000a300:	d1d0      	bne.n	1000a2a4 <ble_pair_done_handler+0x2c>
1000a302:	e7ee      	b.n	1000a2e2 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000a304:	481b      	ldr	r0, [pc, #108]	; (1000a374 <ble_pair_done_handler+0xfc>)
1000a306:	4b1c      	ldr	r3, [pc, #112]	; (1000a378 <ble_pair_done_handler+0x100>)
1000a308:	4798      	blx	r3
1000a30a:	4820      	ldr	r0, [pc, #128]	; (1000a38c <ble_pair_done_handler+0x114>)
1000a30c:	4b1c      	ldr	r3, [pc, #112]	; (1000a380 <ble_pair_done_handler+0x108>)
1000a30e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000a310:	782a      	ldrb	r2, [r5, #0]
1000a312:	4b17      	ldr	r3, [pc, #92]	; (1000a370 <ble_pair_done_handler+0xf8>)
1000a314:	4699      	mov	r9, r3
1000a316:	0167      	lsls	r7, r4, #5
1000a318:	1b3b      	subs	r3, r7, r4
1000a31a:	009b      	lsls	r3, r3, #2
1000a31c:	444b      	add	r3, r9
1000a31e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000a320:	792a      	ldrb	r2, [r5, #4]
1000a322:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000a324:	335e      	adds	r3, #94	; 0x5e
1000a326:	2205      	movs	r2, #5
1000a328:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000a32a:	1b38      	subs	r0, r7, r4
1000a32c:	0080      	lsls	r0, r0, #2
1000a32e:	4448      	add	r0, r9
1000a330:	3036      	adds	r0, #54	; 0x36
1000a332:	0029      	movs	r1, r5
1000a334:	3122      	adds	r1, #34	; 0x22
1000a336:	320b      	adds	r2, #11
1000a338:	4b16      	ldr	r3, [pc, #88]	; (1000a394 <ble_pair_done_handler+0x11c>)
1000a33a:	4698      	mov	r8, r3
1000a33c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000a33e:	1b38      	subs	r0, r7, r4
1000a340:	0080      	lsls	r0, r0, #2
1000a342:	4448      	add	r0, r9
1000a344:	3046      	adds	r0, #70	; 0x46
1000a346:	0029      	movs	r1, r5
1000a348:	3132      	adds	r1, #50	; 0x32
1000a34a:	2217      	movs	r2, #23
1000a34c:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000a34e:	1b38      	subs	r0, r7, r4
1000a350:	0080      	lsls	r0, r0, #2
1000a352:	4448      	add	r0, r9
1000a354:	301a      	adds	r0, #26
1000a356:	1da9      	adds	r1, r5, #6
1000a358:	221c      	movs	r2, #28
1000a35a:	47c0      	blx	r8
1000a35c:	e003      	b.n	1000a366 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000a35e:	792e      	ldrb	r6, [r5, #4]
1000a360:	2e00      	cmp	r6, #0
1000a362:	d0cf      	beq.n	1000a304 <ble_pair_done_handler+0x8c>
1000a364:	e79e      	b.n	1000a2a4 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000a366:	0030      	movs	r0, r6
1000a368:	bc0c      	pop	{r2, r3}
1000a36a:	4690      	mov	r8, r2
1000a36c:	4699      	mov	r9, r3
1000a36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a370:	10016128 	.word	0x10016128
1000a374:	10013098 	.word	0x10013098
1000a378:	10011da5 	.word	0x10011da5
1000a37c:	10013574 	.word	0x10013574
1000a380:	10011c85 	.word	0x10011c85
1000a384:	1000dae9 	.word	0x1000dae9
1000a388:	10013594 	.word	0x10013594
1000a38c:	100135b0 	.word	0x100135b0
1000a390:	100135dc 	.word	0x100135dc
1000a394:	10011c63 	.word	0x10011c63

1000a398 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000a398:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000a39a:	8800      	ldrh	r0, [r0, #0]
1000a39c:	2378      	movs	r3, #120	; 0x78
1000a39e:	2201      	movs	r2, #1
1000a3a0:	2101      	movs	r1, #1
1000a3a2:	4c02      	ldr	r4, [pc, #8]	; (1000a3ac <ble_conn_param_update_req+0x14>)
1000a3a4:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000a3a6:	2000      	movs	r0, #0
1000a3a8:	bd10      	pop	{r4, pc}
1000a3aa:	46c0      	nop			; (mov r8, r8)
1000a3ac:	1000db09 	.word	0x1000db09

1000a3b0 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000a3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a3b2:	4657      	mov	r7, sl
1000a3b4:	464e      	mov	r6, r9
1000a3b6:	4645      	mov	r5, r8
1000a3b8:	b4e0      	push	{r5, r6, r7}
1000a3ba:	b084      	sub	sp, #16
1000a3bc:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000a3be:	2209      	movs	r2, #9
1000a3c0:	2100      	movs	r1, #0
1000a3c2:	a801      	add	r0, sp, #4
1000a3c4:	4b6b      	ldr	r3, [pc, #428]	; (1000a574 <ble_slave_security_request_handler+0x1c4>)
1000a3c6:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a3c8:	8825      	ldrh	r5, [r4, #0]
1000a3ca:	496b      	ldr	r1, [pc, #428]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a3cc:	000a      	movs	r2, r1
1000a3ce:	2300      	movs	r3, #0
1000a3d0:	8910      	ldrh	r0, [r2, #8]
1000a3d2:	42a8      	cmp	r0, r5
1000a3d4:	d116      	bne.n	1000a404 <ble_slave_security_request_handler+0x54>
1000a3d6:	0010      	movs	r0, r2
1000a3d8:	305e      	adds	r0, #94	; 0x5e
1000a3da:	7800      	ldrb	r0, [r0, #0]
1000a3dc:	2802      	cmp	r0, #2
1000a3de:	d111      	bne.n	1000a404 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a3e0:	4865      	ldr	r0, [pc, #404]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a3e2:	015a      	lsls	r2, r3, #5
1000a3e4:	1ad6      	subs	r6, r2, r3
1000a3e6:	00b6      	lsls	r6, r6, #2
1000a3e8:	1986      	adds	r6, r0, r6
1000a3ea:	365e      	adds	r6, #94	; 0x5e
1000a3ec:	2206      	movs	r2, #6
1000a3ee:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a3f0:	32f9      	adds	r2, #249	; 0xf9
1000a3f2:	4013      	ands	r3, r2
1000a3f4:	015a      	lsls	r2, r3, #5
1000a3f6:	1ad2      	subs	r2, r2, r3
1000a3f8:	0092      	lsls	r2, r2, #2
1000a3fa:	1882      	adds	r2, r0, r2
1000a3fc:	7d12      	ldrb	r2, [r2, #20]
1000a3fe:	07d0      	lsls	r0, r2, #31
1000a400:	d405      	bmi.n	1000a40e <ble_slave_security_request_handler+0x5e>
1000a402:	e01b      	b.n	1000a43c <ble_slave_security_request_handler+0x8c>
1000a404:	3301      	adds	r3, #1
1000a406:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a408:	2b05      	cmp	r3, #5
1000a40a:	d1e1      	bne.n	1000a3d0 <ble_slave_security_request_handler+0x20>
1000a40c:	e01e      	b.n	1000a44c <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000a40e:	78e0      	ldrb	r0, [r4, #3]
1000a410:	2800      	cmp	r0, #0
1000a412:	d013      	beq.n	1000a43c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000a414:	0159      	lsls	r1, r3, #5
1000a416:	1ac9      	subs	r1, r1, r3
1000a418:	008b      	lsls	r3, r1, #2
1000a41a:	4957      	ldr	r1, [pc, #348]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a41c:	18c9      	adds	r1, r1, r3
1000a41e:	311a      	adds	r1, #26
1000a420:	8820      	ldrh	r0, [r4, #0]
1000a422:	4b56      	ldr	r3, [pc, #344]	; (1000a57c <ble_slave_security_request_handler+0x1cc>)
1000a424:	4798      	blx	r3
1000a426:	2800      	cmp	r0, #0
1000a428:	d100      	bne.n	1000a42c <ble_slave_security_request_handler+0x7c>
1000a42a:	e09d      	b.n	1000a568 <ble_slave_security_request_handler+0x1b8>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000a42c:	4854      	ldr	r0, [pc, #336]	; (1000a580 <ble_slave_security_request_handler+0x1d0>)
1000a42e:	4b55      	ldr	r3, [pc, #340]	; (1000a584 <ble_slave_security_request_handler+0x1d4>)
1000a430:	4798      	blx	r3
1000a432:	4855      	ldr	r0, [pc, #340]	; (1000a588 <ble_slave_security_request_handler+0x1d8>)
1000a434:	4b55      	ldr	r3, [pc, #340]	; (1000a58c <ble_slave_security_request_handler+0x1dc>)
1000a436:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000a438:	20e2      	movs	r0, #226	; 0xe2
1000a43a:	e095      	b.n	1000a568 <ble_slave_security_request_handler+0x1b8>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000a43c:	015a      	lsls	r2, r3, #5
1000a43e:	1ad3      	subs	r3, r2, r3
1000a440:	009b      	lsls	r3, r3, #2
1000a442:	4a4d      	ldr	r2, [pc, #308]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a444:	18d3      	adds	r3, r2, r3
1000a446:	335e      	adds	r3, #94	; 0x5e
1000a448:	2202      	movs	r2, #2
1000a44a:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a44c:	8825      	ldrh	r5, [r4, #0]
1000a44e:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a450:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a452:	0016      	movs	r6, r2
1000a454:	8908      	ldrh	r0, [r1, #8]
1000a456:	42a8      	cmp	r0, r5
1000a458:	d10d      	bne.n	1000a476 <ble_slave_security_request_handler+0xc6>
1000a45a:	0008      	movs	r0, r1
1000a45c:	305e      	adds	r0, #94	; 0x5e
1000a45e:	7800      	ldrb	r0, [r0, #0]
1000a460:	2802      	cmp	r0, #2
1000a462:	d108      	bne.n	1000a476 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a464:	0152      	lsls	r2, r2, #5
1000a466:	1b92      	subs	r2, r2, r6
1000a468:	0096      	lsls	r6, r2, #2
1000a46a:	4a43      	ldr	r2, [pc, #268]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a46c:	1992      	adds	r2, r2, r6
1000a46e:	325e      	adds	r2, #94	; 0x5e
1000a470:	2103      	movs	r1, #3
1000a472:	7011      	strb	r1, [r2, #0]
			break;
1000a474:	e005      	b.n	1000a482 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a476:	3301      	adds	r3, #1
1000a478:	b2db      	uxtb	r3, r3
1000a47a:	3201      	adds	r2, #1
1000a47c:	317c      	adds	r1, #124	; 0x7c
1000a47e:	2b05      	cmp	r3, #5
1000a480:	d1e7      	bne.n	1000a452 <ble_slave_security_request_handler+0xa2>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a482:	aa01      	add	r2, sp, #4
1000a484:	2102      	movs	r1, #2
1000a486:	7211      	strb	r1, [r2, #8]
	features.bond = slave_sec_req->bond;
1000a488:	78e1      	ldrb	r1, [r4, #3]
1000a48a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000a48c:	2101      	movs	r1, #1
1000a48e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000a490:	3103      	adds	r1, #3
1000a492:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a494:	001f      	movs	r7, r3
1000a496:	015a      	lsls	r2, r3, #5
1000a498:	1ad2      	subs	r2, r2, r3
1000a49a:	0092      	lsls	r2, r2, #2
1000a49c:	4936      	ldr	r1, [pc, #216]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a49e:	5c52      	ldrb	r2, [r2, r1]
1000a4a0:	2a02      	cmp	r2, #2
1000a4a2:	d104      	bne.n	1000a4ae <ble_slave_security_request_handler+0xfe>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a4a4:	aa01      	add	r2, sp, #4
1000a4a6:	2103      	movs	r1, #3
1000a4a8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a4aa:	71d1      	strb	r1, [r2, #7]
1000a4ac:	e003      	b.n	1000a4b6 <ble_slave_security_request_handler+0x106>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a4ae:	aa01      	add	r2, sp, #4
1000a4b0:	2101      	movs	r1, #1
1000a4b2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a4b4:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000a4b6:	aa01      	add	r2, sp, #4
1000a4b8:	2110      	movs	r1, #16
1000a4ba:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a4bc:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a4be:	017a      	lsls	r2, r7, #5
1000a4c0:	1bd2      	subs	r2, r2, r7
1000a4c2:	0092      	lsls	r2, r2, #2
1000a4c4:	492c      	ldr	r1, [pc, #176]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a4c6:	188a      	adds	r2, r1, r2
1000a4c8:	7e12      	ldrb	r2, [r2, #24]
1000a4ca:	2a40      	cmp	r2, #64	; 0x40
1000a4cc:	d134      	bne.n	1000a538 <ble_slave_security_request_handler+0x188>
1000a4ce:	015a      	lsls	r2, r3, #5
1000a4d0:	1ad3      	subs	r3, r2, r3
1000a4d2:	009b      	lsls	r3, r3, #2
1000a4d4:	469a      	mov	sl, r3
1000a4d6:	001e      	movs	r6, r3
1000a4d8:	3660      	adds	r6, #96	; 0x60
1000a4da:	1876      	adds	r6, r6, r1
1000a4dc:	4655      	mov	r5, sl
1000a4de:	3568      	adds	r5, #104	; 0x68
1000a4e0:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a4e2:	4b2b      	ldr	r3, [pc, #172]	; (1000a590 <ble_slave_security_request_handler+0x1e0>)
1000a4e4:	4699      	mov	r9, r3
1000a4e6:	230f      	movs	r3, #15
1000a4e8:	4698      	mov	r8, r3
1000a4ea:	47c8      	blx	r9
1000a4ec:	4643      	mov	r3, r8
1000a4ee:	4018      	ands	r0, r3
1000a4f0:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a4f2:	47c8      	blx	r9
1000a4f4:	4643      	mov	r3, r8
1000a4f6:	4018      	ands	r0, r3
1000a4f8:	74b0      	strb	r0, [r6, #18]
1000a4fa:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a4fc:	42ae      	cmp	r6, r5
1000a4fe:	d1f4      	bne.n	1000a4ea <ble_slave_security_request_handler+0x13a>
1000a500:	4656      	mov	r6, sl
1000a502:	3670      	adds	r6, #112	; 0x70
1000a504:	4a1c      	ldr	r2, [pc, #112]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a506:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a508:	4b21      	ldr	r3, [pc, #132]	; (1000a590 <ble_slave_security_request_handler+0x1e0>)
1000a50a:	4699      	mov	r9, r3
1000a50c:	230f      	movs	r3, #15
1000a50e:	4698      	mov	r8, r3
1000a510:	47c8      	blx	r9
1000a512:	4643      	mov	r3, r8
1000a514:	4018      	ands	r0, r3
1000a516:	7028      	strb	r0, [r5, #0]
1000a518:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a51a:	42b5      	cmp	r5, r6
1000a51c:	d1f8      	bne.n	1000a510 <ble_slave_security_request_handler+0x160>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a51e:	4b1c      	ldr	r3, [pc, #112]	; (1000a590 <ble_slave_security_request_handler+0x1e0>)
1000a520:	4798      	blx	r3
1000a522:	017b      	lsls	r3, r7, #5
1000a524:	1bdb      	subs	r3, r3, r7
1000a526:	009b      	lsls	r3, r3, #2
1000a528:	4a13      	ldr	r2, [pc, #76]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a52a:	18d3      	adds	r3, r2, r3
1000a52c:	001a      	movs	r2, r3
1000a52e:	3270      	adds	r2, #112	; 0x70
1000a530:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a532:	337a      	adds	r3, #122	; 0x7a
1000a534:	2210      	movs	r2, #16
1000a536:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a538:	017a      	lsls	r2, r7, #5
1000a53a:	1bd7      	subs	r7, r2, r7
1000a53c:	00bf      	lsls	r7, r7, #2
1000a53e:	3760      	adds	r7, #96	; 0x60
1000a540:	4a0d      	ldr	r2, [pc, #52]	; (1000a578 <ble_slave_security_request_handler+0x1c8>)
1000a542:	18ba      	adds	r2, r7, r2
1000a544:	8820      	ldrh	r0, [r4, #0]
1000a546:	2300      	movs	r3, #0
1000a548:	a901      	add	r1, sp, #4
1000a54a:	4c12      	ldr	r4, [pc, #72]	; (1000a594 <ble_slave_security_request_handler+0x1e4>)
1000a54c:	47a0      	blx	r4
1000a54e:	2800      	cmp	r0, #0
1000a550:	d00a      	beq.n	1000a568 <ble_slave_security_request_handler+0x1b8>
	{
		features.bond = false;
1000a552:	ab01      	add	r3, sp, #4
1000a554:	2200      	movs	r2, #0
1000a556:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a558:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000a55a:	4809      	ldr	r0, [pc, #36]	; (1000a580 <ble_slave_security_request_handler+0x1d0>)
1000a55c:	4b09      	ldr	r3, [pc, #36]	; (1000a584 <ble_slave_security_request_handler+0x1d4>)
1000a55e:	4798      	blx	r3
1000a560:	480d      	ldr	r0, [pc, #52]	; (1000a598 <ble_slave_security_request_handler+0x1e8>)
1000a562:	4b0a      	ldr	r3, [pc, #40]	; (1000a58c <ble_slave_security_request_handler+0x1dc>)
1000a564:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a566:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a568:	b004      	add	sp, #16
1000a56a:	bc1c      	pop	{r2, r3, r4}
1000a56c:	4690      	mov	r8, r2
1000a56e:	4699      	mov	r9, r3
1000a570:	46a2      	mov	sl, r4
1000a572:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a574:	10011c75 	.word	0x10011c75
1000a578:	10016128 	.word	0x10016128
1000a57c:	1000e6cd 	.word	0x1000e6cd
1000a580:	10013098 	.word	0x10013098
1000a584:	10011da5 	.word	0x10011da5
1000a588:	1001360c 	.word	0x1001360c
1000a58c:	10011c85 	.word	0x10011c85
1000a590:	10011db9 	.word	0x10011db9
1000a594:	1000e4e1 	.word	0x1000e4e1
1000a598:	10013624 	.word	0x10013624

1000a59c <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000a59c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a59e:	465f      	mov	r7, fp
1000a5a0:	4656      	mov	r6, sl
1000a5a2:	464d      	mov	r5, r9
1000a5a4:	4644      	mov	r4, r8
1000a5a6:	b4f0      	push	{r4, r5, r6, r7}
1000a5a8:	b085      	sub	sp, #20
1000a5aa:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a5ac:	8804      	ldrh	r4, [r0, #0]
1000a5ae:	4a49      	ldr	r2, [pc, #292]	; (1000a6d4 <ble_pair_request_handler+0x138>)
1000a5b0:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a5b2:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000a5b4:	8910      	ldrh	r0, [r2, #8]
1000a5b6:	42a0      	cmp	r0, r4
1000a5b8:	d10d      	bne.n	1000a5d6 <ble_pair_request_handler+0x3a>
1000a5ba:	0010      	movs	r0, r2
1000a5bc:	305e      	adds	r0, #94	; 0x5e
1000a5be:	7800      	ldrb	r0, [r0, #0]
1000a5c0:	2802      	cmp	r0, #2
1000a5c2:	d108      	bne.n	1000a5d6 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000a5c4:	014a      	lsls	r2, r1, #5
1000a5c6:	1a52      	subs	r2, r2, r1
1000a5c8:	0095      	lsls	r5, r2, #2
1000a5ca:	4a42      	ldr	r2, [pc, #264]	; (1000a6d4 <ble_pair_request_handler+0x138>)
1000a5cc:	1952      	adds	r2, r2, r5
1000a5ce:	325e      	adds	r2, #94	; 0x5e
1000a5d0:	2103      	movs	r1, #3
1000a5d2:	7011      	strb	r1, [r2, #0]
			break;
1000a5d4:	e005      	b.n	1000a5e2 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a5d6:	3301      	adds	r3, #1
1000a5d8:	b2db      	uxtb	r3, r3
1000a5da:	3101      	adds	r1, #1
1000a5dc:	327c      	adds	r2, #124	; 0x7c
1000a5de:	2b05      	cmp	r3, #5
1000a5e0:	d1e8      	bne.n	1000a5b4 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000a5e2:	aa01      	add	r2, sp, #4
1000a5e4:	2102      	movs	r1, #2
1000a5e6:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000a5e8:	3901      	subs	r1, #1
1000a5ea:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000a5ec:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000a5ee:	2100      	movs	r1, #0
1000a5f0:	7011      	strb	r1, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000a5f2:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000a5f4:	001f      	movs	r7, r3
1000a5f6:	015a      	lsls	r2, r3, #5
1000a5f8:	1ad2      	subs	r2, r2, r3
1000a5fa:	0092      	lsls	r2, r2, #2
1000a5fc:	4935      	ldr	r1, [pc, #212]	; (1000a6d4 <ble_pair_request_handler+0x138>)
1000a5fe:	5c52      	ldrb	r2, [r2, r1]
1000a600:	2a02      	cmp	r2, #2
1000a602:	d104      	bne.n	1000a60e <ble_pair_request_handler+0x72>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a604:	aa01      	add	r2, sp, #4
1000a606:	2103      	movs	r1, #3
1000a608:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000a60a:	71d1      	strb	r1, [r2, #7]
1000a60c:	e003      	b.n	1000a616 <ble_pair_request_handler+0x7a>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000a60e:	aa01      	add	r2, sp, #4
1000a610:	2101      	movs	r1, #1
1000a612:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000a614:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000a616:	aa01      	add	r2, sp, #4
1000a618:	2110      	movs	r1, #16
1000a61a:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000a61c:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000a61e:	017a      	lsls	r2, r7, #5
1000a620:	1bd2      	subs	r2, r2, r7
1000a622:	0092      	lsls	r2, r2, #2
1000a624:	492b      	ldr	r1, [pc, #172]	; (1000a6d4 <ble_pair_request_handler+0x138>)
1000a626:	188a      	adds	r2, r1, r2
1000a628:	7e12      	ldrb	r2, [r2, #24]
1000a62a:	2a40      	cmp	r2, #64	; 0x40
1000a62c:	d131      	bne.n	1000a692 <ble_pair_request_handler+0xf6>
1000a62e:	015a      	lsls	r2, r3, #5
1000a630:	1ad3      	subs	r3, r2, r3
1000a632:	009b      	lsls	r3, r3, #2
1000a634:	469a      	mov	sl, r3
1000a636:	001d      	movs	r5, r3
1000a638:	3560      	adds	r5, #96	; 0x60
1000a63a:	186d      	adds	r5, r5, r1
1000a63c:	4654      	mov	r4, sl
1000a63e:	3468      	adds	r4, #104	; 0x68
1000a640:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a642:	4b25      	ldr	r3, [pc, #148]	; (1000a6d8 <ble_pair_request_handler+0x13c>)
1000a644:	4699      	mov	r9, r3
1000a646:	260f      	movs	r6, #15
1000a648:	47c8      	blx	r9
1000a64a:	4030      	ands	r0, r6
1000a64c:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000a64e:	47c8      	blx	r9
1000a650:	4030      	ands	r0, r6
1000a652:	74a8      	strb	r0, [r5, #18]
1000a654:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000a656:	42a5      	cmp	r5, r4
1000a658:	d1f6      	bne.n	1000a648 <ble_pair_request_handler+0xac>
1000a65a:	4655      	mov	r5, sl
1000a65c:	3570      	adds	r5, #112	; 0x70
1000a65e:	4a1d      	ldr	r2, [pc, #116]	; (1000a6d4 <ble_pair_request_handler+0x138>)
1000a660:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000a662:	4b1d      	ldr	r3, [pc, #116]	; (1000a6d8 <ble_pair_request_handler+0x13c>)
1000a664:	4699      	mov	r9, r3
1000a666:	230f      	movs	r3, #15
1000a668:	4698      	mov	r8, r3
1000a66a:	47c8      	blx	r9
1000a66c:	4643      	mov	r3, r8
1000a66e:	4018      	ands	r0, r3
1000a670:	7020      	strb	r0, [r4, #0]
1000a672:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000a674:	42ac      	cmp	r4, r5
1000a676:	d1f8      	bne.n	1000a66a <ble_pair_request_handler+0xce>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000a678:	4b17      	ldr	r3, [pc, #92]	; (1000a6d8 <ble_pair_request_handler+0x13c>)
1000a67a:	4798      	blx	r3
1000a67c:	017b      	lsls	r3, r7, #5
1000a67e:	1bdb      	subs	r3, r3, r7
1000a680:	009b      	lsls	r3, r3, #2
1000a682:	4a14      	ldr	r2, [pc, #80]	; (1000a6d4 <ble_pair_request_handler+0x138>)
1000a684:	18d3      	adds	r3, r2, r3
1000a686:	001a      	movs	r2, r3
1000a688:	3270      	adds	r2, #112	; 0x70
1000a68a:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000a68c:	337a      	adds	r3, #122	; 0x7a
1000a68e:	2210      	movs	r2, #16
1000a690:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000a692:	017a      	lsls	r2, r7, #5
1000a694:	1bd7      	subs	r7, r2, r7
1000a696:	00bf      	lsls	r7, r7, #2
1000a698:	3760      	adds	r7, #96	; 0x60
1000a69a:	4a0e      	ldr	r2, [pc, #56]	; (1000a6d4 <ble_pair_request_handler+0x138>)
1000a69c:	18ba      	adds	r2, r7, r2
1000a69e:	465b      	mov	r3, fp
1000a6a0:	8818      	ldrh	r0, [r3, #0]
1000a6a2:	2300      	movs	r3, #0
1000a6a4:	a901      	add	r1, sp, #4
1000a6a6:	4c0d      	ldr	r4, [pc, #52]	; (1000a6dc <ble_pair_request_handler+0x140>)
1000a6a8:	47a0      	blx	r4
1000a6aa:	2800      	cmp	r0, #0
1000a6ac:	d00a      	beq.n	1000a6c4 <ble_pair_request_handler+0x128>
	{
		features.bond = false;
1000a6ae:	ab01      	add	r3, sp, #4
1000a6b0:	2200      	movs	r2, #0
1000a6b2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000a6b4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000a6b6:	480a      	ldr	r0, [pc, #40]	; (1000a6e0 <ble_pair_request_handler+0x144>)
1000a6b8:	4b0a      	ldr	r3, [pc, #40]	; (1000a6e4 <ble_pair_request_handler+0x148>)
1000a6ba:	4798      	blx	r3
1000a6bc:	480a      	ldr	r0, [pc, #40]	; (1000a6e8 <ble_pair_request_handler+0x14c>)
1000a6be:	4b0b      	ldr	r3, [pc, #44]	; (1000a6ec <ble_pair_request_handler+0x150>)
1000a6c0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a6c2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000a6c4:	b005      	add	sp, #20
1000a6c6:	bc3c      	pop	{r2, r3, r4, r5}
1000a6c8:	4690      	mov	r8, r2
1000a6ca:	4699      	mov	r9, r3
1000a6cc:	46a2      	mov	sl, r4
1000a6ce:	46ab      	mov	fp, r5
1000a6d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a6d2:	46c0      	nop			; (mov r8, r8)
1000a6d4:	10016128 	.word	0x10016128
1000a6d8:	10011db9 	.word	0x10011db9
1000a6dc:	1000e4e1 	.word	0x1000e4e1
1000a6e0:	10013098 	.word	0x10013098
1000a6e4:	10011da5 	.word	0x10011da5
1000a6e8:	10013650 	.word	0x10013650
1000a6ec:	10011c85 	.word	0x10011c85

1000a6f0 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6f2:	b085      	sub	sp, #20
1000a6f4:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000a6f6:	2206      	movs	r2, #6
1000a6f8:	493d      	ldr	r1, [pc, #244]	; (1000a7f0 <ble_pair_key_request_handler+0x100>)
1000a6fa:	a802      	add	r0, sp, #8
1000a6fc:	4e3d      	ldr	r6, [pc, #244]	; (1000a7f4 <ble_pair_key_request_handler+0x104>)
1000a6fe:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000a700:	ac01      	add	r4, sp, #4
1000a702:	2204      	movs	r2, #4
1000a704:	0029      	movs	r1, r5
1000a706:	0020      	movs	r0, r4
1000a708:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000a70a:	78e3      	ldrb	r3, [r4, #3]
1000a70c:	2b00      	cmp	r3, #0
1000a70e:	d162      	bne.n	1000a7d6 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a710:	4839      	ldr	r0, [pc, #228]	; (1000a7f8 <ble_pair_key_request_handler+0x108>)
1000a712:	4b3a      	ldr	r3, [pc, #232]	; (1000a7fc <ble_pair_key_request_handler+0x10c>)
1000a714:	4798      	blx	r3
1000a716:	483a      	ldr	r0, [pc, #232]	; (1000a800 <ble_pair_key_request_handler+0x110>)
1000a718:	4b3a      	ldr	r3, [pc, #232]	; (1000a804 <ble_pair_key_request_handler+0x114>)
1000a71a:	4798      	blx	r3
1000a71c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a71e:	4c3a      	ldr	r4, [pc, #232]	; (1000a808 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000a720:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000a722:	201e      	movs	r0, #30
1000a724:	47a0      	blx	r4
1000a726:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000a728:	2b00      	cmp	r3, #0
1000a72a:	d11a      	bne.n	1000a762 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000a72c:	4f32      	ldr	r7, [pc, #200]	; (1000a7f8 <ble_pair_key_request_handler+0x108>)
1000a72e:	0038      	movs	r0, r7
1000a730:	4e32      	ldr	r6, [pc, #200]	; (1000a7fc <ble_pair_key_request_handler+0x10c>)
1000a732:	47b0      	blx	r6
1000a734:	4835      	ldr	r0, [pc, #212]	; (1000a80c <ble_pair_key_request_handler+0x11c>)
1000a736:	4c33      	ldr	r4, [pc, #204]	; (1000a804 <ble_pair_key_request_handler+0x114>)
1000a738:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000a73a:	0038      	movs	r0, r7
1000a73c:	47b0      	blx	r6
1000a73e:	4834      	ldr	r0, [pc, #208]	; (1000a810 <ble_pair_key_request_handler+0x120>)
1000a740:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000a742:	8828      	ldrh	r0, [r5, #0]
1000a744:	2113      	movs	r1, #19
1000a746:	4b33      	ldr	r3, [pc, #204]	; (1000a814 <ble_pair_key_request_handler+0x124>)
1000a748:	4798      	blx	r3
1000a74a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000a74c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000a74e:	2b00      	cmp	r3, #0
1000a750:	d04c      	beq.n	1000a7ec <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000a752:	4829      	ldr	r0, [pc, #164]	; (1000a7f8 <ble_pair_key_request_handler+0x108>)
1000a754:	4b29      	ldr	r3, [pc, #164]	; (1000a7fc <ble_pair_key_request_handler+0x10c>)
1000a756:	4798      	blx	r3
1000a758:	482f      	ldr	r0, [pc, #188]	; (1000a818 <ble_pair_key_request_handler+0x128>)
1000a75a:	4b2a      	ldr	r3, [pc, #168]	; (1000a804 <ble_pair_key_request_handler+0x114>)
1000a75c:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000a75e:	20e2      	movs	r0, #226	; 0xe2
1000a760:	e044      	b.n	1000a7ec <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000a762:	001a      	movs	r2, r3
1000a764:	3a30      	subs	r2, #48	; 0x30
1000a766:	2a09      	cmp	r2, #9
1000a768:	d8db      	bhi.n	1000a722 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000a76a:	aa02      	add	r2, sp, #8
1000a76c:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000a76e:	4038      	ands	r0, r7
1000a770:	4b2a      	ldr	r3, [pc, #168]	; (1000a81c <ble_pair_key_request_handler+0x12c>)
1000a772:	4798      	blx	r3
1000a774:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000a776:	2e06      	cmp	r6, #6
1000a778:	d026      	beq.n	1000a7c8 <ble_pair_key_request_handler+0xd8>
1000a77a:	e7d2      	b.n	1000a722 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000a77c:	481e      	ldr	r0, [pc, #120]	; (1000a7f8 <ble_pair_key_request_handler+0x108>)
1000a77e:	4b1f      	ldr	r3, [pc, #124]	; (1000a7fc <ble_pair_key_request_handler+0x10c>)
1000a780:	4798      	blx	r3
1000a782:	4827      	ldr	r0, [pc, #156]	; (1000a820 <ble_pair_key_request_handler+0x130>)
1000a784:	4b1f      	ldr	r3, [pc, #124]	; (1000a804 <ble_pair_key_request_handler+0x114>)
1000a786:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000a788:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a78a:	4e24      	ldr	r6, [pc, #144]	; (1000a81c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000a78c:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000a78e:	5ce0      	ldrb	r0, [r4, r3]
1000a790:	47b0      	blx	r6
1000a792:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000a794:	2c06      	cmp	r4, #6
1000a796:	d1f9      	bne.n	1000a78c <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!(at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS)
1000a798:	ab01      	add	r3, sp, #4
1000a79a:	7899      	ldrb	r1, [r3, #2]
1000a79c:	8828      	ldrh	r0, [r5, #0]
1000a79e:	aa02      	add	r2, sp, #8
1000a7a0:	4b20      	ldr	r3, [pc, #128]	; (1000a824 <ble_pair_key_request_handler+0x134>)
1000a7a2:	4798      	blx	r3
1000a7a4:	2800      	cmp	r0, #0
1000a7a6:	d021      	beq.n	1000a7ec <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000a7a8:	4813      	ldr	r0, [pc, #76]	; (1000a7f8 <ble_pair_key_request_handler+0x108>)
1000a7aa:	4b14      	ldr	r3, [pc, #80]	; (1000a7fc <ble_pair_key_request_handler+0x10c>)
1000a7ac:	4798      	blx	r3
1000a7ae:	481e      	ldr	r0, [pc, #120]	; (1000a828 <ble_pair_key_request_handler+0x138>)
1000a7b0:	4b14      	ldr	r3, [pc, #80]	; (1000a804 <ble_pair_key_request_handler+0x114>)
1000a7b2:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a7b4:	2000      	movs	r0, #0
1000a7b6:	e019      	b.n	1000a7ec <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000a7b8:	480f      	ldr	r0, [pc, #60]	; (1000a7f8 <ble_pair_key_request_handler+0x108>)
1000a7ba:	4b10      	ldr	r3, [pc, #64]	; (1000a7fc <ble_pair_key_request_handler+0x10c>)
1000a7bc:	4798      	blx	r3
1000a7be:	481b      	ldr	r0, [pc, #108]	; (1000a82c <ble_pair_key_request_handler+0x13c>)
1000a7c0:	4b10      	ldr	r3, [pc, #64]	; (1000a804 <ble_pair_key_request_handler+0x114>)
1000a7c2:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000a7c4:	2000      	movs	r0, #0
1000a7c6:	e011      	b.n	1000a7ec <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000a7c8:	480b      	ldr	r0, [pc, #44]	; (1000a7f8 <ble_pair_key_request_handler+0x108>)
1000a7ca:	4b0c      	ldr	r3, [pc, #48]	; (1000a7fc <ble_pair_key_request_handler+0x10c>)
1000a7cc:	4798      	blx	r3
1000a7ce:	4818      	ldr	r0, [pc, #96]	; (1000a830 <ble_pair_key_request_handler+0x140>)
1000a7d0:	4b0c      	ldr	r3, [pc, #48]	; (1000a804 <ble_pair_key_request_handler+0x114>)
1000a7d2:	4798      	blx	r3
1000a7d4:	e7d8      	b.n	1000a788 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000a7d6:	ab01      	add	r3, sp, #4
1000a7d8:	885a      	ldrh	r2, [r3, #2]
1000a7da:	2380      	movs	r3, #128	; 0x80
1000a7dc:	005b      	lsls	r3, r3, #1
1000a7de:	429a      	cmp	r2, r3
1000a7e0:	d0cc      	beq.n	1000a77c <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000a7e2:	ab01      	add	r3, sp, #4
1000a7e4:	789b      	ldrb	r3, [r3, #2]
1000a7e6:	2b01      	cmp	r3, #1
1000a7e8:	d0e6      	beq.n	1000a7b8 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000a7ea:	2000      	movs	r0, #0
}
1000a7ec:	b005      	add	sp, #20
1000a7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a7f0:	10013404 	.word	0x10013404
1000a7f4:	10011c63 	.word	0x10011c63
1000a7f8:	10013098 	.word	0x10013098
1000a7fc:	10011da5 	.word	0x10011da5
1000a800:	10013678 	.word	0x10013678
1000a804:	10011c85 	.word	0x10011c85
1000a808:	1000ba65 	.word	0x1000ba65
1000a80c:	100136a0 	.word	0x100136a0
1000a810:	100136ac 	.word	0x100136ac
1000a814:	1000dae9 	.word	0x1000dae9
1000a818:	10013594 	.word	0x10013594
1000a81c:	10011cb9 	.word	0x10011cb9
1000a820:	100136c0 	.word	0x100136c0
1000a824:	1000e611 	.word	0x1000e611
1000a828:	100136f8 	.word	0x100136f8
1000a82c:	10013710 	.word	0x10013710
1000a830:	1001372c 	.word	0x1001372c

1000a834 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000a834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000a836:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a838:	8805      	ldrh	r5, [r0, #0]
1000a83a:	4b2f      	ldr	r3, [pc, #188]	; (1000a8f8 <ble_encryption_request_handler+0xc4>)
1000a83c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a83e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000a840:	0010      	movs	r0, r2
1000a842:	8919      	ldrh	r1, [r3, #8]
1000a844:	42a9      	cmp	r1, r5
1000a846:	d116      	bne.n	1000a876 <ble_encryption_request_handler+0x42>
1000a848:	0019      	movs	r1, r3
1000a84a:	315e      	adds	r1, #94	; 0x5e
1000a84c:	7809      	ldrb	r1, [r1, #0]
1000a84e:	2901      	cmp	r1, #1
1000a850:	d911      	bls.n	1000a876 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000a852:	4929      	ldr	r1, [pc, #164]	; (1000a8f8 <ble_encryption_request_handler+0xc4>)
1000a854:	0152      	lsls	r2, r2, #5
1000a856:	1a10      	subs	r0, r2, r0
1000a858:	0080      	lsls	r0, r0, #2
1000a85a:	1808      	adds	r0, r1, r0
1000a85c:	305e      	adds	r0, #94	; 0x5e
1000a85e:	2306      	movs	r3, #6
1000a860:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000a862:	0162      	lsls	r2, r4, #5
1000a864:	1b13      	subs	r3, r2, r4
1000a866:	009b      	lsls	r3, r3, #2
1000a868:	18cb      	adds	r3, r1, r3
1000a86a:	3370      	adds	r3, #112	; 0x70
1000a86c:	881a      	ldrh	r2, [r3, #0]
1000a86e:	8873      	ldrh	r3, [r6, #2]
1000a870:	429a      	cmp	r2, r3
1000a872:	d113      	bne.n	1000a89c <ble_encryption_request_handler+0x68>
1000a874:	e006      	b.n	1000a884 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000a876:	3401      	adds	r4, #1
1000a878:	b2e4      	uxtb	r4, r4
1000a87a:	3201      	adds	r2, #1
1000a87c:	337c      	adds	r3, #124	; 0x7c
1000a87e:	2c05      	cmp	r4, #5
1000a880:	d1de      	bne.n	1000a840 <ble_encryption_request_handler+0xc>
1000a882:	e00b      	b.n	1000a89c <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000a884:	0161      	lsls	r1, r4, #5
1000a886:	1b09      	subs	r1, r1, r4
1000a888:	0089      	lsls	r1, r1, #2
1000a88a:	4b1b      	ldr	r3, [pc, #108]	; (1000a8f8 <ble_encryption_request_handler+0xc4>)
1000a88c:	1859      	adds	r1, r3, r1
1000a88e:	3172      	adds	r1, #114	; 0x72
1000a890:	1d30      	adds	r0, r6, #4
1000a892:	2208      	movs	r2, #8
1000a894:	4b19      	ldr	r3, [pc, #100]	; (1000a8fc <ble_encryption_request_handler+0xc8>)
1000a896:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000a898:	2800      	cmp	r0, #0
1000a89a:	d015      	beq.n	1000a8c8 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000a89c:	4f18      	ldr	r7, [pc, #96]	; (1000a900 <ble_encryption_request_handler+0xcc>)
1000a89e:	0038      	movs	r0, r7
1000a8a0:	4e18      	ldr	r6, [pc, #96]	; (1000a904 <ble_encryption_request_handler+0xd0>)
1000a8a2:	47b0      	blx	r6
1000a8a4:	4818      	ldr	r0, [pc, #96]	; (1000a908 <ble_encryption_request_handler+0xd4>)
1000a8a6:	4d19      	ldr	r5, [pc, #100]	; (1000a90c <ble_encryption_request_handler+0xd8>)
1000a8a8:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000a8aa:	0038      	movs	r0, r7
1000a8ac:	47b0      	blx	r6
1000a8ae:	4818      	ldr	r0, [pc, #96]	; (1000a910 <ble_encryption_request_handler+0xdc>)
1000a8b0:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000a8b2:	0163      	lsls	r3, r4, #5
1000a8b4:	1b1c      	subs	r4, r3, r4
1000a8b6:	00a4      	lsls	r4, r4, #2
1000a8b8:	4b0f      	ldr	r3, [pc, #60]	; (1000a8f8 <ble_encryption_request_handler+0xc4>)
1000a8ba:	191c      	adds	r4, r3, r4
1000a8bc:	8920      	ldrh	r0, [r4, #8]
1000a8be:	2105      	movs	r1, #5
1000a8c0:	4b14      	ldr	r3, [pc, #80]	; (1000a914 <ble_encryption_request_handler+0xe0>)
1000a8c2:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000a8c4:	20e2      	movs	r0, #226	; 0xe2
1000a8c6:	e016      	b.n	1000a8f6 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000a8c8:	0162      	lsls	r2, r4, #5
1000a8ca:	1b13      	subs	r3, r2, r4
1000a8cc:	009b      	lsls	r3, r3, #2
1000a8ce:	3360      	adds	r3, #96	; 0x60
1000a8d0:	4909      	ldr	r1, [pc, #36]	; (1000a8f8 <ble_encryption_request_handler+0xc4>)
1000a8d2:	185b      	adds	r3, r3, r1
1000a8d4:	1b14      	subs	r4, r2, r4
1000a8d6:	00a4      	lsls	r4, r4, #2
1000a8d8:	190c      	adds	r4, r1, r4
1000a8da:	7d21      	ldrb	r1, [r4, #20]
1000a8dc:	8830      	ldrh	r0, [r6, #0]
1000a8de:	2201      	movs	r2, #1
1000a8e0:	4c0d      	ldr	r4, [pc, #52]	; (1000a918 <ble_encryption_request_handler+0xe4>)
1000a8e2:	47a0      	blx	r4
1000a8e4:	2800      	cmp	r0, #0
1000a8e6:	d006      	beq.n	1000a8f6 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000a8e8:	4805      	ldr	r0, [pc, #20]	; (1000a900 <ble_encryption_request_handler+0xcc>)
1000a8ea:	4b06      	ldr	r3, [pc, #24]	; (1000a904 <ble_encryption_request_handler+0xd0>)
1000a8ec:	4798      	blx	r3
1000a8ee:	480b      	ldr	r0, [pc, #44]	; (1000a91c <ble_encryption_request_handler+0xe8>)
1000a8f0:	4b06      	ldr	r3, [pc, #24]	; (1000a90c <ble_encryption_request_handler+0xd8>)
1000a8f2:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000a8f4:	2000      	movs	r0, #0
}
1000a8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a8f8:	10016128 	.word	0x10016128
1000a8fc:	10011c45 	.word	0x10011c45
1000a900:	10013098 	.word	0x10013098
1000a904:	10011da5 	.word	0x10011da5
1000a908:	10013740 	.word	0x10013740
1000a90c:	10011c85 	.word	0x10011c85
1000a910:	10013778 	.word	0x10013778
1000a914:	1000dae9 	.word	0x1000dae9
1000a918:	1000e745 	.word	0x1000e745
1000a91c:	100137d0 	.word	0x100137d0

1000a920 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000a920:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000a922:	2a00      	cmp	r2, #0
1000a924:	d047      	beq.n	1000a9b6 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000a926:	2906      	cmp	r1, #6
1000a928:	d847      	bhi.n	1000a9ba <ble_mgr_events_callback_handler+0x9a>
1000a92a:	0089      	lsls	r1, r1, #2
1000a92c:	4b28      	ldr	r3, [pc, #160]	; (1000a9d0 <ble_mgr_events_callback_handler+0xb0>)
1000a92e:	585b      	ldr	r3, [r3, r1]
1000a930:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000a932:	4b28      	ldr	r3, [pc, #160]	; (1000a9d4 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000a934:	2405      	movs	r4, #5
1000a936:	e00a      	b.n	1000a94e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000a938:	4b27      	ldr	r3, [pc, #156]	; (1000a9d8 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000a93a:	2401      	movs	r4, #1
			}
			break;
1000a93c:	e007      	b.n	1000a94e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000a93e:	4b27      	ldr	r3, [pc, #156]	; (1000a9dc <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000a940:	2405      	movs	r4, #5
			}
			break;
1000a942:	e004      	b.n	1000a94e <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000a944:	4b26      	ldr	r3, [pc, #152]	; (1000a9e0 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000a946:	2401      	movs	r4, #1
			}
			break;
1000a948:	e001      	b.n	1000a94e <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000a94a:	4b26      	ldr	r3, [pc, #152]	; (1000a9e4 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000a94c:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000a94e:	2800      	cmp	r0, #0
1000a950:	d116      	bne.n	1000a980 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a952:	6819      	ldr	r1, [r3, #0]
1000a954:	2900      	cmp	r1, #0
1000a956:	d10b      	bne.n	1000a970 <ble_mgr_events_callback_handler+0x50>
1000a958:	e006      	b.n	1000a968 <ble_mgr_events_callback_handler+0x48>
1000a95a:	001d      	movs	r5, r3
1000a95c:	3304      	adds	r3, #4
1000a95e:	1f18      	subs	r0, r3, #4
1000a960:	6800      	ldr	r0, [r0, #0]
1000a962:	2800      	cmp	r0, #0
1000a964:	d106      	bne.n	1000a974 <ble_mgr_events_callback_handler+0x54>
1000a966:	e000      	b.n	1000a96a <ble_mgr_events_callback_handler+0x4a>
1000a968:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000a96a:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000a96c:	2101      	movs	r1, #1
						break;
1000a96e:	e02c      	b.n	1000a9ca <ble_mgr_events_callback_handler+0xaa>
1000a970:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000a972:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a974:	3101      	adds	r1, #1
1000a976:	b2c9      	uxtb	r1, r1
1000a978:	42a1      	cmp	r1, r4
1000a97a:	d3ee      	bcc.n	1000a95a <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a97c:	2100      	movs	r1, #0
1000a97e:	e024      	b.n	1000a9ca <ble_mgr_events_callback_handler+0xaa>
1000a980:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000a982:	2801      	cmp	r0, #1
1000a984:	d121      	bne.n	1000a9ca <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a986:	6819      	ldr	r1, [r3, #0]
1000a988:	428a      	cmp	r2, r1
1000a98a:	d10c      	bne.n	1000a9a6 <ble_mgr_events_callback_handler+0x86>
1000a98c:	e006      	b.n	1000a99c <ble_mgr_events_callback_handler+0x7c>
1000a98e:	001d      	movs	r5, r3
1000a990:	3304      	adds	r3, #4
1000a992:	1f18      	subs	r0, r3, #4
1000a994:	6800      	ldr	r0, [r0, #0]
1000a996:	4282      	cmp	r2, r0
1000a998:	d107      	bne.n	1000a9aa <ble_mgr_events_callback_handler+0x8a>
1000a99a:	e000      	b.n	1000a99e <ble_mgr_events_callback_handler+0x7e>
1000a99c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000a99e:	2300      	movs	r3, #0
1000a9a0:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000a9a2:	2101      	movs	r1, #1
						break;
1000a9a4:	e011      	b.n	1000a9ca <ble_mgr_events_callback_handler+0xaa>
1000a9a6:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000a9a8:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000a9aa:	3101      	adds	r1, #1
1000a9ac:	b2c9      	uxtb	r1, r1
1000a9ae:	42a1      	cmp	r1, r4
1000a9b0:	d3ed      	bcc.n	1000a98e <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000a9b2:	2100      	movs	r1, #0
1000a9b4:	e009      	b.n	1000a9ca <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000a9b6:	2100      	movs	r1, #0
1000a9b8:	e007      	b.n	1000a9ca <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000a9ba:	2100      	movs	r1, #0
1000a9bc:	e005      	b.n	1000a9ca <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000a9be:	4b0a      	ldr	r3, [pc, #40]	; (1000a9e8 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000a9c0:	2405      	movs	r4, #5
1000a9c2:	e7c4      	b.n	1000a94e <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000a9c4:	4b09      	ldr	r3, [pc, #36]	; (1000a9ec <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000a9c6:	2401      	movs	r4, #1
1000a9c8:	e7c1      	b.n	1000a94e <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000a9ca:	0008      	movs	r0, r1
1000a9cc:	bd30      	pop	{r4, r5, pc}
1000a9ce:	46c0      	nop			; (mov r8, r8)
1000a9d0:	100132f8 	.word	0x100132f8
1000a9d4:	10016114 	.word	0x10016114
1000a9d8:	10016110 	.word	0x10016110
1000a9dc:	10016398 	.word	0x10016398
1000a9e0:	1001694c 	.word	0x1001694c
1000a9e4:	100163ac 	.word	0x100163ac
1000a9e8:	100163c0 	.word	0x100163c0
1000a9ec:	10016408 	.word	0x10016408

1000a9f0 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000a9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a9f2:	465f      	mov	r7, fp
1000a9f4:	4656      	mov	r6, sl
1000a9f6:	464d      	mov	r5, r9
1000a9f8:	4644      	mov	r4, r8
1000a9fa:	b4f0      	push	{r4, r5, r6, r7}
1000a9fc:	b091      	sub	sp, #68	; 0x44
1000a9fe:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000aa00:	2400      	movs	r4, #0
1000aa02:	4b7e      	ldr	r3, [pc, #504]	; (1000abfc <ble_device_init+0x20c>)
1000aa04:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000aa06:	2207      	movs	r2, #7
1000aa08:	2100      	movs	r1, #0
1000aa0a:	487d      	ldr	r0, [pc, #500]	; (1000ac00 <ble_device_init+0x210>)
1000aa0c:	4e7d      	ldr	r6, [pc, #500]	; (1000ac04 <ble_device_init+0x214>)
1000aa0e:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000aa10:	2212      	movs	r2, #18
1000aa12:	2100      	movs	r1, #0
1000aa14:	487c      	ldr	r0, [pc, #496]	; (1000ac08 <ble_device_init+0x218>)
1000aa16:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000aa18:	4a7c      	ldr	r2, [pc, #496]	; (1000ac0c <ble_device_init+0x21c>)
1000aa1a:	2100      	movs	r1, #0
1000aa1c:	487c      	ldr	r0, [pc, #496]	; (1000ac10 <ble_device_init+0x220>)
1000aa1e:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000aa20:	4b7c      	ldr	r3, [pc, #496]	; (1000ac14 <ble_device_init+0x224>)
1000aa22:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000aa24:	22cd      	movs	r2, #205	; 0xcd
1000aa26:	0092      	lsls	r2, r2, #2
1000aa28:	2100      	movs	r1, #0
1000aa2a:	487b      	ldr	r0, [pc, #492]	; (1000ac18 <ble_device_init+0x228>)
1000aa2c:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000aa2e:	4b7b      	ldr	r3, [pc, #492]	; (1000ac1c <ble_device_init+0x22c>)
1000aa30:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000aa32:	2283      	movs	r2, #131	; 0x83
1000aa34:	0092      	lsls	r2, r2, #2
1000aa36:	2100      	movs	r1, #0
1000aa38:	4879      	ldr	r0, [pc, #484]	; (1000ac20 <ble_device_init+0x230>)
1000aa3a:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000aa3c:	4b79      	ldr	r3, [pc, #484]	; (1000ac24 <ble_device_init+0x234>)
1000aa3e:	469b      	mov	fp, r3
1000aa40:	2380      	movs	r3, #128	; 0x80
1000aa42:	00db      	lsls	r3, r3, #3
1000aa44:	469a      	mov	sl, r3
1000aa46:	001a      	movs	r2, r3
1000aa48:	2100      	movs	r1, #0
1000aa4a:	4658      	mov	r0, fp
1000aa4c:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000aa4e:	4b76      	ldr	r3, [pc, #472]	; (1000ac28 <ble_device_init+0x238>)
1000aa50:	4699      	mov	r9, r3
1000aa52:	2380      	movs	r3, #128	; 0x80
1000aa54:	015b      	lsls	r3, r3, #5
1000aa56:	4698      	mov	r8, r3
1000aa58:	001a      	movs	r2, r3
1000aa5a:	2100      	movs	r1, #0
1000aa5c:	4648      	mov	r0, r9
1000aa5e:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000aa60:	4f72      	ldr	r7, [pc, #456]	; (1000ac2c <ble_device_init+0x23c>)
1000aa62:	221c      	movs	r2, #28
1000aa64:	2100      	movs	r1, #0
1000aa66:	0038      	movs	r0, r7
1000aa68:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000aa6a:	465b      	mov	r3, fp
1000aa6c:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000aa6e:	4653      	mov	r3, sl
1000aa70:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000aa72:	464b      	mov	r3, r9
1000aa74:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000aa76:	4643      	mov	r3, r8
1000aa78:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000aa7a:	4b6d      	ldr	r3, [pc, #436]	; (1000ac30 <ble_device_init+0x240>)
1000aa7c:	601c      	str	r4, [r3, #0]
1000aa7e:	605c      	str	r4, [r3, #4]
1000aa80:	609c      	str	r4, [r3, #8]
1000aa82:	60dc      	str	r4, [r3, #12]
1000aa84:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000aa86:	4b6b      	ldr	r3, [pc, #428]	; (1000ac34 <ble_device_init+0x244>)
1000aa88:	601c      	str	r4, [r3, #0]
1000aa8a:	605c      	str	r4, [r3, #4]
1000aa8c:	609c      	str	r4, [r3, #8]
1000aa8e:	60dc      	str	r4, [r3, #12]
1000aa90:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000aa92:	4b69      	ldr	r3, [pc, #420]	; (1000ac38 <ble_device_init+0x248>)
1000aa94:	601c      	str	r4, [r3, #0]
1000aa96:	605c      	str	r4, [r3, #4]
1000aa98:	609c      	str	r4, [r3, #8]
1000aa9a:	60dc      	str	r4, [r3, #12]
1000aa9c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000aa9e:	4b67      	ldr	r3, [pc, #412]	; (1000ac3c <ble_device_init+0x24c>)
1000aaa0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000aaa2:	4b67      	ldr	r3, [pc, #412]	; (1000ac40 <ble_device_init+0x250>)
1000aaa4:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000aaa6:	4b67      	ldr	r3, [pc, #412]	; (1000ac44 <ble_device_init+0x254>)
1000aaa8:	601c      	str	r4, [r3, #0]
1000aaaa:	605c      	str	r4, [r3, #4]
1000aaac:	609c      	str	r4, [r3, #8]
1000aaae:	60dc      	str	r4, [r3, #12]
1000aab0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000aab2:	4b65      	ldr	r3, [pc, #404]	; (1000ac48 <ble_device_init+0x258>)
1000aab4:	601c      	str	r4, [r3, #0]
1000aab6:	4c65      	ldr	r4, [pc, #404]	; (1000ac4c <ble_device_init+0x25c>)
1000aab8:	239b      	movs	r3, #155	; 0x9b
1000aaba:	009b      	lsls	r3, r3, #2
1000aabc:	4698      	mov	r8, r3
1000aabe:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000aac0:	4f50      	ldr	r7, [pc, #320]	; (1000ac04 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000aac2:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000aac4:	227c      	movs	r2, #124	; 0x7c
1000aac6:	2100      	movs	r1, #0
1000aac8:	0020      	movs	r0, r4
1000aaca:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000aacc:	0023      	movs	r3, r4
1000aace:	335e      	adds	r3, #94	; 0x5e
1000aad0:	2200      	movs	r2, #0
1000aad2:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000aad4:	7626      	strb	r6, [r4, #24]
1000aad6:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aad8:	45a0      	cmp	r8, r4
1000aada:	d1f3      	bne.n	1000aac4 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000aadc:	4b5c      	ldr	r3, [pc, #368]	; (1000ac50 <ble_device_init+0x260>)
1000aade:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000aae0:	4c52      	ldr	r4, [pc, #328]	; (1000ac2c <ble_device_init+0x23c>)
1000aae2:	4b4a      	ldr	r3, [pc, #296]	; (1000ac0c <ble_device_init+0x21c>)
1000aae4:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000aae6:	4b4a      	ldr	r3, [pc, #296]	; (1000ac10 <ble_device_init+0x220>)
1000aae8:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("Initializing SAMB11");
1000aaea:	485a      	ldr	r0, [pc, #360]	; (1000ac54 <ble_device_init+0x264>)
1000aaec:	4b5a      	ldr	r3, [pc, #360]	; (1000ac58 <ble_device_init+0x268>)
1000aaee:	4798      	blx	r3
1000aaf0:	485a      	ldr	r0, [pc, #360]	; (1000ac5c <ble_device_init+0x26c>)
1000aaf2:	4b5b      	ldr	r3, [pc, #364]	; (1000ac60 <ble_device_init+0x270>)
1000aaf4:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000aaf6:	0020      	movs	r0, r4
1000aaf8:	4b5a      	ldr	r3, [pc, #360]	; (1000ac64 <ble_device_init+0x274>)
1000aafa:	4798      	blx	r3
1000aafc:	2800      	cmp	r0, #0
1000aafe:	d00b      	beq.n	1000ab18 <ble_device_init+0x128>
	{
		DBG_LOG("SAMB11 Initialization failed");
1000ab00:	4e54      	ldr	r6, [pc, #336]	; (1000ac54 <ble_device_init+0x264>)
1000ab02:	0030      	movs	r0, r6
1000ab04:	4d54      	ldr	r5, [pc, #336]	; (1000ac58 <ble_device_init+0x268>)
1000ab06:	47a8      	blx	r5
1000ab08:	4857      	ldr	r0, [pc, #348]	; (1000ac68 <ble_device_init+0x278>)
1000ab0a:	4c55      	ldr	r4, [pc, #340]	; (1000ac60 <ble_device_init+0x270>)
1000ab0c:	47a0      	blx	r4
		DBG_LOG("Please check the power and connection / hardware connector");	
1000ab0e:	0030      	movs	r0, r6
1000ab10:	47a8      	blx	r5
1000ab12:	4856      	ldr	r0, [pc, #344]	; (1000ac6c <ble_device_init+0x27c>)
1000ab14:	47a0      	blx	r4
1000ab16:	e7fe      	b.n	1000ab16 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000ab18:	4a55      	ldr	r2, [pc, #340]	; (1000ac70 <ble_device_init+0x280>)
1000ab1a:	2100      	movs	r1, #0
1000ab1c:	2000      	movs	r0, #0
1000ab1e:	4c55      	ldr	r4, [pc, #340]	; (1000ac74 <ble_device_init+0x284>)
1000ab20:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000ab22:	4a55      	ldr	r2, [pc, #340]	; (1000ac78 <ble_device_init+0x288>)
1000ab24:	2102      	movs	r1, #2
1000ab26:	2000      	movs	r0, #0
1000ab28:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ab2a:	2106      	movs	r1, #6
1000ab2c:	4853      	ldr	r0, [pc, #332]	; (1000ac7c <ble_device_init+0x28c>)
1000ab2e:	4b54      	ldr	r3, [pc, #336]	; (1000ac80 <ble_device_init+0x290>)
1000ab30:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ab32:	2800      	cmp	r0, #0
1000ab34:	d005      	beq.n	1000ab42 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000ab36:	4847      	ldr	r0, [pc, #284]	; (1000ac54 <ble_device_init+0x264>)
1000ab38:	4b47      	ldr	r3, [pc, #284]	; (1000ac58 <ble_device_init+0x268>)
1000ab3a:	4798      	blx	r3
1000ab3c:	4851      	ldr	r0, [pc, #324]	; (1000ac84 <ble_device_init+0x294>)
1000ab3e:	4b48      	ldr	r3, [pc, #288]	; (1000ac60 <ble_device_init+0x270>)
1000ab40:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ab42:	2207      	movs	r2, #7
1000ab44:	4950      	ldr	r1, [pc, #320]	; (1000ac88 <ble_device_init+0x298>)
1000ab46:	3108      	adds	r1, #8
1000ab48:	a804      	add	r0, sp, #16
1000ab4a:	4b50      	ldr	r3, [pc, #320]	; (1000ac8c <ble_device_init+0x29c>)
1000ab4c:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ab4e:	2226      	movs	r2, #38	; 0x26
1000ab50:	2100      	movs	r1, #0
1000ab52:	a806      	add	r0, sp, #24
1000ab54:	4b2b      	ldr	r3, [pc, #172]	; (1000ac04 <ble_device_init+0x214>)
1000ab56:	4798      	blx	r3
	
	if (addr == NULL)
1000ab58:	2d00      	cmp	r5, #0
1000ab5a:	d10c      	bne.n	1000ab76 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ab5c:	a804      	add	r0, sp, #16
1000ab5e:	4b4c      	ldr	r3, [pc, #304]	; (1000ac90 <ble_device_init+0x2a0>)
1000ab60:	4798      	blx	r3
		{
			DBG_LOG("BD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ab62:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ab64:	2800      	cmp	r0, #0
1000ab66:	d006      	beq.n	1000ab76 <ble_device_init+0x186>
		{
			DBG_LOG("BD address get failed");
1000ab68:	483a      	ldr	r0, [pc, #232]	; (1000ac54 <ble_device_init+0x264>)
1000ab6a:	4b3b      	ldr	r3, [pc, #236]	; (1000ac58 <ble_device_init+0x268>)
1000ab6c:	4798      	blx	r3
1000ab6e:	4849      	ldr	r0, [pc, #292]	; (1000ac94 <ble_device_init+0x2a4>)
1000ab70:	4b3b      	ldr	r3, [pc, #236]	; (1000ac60 <ble_device_init+0x270>)
1000ab72:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ab74:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("BD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000ab76:	4837      	ldr	r0, [pc, #220]	; (1000ac54 <ble_device_init+0x264>)
1000ab78:	4b37      	ldr	r3, [pc, #220]	; (1000ac58 <ble_device_init+0x268>)
1000ab7a:	4798      	blx	r3
1000ab7c:	792b      	ldrb	r3, [r5, #4]
1000ab7e:	796a      	ldrb	r2, [r5, #5]
1000ab80:	79a9      	ldrb	r1, [r5, #6]
1000ab82:	7828      	ldrb	r0, [r5, #0]
1000ab84:	9003      	str	r0, [sp, #12]
1000ab86:	7868      	ldrb	r0, [r5, #1]
1000ab88:	9002      	str	r0, [sp, #8]
1000ab8a:	78a8      	ldrb	r0, [r5, #2]
1000ab8c:	9001      	str	r0, [sp, #4]
1000ab8e:	78e8      	ldrb	r0, [r5, #3]
1000ab90:	9000      	str	r0, [sp, #0]
1000ab92:	4841      	ldr	r0, [pc, #260]	; (1000ac98 <ble_device_init+0x2a8>)
1000ab94:	4c32      	ldr	r4, [pc, #200]	; (1000ac60 <ble_device_init+0x270>)
1000ab96:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000ab98:	ac06      	add	r4, sp, #24
1000ab9a:	230f      	movs	r3, #15
1000ab9c:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000ab9e:	4b3f      	ldr	r3, [pc, #252]	; (1000ac9c <ble_device_init+0x2ac>)
1000aba0:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000aba2:	2207      	movs	r2, #7
1000aba4:	0029      	movs	r1, r5
1000aba6:	a807      	add	r0, sp, #28
1000aba8:	4b38      	ldr	r3, [pc, #224]	; (1000ac8c <ble_device_init+0x29c>)
1000abaa:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000abac:	2300      	movs	r3, #0
1000abae:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000abb0:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000abb2:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000abb4:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000abb6:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000abb8:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000abba:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000abbc:	2380      	movs	r3, #128	; 0x80
1000abbe:	009b      	lsls	r3, r3, #2
1000abc0:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000abc2:	0020      	movs	r0, r4
1000abc4:	4b36      	ldr	r3, [pc, #216]	; (1000aca0 <ble_device_init+0x2b0>)
1000abc6:	4798      	blx	r3
1000abc8:	2800      	cmp	r0, #0
1000abca:	d005      	beq.n	1000abd8 <ble_device_init+0x1e8>
	{
		DBG_LOG("Set BLE Device configuration failed");
1000abcc:	4821      	ldr	r0, [pc, #132]	; (1000ac54 <ble_device_init+0x264>)
1000abce:	4b22      	ldr	r3, [pc, #136]	; (1000ac58 <ble_device_init+0x268>)
1000abd0:	4798      	blx	r3
1000abd2:	4834      	ldr	r0, [pc, #208]	; (1000aca4 <ble_device_init+0x2b4>)
1000abd4:	4b22      	ldr	r3, [pc, #136]	; (1000ac60 <ble_device_init+0x270>)
1000abd6:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000abd8:	0028      	movs	r0, r5
1000abda:	4b33      	ldr	r3, [pc, #204]	; (1000aca8 <ble_device_init+0x2b8>)
1000abdc:	4798      	blx	r3
1000abde:	2800      	cmp	r0, #0
1000abe0:	d005      	beq.n	1000abee <ble_device_init+0x1fe>
	{
		DBG_LOG("Set BLE Device Address failed");
1000abe2:	481c      	ldr	r0, [pc, #112]	; (1000ac54 <ble_device_init+0x264>)
1000abe4:	4b1c      	ldr	r3, [pc, #112]	; (1000ac58 <ble_device_init+0x268>)
1000abe6:	4798      	blx	r3
1000abe8:	4830      	ldr	r0, [pc, #192]	; (1000acac <ble_device_init+0x2bc>)
1000abea:	4b1d      	ldr	r3, [pc, #116]	; (1000ac60 <ble_device_init+0x270>)
1000abec:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000abee:	b011      	add	sp, #68	; 0x44
1000abf0:	bc3c      	pop	{r2, r3, r4, r5}
1000abf2:	4690      	mov	r8, r2
1000abf4:	4699      	mov	r9, r3
1000abf6:	46a2      	mov	sl, r4
1000abf8:	46ab      	mov	fp, r5
1000abfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000abfc:	10014b40 	.word	0x10014b40
1000ac00:	10014b48 	.word	0x10014b48
1000ac04:	10011c75 	.word	0x10011c75
1000ac08:	100163d4 	.word	0x100163d4
1000ac0c:	000004e2 	.word	0x000004e2
1000ac10:	10014660 	.word	0x10014660
1000ac14:	10014b44 	.word	0x10014b44
1000ac18:	1001640c 	.word	0x1001640c
1000ac1c:	10016404 	.word	0x10016404
1000ac20:	10016740 	.word	0x10016740
1000ac24:	10014260 	.word	0x10014260
1000ac28:	10014b50 	.word	0x10014b50
1000ac2c:	100163e8 	.word	0x100163e8
1000ac30:	100163ac 	.word	0x100163ac
1000ac34:	100163c0 	.word	0x100163c0
1000ac38:	10016114 	.word	0x10016114
1000ac3c:	10016408 	.word	0x10016408
1000ac40:	10016110 	.word	0x10016110
1000ac44:	10016398 	.word	0x10016398
1000ac48:	1001694c 	.word	0x1001694c
1000ac4c:	10016128 	.word	0x10016128
1000ac50:	10016394 	.word	0x10016394
1000ac54:	10013098 	.word	0x10013098
1000ac58:	10011da5 	.word	0x10011da5
1000ac5c:	100137f0 	.word	0x100137f0
1000ac60:	10011c85 	.word	0x10011c85
1000ac64:	1000d701 	.word	0x1000d701
1000ac68:	10013804 	.word	0x10013804
1000ac6c:	10013824 	.word	0x10013824
1000ac70:	10013a58 	.word	0x10013a58
1000ac74:	1000a921 	.word	0x1000a921
1000ac78:	10013420 	.word	0x10013420
1000ac7c:	10013860 	.word	0x10013860
1000ac80:	1000d619 	.word	0x1000d619
1000ac84:	10013868 	.word	0x10013868
1000ac88:	10013404 	.word	0x10013404
1000ac8c:	10011c63 	.word	0x10011c63
1000ac90:	1000d64d 	.word	0x1000d64d
1000ac94:	10013880 	.word	0x10013880
1000ac98:	10013898 	.word	0x10013898
1000ac9c:	00003a98 	.word	0x00003a98
1000aca0:	1000d671 	.word	0x1000d671
1000aca4:	100138d0 	.word	0x100138d0
1000aca8:	1000d8b5 	.word	0x1000d8b5
1000acac:	100138f4 	.word	0x100138f4

1000acb0 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000acb0:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000acb2:	2201      	movs	r2, #1
1000acb4:	2101      	movs	r1, #1
1000acb6:	4b06      	ldr	r3, [pc, #24]	; (1000acd0 <ble_send_slave_sec_request+0x20>)
1000acb8:	4798      	blx	r3
1000acba:	2800      	cmp	r0, #0
1000acbc:	d006      	beq.n	1000accc <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000acbe:	4805      	ldr	r0, [pc, #20]	; (1000acd4 <ble_send_slave_sec_request+0x24>)
1000acc0:	4b05      	ldr	r3, [pc, #20]	; (1000acd8 <ble_send_slave_sec_request+0x28>)
1000acc2:	4798      	blx	r3
1000acc4:	4805      	ldr	r0, [pc, #20]	; (1000acdc <ble_send_slave_sec_request+0x2c>)
1000acc6:	4b06      	ldr	r3, [pc, #24]	; (1000ace0 <ble_send_slave_sec_request+0x30>)
1000acc8:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000acca:	20e2      	movs	r0, #226	; 0xe2
}
1000accc:	bd10      	pop	{r4, pc}
1000acce:	46c0      	nop			; (mov r8, r8)
1000acd0:	1000e68d 	.word	0x1000e68d
1000acd4:	10013098 	.word	0x10013098
1000acd8:	10011da5 	.word	0x10011da5
1000acdc:	10013930 	.word	0x10013930
1000ace0:	10011c85 	.word	0x10011c85

1000ace4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ace4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ace6:	465f      	mov	r7, fp
1000ace8:	464e      	mov	r6, r9
1000acea:	4645      	mov	r5, r8
1000acec:	b4e0      	push	{r5, r6, r7}
1000acee:	b09a      	sub	sp, #104	; 0x68
1000acf0:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000acf2:	7a86      	ldrb	r6, [r0, #10]
1000acf4:	2e00      	cmp	r6, #0
1000acf6:	d000      	beq.n	1000acfa <ble_connected_state_handler+0x16>
1000acf8:	e0c6      	b.n	1000ae88 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000acfa:	4875      	ldr	r0, [pc, #468]	; (1000aed0 <ble_connected_state_handler+0x1ec>)
1000acfc:	4f75      	ldr	r7, [pc, #468]	; (1000aed4 <ble_connected_state_handler+0x1f0>)
1000acfe:	47b8      	blx	r7
1000ad00:	792b      	ldrb	r3, [r5, #4]
1000ad02:	796a      	ldrb	r2, [r5, #5]
1000ad04:	79a9      	ldrb	r1, [r5, #6]
1000ad06:	7868      	ldrb	r0, [r5, #1]
1000ad08:	9002      	str	r0, [sp, #8]
1000ad0a:	78a8      	ldrb	r0, [r5, #2]
1000ad0c:	9001      	str	r0, [sp, #4]
1000ad0e:	78e8      	ldrb	r0, [r5, #3]
1000ad10:	9000      	str	r0, [sp, #0]
1000ad12:	4871      	ldr	r0, [pc, #452]	; (1000aed8 <ble_connected_state_handler+0x1f4>)
1000ad14:	4c71      	ldr	r4, [pc, #452]	; (1000aedc <ble_connected_state_handler+0x1f8>)
1000ad16:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000ad18:	486d      	ldr	r0, [pc, #436]	; (1000aed0 <ble_connected_state_handler+0x1ec>)
1000ad1a:	47b8      	blx	r7
1000ad1c:	8929      	ldrh	r1, [r5, #8]
1000ad1e:	4870      	ldr	r0, [pc, #448]	; (1000aee0 <ble_connected_state_handler+0x1fc>)
1000ad20:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000ad22:	2212      	movs	r2, #18
1000ad24:	0029      	movs	r1, r5
1000ad26:	486f      	ldr	r0, [pc, #444]	; (1000aee4 <ble_connected_state_handler+0x200>)
1000ad28:	4b6f      	ldr	r3, [pc, #444]	; (1000aee8 <ble_connected_state_handler+0x204>)
1000ad2a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ad2c:	9504      	str	r5, [sp, #16]
1000ad2e:	2207      	movs	r2, #7
1000ad30:	0029      	movs	r1, r5
1000ad32:	486e      	ldr	r0, [pc, #440]	; (1000aeec <ble_connected_state_handler+0x208>)
1000ad34:	4b6e      	ldr	r3, [pc, #440]	; (1000aef0 <ble_connected_state_handler+0x20c>)
1000ad36:	4798      	blx	r3
1000ad38:	2800      	cmp	r0, #0
1000ad3a:	d100      	bne.n	1000ad3e <ble_connected_state_handler+0x5a>
1000ad3c:	e0ad      	b.n	1000ae9a <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ad3e:	782b      	ldrb	r3, [r5, #0]
1000ad40:	2b02      	cmp	r3, #2
1000ad42:	d000      	beq.n	1000ad46 <ble_connected_state_handler+0x62>
1000ad44:	e0a9      	b.n	1000ae9a <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ad46:	2250      	movs	r2, #80	; 0x50
1000ad48:	2100      	movs	r1, #0
1000ad4a:	a806      	add	r0, sp, #24
1000ad4c:	4b69      	ldr	r3, [pc, #420]	; (1000aef4 <ble_connected_state_handler+0x210>)
1000ad4e:	4798      	blx	r3
1000ad50:	4f69      	ldr	r7, [pc, #420]	; (1000aef8 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ad52:	2300      	movs	r3, #0
1000ad54:	e00b      	b.n	1000ad6e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ad56:	1c59      	adds	r1, r3, #1
1000ad58:	7814      	ldrb	r4, [r2, #0]
1000ad5a:	a806      	add	r0, sp, #24
1000ad5c:	54c4      	strb	r4, [r0, r3]
1000ad5e:	3201      	adds	r2, #1
1000ad60:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ad62:	42b3      	cmp	r3, r6
1000ad64:	d1f7      	bne.n	1000ad56 <ble_connected_state_handler+0x72>
1000ad66:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ad68:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ad6a:	2b50      	cmp	r3, #80	; 0x50
1000ad6c:	d004      	beq.n	1000ad78 <ble_connected_state_handler+0x94>
1000ad6e:	001e      	movs	r6, r3
1000ad70:	3610      	adds	r6, #16
1000ad72:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ad74:	003a      	movs	r2, r7
1000ad76:	e7ee      	b.n	1000ad56 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ad78:	aa06      	add	r2, sp, #24
1000ad7a:	0029      	movs	r1, r5
1000ad7c:	2005      	movs	r0, #5
1000ad7e:	4b5f      	ldr	r3, [pc, #380]	; (1000aefc <ble_connected_state_handler+0x218>)
1000ad80:	4798      	blx	r3
1000ad82:	1e06      	subs	r6, r0, #0
1000ad84:	d100      	bne.n	1000ad88 <ble_connected_state_handler+0xa4>
1000ad86:	e09c      	b.n	1000aec2 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000ad88:	4851      	ldr	r0, [pc, #324]	; (1000aed0 <ble_connected_state_handler+0x1ec>)
1000ad8a:	4b52      	ldr	r3, [pc, #328]	; (1000aed4 <ble_connected_state_handler+0x1f0>)
1000ad8c:	4798      	blx	r3
1000ad8e:	485c      	ldr	r0, [pc, #368]	; (1000af00 <ble_connected_state_handler+0x21c>)
1000ad90:	4b52      	ldr	r3, [pc, #328]	; (1000aedc <ble_connected_state_handler+0x1f8>)
1000ad92:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000ad94:	26e2      	movs	r6, #226	; 0xe2
1000ad96:	e094      	b.n	1000aec2 <ble_connected_state_handler+0x1de>
1000ad98:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ad9a:	9405      	str	r4, [sp, #20]
1000ad9c:	2207      	movs	r2, #7
1000ad9e:	9904      	ldr	r1, [sp, #16]
1000ada0:	4648      	mov	r0, r9
1000ada2:	47d8      	blx	fp
1000ada4:	2800      	cmp	r0, #0
1000ada6:	d109      	bne.n	1000adbc <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ada8:	9a05      	ldr	r2, [sp, #20]
1000adaa:	0153      	lsls	r3, r2, #5
1000adac:	1a9b      	subs	r3, r3, r2
1000adae:	009a      	lsls	r2, r3, #2
1000adb0:	4b54      	ldr	r3, [pc, #336]	; (1000af04 <ble_connected_state_handler+0x220>)
1000adb2:	189b      	adds	r3, r3, r2
1000adb4:	335e      	adds	r3, #94	; 0x5e
1000adb6:	2202      	movs	r2, #2
1000adb8:	701a      	strb	r2, [r3, #0]
1000adba:	e02b      	b.n	1000ae14 <ble_connected_state_handler+0x130>
1000adbc:	3401      	adds	r4, #1
1000adbe:	237c      	movs	r3, #124	; 0x7c
1000adc0:	469c      	mov	ip, r3
1000adc2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000adc4:	2c05      	cmp	r4, #5
1000adc6:	d1e7      	bne.n	1000ad98 <ble_connected_state_handler+0xb4>
1000adc8:	e072      	b.n	1000aeb0 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000adca:	001c      	movs	r4, r3
1000adcc:	7811      	ldrb	r1, [r2, #0]
1000adce:	2900      	cmp	r1, #0
1000add0:	d11a      	bne.n	1000ae08 <ble_connected_state_handler+0x124>
1000add2:	e001      	b.n	1000add8 <ble_connected_state_handler+0xf4>
1000add4:	2400      	movs	r4, #0
1000add6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000add8:	0163      	lsls	r3, r4, #5
1000adda:	4699      	mov	r9, r3
1000addc:	1b18      	subs	r0, r3, r4
1000adde:	0080      	lsls	r0, r0, #2
1000ade0:	4b48      	ldr	r3, [pc, #288]	; (1000af04 <ble_connected_state_handler+0x220>)
1000ade2:	4698      	mov	r8, r3
1000ade4:	4440      	add	r0, r8
1000ade6:	2212      	movs	r2, #18
1000ade8:	0029      	movs	r1, r5
1000adea:	4b3f      	ldr	r3, [pc, #252]	; (1000aee8 <ble_connected_state_handler+0x204>)
1000adec:	4798      	blx	r3
						ble_device_count++;
1000adee:	4a46      	ldr	r2, [pc, #280]	; (1000af08 <ble_connected_state_handler+0x224>)
1000adf0:	7813      	ldrb	r3, [r2, #0]
1000adf2:	3301      	adds	r3, #1
1000adf4:	b2db      	uxtb	r3, r3
1000adf6:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000adf8:	464b      	mov	r3, r9
1000adfa:	1b1b      	subs	r3, r3, r4
1000adfc:	009b      	lsls	r3, r3, #2
1000adfe:	4443      	add	r3, r8
1000ae00:	335e      	adds	r3, #94	; 0x5e
1000ae02:	2202      	movs	r2, #2
1000ae04:	701a      	strb	r2, [r3, #0]
						break;
1000ae06:	e005      	b.n	1000ae14 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ae08:	1c79      	adds	r1, r7, #1
1000ae0a:	b2cf      	uxtb	r7, r1
1000ae0c:	3301      	adds	r3, #1
1000ae0e:	327c      	adds	r2, #124	; 0x7c
1000ae10:	2f05      	cmp	r7, #5
1000ae12:	d1da      	bne.n	1000adca <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ae14:	2207      	movs	r2, #7
1000ae16:	0029      	movs	r1, r5
1000ae18:	4834      	ldr	r0, [pc, #208]	; (1000aeec <ble_connected_state_handler+0x208>)
1000ae1a:	4b35      	ldr	r3, [pc, #212]	; (1000aef0 <ble_connected_state_handler+0x20c>)
1000ae1c:	4798      	blx	r3
1000ae1e:	2800      	cmp	r0, #0
1000ae20:	d10c      	bne.n	1000ae3c <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000ae22:	017b      	lsls	r3, r7, #5
1000ae24:	1bdb      	subs	r3, r3, r7
1000ae26:	009b      	lsls	r3, r3, #2
1000ae28:	4a36      	ldr	r2, [pc, #216]	; (1000af04 <ble_connected_state_handler+0x220>)
1000ae2a:	18d3      	adds	r3, r2, r3
1000ae2c:	2205      	movs	r2, #5
1000ae2e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ae30:	3202      	adds	r2, #2
1000ae32:	2100      	movs	r1, #0
1000ae34:	482d      	ldr	r0, [pc, #180]	; (1000aeec <ble_connected_state_handler+0x208>)
1000ae36:	4b2f      	ldr	r3, [pc, #188]	; (1000aef4 <ble_connected_state_handler+0x210>)
1000ae38:	4798      	blx	r3
1000ae3a:	e042      	b.n	1000aec2 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ae3c:	4b31      	ldr	r3, [pc, #196]	; (1000af04 <ble_connected_state_handler+0x220>)
1000ae3e:	4698      	mov	r8, r3
1000ae40:	017c      	lsls	r4, r7, #5
1000ae42:	1be3      	subs	r3, r4, r7
1000ae44:	009b      	lsls	r3, r3, #2
1000ae46:	4443      	add	r3, r8
1000ae48:	220a      	movs	r2, #10
1000ae4a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000ae4c:	3a03      	subs	r2, #3
1000ae4e:	2100      	movs	r1, #0
1000ae50:	4826      	ldr	r0, [pc, #152]	; (1000aeec <ble_connected_state_handler+0x208>)
1000ae52:	4b28      	ldr	r3, [pc, #160]	; (1000aef4 <ble_connected_state_handler+0x210>)
1000ae54:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ae56:	1be4      	subs	r4, r4, r7
1000ae58:	00a4      	lsls	r4, r4, #2
1000ae5a:	4444      	add	r4, r8
1000ae5c:	7ca3      	ldrb	r3, [r4, #18]
1000ae5e:	2b0a      	cmp	r3, #10
1000ae60:	d12f      	bne.n	1000aec2 <ble_connected_state_handler+0x1de>
1000ae62:	e00d      	b.n	1000ae80 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000ae64:	481a      	ldr	r0, [pc, #104]	; (1000aed0 <ble_connected_state_handler+0x1ec>)
1000ae66:	4b1b      	ldr	r3, [pc, #108]	; (1000aed4 <ble_connected_state_handler+0x1f0>)
1000ae68:	4798      	blx	r3
1000ae6a:	4b27      	ldr	r3, [pc, #156]	; (1000af08 <ble_connected_state_handler+0x224>)
1000ae6c:	7819      	ldrb	r1, [r3, #0]
1000ae6e:	b2c9      	uxtb	r1, r1
1000ae70:	4826      	ldr	r0, [pc, #152]	; (1000af0c <ble_connected_state_handler+0x228>)
1000ae72:	4b1a      	ldr	r3, [pc, #104]	; (1000aedc <ble_connected_state_handler+0x1f8>)
1000ae74:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000ae76:	8928      	ldrh	r0, [r5, #8]
1000ae78:	2113      	movs	r1, #19
1000ae7a:	4b25      	ldr	r3, [pc, #148]	; (1000af10 <ble_connected_state_handler+0x22c>)
1000ae7c:	4798      	blx	r3
1000ae7e:	e020      	b.n	1000aec2 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000ae80:	8928      	ldrh	r0, [r5, #8]
1000ae82:	4b24      	ldr	r3, [pc, #144]	; (1000af14 <ble_connected_state_handler+0x230>)
1000ae84:	4798      	blx	r3
1000ae86:	e01c      	b.n	1000aec2 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000ae88:	4811      	ldr	r0, [pc, #68]	; (1000aed0 <ble_connected_state_handler+0x1ec>)
1000ae8a:	4b12      	ldr	r3, [pc, #72]	; (1000aed4 <ble_connected_state_handler+0x1f0>)
1000ae8c:	4798      	blx	r3
1000ae8e:	7aa9      	ldrb	r1, [r5, #10]
1000ae90:	4821      	ldr	r0, [pc, #132]	; (1000af18 <ble_connected_state_handler+0x234>)
1000ae92:	4b12      	ldr	r3, [pc, #72]	; (1000aedc <ble_connected_state_handler+0x1f8>)
1000ae94:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000ae96:	2600      	movs	r6, #0
1000ae98:	e013      	b.n	1000aec2 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000ae9a:	4b1b      	ldr	r3, [pc, #108]	; (1000af08 <ble_connected_state_handler+0x224>)
1000ae9c:	781b      	ldrb	r3, [r3, #0]
1000ae9e:	b2db      	uxtb	r3, r3
1000aea0:	2b04      	cmp	r3, #4
1000aea2:	d8df      	bhi.n	1000ae64 <ble_connected_state_handler+0x180>
1000aea4:	4b17      	ldr	r3, [pc, #92]	; (1000af04 <ble_connected_state_handler+0x220>)
1000aea6:	4699      	mov	r9, r3
1000aea8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000aeaa:	4b11      	ldr	r3, [pc, #68]	; (1000aef0 <ble_connected_state_handler+0x20c>)
1000aeac:	469b      	mov	fp, r3
1000aeae:	e773      	b.n	1000ad98 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000aeb0:	235e      	movs	r3, #94	; 0x5e
1000aeb2:	4a14      	ldr	r2, [pc, #80]	; (1000af04 <ble_connected_state_handler+0x220>)
1000aeb4:	5cd3      	ldrb	r3, [r2, r3]
1000aeb6:	2b00      	cmp	r3, #0
1000aeb8:	d08c      	beq.n	1000add4 <ble_connected_state_handler+0xf0>
1000aeba:	4a18      	ldr	r2, [pc, #96]	; (1000af1c <ble_connected_state_handler+0x238>)
1000aebc:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000aebe:	2701      	movs	r7, #1
1000aec0:	e783      	b.n	1000adca <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000aec2:	0030      	movs	r0, r6
1000aec4:	b01a      	add	sp, #104	; 0x68
1000aec6:	bc1c      	pop	{r2, r3, r4}
1000aec8:	4690      	mov	r8, r2
1000aeca:	4699      	mov	r9, r3
1000aecc:	46a3      	mov	fp, r4
1000aece:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aed0:	10013098 	.word	0x10013098
1000aed4:	10011da5 	.word	0x10011da5
1000aed8:	10013950 	.word	0x10013950
1000aedc:	10011c85 	.word	0x10011c85
1000aee0:	10013994 	.word	0x10013994
1000aee4:	100163d4 	.word	0x100163d4
1000aee8:	10011c63 	.word	0x10011c63
1000aeec:	10014b48 	.word	0x10014b48
1000aef0:	10011c45 	.word	0x10011c45
1000aef4:	10011c75 	.word	0x10011c75
1000aef8:	1001616e 	.word	0x1001616e
1000aefc:	1000db15 	.word	0x1000db15
1000af00:	100139ac 	.word	0x100139ac
1000af04:	10016128 	.word	0x10016128
1000af08:	10016394 	.word	0x10016394
1000af0c:	100139d0 	.word	0x100139d0
1000af10:	1000dae9 	.word	0x1000dae9
1000af14:	1000acb1 	.word	0x1000acb1
1000af18:	10013a0c 	.word	0x10013a0c
1000af1c:	10016202 	.word	0x10016202

1000af20 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000af20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af22:	4647      	mov	r7, r8
1000af24:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000af26:	7803      	ldrb	r3, [r0, #0]
1000af28:	2b00      	cmp	r3, #0
1000af2a:	d141      	bne.n	1000afb0 <ble_resolv_rand_addr_handler+0x90>
1000af2c:	4d2f      	ldr	r5, [pc, #188]	; (1000afec <ble_resolv_rand_addr_handler+0xcc>)
1000af2e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000af30:	1c46      	adds	r6, r0, #1
1000af32:	4f2f      	ldr	r7, [pc, #188]	; (1000aff0 <ble_resolv_rand_addr_handler+0xd0>)
1000af34:	2210      	movs	r2, #16
1000af36:	0029      	movs	r1, r5
1000af38:	0030      	movs	r0, r6
1000af3a:	47b8      	blx	r7
1000af3c:	2800      	cmp	r0, #0
1000af3e:	d03f      	beq.n	1000afc0 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000af40:	3401      	adds	r4, #1
1000af42:	b2e4      	uxtb	r4, r4
1000af44:	357c      	adds	r5, #124	; 0x7c
1000af46:	2c05      	cmp	r4, #5
1000af48:	d1f4      	bne.n	1000af34 <ble_resolv_rand_addr_handler+0x14>
1000af4a:	e031      	b.n	1000afb0 <ble_resolv_rand_addr_handler+0x90>
1000af4c:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000af4e:	001c      	movs	r4, r3
1000af50:	7811      	ldrb	r1, [r2, #0]
1000af52:	2900      	cmp	r1, #0
1000af54:	d122      	bne.n	1000af9c <ble_resolv_rand_addr_handler+0x7c>
1000af56:	e001      	b.n	1000af5c <ble_resolv_rand_addr_handler+0x3c>
1000af58:	2400      	movs	r4, #0
1000af5a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000af5c:	4b25      	ldr	r3, [pc, #148]	; (1000aff4 <ble_resolv_rand_addr_handler+0xd4>)
1000af5e:	4698      	mov	r8, r3
1000af60:	0166      	lsls	r6, r4, #5
1000af62:	1b37      	subs	r7, r6, r4
1000af64:	00bf      	lsls	r7, r7, #2
1000af66:	4447      	add	r7, r8
1000af68:	2212      	movs	r2, #18
1000af6a:	4923      	ldr	r1, [pc, #140]	; (1000aff8 <ble_resolv_rand_addr_handler+0xd8>)
1000af6c:	0038      	movs	r0, r7
1000af6e:	4b23      	ldr	r3, [pc, #140]	; (1000affc <ble_resolv_rand_addr_handler+0xdc>)
1000af70:	4798      	blx	r3
				ble_device_count++;
1000af72:	4a23      	ldr	r2, [pc, #140]	; (1000b000 <ble_resolv_rand_addr_handler+0xe0>)
1000af74:	7813      	ldrb	r3, [r2, #0]
1000af76:	3301      	adds	r3, #1
1000af78:	b2db      	uxtb	r3, r3
1000af7a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000af7c:	375e      	adds	r7, #94	; 0x5e
1000af7e:	2302      	movs	r3, #2
1000af80:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000af82:	1b34      	subs	r4, r6, r4
1000af84:	00a4      	lsls	r4, r4, #2
1000af86:	4444      	add	r4, r8
1000af88:	3308      	adds	r3, #8
1000af8a:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000af8c:	016b      	lsls	r3, r5, #5
1000af8e:	1b5d      	subs	r5, r3, r5
1000af90:	00ad      	lsls	r5, r5, #2
1000af92:	4445      	add	r5, r8
1000af94:	7cab      	ldrb	r3, [r5, #18]
1000af96:	2b0a      	cmp	r3, #10
1000af98:	d123      	bne.n	1000afe2 <ble_resolv_rand_addr_handler+0xc2>
1000af9a:	e004      	b.n	1000afa6 <ble_resolv_rand_addr_handler+0x86>
1000af9c:	3301      	adds	r3, #1
1000af9e:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000afa0:	2b05      	cmp	r3, #5
1000afa2:	d1d3      	bne.n	1000af4c <ble_resolv_rand_addr_handler+0x2c>
1000afa4:	e01d      	b.n	1000afe2 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000afa6:	4b14      	ldr	r3, [pc, #80]	; (1000aff8 <ble_resolv_rand_addr_handler+0xd8>)
1000afa8:	8918      	ldrh	r0, [r3, #8]
1000afaa:	4b16      	ldr	r3, [pc, #88]	; (1000b004 <ble_resolv_rand_addr_handler+0xe4>)
1000afac:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000afae:	e018      	b.n	1000afe2 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000afb0:	235e      	movs	r3, #94	; 0x5e
1000afb2:	4a10      	ldr	r2, [pc, #64]	; (1000aff4 <ble_resolv_rand_addr_handler+0xd4>)
1000afb4:	5cd3      	ldrb	r3, [r2, r3]
1000afb6:	2b00      	cmp	r3, #0
1000afb8:	d0ce      	beq.n	1000af58 <ble_resolv_rand_addr_handler+0x38>
1000afba:	4a13      	ldr	r2, [pc, #76]	; (1000b008 <ble_resolv_rand_addr_handler+0xe8>)
1000afbc:	2301      	movs	r3, #1
1000afbe:	e7c5      	b.n	1000af4c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000afc0:	480c      	ldr	r0, [pc, #48]	; (1000aff4 <ble_resolv_rand_addr_handler+0xd4>)
1000afc2:	0163      	lsls	r3, r4, #5
1000afc4:	1b1a      	subs	r2, r3, r4
1000afc6:	0092      	lsls	r2, r2, #2
1000afc8:	1882      	adds	r2, r0, r2
1000afca:	0011      	movs	r1, r2
1000afcc:	315e      	adds	r1, #94	; 0x5e
1000afce:	2502      	movs	r5, #2
1000afd0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000afd2:	210a      	movs	r1, #10
1000afd4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000afd6:	0010      	movs	r0, r2
1000afd8:	2212      	movs	r2, #18
1000afda:	4907      	ldr	r1, [pc, #28]	; (1000aff8 <ble_resolv_rand_addr_handler+0xd8>)
1000afdc:	4b07      	ldr	r3, [pc, #28]	; (1000affc <ble_resolv_rand_addr_handler+0xdc>)
1000afde:	4798      	blx	r3
1000afe0:	e7e1      	b.n	1000afa6 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000afe2:	2000      	movs	r0, #0
1000afe4:	bc04      	pop	{r2}
1000afe6:	4690      	mov	r8, r2
1000afe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afea:	46c0      	nop			; (mov r8, r8)
1000afec:	1001616e 	.word	0x1001616e
1000aff0:	10011c45 	.word	0x10011c45
1000aff4:	10016128 	.word	0x10016128
1000aff8:	100163d4 	.word	0x100163d4
1000affc:	10011c63 	.word	0x10011c63
1000b000:	10016394 	.word	0x10016394
1000b004:	1000acb1 	.word	0x1000acb1
1000b008:	10016202 	.word	0x10016202

1000b00c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000b00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b00e:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
	switch(events)
1000b010:	283b      	cmp	r0, #59	; 0x3b
1000b012:	d872      	bhi.n	1000b0fa <ble_event_manager+0xee>
1000b014:	0083      	lsls	r3, r0, #2
1000b016:	4a3c      	ldr	r2, [pc, #240]	; (1000b108 <ble_event_manager+0xfc>)
1000b018:	58d3      	ldr	r3, [r2, r3]
1000b01a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b01c:	0084      	lsls	r4, r0, #2
1000b01e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000b020:	4f3a      	ldr	r7, [pc, #232]	; (1000b10c <ble_event_manager+0x100>)
1000b022:	59bb      	ldr	r3, [r7, r6]
1000b024:	2b00      	cmp	r3, #0
1000b026:	d004      	beq.n	1000b032 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b028:	591b      	ldr	r3, [r3, r4]
1000b02a:	2b00      	cmp	r3, #0
1000b02c:	d001      	beq.n	1000b032 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000b02e:	0028      	movs	r0, r5
1000b030:	4798      	blx	r3
1000b032:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000b034:	2e14      	cmp	r6, #20
1000b036:	d1f4      	bne.n	1000b022 <ble_event_manager+0x16>
1000b038:	e065      	b.n	1000b106 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b03a:	3813      	subs	r0, #19
1000b03c:	b2c4      	uxtb	r4, r0
1000b03e:	00a4      	lsls	r4, r4, #2
1000b040:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000b042:	4f33      	ldr	r7, [pc, #204]	; (1000b110 <ble_event_manager+0x104>)
1000b044:	59bb      	ldr	r3, [r7, r6]
1000b046:	2b00      	cmp	r3, #0
1000b048:	d004      	beq.n	1000b054 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b04a:	591b      	ldr	r3, [r3, r4]
1000b04c:	2b00      	cmp	r3, #0
1000b04e:	d001      	beq.n	1000b054 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000b050:	0028      	movs	r0, r5
1000b052:	4798      	blx	r3
1000b054:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000b056:	2e14      	cmp	r6, #20
1000b058:	d1f4      	bne.n	1000b044 <ble_event_manager+0x38>
1000b05a:	e054      	b.n	1000b106 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b05c:	381d      	subs	r0, #29
1000b05e:	b2c4      	uxtb	r4, r0
1000b060:	00a4      	lsls	r4, r4, #2
1000b062:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000b064:	4f2b      	ldr	r7, [pc, #172]	; (1000b114 <ble_event_manager+0x108>)
1000b066:	59bb      	ldr	r3, [r7, r6]
1000b068:	2b00      	cmp	r3, #0
1000b06a:	d004      	beq.n	1000b076 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b06c:	591b      	ldr	r3, [r3, r4]
1000b06e:	2b00      	cmp	r3, #0
1000b070:	d001      	beq.n	1000b076 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000b072:	0028      	movs	r0, r5
1000b074:	4798      	blx	r3
1000b076:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000b078:	2e14      	cmp	r6, #20
1000b07a:	d1f4      	bne.n	1000b066 <ble_event_manager+0x5a>
1000b07c:	e043      	b.n	1000b106 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000b07e:	3827      	subs	r0, #39	; 0x27
1000b080:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000b082:	4b25      	ldr	r3, [pc, #148]	; (1000b118 <ble_event_manager+0x10c>)
1000b084:	681b      	ldr	r3, [r3, #0]
1000b086:	2b00      	cmp	r3, #0
1000b088:	d03d      	beq.n	1000b106 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b08a:	0080      	lsls	r0, r0, #2
1000b08c:	58c3      	ldr	r3, [r0, r3]
1000b08e:	2b00      	cmp	r3, #0
1000b090:	d039      	beq.n	1000b106 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b092:	0008      	movs	r0, r1
1000b094:	4798      	blx	r3
1000b096:	e036      	b.n	1000b106 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000b098:	382d      	subs	r0, #45	; 0x2d
1000b09a:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000b09c:	4b1f      	ldr	r3, [pc, #124]	; (1000b11c <ble_event_manager+0x110>)
1000b09e:	681b      	ldr	r3, [r3, #0]
1000b0a0:	2b00      	cmp	r3, #0
1000b0a2:	d030      	beq.n	1000b106 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b0a4:	0080      	lsls	r0, r0, #2
1000b0a6:	58c3      	ldr	r3, [r0, r3]
1000b0a8:	2b00      	cmp	r3, #0
1000b0aa:	d02c      	beq.n	1000b106 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b0ac:	0008      	movs	r0, r1
1000b0ae:	4798      	blx	r3
1000b0b0:	e029      	b.n	1000b106 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b0b2:	3836      	subs	r0, #54	; 0x36
1000b0b4:	b2c4      	uxtb	r4, r0
1000b0b6:	00a4      	lsls	r4, r4, #2
1000b0b8:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000b0ba:	4f19      	ldr	r7, [pc, #100]	; (1000b120 <ble_event_manager+0x114>)
1000b0bc:	59bb      	ldr	r3, [r7, r6]
1000b0be:	2b00      	cmp	r3, #0
1000b0c0:	d004      	beq.n	1000b0cc <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b0c2:	591b      	ldr	r3, [r3, r4]
1000b0c4:	2b00      	cmp	r3, #0
1000b0c6:	d001      	beq.n	1000b0cc <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000b0c8:	0028      	movs	r0, r5
1000b0ca:	4798      	blx	r3
1000b0cc:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000b0ce:	2e14      	cmp	r6, #20
1000b0d0:	d1f4      	bne.n	1000b0bc <ble_event_manager+0xb0>
1000b0d2:	e018      	b.n	1000b106 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000b0d4:	3838      	subs	r0, #56	; 0x38
1000b0d6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000b0d8:	4b12      	ldr	r3, [pc, #72]	; (1000b124 <ble_event_manager+0x118>)
1000b0da:	681b      	ldr	r3, [r3, #0]
1000b0dc:	2b00      	cmp	r3, #0
1000b0de:	d012      	beq.n	1000b106 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000b0e0:	0080      	lsls	r0, r0, #2
1000b0e2:	58c3      	ldr	r3, [r0, r3]
1000b0e4:	2b00      	cmp	r3, #0
1000b0e6:	d00e      	beq.n	1000b106 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000b0e8:	0008      	movs	r0, r1
1000b0ea:	4798      	blx	r3
1000b0ec:	e00b      	b.n	1000b106 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000b0ee:	4b0e      	ldr	r3, [pc, #56]	; (1000b128 <ble_event_manager+0x11c>)
1000b0f0:	681b      	ldr	r3, [r3, #0]
1000b0f2:	2b00      	cmp	r3, #0
1000b0f4:	d007      	beq.n	1000b106 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000b0f6:	4798      	blx	r3
1000b0f8:	e005      	b.n	1000b106 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000b0fa:	4d0c      	ldr	r5, [pc, #48]	; (1000b12c <ble_event_manager+0x120>)
1000b0fc:	0028      	movs	r0, r5
1000b0fe:	4c0c      	ldr	r4, [pc, #48]	; (1000b130 <ble_event_manager+0x124>)
1000b100:	47a0      	blx	r4
1000b102:	0028      	movs	r0, r5
1000b104:	47a0      	blx	r4
	}
	break;		
	}
}
1000b106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b108:	10013314 	.word	0x10013314
1000b10c:	100163ac 	.word	0x100163ac
1000b110:	100163c0 	.word	0x100163c0
1000b114:	10016114 	.word	0x10016114
1000b118:	10016408 	.word	0x10016408
1000b11c:	10016110 	.word	0x10016110
1000b120:	10016398 	.word	0x10016398
1000b124:	1001694c 	.word	0x1001694c
1000b128:	10014b40 	.word	0x10014b40
1000b12c:	10013098 	.word	0x10013098
1000b130:	10011da5 	.word	0x10011da5

1000b134 <ble_event_task>:
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000b134:	b510      	push	{r4, lr}
1000b136:	0002      	movs	r2, r0
	at_ble_status_t status = at_ble_event_get(&event, ble_event_params, timeout);
1000b138:	4906      	ldr	r1, [pc, #24]	; (1000b154 <ble_event_task+0x20>)
1000b13a:	4807      	ldr	r0, [pc, #28]	; (1000b158 <ble_event_task+0x24>)
1000b13c:	4b07      	ldr	r3, [pc, #28]	; (1000b15c <ble_event_task+0x28>)
1000b13e:	4798      	blx	r3
1000b140:	1e04      	subs	r4, r0, #0
    if (status == AT_BLE_SUCCESS) 
1000b142:	d104      	bne.n	1000b14e <ble_event_task+0x1a>
    {
            ble_event_manager(event, ble_event_params);
1000b144:	4b04      	ldr	r3, [pc, #16]	; (1000b158 <ble_event_task+0x24>)
1000b146:	7818      	ldrb	r0, [r3, #0]
1000b148:	4902      	ldr	r1, [pc, #8]	; (1000b154 <ble_event_task+0x20>)
1000b14a:	4b05      	ldr	r3, [pc, #20]	; (1000b160 <ble_event_task+0x2c>)
1000b14c:	4798      	blx	r3
            return AT_BLE_SUCCESS;
    }
    
    return status;
}
1000b14e:	0020      	movs	r0, r4
1000b150:	bd10      	pop	{r4, pc}
1000b152:	46c0      	nop			; (mov r8, r8)
1000b154:	10016740 	.word	0x10016740
1000b158:	10016404 	.word	0x10016404
1000b15c:	1000cea9 	.word	0x1000cea9
1000b160:	1000b00d 	.word	0x1000b00d

1000b164 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000b164:	b570      	push	{r4, r5, r6, lr}
1000b166:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000b168:	ac08      	add	r4, sp, #32
1000b16a:	2303      	movs	r3, #3
1000b16c:	7063      	strb	r3, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000b16e:	3307      	adds	r3, #7
1000b170:	70a3      	strb	r3, [r4, #2]
1000b172:	330e      	adds	r3, #14
1000b174:	70e3      	strb	r3, [r4, #3]
1000b176:	220f      	movs	r2, #15
1000b178:	7122      	strb	r2, [r4, #4]
1000b17a:	7163      	strb	r3, [r4, #5]
1000b17c:	3a02      	subs	r2, #2
1000b17e:	71a2      	strb	r2, [r4, #6]
1000b180:	71e3      	strb	r3, [r4, #7]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000b182:	3b11      	subs	r3, #17
1000b184:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000b186:	7223      	strb	r3, [r4, #8]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000b188:	2609      	movs	r6, #9
1000b18a:	7266      	strb	r6, [r4, #9]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000b18c:	3a07      	subs	r2, #7
1000b18e:	4912      	ldr	r1, [pc, #72]	; (1000b1d8 <ble_advertisement_data_set+0x74>)
1000b190:	202a      	movs	r0, #42	; 0x2a
1000b192:	4468      	add	r0, sp
1000b194:	4d11      	ldr	r5, [pc, #68]	; (1000b1dc <ble_advertisement_data_set+0x78>)
1000b196:	47a8      	blx	r5
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000b198:	2300      	movs	r3, #0
1000b19a:	466a      	mov	r2, sp
1000b19c:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000b19e:	3315      	adds	r3, #21
1000b1a0:	7053      	strb	r3, [r2, #1]
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
	#if (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000b1a2:	7426      	strb	r6, [r4, #16]
		adv_buf[adv_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000b1a4:	33ea      	adds	r3, #234	; 0xea
1000b1a6:	7463      	strb	r3, [r4, #17]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000b1a8:	2208      	movs	r2, #8
1000b1aa:	490d      	ldr	r1, [pc, #52]	; (1000b1e0 <ble_advertisement_data_set+0x7c>)
1000b1ac:	3110      	adds	r1, #16
1000b1ae:	2032      	movs	r0, #50	; 0x32
1000b1b0:	4468      	add	r0, sp
1000b1b2:	47a8      	blx	r5
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000b1b4:	2300      	movs	r3, #0
1000b1b6:	466a      	mov	r2, sp
1000b1b8:	211a      	movs	r1, #26
1000b1ba:	0020      	movs	r0, r4
1000b1bc:	4c09      	ldr	r4, [pc, #36]	; (1000b1e4 <ble_advertisement_data_set+0x80>)
1000b1be:	47a0      	blx	r4
1000b1c0:	2800      	cmp	r0, #0
1000b1c2:	d005      	beq.n	1000b1d0 <ble_advertisement_data_set+0x6c>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000b1c4:	4808      	ldr	r0, [pc, #32]	; (1000b1e8 <ble_advertisement_data_set+0x84>)
1000b1c6:	4b09      	ldr	r3, [pc, #36]	; (1000b1ec <ble_advertisement_data_set+0x88>)
1000b1c8:	4798      	blx	r3
1000b1ca:	4809      	ldr	r0, [pc, #36]	; (1000b1f0 <ble_advertisement_data_set+0x8c>)
1000b1cc:	4b09      	ldr	r3, [pc, #36]	; (1000b1f4 <ble_advertisement_data_set+0x90>)
1000b1ce:	4798      	blx	r3
		return status;
		} else {
		DBG_LOG_DEV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
	}
}
1000b1d0:	2000      	movs	r0, #0
1000b1d2:	b010      	add	sp, #64	; 0x40
1000b1d4:	bd70      	pop	{r4, r5, r6, pc}
1000b1d6:	46c0      	nop			; (mov r8, r8)
1000b1d8:	10013860 	.word	0x10013860
1000b1dc:	10011c63 	.word	0x10011c63
1000b1e0:	10013404 	.word	0x10013404
1000b1e4:	1000d909 	.word	0x1000d909
1000b1e8:	10013098 	.word	0x10013098
1000b1ec:	10011da5 	.word	0x10011da5
1000b1f0:	10013a34 	.word	0x10013a34
1000b1f4:	10011c85 	.word	0x10011c85

1000b1f8 <dis_init_service>:

bool volatile dis_notification_flag[DIS_TOTAL_CHARATERISTIC_NUM] = {false};

/**@brief Initialize the dis service related information. */
void dis_init_service(dis_gatt_service_handler_t *device_info_serv)
{
1000b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b1fa:	465f      	mov	r7, fp
1000b1fc:	4656      	mov	r6, sl
1000b1fe:	464d      	mov	r5, r9
1000b200:	4644      	mov	r4, r8
1000b202:	b4f0      	push	{r4, r5, r6, r7}
1000b204:	0004      	movs	r4, r0
	device_info_serv->serv_handle = 0;
1000b206:	2500      	movs	r5, #0
1000b208:	2600      	movs	r6, #0
1000b20a:	8245      	strh	r5, [r0, #18]
	device_info_serv->serv_uuid.type = AT_BLE_UUID_16;
1000b20c:	7006      	strb	r6, [r0, #0]
	device_info_serv->serv_uuid.uuid[0] = (uint8_t) DIS_SERVICE_UUID;
1000b20e:	230a      	movs	r3, #10
1000b210:	7043      	strb	r3, [r0, #1]
	device_info_serv->serv_uuid.uuid[1] = (uint8_t) (DIS_SERVICE_UUID >> 8);
1000b212:	2318      	movs	r3, #24
1000b214:	7083      	strb	r3, [r0, #2]
	
	//Characteristic Info for Manufacturer Name String
	device_info_serv->serv_chars[0].char_val_handle = 0;          /* handle stored here */
1000b216:	8285      	strh	r5, [r0, #20]
	device_info_serv->serv_chars[0].uuid.type = AT_BLE_UUID_16;
1000b218:	7586      	strb	r6, [r0, #22]
	device_info_serv->serv_chars[0].uuid.uuid[0] = (uint8_t) DIS_CHAR_MANUFACTURER_NAME_UUID;          /* UUID : Manufacturer Name String */
1000b21a:	3311      	adds	r3, #17
1000b21c:	75c3      	strb	r3, [r0, #23]
	device_info_serv->serv_chars[0].uuid.uuid[1] = (uint8_t) (DIS_CHAR_MANUFACTURER_NAME_UUID >> 8);   /* UUID : Manufacturer Name String */
1000b21e:	3301      	adds	r3, #1
1000b220:	4698      	mov	r8, r3
1000b222:	7603      	strb	r3, [r0, #24]
	device_info_serv->serv_chars[0].properties = AT_BLE_CHAR_READ; /* Properties */
1000b224:	2302      	movs	r3, #2
1000b226:	469b      	mov	fp, r3
1000b228:	8503      	strh	r3, [r0, #40]	; 0x28
	
	memcpy(char_value.manufacturer_name,DEFAULT_MANUFACTURER_NAME,DIS_CHAR_MANUFACTURER_NAME_INIT_LEN);
1000b22a:	4fe0      	ldr	r7, [pc, #896]	; (1000b5ac <dis_init_service+0x3b4>)
1000b22c:	2205      	movs	r2, #5
1000b22e:	49e0      	ldr	r1, [pc, #896]	; (1000b5b0 <dis_init_service+0x3b8>)
1000b230:	0038      	movs	r0, r7
1000b232:	4be0      	ldr	r3, [pc, #896]	; (1000b5b4 <dis_init_service+0x3bc>)
1000b234:	4699      	mov	r9, r3
1000b236:	4798      	blx	r3
	device_info_serv->serv_chars[0].init_value = char_value.manufacturer_name;
1000b238:	62e7      	str	r7, [r4, #44]	; 0x2c
	
	device_info_serv->serv_chars[0].value_init_len = DIS_CHAR_MANUFACTURER_NAME_INIT_LEN;
1000b23a:	2305      	movs	r3, #5
1000b23c:	8623      	strh	r3, [r4, #48]	; 0x30
	device_info_serv->serv_chars[0].value_max_len = DIS_CHAR_MANUFACTURER_NAME_MAX_LEN;
1000b23e:	2314      	movs	r3, #20
1000b240:	8663      	strh	r3, [r4, #50]	; 0x32
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[0].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b242:	2334      	movs	r3, #52	; 0x34
1000b244:	465a      	mov	r2, fp
1000b246:	54e2      	strb	r2, [r4, r3]
#else
	device_info_serv->serv_chars[0].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[0].user_desc = NULL;           /* user defined name */
1000b248:	63a5      	str	r5, [r4, #56]	; 0x38
	device_info_serv->serv_chars[0].user_desc_len = 0;
1000b24a:	87a5      	strh	r5, [r4, #60]	; 0x3c
	device_info_serv->serv_chars[0].user_desc_max_len = 0;
1000b24c:	87e5      	strh	r5, [r4, #62]	; 0x3e
	device_info_serv->serv_chars[0].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b24e:	3310      	adds	r3, #16
1000b250:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[0].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b252:	3301      	adds	r3, #1
1000b254:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[0].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b256:	3301      	adds	r3, #1
1000b258:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[0].user_desc_handle = 0;             /*user desc handles*/
1000b25a:	3302      	adds	r3, #2
1000b25c:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[0].client_config_handle = 0;         /*client config handles*/
1000b25e:	3302      	adds	r3, #2
1000b260:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[0].server_config_handle = 0;         /*server config handles*/
1000b262:	3302      	adds	r3, #2
1000b264:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[0].presentation_format = NULL;       /* presentation format */
1000b266:	6425      	str	r5, [r4, #64]	; 0x40
	
	
	//Characterisitc Info for Model Number String
	device_info_serv->serv_chars[1].char_val_handle = 0;          /* handle stored here */
1000b268:	3304      	adds	r3, #4
1000b26a:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[1].uuid.type = AT_BLE_UUID_16;
1000b26c:	3302      	adds	r3, #2
1000b26e:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[1].uuid.uuid[0] = (uint8_t) DIS_CHAR_MODEL_NUMBER_UUID;          /* UUID : Serial Number String*/
1000b270:	2224      	movs	r2, #36	; 0x24
1000b272:	3301      	adds	r3, #1
1000b274:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[1].uuid.uuid[1] = (uint8_t) (DIS_CHAR_MODEL_NUMBER_UUID >> 8);          /* UUID : Serial Number String*/
1000b276:	3301      	adds	r3, #1
1000b278:	4642      	mov	r2, r8
1000b27a:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[1].properties = AT_BLE_CHAR_READ; /* Properties */
1000b27c:	3310      	adds	r3, #16
1000b27e:	465a      	mov	r2, fp
1000b280:	52e2      	strh	r2, [r4, r3]
	
	memcpy(char_value.default_model_number,DEFAULT_MODEL_NUMBER,DIS_CHAR_MODEL_NUMBER_INIT_LEN);
1000b282:	220a      	movs	r2, #10
1000b284:	49cc      	ldr	r1, [pc, #816]	; (1000b5b8 <dis_init_service+0x3c0>)
1000b286:	48cd      	ldr	r0, [pc, #820]	; (1000b5bc <dis_init_service+0x3c4>)
1000b288:	47c8      	blx	r9
	device_info_serv->serv_chars[1].init_value = char_value.default_model_number;
1000b28a:	4bcc      	ldr	r3, [pc, #816]	; (1000b5bc <dis_init_service+0x3c4>)
1000b28c:	66a3      	str	r3, [r4, #104]	; 0x68
	
	device_info_serv->serv_chars[1].value_init_len = DIS_CHAR_MODEL_NUMBER_INIT_LEN;
1000b28e:	236c      	movs	r3, #108	; 0x6c
1000b290:	220a      	movs	r2, #10
1000b292:	52e2      	strh	r2, [r4, r3]
	device_info_serv->serv_chars[1].value_max_len = DIS_CHAR_MODEL_NUMBER_MAX_LEN;
1000b294:	3302      	adds	r3, #2
1000b296:	2214      	movs	r2, #20
1000b298:	52e2      	strh	r2, [r4, r3]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[1].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b29a:	3302      	adds	r3, #2
1000b29c:	465a      	mov	r2, fp
1000b29e:	54e2      	strb	r2, [r4, r3]
#else
	device_info_serv->serv_chars[1].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[1].user_desc = NULL;           /* user defined name */
1000b2a0:	6765      	str	r5, [r4, #116]	; 0x74
	device_info_serv->serv_chars[1].user_desc_len = 0;
1000b2a2:	3308      	adds	r3, #8
1000b2a4:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[1].user_desc_max_len = 0;
1000b2a6:	3302      	adds	r3, #2
1000b2a8:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[1].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b2aa:	3306      	adds	r3, #6
1000b2ac:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[1].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b2ae:	3301      	adds	r3, #1
1000b2b0:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[1].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b2b2:	3301      	adds	r3, #1
1000b2b4:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[1].user_desc_handle = 0;             /*user desc handles*/
1000b2b6:	3302      	adds	r3, #2
1000b2b8:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[1].client_config_handle = 0;         /*client config handles*/
1000b2ba:	3302      	adds	r3, #2
1000b2bc:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[1].server_config_handle = 0;         /*server config handles*/
1000b2be:	3302      	adds	r3, #2
1000b2c0:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[1].presentation_format = NULL;       /* presentation format */
1000b2c2:	67e5      	str	r5, [r4, #124]	; 0x7c


	//Characteristic Info for Serial String
	device_info_serv->serv_chars[2].char_val_handle = 0;          /* handle stored here */
1000b2c4:	3304      	adds	r3, #4
1000b2c6:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[2].uuid.type = AT_BLE_UUID_16;
1000b2c8:	3302      	adds	r3, #2
1000b2ca:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[2].uuid.uuid[0] = (uint8_t) DIS_CHAR_SERIAL_NUMBER_UUID;          /* UUID : Hardware Revision String*/
1000b2cc:	2225      	movs	r2, #37	; 0x25
1000b2ce:	3301      	adds	r3, #1
1000b2d0:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[2].uuid.uuid[1] = (uint8_t) (DIS_CHAR_SERIAL_NUMBER_UUID >> 8);          /* UUID : Hardware Revision String*/
1000b2d2:	3301      	adds	r3, #1
1000b2d4:	4642      	mov	r2, r8
1000b2d6:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[2].properties = AT_BLE_CHAR_READ; /* Properties */
1000b2d8:	3310      	adds	r3, #16
1000b2da:	465a      	mov	r2, fp
1000b2dc:	52e2      	strh	r2, [r4, r3]
	
	memcpy(char_value.default_serial_number,DEFAULT_SERIAL_NUMBER,DIS_CHAR_SERIAL_NUMBER_INIT_LEN);
1000b2de:	220f      	movs	r2, #15
1000b2e0:	49b7      	ldr	r1, [pc, #732]	; (1000b5c0 <dis_init_service+0x3c8>)
1000b2e2:	48b8      	ldr	r0, [pc, #736]	; (1000b5c4 <dis_init_service+0x3cc>)
1000b2e4:	47c8      	blx	r9
	device_info_serv->serv_chars[2].init_value = char_value.default_serial_number;
1000b2e6:	23a4      	movs	r3, #164	; 0xa4
1000b2e8:	4ab6      	ldr	r2, [pc, #728]	; (1000b5c4 <dis_init_service+0x3cc>)
1000b2ea:	50e2      	str	r2, [r4, r3]
	
	device_info_serv->serv_chars[2].value_init_len = DIS_CHAR_SERIAL_NUMBER_INIT_LEN;
1000b2ec:	3304      	adds	r3, #4
1000b2ee:	220f      	movs	r2, #15
1000b2f0:	52e2      	strh	r2, [r4, r3]
	device_info_serv->serv_chars[2].value_max_len = DIS_CHAR_SERIAL_NUMBER_MAX_LEN;
1000b2f2:	3302      	adds	r3, #2
1000b2f4:	3205      	adds	r2, #5
1000b2f6:	52e2      	strh	r2, [r4, r3]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[2].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b2f8:	3302      	adds	r3, #2
1000b2fa:	465a      	mov	r2, fp
1000b2fc:	54e2      	strb	r2, [r4, r3]
#else
	device_info_serv->serv_chars[2].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[2].user_desc = NULL;           /* user defined name */
1000b2fe:	3304      	adds	r3, #4
1000b300:	50e5      	str	r5, [r4, r3]
	device_info_serv->serv_chars[2].user_desc_len = 0;
1000b302:	3304      	adds	r3, #4
1000b304:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[2].user_desc_max_len = 0;
1000b306:	3302      	adds	r3, #2
1000b308:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[2].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b30a:	3306      	adds	r3, #6
1000b30c:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[2].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b30e:	3301      	adds	r3, #1
1000b310:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[2].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b312:	3301      	adds	r3, #1
1000b314:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[2].user_desc_handle = 0;             /*user desc handles*/
1000b316:	3302      	adds	r3, #2
1000b318:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[2].client_config_handle = 0;         /*client config handles*/
1000b31a:	3302      	adds	r3, #2
1000b31c:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[2].server_config_handle = 0;         /*server config handles*/
1000b31e:	3302      	adds	r3, #2
1000b320:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[2].presentation_format = NULL;       /* presentation format */
1000b322:	3b0c      	subs	r3, #12
1000b324:	50e5      	str	r5, [r4, r3]


	//Characteristic Info for Hardware Revision String
	device_info_serv->serv_chars[3].char_val_handle = 0;          /* handle stored here */
1000b326:	3310      	adds	r3, #16
1000b328:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[3].uuid.type = AT_BLE_UUID_16;
1000b32a:	3302      	adds	r3, #2
1000b32c:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[3].uuid.uuid[0] = (uint8_t) DIS_CHAR_HARDWARE_REVISION_UUID;          /* UUID : Firmware Revision String*/
1000b32e:	2227      	movs	r2, #39	; 0x27
1000b330:	3301      	adds	r3, #1
1000b332:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[3].uuid.uuid[1] = (uint8_t) (DIS_CHAR_HARDWARE_REVISION_UUID >> 8);          /* UUID : Firmware Revision String*/
1000b334:	3301      	adds	r3, #1
1000b336:	4642      	mov	r2, r8
1000b338:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[3].properties = AT_BLE_CHAR_READ; /* Properties */
1000b33a:	3310      	adds	r3, #16
1000b33c:	465a      	mov	r2, fp
1000b33e:	52e2      	strh	r2, [r4, r3]
	
	memcpy(char_value.default_hardware_revision,DEFAULT_HARDWARE_REVISION,DIS_CHAR_HARDWARE_REVISION_INIT_LEN);
1000b340:	2205      	movs	r2, #5
1000b342:	49a1      	ldr	r1, [pc, #644]	; (1000b5c8 <dis_init_service+0x3d0>)
1000b344:	48a1      	ldr	r0, [pc, #644]	; (1000b5cc <dis_init_service+0x3d4>)
1000b346:	47c8      	blx	r9
	device_info_serv->serv_chars[3].init_value = char_value.default_hardware_revision;
1000b348:	23e0      	movs	r3, #224	; 0xe0
1000b34a:	4aa0      	ldr	r2, [pc, #640]	; (1000b5cc <dis_init_service+0x3d4>)
1000b34c:	50e2      	str	r2, [r4, r3]
	
	device_info_serv->serv_chars[3].value_init_len = DIS_CHAR_HARDWARE_REVISION_INIT_LEN;
1000b34e:	3304      	adds	r3, #4
1000b350:	2205      	movs	r2, #5
1000b352:	52e2      	strh	r2, [r4, r3]
	device_info_serv->serv_chars[3].value_max_len = DIS_CHAR_HARDWARE_REVISION_MAX_LEN;
1000b354:	3302      	adds	r3, #2
1000b356:	2214      	movs	r2, #20
1000b358:	52e2      	strh	r2, [r4, r3]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[3].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b35a:	3302      	adds	r3, #2
1000b35c:	465a      	mov	r2, fp
1000b35e:	54e2      	strb	r2, [r4, r3]
#else
	device_info_serv->serv_chars[3].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[3].user_desc = NULL;           /* user defined name */
1000b360:	3304      	adds	r3, #4
1000b362:	50e5      	str	r5, [r4, r3]
	device_info_serv->serv_chars[3].user_desc_len = 0;
1000b364:	3304      	adds	r3, #4
1000b366:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[3].user_desc_max_len = 0;
1000b368:	3302      	adds	r3, #2
1000b36a:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[3].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b36c:	3306      	adds	r3, #6
1000b36e:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[3].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b370:	3301      	adds	r3, #1
1000b372:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[3].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b374:	3301      	adds	r3, #1
1000b376:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[3].user_desc_handle = 0;             /*user desc handles*/
1000b378:	3302      	adds	r3, #2
1000b37a:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[3].client_config_handle = 0;         /*client config handles*/
1000b37c:	3302      	adds	r3, #2
1000b37e:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[3].server_config_handle = 0;         /*server config handles*/
1000b380:	3302      	adds	r3, #2
1000b382:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[3].presentation_format = NULL;       /* presentation format */
1000b384:	3b0c      	subs	r3, #12
1000b386:	50e5      	str	r5, [r4, r3]
	
	
	//Characteristic Info for Firmware  Revision
	device_info_serv->serv_chars[4].char_val_handle = 0;          /* handle stored here */
1000b388:	3310      	adds	r3, #16
1000b38a:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[4].uuid.type = AT_BLE_UUID_16;
1000b38c:	3302      	adds	r3, #2
1000b38e:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[4].uuid.uuid[0] = (uint8_t) DIS_CHAR_FIRMWARE_REIVSION_UUID;          /* UUID : Software Revision */
1000b390:	2226      	movs	r2, #38	; 0x26
1000b392:	2308      	movs	r3, #8
1000b394:	33ff      	adds	r3, #255	; 0xff
1000b396:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[4].uuid.uuid[1] = (uint8_t) (DIS_CHAR_FIRMWARE_REIVSION_UUID >> 8);          /* UUID : Software Revision */
1000b398:	3301      	adds	r3, #1
1000b39a:	4642      	mov	r2, r8
1000b39c:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[4].properties = AT_BLE_CHAR_READ; /* Properties */
1000b39e:	3310      	adds	r3, #16
1000b3a0:	465a      	mov	r2, fp
1000b3a2:	52e2      	strh	r2, [r4, r3]
	
	memcpy(char_value.default_firmware_revision,DEFAULT_FIRMWARE_REIVSION,DIS_CHAR_FIRMWARE_REIVSION_INIT_LEN);
1000b3a4:	2207      	movs	r2, #7
1000b3a6:	498a      	ldr	r1, [pc, #552]	; (1000b5d0 <dis_init_service+0x3d8>)
1000b3a8:	488a      	ldr	r0, [pc, #552]	; (1000b5d4 <dis_init_service+0x3dc>)
1000b3aa:	47c8      	blx	r9
	device_info_serv->serv_chars[4].init_value = char_value.default_firmware_revision;
1000b3ac:	238e      	movs	r3, #142	; 0x8e
1000b3ae:	005b      	lsls	r3, r3, #1
1000b3b0:	4a88      	ldr	r2, [pc, #544]	; (1000b5d4 <dis_init_service+0x3dc>)
1000b3b2:	50e2      	str	r2, [r4, r3]
	
	device_info_serv->serv_chars[4].value_init_len = DIS_CHAR_FIRMWARE_REIVSION_INIT_LEN;
1000b3b4:	3304      	adds	r3, #4
1000b3b6:	2207      	movs	r2, #7
1000b3b8:	52e2      	strh	r2, [r4, r3]
	device_info_serv->serv_chars[4].value_max_len = DIS_CHAR_FIRMWARE_REIVSION_MAX_LEN;
1000b3ba:	3302      	adds	r3, #2
1000b3bc:	2214      	movs	r2, #20
1000b3be:	52e2      	strh	r2, [r4, r3]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[4].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b3c0:	3302      	adds	r3, #2
1000b3c2:	465a      	mov	r2, fp
1000b3c4:	54e2      	strb	r2, [r4, r3]
#else
	device_info_serv->serv_chars[4].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[4].user_desc = NULL;           /* user defined name */
1000b3c6:	3304      	adds	r3, #4
1000b3c8:	50e5      	str	r5, [r4, r3]
	device_info_serv->serv_chars[4].user_desc_len = 0;
1000b3ca:	3304      	adds	r3, #4
1000b3cc:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[4].user_desc_max_len = 0;
1000b3ce:	3302      	adds	r3, #2
1000b3d0:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[4].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b3d2:	3306      	adds	r3, #6
1000b3d4:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[4].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b3d6:	2336      	movs	r3, #54	; 0x36
1000b3d8:	33ff      	adds	r3, #255	; 0xff
1000b3da:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[4].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b3dc:	3301      	adds	r3, #1
1000b3de:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[4].user_desc_handle = 0;             /*user desc handles*/
1000b3e0:	3302      	adds	r3, #2
1000b3e2:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[4].client_config_handle = 0;         /*client config handles*/
1000b3e4:	3302      	adds	r3, #2
1000b3e6:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[4].server_config_handle = 0;         /*server config handles*/
1000b3e8:	3302      	adds	r3, #2
1000b3ea:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[4].presentation_format = NULL;       /* presentation format */
1000b3ec:	3b0c      	subs	r3, #12
1000b3ee:	50e5      	str	r5, [r4, r3]
	
	//Characteristic Info for Software  Revision
	device_info_serv->serv_chars[5].char_val_handle = 0;          /* handle stored here */
1000b3f0:	3310      	adds	r3, #16
1000b3f2:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[5].uuid.type = AT_BLE_UUID_16;
1000b3f4:	3302      	adds	r3, #2
1000b3f6:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[5].uuid.uuid[0] = (uint8_t) DIS_CHAR_SOFTWARE_REVISION_UUID;          /* uuid : software revision */
1000b3f8:	2228      	movs	r2, #40	; 0x28
1000b3fa:	2344      	movs	r3, #68	; 0x44
1000b3fc:	33ff      	adds	r3, #255	; 0xff
1000b3fe:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[5].uuid.uuid[1] = (uint8_t) (DIS_CHAR_SOFTWARE_REVISION_UUID >> 8);          /* uuid : software revision */
1000b400:	3301      	adds	r3, #1
1000b402:	4642      	mov	r2, r8
1000b404:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[5].properties = AT_BLE_CHAR_READ; /* properties */
1000b406:	3310      	adds	r3, #16
1000b408:	465a      	mov	r2, fp
1000b40a:	52e2      	strh	r2, [r4, r3]
	
	memcpy(char_value.default_software_revision,DEFAULT_SOFTWARE_REVISION,DIS_CHAR_SOFTWARE_REVISION_INIT_LEN);
1000b40c:	2207      	movs	r2, #7
1000b40e:	4972      	ldr	r1, [pc, #456]	; (1000b5d8 <dis_init_service+0x3e0>)
1000b410:	4872      	ldr	r0, [pc, #456]	; (1000b5dc <dis_init_service+0x3e4>)
1000b412:	47c8      	blx	r9
	device_info_serv->serv_chars[5].init_value = char_value.default_software_revision;
1000b414:	23ac      	movs	r3, #172	; 0xac
1000b416:	005b      	lsls	r3, r3, #1
1000b418:	4a70      	ldr	r2, [pc, #448]	; (1000b5dc <dis_init_service+0x3e4>)
1000b41a:	50e2      	str	r2, [r4, r3]
	
	device_info_serv->serv_chars[5].value_init_len = DIS_CHAR_SOFTWARE_REVISION_INIT_LEN;
1000b41c:	3304      	adds	r3, #4
1000b41e:	2207      	movs	r2, #7
1000b420:	52e2      	strh	r2, [r4, r3]
	device_info_serv->serv_chars[5].value_max_len = DIS_CHAR_SOFTWARE_REVISION_MAX_LEN;
1000b422:	3302      	adds	r3, #2
1000b424:	2214      	movs	r2, #20
1000b426:	52e2      	strh	r2, [r4, r3]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[5].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b428:	3302      	adds	r3, #2
1000b42a:	465a      	mov	r2, fp
1000b42c:	54e2      	strb	r2, [r4, r3]
#else
	device_info_serv->serv_chars[5].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[5].user_desc = NULL;           /* user defined name */
1000b42e:	3304      	adds	r3, #4
1000b430:	50e5      	str	r5, [r4, r3]
	device_info_serv->serv_chars[5].user_desc_len = 0;
1000b432:	3304      	adds	r3, #4
1000b434:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[5].user_desc_max_len = 0;
1000b436:	3302      	adds	r3, #2
1000b438:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[5].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b43a:	3306      	adds	r3, #6
1000b43c:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[5].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b43e:	2372      	movs	r3, #114	; 0x72
1000b440:	33ff      	adds	r3, #255	; 0xff
1000b442:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[5].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b444:	3301      	adds	r3, #1
1000b446:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[5].user_desc_handle = 0;             /*user desc handles*/
1000b448:	3302      	adds	r3, #2
1000b44a:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[5].client_config_handle = 0;         /*client config handles*/
1000b44c:	3302      	adds	r3, #2
1000b44e:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[5].server_config_handle = 0;         /*server config handles*/
1000b450:	3302      	adds	r3, #2
1000b452:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[5].presentation_format = NULL;       /* presentation format */
1000b454:	3b0c      	subs	r3, #12
1000b456:	50e5      	str	r5, [r4, r3]
	
	//Characteristic Info for SystemID  Number
	device_info_serv->serv_chars[6].char_val_handle = 0;          /* handle stored here */
1000b458:	3310      	adds	r3, #16
1000b45a:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[6].uuid.type = AT_BLE_UUID_16;
1000b45c:	3302      	adds	r3, #2
1000b45e:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[6].uuid.uuid[0] = (uint8_t) DIS_CHAR_SYSTEM_ID_UUID;          /* UUID : Software Revision */
1000b460:	2223      	movs	r2, #35	; 0x23
1000b462:	2380      	movs	r3, #128	; 0x80
1000b464:	33ff      	adds	r3, #255	; 0xff
1000b466:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[6].uuid.uuid[1] = (uint8_t) (DIS_CHAR_SYSTEM_ID_UUID >> 8);          /* UUID : Software Revision */
1000b468:	3301      	adds	r3, #1
1000b46a:	4642      	mov	r2, r8
1000b46c:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[6].properties = AT_BLE_CHAR_READ; /* Properties */
1000b46e:	3310      	adds	r3, #16
1000b470:	465a      	mov	r2, fp
1000b472:	52e2      	strh	r2, [r4, r3]
	
	memcpy(char_value.default_system_id.manufacturer_id, SYSTEM_ID_MANUFACTURER_ID, SYSTEM_ID_MANUFACTURER_ID_LEN);
1000b474:	2205      	movs	r2, #5
1000b476:	495a      	ldr	r1, [pc, #360]	; (1000b5e0 <dis_init_service+0x3e8>)
1000b478:	485a      	ldr	r0, [pc, #360]	; (1000b5e4 <dis_init_service+0x3ec>)
1000b47a:	47c8      	blx	r9
	memcpy(char_value.default_system_id.org_unique_id, SYSTEM_ID_ORG_UNIQUE_ID, SYSTEM_ID_ORG_UNIQUE_ID_LEN);
1000b47c:	0038      	movs	r0, r7
1000b47e:	307d      	adds	r0, #125	; 0x7d
1000b480:	4957      	ldr	r1, [pc, #348]	; (1000b5e0 <dis_init_service+0x3e8>)
1000b482:	3108      	adds	r1, #8
1000b484:	2203      	movs	r2, #3
1000b486:	47c8      	blx	r9
	device_info_serv->serv_chars[6].init_value = (uint8_t *) &char_value.default_system_id;					/*Initial Value*/
1000b488:	23ca      	movs	r3, #202	; 0xca
1000b48a:	005b      	lsls	r3, r3, #1
1000b48c:	4a55      	ldr	r2, [pc, #340]	; (1000b5e4 <dis_init_service+0x3ec>)
1000b48e:	50e2      	str	r2, [r4, r3]
	
	device_info_serv->serv_chars[6].value_init_len = DIS_CHAR_SYSTEM_ID_INIT_LEN;
1000b490:	3b8d      	subs	r3, #141	; 0x8d
1000b492:	3bff      	subs	r3, #255	; 0xff
1000b494:	22cc      	movs	r2, #204	; 0xcc
1000b496:	0052      	lsls	r2, r2, #1
1000b498:	52a3      	strh	r3, [r4, r2]
	device_info_serv->serv_chars[6].value_max_len = DIS_CHAR_SYSTEM_ID_MAX_LEN;
1000b49a:	3202      	adds	r2, #2
1000b49c:	52a3      	strh	r3, [r4, r2]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[6].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b49e:	3395      	adds	r3, #149	; 0x95
1000b4a0:	33ff      	adds	r3, #255	; 0xff
1000b4a2:	465a      	mov	r2, fp
1000b4a4:	54e2      	strb	r2, [r4, r3]
#else
	device_info_serv->serv_chars[6].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[6].user_desc = NULL;           /* user defined name */
1000b4a6:	3304      	adds	r3, #4
1000b4a8:	50e5      	str	r5, [r4, r3]
	device_info_serv->serv_chars[6].user_desc_len = 0;
1000b4aa:	3304      	adds	r3, #4
1000b4ac:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[6].user_desc_max_len = 0;
1000b4ae:	3302      	adds	r3, #2
1000b4b0:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[6].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b4b2:	3306      	adds	r3, #6
1000b4b4:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[6].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b4b6:	23ae      	movs	r3, #174	; 0xae
1000b4b8:	33ff      	adds	r3, #255	; 0xff
1000b4ba:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[6].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b4bc:	3301      	adds	r3, #1
1000b4be:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[6].user_desc_handle = 0;             /*user desc handles*/
1000b4c0:	3302      	adds	r3, #2
1000b4c2:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[6].client_config_handle = 0;         /*client config handles*/
1000b4c4:	3302      	adds	r3, #2
1000b4c6:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[6].server_config_handle = 0;         /*server config handles*/
1000b4c8:	3302      	adds	r3, #2
1000b4ca:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[6].presentation_format = NULL;       /* presentation format */
1000b4cc:	3b0c      	subs	r3, #12
1000b4ce:	50e5      	str	r5, [r4, r3]
	
	//Characteristic Info for PnP ID 
	device_info_serv->serv_chars[7].char_val_handle = 0;          /* handle stored here */
1000b4d0:	3310      	adds	r3, #16
1000b4d2:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[7].uuid.type = AT_BLE_UUID_16;
1000b4d4:	3302      	adds	r3, #2
1000b4d6:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[7].uuid.uuid[0] = (uint8_t) DIS_CHAR_PNP_ID_UUID;          /* UUID : Software Revision */
1000b4d8:	23bc      	movs	r3, #188	; 0xbc
1000b4da:	33ff      	adds	r3, #255	; 0xff
1000b4dc:	2250      	movs	r2, #80	; 0x50
1000b4de:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[7].uuid.uuid[1] = (uint8_t) (DIS_CHAR_PNP_ID_UUID >> 8);          /* UUID : Software Revision */
1000b4e0:	3301      	adds	r3, #1
1000b4e2:	4642      	mov	r2, r8
1000b4e4:	54e2      	strb	r2, [r4, r3]
	device_info_serv->serv_chars[7].properties = AT_BLE_CHAR_READ; /* Properties */
1000b4e6:	3310      	adds	r3, #16
1000b4e8:	465a      	mov	r2, fp
1000b4ea:	52e2      	strh	r2, [r4, r3]
	
	char_value.default_pnp_id.vendor_id_source = PNP_ID_VENDOR_ID_SOURCE;					/*characteristic value initialization */
1000b4ec:	3bcc      	subs	r3, #204	; 0xcc
1000b4ee:	3bff      	subs	r3, #255	; 0xff
1000b4f0:	2280      	movs	r2, #128	; 0x80
1000b4f2:	54bb      	strb	r3, [r7, r2]
	char_value.default_pnp_id.vendor_id = PNP_ID_VENDOR_ID;
1000b4f4:	4a3c      	ldr	r2, [pc, #240]	; (1000b5e8 <dis_init_service+0x3f0>)
1000b4f6:	2182      	movs	r1, #130	; 0x82
1000b4f8:	527a      	strh	r2, [r7, r1]
	char_value.default_pnp_id.product_id= PNP_ID_PRODUCT_ID;
1000b4fa:	4a3c      	ldr	r2, [pc, #240]	; (1000b5ec <dis_init_service+0x3f4>)
1000b4fc:	3102      	adds	r1, #2
1000b4fe:	527a      	strh	r2, [r7, r1]
	char_value.default_pnp_id.product_version= PNP_ID_PRODUCT_VERSION;
1000b500:	2286      	movs	r2, #134	; 0x86
1000b502:	52bb      	strh	r3, [r7, r2]
	device_info_serv->serv_chars[7].init_value = (uint8_t *) &char_value.default_pnp_id;					/*Initial Value*/
1000b504:	0039      	movs	r1, r7
1000b506:	3180      	adds	r1, #128	; 0x80
1000b508:	324b      	adds	r2, #75	; 0x4b
1000b50a:	32ff      	adds	r2, #255	; 0xff
1000b50c:	50a1      	str	r1, [r4, r2]
	
	device_info_serv->serv_chars[7].value_init_len = DIS_CHAR_PNP_ID_INIT_LEN;
1000b50e:	3204      	adds	r2, #4
1000b510:	2107      	movs	r1, #7
1000b512:	52a1      	strh	r1, [r4, r2]
	device_info_serv->serv_chars[7].value_max_len = DIS_CHAR_PNP_ID_MAX_LEN;
1000b514:	3202      	adds	r2, #2
1000b516:	2107      	movs	r1, #7
1000b518:	52a1      	strh	r1, [r4, r2]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[7].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b51a:	3202      	adds	r2, #2
1000b51c:	4659      	mov	r1, fp
1000b51e:	54a1      	strb	r1, [r4, r2]
#else
	device_info_serv->serv_chars[7].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[7].user_desc = NULL;           /* user defined name */
1000b520:	3204      	adds	r2, #4
1000b522:	50a5      	str	r5, [r4, r2]
	device_info_serv->serv_chars[7].user_desc_len = 0;
1000b524:	3204      	adds	r2, #4
1000b526:	52a5      	strh	r5, [r4, r2]
	device_info_serv->serv_chars[7].user_desc_max_len = 0;
1000b528:	3202      	adds	r2, #2
1000b52a:	52a5      	strh	r5, [r4, r2]
	device_info_serv->serv_chars[7].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b52c:	3206      	adds	r2, #6
1000b52e:	54a6      	strb	r6, [r4, r2]
	device_info_serv->serv_chars[7].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b530:	22ea      	movs	r2, #234	; 0xea
1000b532:	32ff      	adds	r2, #255	; 0xff
1000b534:	54a6      	strb	r6, [r4, r2]
	device_info_serv->serv_chars[7].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b536:	3201      	adds	r2, #1
1000b538:	54a6      	strb	r6, [r4, r2]
	device_info_serv->serv_chars[7].user_desc_handle = 0;             /*user desc handles*/
1000b53a:	3202      	adds	r2, #2
1000b53c:	52a5      	strh	r5, [r4, r2]
	device_info_serv->serv_chars[7].client_config_handle = 0;         /*client config handles*/
1000b53e:	3202      	adds	r2, #2
1000b540:	52a5      	strh	r5, [r4, r2]
	device_info_serv->serv_chars[7].server_config_handle = 0;         /*server config handles*/
1000b542:	3202      	adds	r2, #2
1000b544:	52a5      	strh	r5, [r4, r2]
	device_info_serv->serv_chars[7].presentation_format = NULL;       /* presentation format */
1000b546:	3a0c      	subs	r2, #12
1000b548:	50a5      	str	r5, [r4, r2]
	
	//Characteristic Info for IEEE 11073-20601 Regulatory Certification Data List
	device_info_serv->serv_chars[8].char_val_handle = 0;          /* handle stored here */
1000b54a:	3210      	adds	r2, #16
1000b54c:	52a5      	strh	r5, [r4, r2]
	device_info_serv->serv_chars[8].uuid.type = AT_BLE_UUID_16;
1000b54e:	3202      	adds	r2, #2
1000b550:	54a6      	strb	r6, [r4, r2]
	device_info_serv->serv_chars[8].uuid.uuid[0] = (uint8_t) DIS_CHAR_IEEE_REG_CERT_DATA_LIST_UUID;          /* UUID : Software Revision */
1000b552:	22f8      	movs	r2, #248	; 0xf8
1000b554:	32ff      	adds	r2, #255	; 0xff
1000b556:	4641      	mov	r1, r8
1000b558:	54a1      	strb	r1, [r4, r2]
	device_info_serv->serv_chars[8].uuid.uuid[1] = (uint8_t) (DIS_CHAR_IEEE_REG_CERT_DATA_LIST_UUID >> 8);          /* UUID : Software Revision */
1000b55a:	3201      	adds	r2, #1
1000b55c:	54a1      	strb	r1, [r4, r2]
	device_info_serv->serv_chars[8].properties = AT_BLE_CHAR_READ; /* Properties */
1000b55e:	3210      	adds	r2, #16
1000b560:	4659      	mov	r1, fp
1000b562:	52a1      	strh	r1, [r4, r2]
	device_info_serv->serv_chars[8].init_value = char_value.ieee_reg_cert_data_list;					/*Initial Value*/
1000b564:	3788      	adds	r7, #136	; 0x88
1000b566:	3204      	adds	r2, #4
1000b568:	50a7      	str	r7, [r4, r2]
	device_info_serv->serv_chars[8].value_init_len = DIS_CHAR_IEEE_REG_CERT_DATA_LIST_INIT_LEN;
1000b56a:	3204      	adds	r2, #4
1000b56c:	52a3      	strh	r3, [r4, r2]
	device_info_serv->serv_chars[8].value_max_len = DIS_CHAR_IEEE_REG_CERT_DATA_LIST_MAX_LEN;
1000b56e:	4b20      	ldr	r3, [pc, #128]	; (1000b5f0 <dis_init_service+0x3f8>)
1000b570:	220a      	movs	r2, #10
1000b572:	52e2      	strh	r2, [r4, r3]
#if BLE_PAIR_ENABLE
	device_info_serv->serv_chars[8].value_permissions = AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR;   /* permissions */
1000b574:	3302      	adds	r3, #2
1000b576:	54e1      	strb	r1, [r4, r3]
#else
	device_info_serv->serv_chars[8].value_permissions = AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR;   /* permissions */
#endif
	device_info_serv->serv_chars[8].user_desc = NULL;           /* user defined name */
1000b578:	3304      	adds	r3, #4
1000b57a:	50e5      	str	r5, [r4, r3]
	device_info_serv->serv_chars[8].user_desc_len = 0;
1000b57c:	3304      	adds	r3, #4
1000b57e:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[8].user_desc_max_len = 0;
1000b580:	4b1c      	ldr	r3, [pc, #112]	; (1000b5f4 <dis_init_service+0x3fc>)
1000b582:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[8].user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
1000b584:	3306      	adds	r3, #6
1000b586:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[8].client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
1000b588:	4b1b      	ldr	r3, [pc, #108]	; (1000b5f8 <dis_init_service+0x400>)
1000b58a:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[8].server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
1000b58c:	4b1b      	ldr	r3, [pc, #108]	; (1000b5fc <dis_init_service+0x404>)
1000b58e:	54e6      	strb	r6, [r4, r3]
	device_info_serv->serv_chars[8].user_desc_handle = 0;             /*user desc handles*/
1000b590:	3302      	adds	r3, #2
1000b592:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[8].client_config_handle = 0;         /*client config handles*/
1000b594:	4b1a      	ldr	r3, [pc, #104]	; (1000b600 <dis_init_service+0x408>)
1000b596:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[8].server_config_handle = 0;         /*server config handles*/
1000b598:	3302      	adds	r3, #2
1000b59a:	52e5      	strh	r5, [r4, r3]
	device_info_serv->serv_chars[8].presentation_format = NULL;       /* presentation format */
1000b59c:	3b0c      	subs	r3, #12
1000b59e:	50e5      	str	r5, [r4, r3]
}
1000b5a0:	bc3c      	pop	{r2, r3, r4, r5}
1000b5a2:	4690      	mov	r8, r2
1000b5a4:	4699      	mov	r9, r3
1000b5a6:	46a2      	mov	sl, r4
1000b5a8:	46ab      	mov	fp, r5
1000b5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b5ac:	10016950 	.word	0x10016950
1000b5b0:	10013ab0 	.word	0x10013ab0
1000b5b4:	10011c63 	.word	0x10011c63
1000b5b8:	10013ab8 	.word	0x10013ab8
1000b5bc:	10016964 	.word	0x10016964
1000b5c0:	10013ac4 	.word	0x10013ac4
1000b5c4:	10016978 	.word	0x10016978
1000b5c8:	10013ad4 	.word	0x10013ad4
1000b5cc:	1001698c 	.word	0x1001698c
1000b5d0:	10013adc 	.word	0x10013adc
1000b5d4:	100169a0 	.word	0x100169a0
1000b5d8:	10013ae4 	.word	0x10013ae4
1000b5dc:	100169b4 	.word	0x100169b4
1000b5e0:	10013aa4 	.word	0x10013aa4
1000b5e4:	100169c8 	.word	0x100169c8
1000b5e8:	00002222 	.word	0x00002222
1000b5ec:	00003333 	.word	0x00003333
1000b5f0:	00000212 	.word	0x00000212
1000b5f4:	0000021e 	.word	0x0000021e
1000b5f8:	00000225 	.word	0x00000225
1000b5fc:	00000226 	.word	0x00000226
1000b600:	0000022a 	.word	0x0000022a

1000b604 <dis_primary_service_define>:

/**@brief Register a dis service instance inside stack. */
at_ble_status_t dis_primary_service_define(dis_gatt_service_handler_t *dis_primary_service)
{
1000b604:	b510      	push	{r4, lr}
1000b606:	b082      	sub	sp, #8
	
	return(at_ble_primary_service_define(&dis_primary_service->serv_uuid,
1000b608:	0001      	movs	r1, r0
1000b60a:	3112      	adds	r1, #18
1000b60c:	2309      	movs	r3, #9
1000b60e:	9301      	str	r3, [sp, #4]
	&dis_primary_service->serv_handle,
	NULL, 0,
	dis_primary_service->serv_chars,DIS_TOTAL_CHARATERISTIC_NUM));
1000b610:	0003      	movs	r3, r0
1000b612:	3314      	adds	r3, #20

/**@brief Register a dis service instance inside stack. */
at_ble_status_t dis_primary_service_define(dis_gatt_service_handler_t *dis_primary_service)
{
	
	return(at_ble_primary_service_define(&dis_primary_service->serv_uuid,
1000b614:	9300      	str	r3, [sp, #0]
1000b616:	2300      	movs	r3, #0
1000b618:	2200      	movs	r2, #0
1000b61a:	4c02      	ldr	r4, [pc, #8]	; (1000b624 <dis_primary_service_define+0x20>)
1000b61c:	47a0      	blx	r4
	&dis_primary_service->serv_handle,
	NULL, 0,
	dis_primary_service->serv_chars,DIS_TOTAL_CHARATERISTIC_NUM));
}
1000b61e:	b002      	add	sp, #8
1000b620:	bd10      	pop	{r4, pc}
1000b622:	46c0      	nop			; (mov r8, r8)
1000b624:	1000e245 	.word	0x1000e245

1000b628 <hr_init_service>:
 * @param[in] Heart rate service instance
 *
 * @return none
 */
void hr_init_service(hr_gatt_service_handler_t *heart_rate_serv)
{
1000b628:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b62a:	4657      	mov	r7, sl
1000b62c:	464e      	mov	r6, r9
1000b62e:	4645      	mov	r5, r8
1000b630:	b4e0      	push	{r5, r6, r7}
	hr_measurement_value = 0;
1000b632:	4f45      	ldr	r7, [pc, #276]	; (1000b748 <hr_init_service+0x120>)
1000b634:	2300      	movs	r3, #0
1000b636:	2200      	movs	r2, #0
1000b638:	803b      	strh	r3, [r7, #0]
	body_sensor_location_value = CHEST;
1000b63a:	4944      	ldr	r1, [pc, #272]	; (1000b74c <hr_init_service+0x124>)
1000b63c:	4689      	mov	r9, r1
1000b63e:	2101      	movs	r1, #1
1000b640:	464c      	mov	r4, r9
1000b642:	7021      	strb	r1, [r4, #0]
	hr_control_point_value = 0;
1000b644:	4c42      	ldr	r4, [pc, #264]	; (1000b750 <hr_init_service+0x128>)
1000b646:	46a2      	mov	sl, r4
1000b648:	7022      	strb	r2, [r4, #0]

	heart_rate_serv->serv_handle = 0;
1000b64a:	8243      	strh	r3, [r0, #18]
	heart_rate_serv->serv_uuid.type = AT_BLE_UUID_16;
1000b64c:	7002      	strb	r2, [r0, #0]
	heart_rate_serv->serv_uuid.uuid[0] = (uint8_t)HEART_RATE_SERVICE_UUID;
1000b64e:	240d      	movs	r4, #13
1000b650:	7044      	strb	r4, [r0, #1]
	heart_rate_serv->serv_uuid.uuid[1]
		= (uint8_t)(HEART_RATE_SERVICE_UUID >> 8);
1000b652:	340b      	adds	r4, #11
1000b654:	7084      	strb	r4, [r0, #2]

	/*Characteristic Info for Heart Rate Measurement*/

	/* handle stored here */
	heart_rate_serv->serv_chars[0].char_val_handle = 0;
1000b656:	8283      	strh	r3, [r0, #20]
	heart_rate_serv->serv_chars[0].uuid.type = AT_BLE_UUID_16;
1000b658:	7582      	strb	r2, [r0, #22]

	/* UUID : Heart Rate Measurement Characteristic */
	heart_rate_serv->serv_chars[0].uuid.uuid[0]
		= (uint8_t)HEART_RATE_MEASUREMENT_CHAR_UUID;
1000b65a:	341f      	adds	r4, #31
1000b65c:	75c4      	strb	r4, [r0, #23]
	heart_rate_serv->serv_chars[0].uuid.uuid[1]
		= (uint8_t)(HEART_RATE_MEASUREMENT_CHAR_UUID >> 8);
1000b65e:	3c0d      	subs	r4, #13
1000b660:	7604      	strb	r4, [r0, #24]

	/* Properties */
	heart_rate_serv->serv_chars[0].properties = AT_BLE_CHAR_NOTIFY;
1000b662:	2510      	movs	r5, #16
1000b664:	8505      	strh	r5, [r0, #40]	; 0x28

	heart_rate_serv->serv_chars[0].init_value
		= (uint8_t *)&hr_measurement_value;
1000b666:	62c7      	str	r7, [r0, #44]	; 0x2c
	heart_rate_serv->serv_chars[0].value_init_len = sizeof(uint16_t);
1000b668:	2702      	movs	r7, #2
1000b66a:	8607      	strh	r7, [r0, #48]	; 0x30

	heart_rate_serv->serv_chars[0].value_max_len = HR_MM_FLAGS_SIZE +
1000b66c:	2509      	movs	r5, #9
1000b66e:	8645      	strh	r5, [r0, #50]	; 0x32
			HR_MM_VAL_SIZE + HR_MM_EX_SIZE + HR_MM_RR_SIZE;
	
	/* Permissions */
	heart_rate_serv->serv_chars[0].value_permissions
							= AT_BLE_ATTR_NO_PERMISSIONS;
1000b670:	2534      	movs	r5, #52	; 0x34
1000b672:	5542      	strb	r2, [r0, r5]
	
	/* user defined name */
	heart_rate_serv->serv_chars[0].user_desc = NULL;
1000b674:	6383      	str	r3, [r0, #56]	; 0x38
	heart_rate_serv->serv_chars[0].user_desc_len = 0;
1000b676:	8783      	strh	r3, [r0, #60]	; 0x3c
	heart_rate_serv->serv_chars[0].user_desc_max_len = 0;
1000b678:	87c3      	strh	r3, [r0, #62]	; 0x3e
	/*user description permissions*/
	heart_rate_serv->serv_chars[0].user_desc_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b67a:	3510      	adds	r5, #16
1000b67c:	5542      	strb	r2, [r0, r5]
	
	/* client config permissions */
	#if BLE_PAIR_ENABLE
	heart_rate_serv->serv_chars[0].client_config_permissions
							= (AT_BLE_ATTR_WRITABLE_REQ_AUTHN_NO_AUTHR);
1000b67e:	3d24      	subs	r5, #36	; 0x24
1000b680:	46a8      	mov	r8, r5
1000b682:	3525      	adds	r5, #37	; 0x25
1000b684:	4646      	mov	r6, r8
1000b686:	5546      	strb	r6, [r0, r5]
	#endif 
	
	
	/*server config permissions*/
	heart_rate_serv->serv_chars[0].server_config_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b688:	3501      	adds	r5, #1
1000b68a:	5542      	strb	r2, [r0, r5]
	/*user desc handles*/
	heart_rate_serv->serv_chars[0].user_desc_handle = 0;
1000b68c:	3502      	adds	r5, #2
1000b68e:	5343      	strh	r3, [r0, r5]
	/*client config handles*/
	heart_rate_serv->serv_chars[0].client_config_handle = 0;
1000b690:	3502      	adds	r5, #2
1000b692:	5343      	strh	r3, [r0, r5]
	/*server config handles*/
	heart_rate_serv->serv_chars[0].server_config_handle = 0;
1000b694:	3502      	adds	r5, #2
1000b696:	5343      	strh	r3, [r0, r5]
	/* presentation format */
	heart_rate_serv->serv_chars[0].presentation_format = NULL;
1000b698:	6403      	str	r3, [r0, #64]	; 0x40

	/* Characteristic Info for Body Sensor Location */
	heart_rate_serv->serv_chars[1].char_val_handle = 0;          /* handle
1000b69a:	3504      	adds	r5, #4
1000b69c:	5343      	strh	r3, [r0, r5]
	                                                              *stored
	                                                              *here */
	heart_rate_serv->serv_chars[1].uuid.type = AT_BLE_UUID_16;
1000b69e:	3502      	adds	r5, #2
1000b6a0:	5542      	strb	r2, [r0, r5]
	/* UUID : Body Sensor Location*/
	heart_rate_serv->serv_chars[1].uuid.uuid[0]
		= (uint8_t)BODY_SENSOR_LOCATION_CHAR_UUID;
1000b6a2:	3d1a      	subs	r5, #26
1000b6a4:	46a8      	mov	r8, r5
1000b6a6:	351b      	adds	r5, #27
1000b6a8:	4646      	mov	r6, r8
1000b6aa:	5546      	strb	r6, [r0, r5]
	/* UUID : Body Sensor location*/
	heart_rate_serv->serv_chars[1].uuid.uuid[1]
		= (uint8_t)(BODY_SENSOR_LOCATION_CHAR_UUID >> 8);
1000b6ac:	3501      	adds	r5, #1
1000b6ae:	5544      	strb	r4, [r0, r5]
	/* Properties */
	heart_rate_serv->serv_chars[1].properties = AT_BLE_CHAR_READ;
1000b6b0:	3510      	adds	r5, #16
1000b6b2:	5347      	strh	r7, [r0, r5]

	heart_rate_serv->serv_chars[1].init_value = &body_sensor_location_value;
1000b6b4:	464d      	mov	r5, r9
1000b6b6:	6685      	str	r5, [r0, #104]	; 0x68

	heart_rate_serv->serv_chars[1].value_init_len = sizeof(uint8_t);
1000b6b8:	266c      	movs	r6, #108	; 0x6c
1000b6ba:	5381      	strh	r1, [r0, r6]
	heart_rate_serv->serv_chars[1].value_max_len = sizeof(uint8_t);
1000b6bc:	3602      	adds	r6, #2
1000b6be:	5381      	strh	r1, [r0, r6]

	/* permissions */
	
	#if BLE_PAIR_ENABLE
		heart_rate_serv->serv_chars[1].value_permissions
							= (AT_BLE_ATTR_READABLE_REQ_AUTHN_NO_AUTHR);
1000b6c0:	3602      	adds	r6, #2
1000b6c2:	5587      	strb	r7, [r0, r6]
		heart_rate_serv->serv_chars[1].value_permissions
							= (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR);
	#endif
	
	/* user defined name */
	heart_rate_serv->serv_chars[1].user_desc = NULL;
1000b6c4:	6743      	str	r3, [r0, #116]	; 0x74
	heart_rate_serv->serv_chars[1].user_desc_len = 0;
1000b6c6:	3608      	adds	r6, #8
1000b6c8:	5383      	strh	r3, [r0, r6]
	heart_rate_serv->serv_chars[1].user_desc_max_len = 0;
1000b6ca:	3602      	adds	r6, #2
1000b6cc:	5383      	strh	r3, [r0, r6]
	/*user description permissions*/
	heart_rate_serv->serv_chars[1].user_desc_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b6ce:	3606      	adds	r6, #6
1000b6d0:	5582      	strb	r2, [r0, r6]
	/*client config permissions*/
	heart_rate_serv->serv_chars[1].client_config_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b6d2:	3601      	adds	r6, #1
1000b6d4:	5582      	strb	r2, [r0, r6]
	/*server config permissions*/
	heart_rate_serv->serv_chars[1].server_config_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b6d6:	3601      	adds	r6, #1
1000b6d8:	5582      	strb	r2, [r0, r6]
	/*user desc handles*/
	heart_rate_serv->serv_chars[1].user_desc_handle = 0;
1000b6da:	3602      	adds	r6, #2
1000b6dc:	5383      	strh	r3, [r0, r6]
	/*client config handles*/
	heart_rate_serv->serv_chars[1].client_config_handle = 0;
1000b6de:	3602      	adds	r6, #2
1000b6e0:	5383      	strh	r3, [r0, r6]
	/*server config handles*/
	heart_rate_serv->serv_chars[1].server_config_handle = 0;
1000b6e2:	3602      	adds	r6, #2
1000b6e4:	5383      	strh	r3, [r0, r6]
	/* presentation format */
	heart_rate_serv->serv_chars[1].presentation_format = NULL;
1000b6e6:	67c3      	str	r3, [r0, #124]	; 0x7c

	/* Characteristic Info for Heart Rate Control Point */
	/* handle stored here */
	heart_rate_serv->serv_chars[2].char_val_handle = 0;
1000b6e8:	3604      	adds	r6, #4
1000b6ea:	5383      	strh	r3, [r0, r6]
	heart_rate_serv->serv_chars[2].uuid.type = AT_BLE_UUID_16;
1000b6ec:	3602      	adds	r6, #2
1000b6ee:	5582      	strb	r2, [r0, r6]
	/* UUID : Heart Rate Control Point*/
	heart_rate_serv->serv_chars[2].uuid.uuid[0]
		= (uint8_t)HEART_RATE_CONTROL_POINT_CHAR_UUID;
1000b6f0:	2739      	movs	r7, #57	; 0x39
1000b6f2:	3601      	adds	r6, #1
1000b6f4:	5587      	strb	r7, [r0, r6]
	/* UUID : Heart Rate Control Point*/
	heart_rate_serv->serv_chars[2].uuid.uuid[1]
		= (uint8_t)(HEART_RATE_CONTROL_POINT_CHAR_UUID >> 8);
1000b6f6:	3601      	adds	r6, #1
1000b6f8:	5584      	strb	r4, [r0, r6]
	/* Properties */
	heart_rate_serv->serv_chars[2].properties = AT_BLE_CHAR_WRITE;
1000b6fa:	3e88      	subs	r6, #136	; 0x88
1000b6fc:	3476      	adds	r4, #118	; 0x76
1000b6fe:	5306      	strh	r6, [r0, r4]

	/* Initial Value */
	heart_rate_serv->serv_chars[2].init_value = &hr_control_point_value;
1000b700:	3404      	adds	r4, #4
1000b702:	4655      	mov	r5, sl
1000b704:	5105      	str	r5, [r0, r4]

	heart_rate_serv->serv_chars[2].value_init_len = sizeof(uint8_t);
1000b706:	3404      	adds	r4, #4
1000b708:	5301      	strh	r1, [r0, r4]
	heart_rate_serv->serv_chars[2].value_max_len = sizeof(uint8_t);
1000b70a:	3402      	adds	r4, #2
1000b70c:	5301      	strh	r1, [r0, r4]
	
	/* permissions */
	
	#if BLE_PAIR_ENABLE
		heart_rate_serv->serv_chars[2].value_permissions
							= (AT_BLE_ATTR_WRITABLE_REQ_AUTHN_REQ_AUTHR);
1000b70e:	3c6a      	subs	r4, #106	; 0x6a
1000b710:	31ab      	adds	r1, #171	; 0xab
1000b712:	5444      	strb	r4, [r0, r1]
							= (AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);
	
	#endif
	
	/* user defined name */
	heart_rate_serv->serv_chars[2].user_desc = NULL;
1000b714:	3104      	adds	r1, #4
1000b716:	5043      	str	r3, [r0, r1]
	heart_rate_serv->serv_chars[2].user_desc_len = 0;
1000b718:	3104      	adds	r1, #4
1000b71a:	5243      	strh	r3, [r0, r1]
	heart_rate_serv->serv_chars[2].user_desc_max_len = 0;
1000b71c:	3102      	adds	r1, #2
1000b71e:	5243      	strh	r3, [r0, r1]
	/*user description permissions*/
	heart_rate_serv->serv_chars[2].user_desc_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b720:	3106      	adds	r1, #6
1000b722:	5442      	strb	r2, [r0, r1]
	/*client config permissions*/
	heart_rate_serv->serv_chars[2].client_config_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b724:	3101      	adds	r1, #1
1000b726:	5442      	strb	r2, [r0, r1]
	/*server config permissions*/
	heart_rate_serv->serv_chars[2].server_config_permissions
		= AT_BLE_ATTR_NO_PERMISSIONS;
1000b728:	3101      	adds	r1, #1
1000b72a:	5442      	strb	r2, [r0, r1]
	/*user desc handles*/
	heart_rate_serv->serv_chars[2].user_desc_handle = 0;
1000b72c:	22c0      	movs	r2, #192	; 0xc0
1000b72e:	5283      	strh	r3, [r0, r2]
	/*client config handles*/
	heart_rate_serv->serv_chars[2].client_config_handle = 0;
1000b730:	3202      	adds	r2, #2
1000b732:	5283      	strh	r3, [r0, r2]
	/*server config handles*/
	heart_rate_serv->serv_chars[2].server_config_handle = 0;
1000b734:	3202      	adds	r2, #2
1000b736:	5283      	strh	r3, [r0, r2]
	/* presentation format */
	heart_rate_serv->serv_chars[2].presentation_format = NULL;
1000b738:	3a0c      	subs	r2, #12
1000b73a:	5083      	str	r3, [r0, r2]
}
1000b73c:	bc1c      	pop	{r2, r3, r4}
1000b73e:	4690      	mov	r8, r2
1000b740:	4699      	mov	r9, r3
1000b742:	46a2      	mov	sl, r4
1000b744:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b746:	46c0      	nop			; (mov r8, r8)
1000b748:	10015b52 	.word	0x10015b52
1000b74c:	100141a9 	.word	0x100141a9
1000b750:	10015b50 	.word	0x10015b50

1000b754 <hr_primary_service_define>:
 * @return @ref AT_BLE_SUCCESS operation completed successfully
 * @return @ref AT_BLE_FAILURE Generic error.
 */
at_ble_status_t hr_primary_service_define(
		hr_gatt_service_handler_t *hr_primary_service)
{
1000b754:	b510      	push	{r4, lr}
1000b756:	b082      	sub	sp, #8
	return(at_ble_primary_service_define(&hr_primary_service->serv_uuid,
1000b758:	0001      	movs	r1, r0
1000b75a:	3112      	adds	r1, #18
1000b75c:	2303      	movs	r3, #3
1000b75e:	9301      	str	r3, [sp, #4]
	       &hr_primary_service->serv_handle,
	       NULL, 0,
	       hr_primary_service->serv_chars, HR_TOTAL_CHARATERISTIC_NUM));
1000b760:	0003      	movs	r3, r0
1000b762:	3314      	adds	r3, #20
 * @return @ref AT_BLE_FAILURE Generic error.
 */
at_ble_status_t hr_primary_service_define(
		hr_gatt_service_handler_t *hr_primary_service)
{
	return(at_ble_primary_service_define(&hr_primary_service->serv_uuid,
1000b764:	9300      	str	r3, [sp, #0]
1000b766:	2300      	movs	r3, #0
1000b768:	2200      	movs	r2, #0
1000b76a:	4c02      	ldr	r4, [pc, #8]	; (1000b774 <hr_primary_service_define+0x20>)
1000b76c:	47a0      	blx	r4
	       &hr_primary_service->serv_handle,
	       NULL, 0,
	       hr_primary_service->serv_chars, HR_TOTAL_CHARATERISTIC_NUM));
}
1000b76e:	b002      	add	sp, #8
1000b770:	bd10      	pop	{r4, pc}
1000b772:	46c0      	nop			; (mov r8, r8)
1000b774:	1000e245 	.word	0x1000e245

1000b778 <hr_write_value_handler>:
 * @return number representing the changed characteristic
 */
uint8_t hr_write_value_handler(hr_gatt_service_handler_t *hr_primary_service,
		at_ble_characteristic_changed_t *params)
{
	if (params->char_handle ==
1000b778:	884b      	ldrh	r3, [r1, #2]
			hr_primary_service->serv_chars[0].client_config_handle)
1000b77a:	224a      	movs	r2, #74	; 0x4a
 * @return number representing the changed characteristic
 */
uint8_t hr_write_value_handler(hr_gatt_service_handler_t *hr_primary_service,
		at_ble_characteristic_changed_t *params)
{
	if (params->char_handle ==
1000b77c:	5a82      	ldrh	r2, [r0, r2]
1000b77e:	429a      	cmp	r2, r3
1000b780:	d107      	bne.n	1000b792 <hr_write_value_handler+0x1a>
			hr_primary_service->serv_chars[0].client_config_handle)
	{
		if (params->char_new_value[0] == true) {
1000b782:	7a08      	ldrb	r0, [r1, #8]
1000b784:	2801      	cmp	r0, #1
1000b786:	d00d      	beq.n	1000b7a4 <hr_write_value_handler+0x2c>
			return HR_NOTIFICATION_ENABLE;
		} else if (params->char_new_value[0] == false) {
1000b788:	1e43      	subs	r3, r0, #1
1000b78a:	4198      	sbcs	r0, r3
1000b78c:	4240      	negs	r0, r0
1000b78e:	b2c0      	uxtb	r0, r0
1000b790:	e008      	b.n	1000b7a4 <hr_write_value_handler+0x2c>
			return HR_NOTIFICATION_DISABLE;
		}
	} else if (params->char_handle ==
			hr_primary_service->serv_chars[2].char_val_handle) {
1000b792:	228c      	movs	r2, #140	; 0x8c
		if (params->char_new_value[0] == true) {
			return HR_NOTIFICATION_ENABLE;
		} else if (params->char_new_value[0] == false) {
			return HR_NOTIFICATION_DISABLE;
		}
	} else if (params->char_handle ==
1000b794:	5a82      	ldrh	r2, [r0, r2]
		if (params->char_new_value[0] == true) {
			return HR_CONTROL_POINT_RESET;
		}
	}

	return 0xff;
1000b796:	20ff      	movs	r0, #255	; 0xff
		if (params->char_new_value[0] == true) {
			return HR_NOTIFICATION_ENABLE;
		} else if (params->char_new_value[0] == false) {
			return HR_NOTIFICATION_DISABLE;
		}
	} else if (params->char_handle ==
1000b798:	429a      	cmp	r2, r3
1000b79a:	d103      	bne.n	1000b7a4 <hr_write_value_handler+0x2c>
			hr_primary_service->serv_chars[2].char_val_handle) {
		if (params->char_new_value[0] == true) {
1000b79c:	7a0b      	ldrb	r3, [r1, #8]
1000b79e:	2b01      	cmp	r3, #1
1000b7a0:	d100      	bne.n	1000b7a4 <hr_write_value_handler+0x2c>
			return HR_CONTROL_POINT_RESET;
1000b7a2:	38fd      	subs	r0, #253	; 0xfd
		}
	}

	return 0xff;
}
1000b7a4:	4770      	bx	lr
1000b7a6:	46c0      	nop			; (mov r8, r8)

1000b7a8 <dualtimer_callback2>:
extern struct uart_module uart_instance;

void dualtimer_callback2(void)
{
	//puts("Timer2 trigger\r\n");
}
1000b7a8:	4770      	bx	lr
1000b7aa:	46c0      	nop			; (mov r8, r8)

1000b7ac <hw_timer_init>:

void hw_timer_init(void)
{
1000b7ac:	b500      	push	{lr}
1000b7ae:	b089      	sub	sp, #36	; 0x24
	struct dualtimer_config config_dualtimer;
	dualtimer_get_config_defaults(&config_dualtimer);
1000b7b0:	a801      	add	r0, sp, #4
1000b7b2:	4b05      	ldr	r3, [pc, #20]	; (1000b7c8 <hw_timer_init+0x1c>)
1000b7b4:	4798      	blx	r3

	config_dualtimer.timer1.load_value = CONF_DUALTIMER_TIMER1_LOAD;
1000b7b6:	4b05      	ldr	r3, [pc, #20]	; (1000b7cc <hw_timer_init+0x20>)
1000b7b8:	9303      	str	r3, [sp, #12]
	config_dualtimer.timer2.load_value = CONF_DUALTIMER_TIMER2_LOAD;
1000b7ba:	4b05      	ldr	r3, [pc, #20]	; (1000b7d0 <hw_timer_init+0x24>)
1000b7bc:	9306      	str	r3, [sp, #24]

	dualtimer_init(&config_dualtimer);
1000b7be:	a801      	add	r0, sp, #4
1000b7c0:	4b04      	ldr	r3, [pc, #16]	; (1000b7d4 <hw_timer_init+0x28>)
1000b7c2:	4798      	blx	r3
}
1000b7c4:	b009      	add	sp, #36	; 0x24
1000b7c6:	bd00      	pop	{pc}
1000b7c8:	1000854d 	.word	0x1000854d
1000b7cc:	018cba80 	.word	0x018cba80
1000b7d0:	03197500 	.word	0x03197500
1000b7d4:	100085e1 	.word	0x100085e1

1000b7d8 <hw_timer_register_callback>:

void hw_timer_register_callback(hw_timer_callback_t timer_callback_handler)
{
1000b7d8:	b510      	push	{r4, lr}
1000b7da:	0001      	movs	r1, r0
	dualtimer_register_callback(DUALTIMER_TIMER1, timer_callback_handler);
1000b7dc:	2000      	movs	r0, #0
1000b7de:	4c07      	ldr	r4, [pc, #28]	; (1000b7fc <hw_timer_register_callback+0x24>)
1000b7e0:	47a0      	blx	r4
	dualtimer_register_callback(DUALTIMER_TIMER2, dualtimer_callback2);
1000b7e2:	4907      	ldr	r1, [pc, #28]	; (1000b800 <hw_timer_register_callback+0x28>)
1000b7e4:	2001      	movs	r0, #1
1000b7e6:	47a0      	blx	r4

	dualtimer_disable(DUALTIMER_TIMER1);
1000b7e8:	2000      	movs	r0, #0
1000b7ea:	4c06      	ldr	r4, [pc, #24]	; (1000b804 <hw_timer_register_callback+0x2c>)
1000b7ec:	47a0      	blx	r4
	dualtimer_disable(DUALTIMER_TIMER2);
1000b7ee:	2001      	movs	r0, #1
1000b7f0:	47a0      	blx	r4

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b7f2:	2280      	movs	r2, #128	; 0x80
1000b7f4:	01d2      	lsls	r2, r2, #7
1000b7f6:	4b04      	ldr	r3, [pc, #16]	; (1000b808 <hw_timer_register_callback+0x30>)
1000b7f8:	601a      	str	r2, [r3, #0]

	NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000b7fa:	bd10      	pop	{r4, pc}
1000b7fc:	100086e5 	.word	0x100086e5
1000b800:	1000b7a9 	.word	0x1000b7a9
1000b804:	100085bd 	.word	0x100085bd
1000b808:	e000e100 	.word	0xe000e100

1000b80c <hw_timer_start>:

void hw_timer_start(uint32_t delay)
{
1000b80c:	b510      	push	{r4, lr}
	if(delay <= 0) {
1000b80e:	2800      	cmp	r0, #0
1000b810:	d100      	bne.n	1000b814 <hw_timer_start+0x8>
		delay = 1;
1000b812:	3001      	adds	r0, #1
	}

	dualtimer_set_counter(DUALTIMER_TIMER1,DUALTIMER_SET_CURRUNT_REG,CONF_DUALTIMER_TIMER1_LOAD*delay);
1000b814:	4b05      	ldr	r3, [pc, #20]	; (1000b82c <hw_timer_start+0x20>)
1000b816:	4343      	muls	r3, r0
1000b818:	001a      	movs	r2, r3
1000b81a:	2100      	movs	r1, #0
1000b81c:	2000      	movs	r0, #0
1000b81e:	4b04      	ldr	r3, [pc, #16]	; (1000b830 <hw_timer_start+0x24>)
1000b820:	4798      	blx	r3
	dualtimer_enable(DUALTIMER_TIMER1);
1000b822:	2000      	movs	r0, #0
1000b824:	4b03      	ldr	r3, [pc, #12]	; (1000b834 <hw_timer_start+0x28>)
1000b826:	4798      	blx	r3
}
1000b828:	bd10      	pop	{r4, pc}
1000b82a:	46c0      	nop			; (mov r8, r8)
1000b82c:	018cba80 	.word	0x018cba80
1000b830:	10008571 	.word	0x10008571
1000b834:	10008599 	.word	0x10008599

1000b838 <hw_timer_stop>:

void hw_timer_stop(void)
{
1000b838:	b510      	push	{r4, lr}
	dualtimer_disable(DUALTIMER_TIMER1);
1000b83a:	2000      	movs	r0, #0
1000b83c:	4b01      	ldr	r3, [pc, #4]	; (1000b844 <hw_timer_stop+0xc>)
1000b83e:	4798      	blx	r3
}
1000b840:	bd10      	pop	{r4, pc}
1000b842:	46c0      	nop			; (mov r8, r8)
1000b844:	100085bd 	.word	0x100085bd

1000b848 <button_callback>:
#include "button.h"

button_callback_t button_cb_func = NULL;

static void button_callback(void)
{
1000b848:	b510      	push	{r4, lr}
	gpio_disable_callback(BUTTON_0_PIN);
1000b84a:	2017      	movs	r0, #23
1000b84c:	4b05      	ldr	r3, [pc, #20]	; (1000b864 <button_callback+0x1c>)
1000b84e:	4798      	blx	r3

	if(button_cb_func)
1000b850:	4b05      	ldr	r3, [pc, #20]	; (1000b868 <button_callback+0x20>)
1000b852:	681b      	ldr	r3, [r3, #0]
1000b854:	2b00      	cmp	r3, #0
1000b856:	d000      	beq.n	1000b85a <button_callback+0x12>
	{
		button_cb_func();
1000b858:	4798      	blx	r3
	}

	gpio_enable_callback(BUTTON_0_PIN);
1000b85a:	2017      	movs	r0, #23
1000b85c:	4b03      	ldr	r3, [pc, #12]	; (1000b86c <button_callback+0x24>)
1000b85e:	4798      	blx	r3
}
1000b860:	bd10      	pop	{r4, pc}
1000b862:	46c0      	nop			; (mov r8, r8)
1000b864:	10008cd9 	.word	0x10008cd9
1000b868:	10015b54 	.word	0x10015b54
1000b86c:	10008c7d 	.word	0x10008c7d

1000b870 <button_init>:

void button_init(void)
{
1000b870:	b510      	push	{r4, lr}
1000b872:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	gpio_get_config_defaults(&config_gpio_pin);
1000b874:	ac01      	add	r4, sp, #4
1000b876:	0020      	movs	r0, r4
1000b878:	4b05      	ldr	r3, [pc, #20]	; (1000b890 <button_init+0x20>)
1000b87a:	4798      	blx	r3

	config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000b87c:	2300      	movs	r3, #0
1000b87e:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000b880:	7063      	strb	r3, [r4, #1]

	gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000b882:	0021      	movs	r1, r4
1000b884:	2017      	movs	r0, #23
1000b886:	4b03      	ldr	r3, [pc, #12]	; (1000b894 <button_init+0x24>)
1000b888:	4798      	blx	r3
}
1000b88a:	b002      	add	sp, #8
1000b88c:	bd10      	pop	{r4, pc}
1000b88e:	46c0      	nop			; (mov r8, r8)
1000b890:	1000884d 	.word	0x1000884d
1000b894:	1000885d 	.word	0x1000885d

1000b898 <button_register_callback>:

void button_register_callback(button_callback_t callback)
{
1000b898:	b510      	push	{r4, lr}
	button_cb_func = callback;
1000b89a:	4b08      	ldr	r3, [pc, #32]	; (1000b8bc <button_register_callback+0x24>)
1000b89c:	6018      	str	r0, [r3, #0]
	
	if(button_cb_func == NULL)
1000b89e:	2800      	cmp	r0, #0
1000b8a0:	d103      	bne.n	1000b8aa <button_register_callback+0x12>
	{
		gpio_disable_callback(BUTTON_0_PIN);
1000b8a2:	3017      	adds	r0, #23
1000b8a4:	4b06      	ldr	r3, [pc, #24]	; (1000b8c0 <button_register_callback+0x28>)
1000b8a6:	4798      	blx	r3
1000b8a8:	e007      	b.n	1000b8ba <button_register_callback+0x22>
	}
	else
	{
		gpio_register_callback(BUTTON_0_PIN, button_callback, GPIO_CALLBACK_RISING);
1000b8aa:	2202      	movs	r2, #2
1000b8ac:	4905      	ldr	r1, [pc, #20]	; (1000b8c4 <button_register_callback+0x2c>)
1000b8ae:	2017      	movs	r0, #23
1000b8b0:	4b05      	ldr	r3, [pc, #20]	; (1000b8c8 <button_register_callback+0x30>)
1000b8b2:	4798      	blx	r3
		gpio_enable_callback(BUTTON_0_PIN);
1000b8b4:	2017      	movs	r0, #23
1000b8b6:	4b05      	ldr	r3, [pc, #20]	; (1000b8cc <button_register_callback+0x34>)
1000b8b8:	4798      	blx	r3
	}
}
1000b8ba:	bd10      	pop	{r4, pc}
1000b8bc:	10015b54 	.word	0x10015b54
1000b8c0:	10008cd9 	.word	0x10008cd9
1000b8c4:	1000b849 	.word	0x1000b849
1000b8c8:	10008bad 	.word	0x10008bad
1000b8cc:	10008c7d 	.word	0x10008c7d

1000b8d0 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000b8d0:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000b8d2:	4b0e      	ldr	r3, [pc, #56]	; (1000b90c <uart_read_complete_callback+0x3c>)
1000b8d4:	781b      	ldrb	r3, [r3, #0]
1000b8d6:	2b01      	cmp	r3, #1
1000b8d8:	d10b      	bne.n	1000b8f2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000b8da:	2202      	movs	r2, #2
1000b8dc:	4b0b      	ldr	r3, [pc, #44]	; (1000b90c <uart_read_complete_callback+0x3c>)
1000b8de:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000b8e0:	4b0b      	ldr	r3, [pc, #44]	; (1000b910 <uart_read_complete_callback+0x40>)
1000b8e2:	681b      	ldr	r3, [r3, #0]
1000b8e4:	2b00      	cmp	r3, #0
1000b8e6:	d110      	bne.n	1000b90a <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000b8e8:	2102      	movs	r1, #2
1000b8ea:	480a      	ldr	r0, [pc, #40]	; (1000b914 <uart_read_complete_callback+0x44>)
1000b8ec:	4b0a      	ldr	r3, [pc, #40]	; (1000b918 <uart_read_complete_callback+0x48>)
1000b8ee:	4798      	blx	r3
1000b8f0:	e00b      	b.n	1000b90a <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000b8f2:	4b07      	ldr	r3, [pc, #28]	; (1000b910 <uart_read_complete_callback+0x40>)
1000b8f4:	681b      	ldr	r3, [r3, #0]
1000b8f6:	2b00      	cmp	r3, #0
1000b8f8:	d007      	beq.n	1000b90a <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000b8fa:	4c08      	ldr	r4, [pc, #32]	; (1000b91c <uart_read_complete_callback+0x4c>)
1000b8fc:	7820      	ldrb	r0, [r4, #0]
1000b8fe:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000b900:	2201      	movs	r2, #1
1000b902:	0021      	movs	r1, r4
1000b904:	4803      	ldr	r0, [pc, #12]	; (1000b914 <uart_read_complete_callback+0x44>)
1000b906:	4b06      	ldr	r3, [pc, #24]	; (1000b920 <uart_read_complete_callback+0x50>)
1000b908:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000b90a:	bd10      	pop	{r4, pc}
1000b90c:	10015b5c 	.word	0x10015b5c
1000b910:	10015b64 	.word	0x10015b64
1000b914:	100169e4 	.word	0x100169e4
1000b918:	10009a75 	.word	0x10009a75
1000b91c:	10015b60 	.word	0x10015b60
1000b920:	10009a19 	.word	0x10009a19

1000b924 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000b924:	b570      	push	{r4, r5, r6, lr}
1000b926:	0006      	movs	r6, r0
1000b928:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000b92a:	4c03      	ldr	r4, [pc, #12]	; (1000b938 <usart_serial_getchar+0x14>)
1000b92c:	0029      	movs	r1, r5
1000b92e:	0030      	movs	r0, r6
1000b930:	47a0      	blx	r4
1000b932:	2800      	cmp	r0, #0
1000b934:	d1fa      	bne.n	1000b92c <usart_serial_getchar+0x8>
}
1000b936:	bd70      	pop	{r4, r5, r6, pc}
1000b938:	10009a05 	.word	0x10009a05

1000b93c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000b93c:	b570      	push	{r4, r5, r6, lr}
1000b93e:	0006      	movs	r6, r0
1000b940:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000b942:	4c03      	ldr	r4, [pc, #12]	; (1000b950 <usart_serial_putchar+0x14>)
1000b944:	0029      	movs	r1, r5
1000b946:	0030      	movs	r0, r6
1000b948:	47a0      	blx	r4
1000b94a:	2800      	cmp	r0, #0
1000b94c:	d1fa      	bne.n	1000b944 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000b94e:	bd70      	pop	{r4, r5, r6, pc}
1000b950:	100099f5 	.word	0x100099f5

1000b954 <serial_console_init>:

void serial_console_init(void)
{
1000b954:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000b956:	2100      	movs	r1, #0
1000b958:	2000      	movs	r0, #0
1000b95a:	4b19      	ldr	r3, [pc, #100]	; (1000b9c0 <serial_console_init+0x6c>)
1000b95c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000b95e:	4c19      	ldr	r4, [pc, #100]	; (1000b9c4 <serial_console_init+0x70>)
1000b960:	0020      	movs	r0, r4
1000b962:	4b19      	ldr	r3, [pc, #100]	; (1000b9c8 <serial_console_init+0x74>)
1000b964:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000b966:	23e1      	movs	r3, #225	; 0xe1
1000b968:	025b      	lsls	r3, r3, #9
1000b96a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000b96c:	2302      	movs	r3, #2
1000b96e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000b970:	2203      	movs	r2, #3
1000b972:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000b974:	3201      	adds	r2, #1
1000b976:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000b978:	3201      	adds	r2, #1
1000b97a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000b97c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000b97e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000b980:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000b982:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000b984:	4d11      	ldr	r5, [pc, #68]	; (1000b9cc <serial_console_init+0x78>)
1000b986:	4b12      	ldr	r3, [pc, #72]	; (1000b9d0 <serial_console_init+0x7c>)
1000b988:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000b98a:	4a12      	ldr	r2, [pc, #72]	; (1000b9d4 <serial_console_init+0x80>)
1000b98c:	4b12      	ldr	r3, [pc, #72]	; (1000b9d8 <serial_console_init+0x84>)
1000b98e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000b990:	4a12      	ldr	r2, [pc, #72]	; (1000b9dc <serial_console_init+0x88>)
1000b992:	4b13      	ldr	r3, [pc, #76]	; (1000b9e0 <serial_console_init+0x8c>)
1000b994:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000b996:	0022      	movs	r2, r4
1000b998:	4912      	ldr	r1, [pc, #72]	; (1000b9e4 <serial_console_init+0x90>)
1000b99a:	0028      	movs	r0, r5
1000b99c:	4b12      	ldr	r3, [pc, #72]	; (1000b9e8 <serial_console_init+0x94>)
1000b99e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000b9a0:	4e12      	ldr	r6, [pc, #72]	; (1000b9ec <serial_console_init+0x98>)
1000b9a2:	6833      	ldr	r3, [r6, #0]
1000b9a4:	6898      	ldr	r0, [r3, #8]
1000b9a6:	2100      	movs	r1, #0
1000b9a8:	4c11      	ldr	r4, [pc, #68]	; (1000b9f0 <serial_console_init+0x9c>)
1000b9aa:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000b9ac:	6833      	ldr	r3, [r6, #0]
1000b9ae:	6858      	ldr	r0, [r3, #4]
1000b9b0:	2100      	movs	r1, #0
1000b9b2:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000b9b4:	2202      	movs	r2, #2
1000b9b6:	490f      	ldr	r1, [pc, #60]	; (1000b9f4 <serial_console_init+0xa0>)
1000b9b8:	0028      	movs	r0, r5
1000b9ba:	4b0f      	ldr	r3, [pc, #60]	; (1000b9f8 <serial_console_init+0xa4>)
1000b9bc:	4798      	blx	r3
}
1000b9be:	bd70      	pop	{r4, r5, r6, pc}
1000b9c0:	10008d81 	.word	0x10008d81
1000b9c4:	10016a08 	.word	0x10016a08
1000b9c8:	1000980d 	.word	0x1000980d
1000b9cc:	100169e4 	.word	0x100169e4
1000b9d0:	10015e00 	.word	0x10015e00
1000b9d4:	1000b93d 	.word	0x1000b93d
1000b9d8:	10015dfc 	.word	0x10015dfc
1000b9dc:	1000b925 	.word	0x1000b925
1000b9e0:	10015df8 	.word	0x10015df8
1000b9e4:	40004000 	.word	0x40004000
1000b9e8:	10009839 	.word	0x10009839
1000b9ec:	1001421c 	.word	0x1001421c
1000b9f0:	10011e31 	.word	0x10011e31
1000b9f4:	1000b8d1 	.word	0x1000b8d1
1000b9f8:	10009a41 	.word	0x10009a41

1000b9fc <_time_start>:

void _time_start(unsigned int sec)
{
1000b9fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b9fe:	b083      	sub	sp, #12
1000ba00:	0005      	movs	r5, r0
	system_clock_get_value();
1000ba02:	4c0d      	ldr	r4, [pc, #52]	; (1000ba38 <_time_start+0x3c>)
1000ba04:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000ba06:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000ba08:	4f0c      	ldr	r7, [pc, #48]	; (1000ba3c <_time_start+0x40>)
1000ba0a:	47b8      	blx	r7
1000ba0c:	4e0c      	ldr	r6, [pc, #48]	; (1000ba40 <_time_start+0x44>)
1000ba0e:	4a0d      	ldr	r2, [pc, #52]	; (1000ba44 <_time_start+0x48>)
1000ba10:	4b0d      	ldr	r3, [pc, #52]	; (1000ba48 <_time_start+0x4c>)
1000ba12:	47b0      	blx	r6
1000ba14:	9000      	str	r0, [sp, #0]
1000ba16:	9101      	str	r1, [sp, #4]
1000ba18:	20fa      	movs	r0, #250	; 0xfa
1000ba1a:	0080      	lsls	r0, r0, #2
1000ba1c:	4368      	muls	r0, r5
1000ba1e:	47b8      	blx	r7
1000ba20:	0002      	movs	r2, r0
1000ba22:	000b      	movs	r3, r1
1000ba24:	9800      	ldr	r0, [sp, #0]
1000ba26:	9901      	ldr	r1, [sp, #4]
1000ba28:	47b0      	blx	r6
1000ba2a:	4b08      	ldr	r3, [pc, #32]	; (1000ba4c <_time_start+0x50>)
1000ba2c:	4798      	blx	r3
1000ba2e:	4b08      	ldr	r3, [pc, #32]	; (1000ba50 <_time_start+0x54>)
1000ba30:	6018      	str	r0, [r3, #0]
}
1000ba32:	b003      	add	sp, #12
1000ba34:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba36:	46c0      	nop			; (mov r8, r8)
1000ba38:	10008e05 	.word	0x10008e05
1000ba3c:	100116e1 	.word	0x100116e1
1000ba40:	10010ad9 	.word	0x10010ad9
1000ba44:	19feaec7 	.word	0x19feaec7
1000ba48:	3f09d8ef 	.word	0x3f09d8ef
1000ba4c:	10010525 	.word	0x10010525
1000ba50:	10015b58 	.word	0x10015b58

1000ba54 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ba54:	4b02      	ldr	r3, [pc, #8]	; (1000ba60 <_time_done+0xc>)
1000ba56:	681a      	ldr	r2, [r3, #0]
1000ba58:	1e50      	subs	r0, r2, #1
1000ba5a:	6018      	str	r0, [r3, #0]
}
1000ba5c:	4770      	bx	lr
1000ba5e:	46c0      	nop			; (mov r8, r8)
1000ba60:	10015b58 	.word	0x10015b58

1000ba64 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ba64:	b570      	push	{r4, r5, r6, lr}
1000ba66:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ba68:	2201      	movs	r2, #1
1000ba6a:	4b11      	ldr	r3, [pc, #68]	; (1000bab0 <getchar_b11_timeout+0x4c>)
1000ba6c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ba6e:	4b11      	ldr	r3, [pc, #68]	; (1000bab4 <getchar_b11_timeout+0x50>)
1000ba70:	681b      	ldr	r3, [r3, #0]
1000ba72:	2b00      	cmp	r3, #0
1000ba74:	d103      	bne.n	1000ba7e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ba76:	2102      	movs	r1, #2
1000ba78:	480f      	ldr	r0, [pc, #60]	; (1000bab8 <getchar_b11_timeout+0x54>)
1000ba7a:	4b10      	ldr	r3, [pc, #64]	; (1000babc <getchar_b11_timeout+0x58>)
1000ba7c:	4798      	blx	r3

	_time_start(sec);
1000ba7e:	0020      	movs	r0, r4
1000ba80:	4b0f      	ldr	r3, [pc, #60]	; (1000bac0 <getchar_b11_timeout+0x5c>)
1000ba82:	4798      	blx	r3
	
	string_input[0] = 0;
1000ba84:	490f      	ldr	r1, [pc, #60]	; (1000bac4 <getchar_b11_timeout+0x60>)
1000ba86:	2300      	movs	r3, #0
1000ba88:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ba8a:	2201      	movs	r2, #1
1000ba8c:	480a      	ldr	r0, [pc, #40]	; (1000bab8 <getchar_b11_timeout+0x54>)
1000ba8e:	4b0e      	ldr	r3, [pc, #56]	; (1000bac8 <getchar_b11_timeout+0x64>)
1000ba90:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ba92:	4c07      	ldr	r4, [pc, #28]	; (1000bab0 <getchar_b11_timeout+0x4c>)
1000ba94:	4d0d      	ldr	r5, [pc, #52]	; (1000bacc <getchar_b11_timeout+0x68>)
1000ba96:	7823      	ldrb	r3, [r4, #0]
1000ba98:	2b02      	cmp	r3, #2
1000ba9a:	d002      	beq.n	1000baa2 <getchar_b11_timeout+0x3e>
1000ba9c:	47a8      	blx	r5
1000ba9e:	2800      	cmp	r0, #0
1000baa0:	d1f9      	bne.n	1000ba96 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000baa2:	2200      	movs	r2, #0
1000baa4:	4b02      	ldr	r3, [pc, #8]	; (1000bab0 <getchar_b11_timeout+0x4c>)
1000baa6:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000baa8:	4b06      	ldr	r3, [pc, #24]	; (1000bac4 <getchar_b11_timeout+0x60>)
1000baaa:	7818      	ldrb	r0, [r3, #0]
}
1000baac:	bd70      	pop	{r4, r5, r6, pc}
1000baae:	46c0      	nop			; (mov r8, r8)
1000bab0:	10015b5c 	.word	0x10015b5c
1000bab4:	10015b64 	.word	0x10015b64
1000bab8:	100169e4 	.word	0x100169e4
1000babc:	10009a55 	.word	0x10009a55
1000bac0:	1000b9fd 	.word	0x1000b9fd
1000bac4:	10015b60 	.word	0x10015b60
1000bac8:	10009a19 	.word	0x10009a19
1000bacc:	1000ba55 	.word	0x1000ba55

1000bad0 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000bad0:	4b02      	ldr	r3, [pc, #8]	; (1000badc <platform_event_free+0xc>)
1000bad2:	681a      	ldr	r2, [r3, #0]
1000bad4:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000bad6:	6018      	str	r0, [r3, #0]
}
1000bad8:	4770      	bx	lr
1000bada:	46c0      	nop			; (mov r8, r8)
1000badc:	10015b6c 	.word	0x10015b6c

1000bae0 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000bae0:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000bae2:	4b0b      	ldr	r3, [pc, #44]	; (1000bb10 <platform_event_post+0x30>)
1000bae4:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000bae6:	2c00      	cmp	r4, #0
1000bae8:	d011      	beq.n	1000bb0e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000baea:	6825      	ldr	r5, [r4, #0]
1000baec:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000baee:	2300      	movs	r3, #0
1000baf0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000baf2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000baf4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000baf6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000baf8:	4b06      	ldr	r3, [pc, #24]	; (1000bb14 <platform_event_post+0x34>)
1000bafa:	681a      	ldr	r2, [r3, #0]
1000bafc:	2a00      	cmp	r2, #0
1000bafe:	d102      	bne.n	1000bb06 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000bb00:	601c      	str	r4, [r3, #0]
1000bb02:	e004      	b.n	1000bb0e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000bb04:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000bb06:	6813      	ldr	r3, [r2, #0]
1000bb08:	2b00      	cmp	r3, #0
1000bb0a:	d1fb      	bne.n	1000bb04 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000bb0c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000bb0e:	bd30      	pop	{r4, r5, pc}
1000bb10:	10015b6c 	.word	0x10015b6c
1000bb14:	10015b68 	.word	0x10015b68

1000bb18 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000bb18:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000bb1a:	2300      	movs	r3, #0
1000bb1c:	4a06      	ldr	r2, [pc, #24]	; (1000bb38 <platform_event_init+0x20>)
1000bb1e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000bb20:	4a06      	ldr	r2, [pc, #24]	; (1000bb3c <platform_event_init+0x24>)
1000bb22:	6013      	str	r3, [r2, #0]
1000bb24:	4c06      	ldr	r4, [pc, #24]	; (1000bb40 <platform_event_init+0x28>)
1000bb26:	0026      	movs	r6, r4
1000bb28:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000bb2a:	4d06      	ldr	r5, [pc, #24]	; (1000bb44 <platform_event_init+0x2c>)
1000bb2c:	0020      	movs	r0, r4
1000bb2e:	47a8      	blx	r5
1000bb30:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000bb32:	42b4      	cmp	r4, r6
1000bb34:	d1fa      	bne.n	1000bb2c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000bb36:	bd70      	pop	{r4, r5, r6, pc}
1000bb38:	10015b6c 	.word	0x10015b6c
1000bb3c:	10015b68 	.word	0x10015b68
1000bb40:	10015b70 	.word	0x10015b70
1000bb44:	1000bad1 	.word	0x1000bad1

1000bb48 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000bb48:	b570      	push	{r4, r5, r6, lr}
1000bb4a:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000bb4c:	4b13      	ldr	r3, [pc, #76]	; (1000bb9c <at_ke_msg_send+0x54>)
1000bb4e:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000bb50:	4b13      	ldr	r3, [pc, #76]	; (1000bba0 <at_ke_msg_send+0x58>)
1000bb52:	681b      	ldr	r3, [r3, #0]
1000bb54:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000bb56:	2c0c      	cmp	r4, #12
1000bb58:	d01f      	beq.n	1000bb9a <at_ke_msg_send+0x52>
1000bb5a:	3c0c      	subs	r4, #12
1000bb5c:	88e3      	ldrh	r3, [r4, #6]
1000bb5e:	2b05      	cmp	r3, #5
1000bb60:	d01b      	beq.n	1000bb9a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000bb62:	07eb      	lsls	r3, r5, #31
1000bb64:	d414      	bmi.n	1000bb90 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000bb66:	4b0f      	ldr	r3, [pc, #60]	; (1000bba4 <at_ke_msg_send+0x5c>)
1000bb68:	681b      	ldr	r3, [r3, #0]
1000bb6a:	2002      	movs	r0, #2
1000bb6c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000bb6e:	4b0e      	ldr	r3, [pc, #56]	; (1000bba8 <at_ke_msg_send+0x60>)
1000bb70:	681b      	ldr	r3, [r3, #0]
1000bb72:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000bb74:	4c0d      	ldr	r4, [pc, #52]	; (1000bbac <at_ke_msg_send+0x64>)
1000bb76:	2003      	movs	r0, #3
1000bb78:	6823      	ldr	r3, [r4, #0]
1000bb7a:	4798      	blx	r3
1000bb7c:	2800      	cmp	r0, #0
1000bb7e:	d1fa      	bne.n	1000bb76 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000bb80:	4b0b      	ldr	r3, [pc, #44]	; (1000bbb0 <at_ke_msg_send+0x68>)
1000bb82:	681b      	ldr	r3, [r3, #0]
1000bb84:	3002      	adds	r0, #2
1000bb86:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000bb88:	2201      	movs	r2, #1
1000bb8a:	4b0a      	ldr	r3, [pc, #40]	; (1000bbb4 <at_ke_msg_send+0x6c>)
1000bb8c:	601a      	str	r2, [r3, #0]
1000bb8e:	e004      	b.n	1000bb9a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000bb90:	4b09      	ldr	r3, [pc, #36]	; (1000bbb8 <at_ke_msg_send+0x70>)
1000bb92:	6818      	ldr	r0, [r3, #0]
1000bb94:	4b09      	ldr	r3, [pc, #36]	; (1000bbbc <at_ke_msg_send+0x74>)
1000bb96:	681b      	ldr	r3, [r3, #0]
1000bb98:	4798      	blx	r3
		}
	}
}
1000bb9a:	bd70      	pop	{r4, r5, r6, pc}
1000bb9c:	4000b1ec 	.word	0x4000b1ec
1000bba0:	10015c18 	.word	0x10015c18
1000bba4:	10015c10 	.word	0x10015c10
1000bba8:	10015c24 	.word	0x10015c24
1000bbac:	10015bfc 	.word	0x10015bfc
1000bbb0:	10015c04 	.word	0x10015c04
1000bbb4:	4000b020 	.word	0x4000b020
1000bbb8:	10015c08 	.word	0x10015c08
1000bbbc:	10015bf8 	.word	0x10015bf8

1000bbc0 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000bbc0:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000bbc2:	4b06      	ldr	r3, [pc, #24]	; (1000bbdc <samb11_plf_resume_callback+0x1c>)
1000bbc4:	4a06      	ldr	r2, [pc, #24]	; (1000bbe0 <samb11_plf_resume_callback+0x20>)
1000bbc6:	6819      	ldr	r1, [r3, #0]
1000bbc8:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000bbca:	685a      	ldr	r2, [r3, #4]
1000bbcc:	4b05      	ldr	r3, [pc, #20]	; (1000bbe4 <samb11_plf_resume_callback+0x24>)
1000bbce:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000bbd0:	4b05      	ldr	r3, [pc, #20]	; (1000bbe8 <samb11_plf_resume_callback+0x28>)
1000bbd2:	681b      	ldr	r3, [r3, #0]
1000bbd4:	2b00      	cmp	r3, #0
1000bbd6:	d000      	beq.n	1000bbda <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000bbd8:	4798      	blx	r3
	}
}
1000bbda:	bd10      	pop	{r4, pc}
1000bbdc:	10016a30 	.word	0x10016a30
1000bbe0:	4000b00c 	.word	0x4000b00c
1000bbe4:	4000b010 	.word	0x4000b010
1000bbe8:	10016d0c 	.word	0x10016d0c

1000bbec <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000bbec:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000bbee:	2232      	movs	r2, #50	; 0x32
1000bbf0:	2100      	movs	r1, #0
1000bbf2:	480d      	ldr	r0, [pc, #52]	; (1000bc28 <init_port_list+0x3c>)
1000bbf4:	4b0d      	ldr	r3, [pc, #52]	; (1000bc2c <init_port_list+0x40>)
1000bbf6:	4798      	blx	r3
1000bbf8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000bbfa:	480b      	ldr	r0, [pc, #44]	; (1000bc28 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000bbfc:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000bbfe:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000bc00:	004a      	lsls	r2, r1, #1
1000bc02:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000bc04:	1882      	adds	r2, r0, r2
1000bc06:	7853      	ldrb	r3, [r2, #1]
1000bc08:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000bc0a:	b2db      	uxtb	r3, r3
1000bc0c:	43a3      	bics	r3, r4
1000bc0e:	7053      	strb	r3, [r2, #1]
1000bc10:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000bc12:	2919      	cmp	r1, #25
1000bc14:	d1f4      	bne.n	1000bc00 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000bc16:	4b04      	ldr	r3, [pc, #16]	; (1000bc28 <init_port_list+0x3c>)
1000bc18:	785a      	ldrb	r2, [r3, #1]
1000bc1a:	3918      	subs	r1, #24
1000bc1c:	438a      	bics	r2, r1
1000bc1e:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000bc20:	78da      	ldrb	r2, [r3, #3]
1000bc22:	438a      	bics	r2, r1
1000bc24:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000bc26:	bd70      	pop	{r4, r5, r6, pc}
1000bc28:	10016a4c 	.word	0x10016a4c
1000bc2c:	10011c75 	.word	0x10011c75

1000bc30 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000bc30:	4a06      	ldr	r2, [pc, #24]	; (1000bc4c <init_clock+0x1c>)
1000bc32:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000bc34:	4b06      	ldr	r3, [pc, #24]	; (1000bc50 <init_clock+0x20>)
1000bc36:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000bc38:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000bc3a:	4a06      	ldr	r2, [pc, #24]	; (1000bc54 <init_clock+0x24>)
1000bc3c:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000bc3e:	4906      	ldr	r1, [pc, #24]	; (1000bc58 <init_clock+0x28>)
1000bc40:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000bc42:	4b06      	ldr	r3, [pc, #24]	; (1000bc5c <init_clock+0x2c>)
1000bc44:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000bc46:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000bc48:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000bc4a:	4770      	bx	lr
1000bc4c:	4000b00c 	.word	0x4000b00c
1000bc50:	fffe0fd3 	.word	0xfffe0fd3
1000bc54:	10016a30 	.word	0x10016a30
1000bc58:	4000b010 	.word	0x4000b010
1000bc5c:	ffffe7c0 	.word	0xffffe7c0

1000bc60 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000bc60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc62:	4657      	mov	r7, sl
1000bc64:	464e      	mov	r6, r9
1000bc66:	4645      	mov	r5, r8
1000bc68:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000bc6a:	4b4f      	ldr	r3, [pc, #316]	; (1000bda8 <platform_driver_init+0x148>)
1000bc6c:	781b      	ldrb	r3, [r3, #0]
1000bc6e:	2b00      	cmp	r3, #0
1000bc70:	d004      	beq.n	1000bc7c <platform_driver_init+0x1c>
1000bc72:	4b4d      	ldr	r3, [pc, #308]	; (1000bda8 <platform_driver_init+0x148>)
1000bc74:	781b      	ldrb	r3, [r3, #0]
1000bc76:	2b01      	cmp	r3, #1
1000bc78:	d100      	bne.n	1000bc7c <platform_driver_init+0x1c>
1000bc7a:	e08c      	b.n	1000bd96 <platform_driver_init+0x136>
		init_port_list();
1000bc7c:	4b4b      	ldr	r3, [pc, #300]	; (1000bdac <platform_driver_init+0x14c>)
1000bc7e:	4798      	blx	r3
		init_clock();
1000bc80:	4b4b      	ldr	r3, [pc, #300]	; (1000bdb0 <platform_driver_init+0x150>)
1000bc82:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000bc84:	2300      	movs	r3, #0
1000bc86:	4698      	mov	r8, r3
1000bc88:	4b4a      	ldr	r3, [pc, #296]	; (1000bdb4 <platform_driver_init+0x154>)
1000bc8a:	4642      	mov	r2, r8
1000bc8c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bc8e:	4c4a      	ldr	r4, [pc, #296]	; (1000bdb8 <platform_driver_init+0x158>)
1000bc90:	2380      	movs	r3, #128	; 0x80
1000bc92:	2280      	movs	r2, #128	; 0x80
1000bc94:	0412      	lsls	r2, r2, #16
1000bc96:	4692      	mov	sl, r2
1000bc98:	50e2      	str	r2, [r4, r3]
1000bc9a:	2280      	movs	r2, #128	; 0x80
1000bc9c:	0452      	lsls	r2, r2, #17
1000bc9e:	4691      	mov	r9, r2
1000bca0:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000bca2:	4d46      	ldr	r5, [pc, #280]	; (1000bdbc <platform_driver_init+0x15c>)
1000bca4:	4b46      	ldr	r3, [pc, #280]	; (1000bdc0 <platform_driver_init+0x160>)
1000bca6:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000bca8:	4b46      	ldr	r3, [pc, #280]	; (1000bdc4 <platform_driver_init+0x164>)
1000bcaa:	4a47      	ldr	r2, [pc, #284]	; (1000bdc8 <platform_driver_init+0x168>)
1000bcac:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000bcae:	4947      	ldr	r1, [pc, #284]	; (1000bdcc <platform_driver_init+0x16c>)
1000bcb0:	4a47      	ldr	r2, [pc, #284]	; (1000bdd0 <platform_driver_init+0x170>)
1000bcb2:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000bcb4:	4a47      	ldr	r2, [pc, #284]	; (1000bdd4 <platform_driver_init+0x174>)
1000bcb6:	6811      	ldr	r1, [r2, #0]
1000bcb8:	4a47      	ldr	r2, [pc, #284]	; (1000bdd8 <platform_driver_init+0x178>)
1000bcba:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000bcbc:	4a47      	ldr	r2, [pc, #284]	; (1000bddc <platform_driver_init+0x17c>)
1000bcbe:	6811      	ldr	r1, [r2, #0]
1000bcc0:	4a47      	ldr	r2, [pc, #284]	; (1000bde0 <platform_driver_init+0x180>)
1000bcc2:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000bcc4:	4947      	ldr	r1, [pc, #284]	; (1000bde4 <platform_driver_init+0x184>)
1000bcc6:	4a48      	ldr	r2, [pc, #288]	; (1000bde8 <platform_driver_init+0x188>)
1000bcc8:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000bcca:	4948      	ldr	r1, [pc, #288]	; (1000bdec <platform_driver_init+0x18c>)
1000bccc:	4a48      	ldr	r2, [pc, #288]	; (1000bdf0 <platform_driver_init+0x190>)
1000bcce:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000bcd0:	4f48      	ldr	r7, [pc, #288]	; (1000bdf4 <platform_driver_init+0x194>)
1000bcd2:	4a49      	ldr	r2, [pc, #292]	; (1000bdf8 <platform_driver_init+0x198>)
1000bcd4:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000bcd6:	4949      	ldr	r1, [pc, #292]	; (1000bdfc <platform_driver_init+0x19c>)
1000bcd8:	4a49      	ldr	r2, [pc, #292]	; (1000be00 <platform_driver_init+0x1a0>)
1000bcda:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000bcdc:	4949      	ldr	r1, [pc, #292]	; (1000be04 <platform_driver_init+0x1a4>)
1000bcde:	4a4a      	ldr	r2, [pc, #296]	; (1000be08 <platform_driver_init+0x1a8>)
1000bce0:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000bce2:	4e4a      	ldr	r6, [pc, #296]	; (1000be0c <platform_driver_init+0x1ac>)
1000bce4:	4a4a      	ldr	r2, [pc, #296]	; (1000be10 <platform_driver_init+0x1b0>)
1000bce6:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000bce8:	494a      	ldr	r1, [pc, #296]	; (1000be14 <platform_driver_init+0x1b4>)
1000bcea:	4a4b      	ldr	r2, [pc, #300]	; (1000be18 <platform_driver_init+0x1b8>)
1000bcec:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000bcee:	494b      	ldr	r1, [pc, #300]	; (1000be1c <platform_driver_init+0x1bc>)
1000bcf0:	4a4b      	ldr	r2, [pc, #300]	; (1000be20 <platform_driver_init+0x1c0>)
1000bcf2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000bcf4:	494b      	ldr	r1, [pc, #300]	; (1000be24 <platform_driver_init+0x1c4>)
1000bcf6:	4a4c      	ldr	r2, [pc, #304]	; (1000be28 <platform_driver_init+0x1c8>)
1000bcf8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000bcfa:	494c      	ldr	r1, [pc, #304]	; (1000be2c <platform_driver_init+0x1cc>)
1000bcfc:	4a4c      	ldr	r2, [pc, #304]	; (1000be30 <platform_driver_init+0x1d0>)
1000bcfe:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000bd00:	494c      	ldr	r1, [pc, #304]	; (1000be34 <platform_driver_init+0x1d4>)
1000bd02:	4a4d      	ldr	r2, [pc, #308]	; (1000be38 <platform_driver_init+0x1d8>)
1000bd04:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000bd06:	2028      	movs	r0, #40	; 0x28
1000bd08:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000bd0a:	494c      	ldr	r1, [pc, #304]	; (1000be3c <platform_driver_init+0x1dc>)
1000bd0c:	2028      	movs	r0, #40	; 0x28
1000bd0e:	682b      	ldr	r3, [r5, #0]
1000bd10:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000bd12:	682b      	ldr	r3, [r5, #0]
1000bd14:	494a      	ldr	r1, [pc, #296]	; (1000be40 <platform_driver_init+0x1e0>)
1000bd16:	2027      	movs	r0, #39	; 0x27
1000bd18:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000bd1a:	4b4a      	ldr	r3, [pc, #296]	; (1000be44 <platform_driver_init+0x1e4>)
1000bd1c:	681a      	ldr	r2, [r3, #0]
1000bd1e:	4b4a      	ldr	r3, [pc, #296]	; (1000be48 <platform_driver_init+0x1e8>)
1000bd20:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000bd22:	4a4a      	ldr	r2, [pc, #296]	; (1000be4c <platform_driver_init+0x1ec>)
1000bd24:	4b4a      	ldr	r3, [pc, #296]	; (1000be50 <platform_driver_init+0x1f0>)
1000bd26:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000bd28:	4a4a      	ldr	r2, [pc, #296]	; (1000be54 <platform_driver_init+0x1f4>)
1000bd2a:	4b4b      	ldr	r3, [pc, #300]	; (1000be58 <platform_driver_init+0x1f8>)
1000bd2c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000bd2e:	4a4b      	ldr	r2, [pc, #300]	; (1000be5c <platform_driver_init+0x1fc>)
1000bd30:	4b4b      	ldr	r3, [pc, #300]	; (1000be60 <platform_driver_init+0x200>)
1000bd32:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000bd34:	4a4b      	ldr	r2, [pc, #300]	; (1000be64 <platform_driver_init+0x204>)
1000bd36:	4b4c      	ldr	r3, [pc, #304]	; (1000be68 <platform_driver_init+0x208>)
1000bd38:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000bd3a:	4a4c      	ldr	r2, [pc, #304]	; (1000be6c <platform_driver_init+0x20c>)
1000bd3c:	4b4c      	ldr	r3, [pc, #304]	; (1000be70 <platform_driver_init+0x210>)
1000bd3e:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000bd40:	4a4c      	ldr	r2, [pc, #304]	; (1000be74 <platform_driver_init+0x214>)
1000bd42:	4b4d      	ldr	r3, [pc, #308]	; (1000be78 <platform_driver_init+0x218>)
1000bd44:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000bd46:	4a4d      	ldr	r2, [pc, #308]	; (1000be7c <platform_driver_init+0x21c>)
1000bd48:	4b4d      	ldr	r3, [pc, #308]	; (1000be80 <platform_driver_init+0x220>)
1000bd4a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000bd4c:	22a0      	movs	r2, #160	; 0xa0
1000bd4e:	0092      	lsls	r2, r2, #2
1000bd50:	2100      	movs	r1, #0
1000bd52:	484c      	ldr	r0, [pc, #304]	; (1000be84 <platform_driver_init+0x224>)
1000bd54:	4b4c      	ldr	r3, [pc, #304]	; (1000be88 <platform_driver_init+0x228>)
1000bd56:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000bd58:	2280      	movs	r2, #128	; 0x80
1000bd5a:	0092      	lsls	r2, r2, #2
1000bd5c:	4b4b      	ldr	r3, [pc, #300]	; (1000be8c <platform_driver_init+0x22c>)
1000bd5e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000bd60:	4b4b      	ldr	r3, [pc, #300]	; (1000be90 <platform_driver_init+0x230>)
1000bd62:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000bd64:	4653      	mov	r3, sl
1000bd66:	6023      	str	r3, [r4, #0]
1000bd68:	464b      	mov	r3, r9
1000bd6a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000bd6c:	4b49      	ldr	r3, [pc, #292]	; (1000be94 <platform_driver_init+0x234>)
1000bd6e:	4642      	mov	r2, r8
1000bd70:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000bd72:	683b      	ldr	r3, [r7, #0]
1000bd74:	4a48      	ldr	r2, [pc, #288]	; (1000be98 <platform_driver_init+0x238>)
1000bd76:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000bd78:	6833      	ldr	r3, [r6, #0]
1000bd7a:	4a48      	ldr	r2, [pc, #288]	; (1000be9c <platform_driver_init+0x23c>)
1000bd7c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000bd7e:	2000      	movs	r0, #0
1000bd80:	4c47      	ldr	r4, [pc, #284]	; (1000bea0 <platform_driver_init+0x240>)
1000bd82:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000bd84:	2001      	movs	r0, #1
1000bd86:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000bd88:	2002      	movs	r0, #2
1000bd8a:	47a0      	blx	r4
		platform_initialized = 1;
1000bd8c:	2201      	movs	r2, #1
1000bd8e:	4b06      	ldr	r3, [pc, #24]	; (1000bda8 <platform_driver_init+0x148>)
1000bd90:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000bd92:	2000      	movs	r0, #0
1000bd94:	e003      	b.n	1000bd9e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000bd96:	2201      	movs	r2, #1
1000bd98:	4b03      	ldr	r3, [pc, #12]	; (1000bda8 <platform_driver_init+0x148>)
1000bd9a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000bd9c:	2001      	movs	r0, #1
	}
	return status;
}
1000bd9e:	bc1c      	pop	{r2, r3, r4}
1000bda0:	4690      	mov	r8, r2
1000bda2:	4699      	mov	r9, r3
1000bda4:	46a2      	mov	sl, r4
1000bda6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bda8:	10015c00 	.word	0x10015c00
1000bdac:	1000bbed 	.word	0x1000bbed
1000bdb0:	1000bc31 	.word	0x1000bc31
1000bdb4:	10015c20 	.word	0x10015c20
1000bdb8:	e000e100 	.word	0xe000e100
1000bdbc:	10016d00 	.word	0x10016d00
1000bdc0:	000007d7 	.word	0x000007d7
1000bdc4:	000007bd 	.word	0x000007bd
1000bdc8:	10016a3c 	.word	0x10016a3c
1000bdcc:	0001bc51 	.word	0x0001bc51
1000bdd0:	10016d04 	.word	0x10016d04
1000bdd4:	100400bc 	.word	0x100400bc
1000bdd8:	10015bf0 	.word	0x10015bf0
1000bddc:	100400b8 	.word	0x100400b8
1000bde0:	10015bec 	.word	0x10015bec
1000bde4:	0001b99f 	.word	0x0001b99f
1000bde8:	10016a38 	.word	0x10016a38
1000bdec:	0001b9db 	.word	0x0001b9db
1000bdf0:	10016a44 	.word	0x10016a44
1000bdf4:	10016d14 	.word	0x10016d14
1000bdf8:	1004003c 	.word	0x1004003c
1000bdfc:	10041fc0 	.word	0x10041fc0
1000be00:	10016a48 	.word	0x10016a48
1000be04:	10041fc4 	.word	0x10041fc4
1000be08:	10016d10 	.word	0x10016d10
1000be0c:	10016d08 	.word	0x10016d08
1000be10:	10041fd4 	.word	0x10041fd4
1000be14:	10041fd8 	.word	0x10041fd8
1000be18:	10016a40 	.word	0x10016a40
1000be1c:	0001cbe9 	.word	0x0001cbe9
1000be20:	10015c10 	.word	0x10015c10
1000be24:	0001cd8f 	.word	0x0001cd8f
1000be28:	10015c04 	.word	0x10015c04
1000be2c:	0001cea3 	.word	0x0001cea3
1000be30:	10015c24 	.word	0x10015c24
1000be34:	0001cbcf 	.word	0x0001cbcf
1000be38:	10015bfc 	.word	0x10015bfc
1000be3c:	1000c2b9 	.word	0x1000c2b9
1000be40:	1000c24d 	.word	0x1000c24d
1000be44:	100400e4 	.word	0x100400e4
1000be48:	10015c18 	.word	0x10015c18
1000be4c:	00019fe9 	.word	0x00019fe9
1000be50:	10015c28 	.word	0x10015c28
1000be54:	0001dbdd 	.word	0x0001dbdd
1000be58:	10015bf8 	.word	0x10015bf8
1000be5c:	0001dc5b 	.word	0x0001dc5b
1000be60:	10015c0c 	.word	0x10015c0c
1000be64:	100405ec 	.word	0x100405ec
1000be68:	10015c08 	.word	0x10015c08
1000be6c:	0001d5e3 	.word	0x0001d5e3
1000be70:	10015c14 	.word	0x10015c14
1000be74:	10040c20 	.word	0x10040c20
1000be78:	10015c2c 	.word	0x10015c2c
1000be7c:	00019f09 	.word	0x00019f09
1000be80:	10015be8 	.word	0x10015be8
1000be84:	10016a80 	.word	0x10016a80
1000be88:	10011c75 	.word	0x10011c75
1000be8c:	10016d18 	.word	0x10016d18
1000be90:	1000bb19 	.word	0x1000bb19
1000be94:	10016d0c 	.word	0x10016d0c
1000be98:	1000bbc1 	.word	0x1000bbc1
1000be9c:	1000c315 	.word	0x1000c315
1000bea0:	1000c2fd 	.word	0x1000c2fd

1000bea4 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000bea4:	4b04      	ldr	r3, [pc, #16]	; (1000beb8 <platform_register_ble_msg_handler+0x14>)
1000bea6:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000bea8:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000beaa:	2a01      	cmp	r2, #1
1000beac:	d102      	bne.n	1000beb4 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000beae:	4b03      	ldr	r3, [pc, #12]	; (1000bebc <platform_register_ble_msg_handler+0x18>)
1000beb0:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000beb2:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000beb4:	0018      	movs	r0, r3
1000beb6:	4770      	bx	lr
1000beb8:	10015c00 	.word	0x10015c00
1000bebc:	10015c20 	.word	0x10015c20

1000bec0 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000bec0:	b570      	push	{r4, r5, r6, lr}
1000bec2:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000bec4:	4b0e      	ldr	r3, [pc, #56]	; (1000bf00 <platform_interface_send+0x40>)
1000bec6:	681b      	ldr	r3, [r3, #0]
1000bec8:	2b00      	cmp	r3, #0
1000beca:	d002      	beq.n	1000bed2 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000becc:	8840      	ldrh	r0, [r0, #2]
1000bece:	4798      	blx	r3
1000bed0:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000bed2:	88e3      	ldrh	r3, [r4, #6]
1000bed4:	88a2      	ldrh	r2, [r4, #4]
1000bed6:	8861      	ldrh	r1, [r4, #2]
1000bed8:	8820      	ldrh	r0, [r4, #0]
1000beda:	4d0a      	ldr	r5, [pc, #40]	; (1000bf04 <platform_interface_send+0x44>)
1000bedc:	682d      	ldr	r5, [r5, #0]
1000bede:	47a8      	blx	r5
1000bee0:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000bee2:	88e2      	ldrh	r2, [r4, #6]
1000bee4:	2a00      	cmp	r2, #0
1000bee6:	d102      	bne.n	1000beee <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000bee8:	4b07      	ldr	r3, [pc, #28]	; (1000bf08 <platform_interface_send+0x48>)
1000beea:	4798      	blx	r3
1000beec:	e006      	b.n	1000befc <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000beee:	0021      	movs	r1, r4
1000bef0:	3108      	adds	r1, #8
1000bef2:	4b06      	ldr	r3, [pc, #24]	; (1000bf0c <platform_interface_send+0x4c>)
1000bef4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000bef6:	0028      	movs	r0, r5
1000bef8:	4b03      	ldr	r3, [pc, #12]	; (1000bf08 <platform_interface_send+0x48>)
1000befa:	4798      	blx	r3
	}
}
1000befc:	bd70      	pop	{r4, r5, r6, pc}
1000befe:	46c0      	nop			; (mov r8, r8)
1000bf00:	10015bf0 	.word	0x10015bf0
1000bf04:	10015c28 	.word	0x10015c28
1000bf08:	1000bb49 	.word	0x1000bb49
1000bf0c:	10011c63 	.word	0x10011c63

1000bf10 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000bf10:	b570      	push	{r4, r5, r6, lr}
1000bf12:	0015      	movs	r5, r2
1000bf14:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000bf16:	020a      	lsls	r2, r1, #8
1000bf18:	4302      	orrs	r2, r0
1000bf1a:	4b0a      	ldr	r3, [pc, #40]	; (1000bf44 <send_plf_int_msg_ind+0x34>)
1000bf1c:	681e      	ldr	r6, [r3, #0]
1000bf1e:	0023      	movs	r3, r4
1000bf20:	2105      	movs	r1, #5
1000bf22:	20a0      	movs	r0, #160	; 0xa0
1000bf24:	00c0      	lsls	r0, r0, #3
1000bf26:	47b0      	blx	r6
1000bf28:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000bf2a:	d00a      	beq.n	1000bf42 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000bf2c:	2c00      	cmp	r4, #0
1000bf2e:	d005      	beq.n	1000bf3c <send_plf_int_msg_ind+0x2c>
1000bf30:	2d00      	cmp	r5, #0
1000bf32:	d003      	beq.n	1000bf3c <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000bf34:	0022      	movs	r2, r4
1000bf36:	0029      	movs	r1, r5
1000bf38:	4b03      	ldr	r3, [pc, #12]	; (1000bf48 <send_plf_int_msg_ind+0x38>)
1000bf3a:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000bf3c:	0030      	movs	r0, r6
1000bf3e:	4b03      	ldr	r3, [pc, #12]	; (1000bf4c <send_plf_int_msg_ind+0x3c>)
1000bf40:	4798      	blx	r3
	}
}
1000bf42:	bd70      	pop	{r4, r5, r6, pc}
1000bf44:	10015c28 	.word	0x10015c28
1000bf48:	10011c63 	.word	0x10011c63
1000bf4c:	1000bb49 	.word	0x1000bb49

1000bf50 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000bf50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf52:	465f      	mov	r7, fp
1000bf54:	4656      	mov	r6, sl
1000bf56:	464d      	mov	r5, r9
1000bf58:	4644      	mov	r4, r8
1000bf5a:	b4f0      	push	{r4, r5, r6, r7}
1000bf5c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000bf5e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000bf60:	2300      	movs	r3, #0
1000bf62:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000bf64:	1ce3      	adds	r3, r4, #3
1000bf66:	d81c      	bhi.n	1000bfa2 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000bf68:	220d      	movs	r2, #13
1000bf6a:	2100      	movs	r1, #0
1000bf6c:	a802      	add	r0, sp, #8
1000bf6e:	4b82      	ldr	r3, [pc, #520]	; (1000c178 <platform_event_wait+0x228>)
1000bf70:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000bf72:	2333      	movs	r3, #51	; 0x33
1000bf74:	aa02      	add	r2, sp, #8
1000bf76:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000bf78:	3b30      	subs	r3, #48	; 0x30
1000bf7a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000bf7c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000bf7e:	3302      	adds	r3, #2
1000bf80:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000bf82:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000bf84:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000bf86:	0a23      	lsrs	r3, r4, #8
1000bf88:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000bf8a:	0c23      	lsrs	r3, r4, #16
1000bf8c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000bf8e:	0e24      	lsrs	r4, r4, #24
1000bf90:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000bf92:	2301      	movs	r3, #1
1000bf94:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000bf96:	210d      	movs	r1, #13
1000bf98:	0010      	movs	r0, r2
1000bf9a:	4b78      	ldr	r3, [pc, #480]	; (1000c17c <platform_event_wait+0x22c>)
1000bf9c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000bf9e:	2301      	movs	r3, #1
1000bfa0:	4699      	mov	r9, r3
1000bfa2:	2400      	movs	r4, #0
1000bfa4:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000bfa6:	4f76      	ldr	r7, [pc, #472]	; (1000c180 <platform_event_wait+0x230>)
1000bfa8:	4e76      	ldr	r6, [pc, #472]	; (1000c184 <platform_event_wait+0x234>)
1000bfaa:	4977      	ldr	r1, [pc, #476]	; (1000c188 <platform_event_wait+0x238>)
1000bfac:	6838      	ldr	r0, [r7, #0]
1000bfae:	6833      	ldr	r3, [r6, #0]
1000bfb0:	4798      	blx	r3
1000bfb2:	2800      	cmp	r0, #0
1000bfb4:	d000      	beq.n	1000bfb8 <platform_event_wait+0x68>
1000bfb6:	e088      	b.n	1000c0ca <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000bfb8:	4b73      	ldr	r3, [pc, #460]	; (1000c188 <platform_event_wait+0x238>)
1000bfba:	681c      	ldr	r4, [r3, #0]
1000bfbc:	88a3      	ldrh	r3, [r4, #4]
1000bfbe:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000bfc0:	23cd      	movs	r3, #205	; 0xcd
1000bfc2:	009b      	lsls	r3, r3, #2
1000bfc4:	459a      	cmp	sl, r3
1000bfc6:	d100      	bne.n	1000bfca <platform_event_wait+0x7a>
1000bfc8:	e0c7      	b.n	1000c15a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000bfca:	8923      	ldrh	r3, [r4, #8]
1000bfcc:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000bfce:	8963      	ldrh	r3, [r4, #10]
1000bfd0:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000bfd2:	464b      	mov	r3, r9
1000bfd4:	2b00      	cmp	r3, #0
1000bfd6:	d011      	beq.n	1000bffc <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000bfd8:	220d      	movs	r2, #13
1000bfda:	2100      	movs	r1, #0
1000bfdc:	a802      	add	r0, sp, #8
1000bfde:	4b66      	ldr	r3, [pc, #408]	; (1000c178 <platform_event_wait+0x228>)
1000bfe0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000bfe2:	2333      	movs	r3, #51	; 0x33
1000bfe4:	aa02      	add	r2, sp, #8
1000bfe6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000bfe8:	3b30      	subs	r3, #48	; 0x30
1000bfea:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000bfec:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000bfee:	3302      	adds	r3, #2
1000bff0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000bff2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000bff4:	210d      	movs	r1, #13
1000bff6:	0010      	movs	r0, r2
1000bff8:	4b60      	ldr	r3, [pc, #384]	; (1000c17c <platform_event_wait+0x22c>)
1000bffa:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000bffc:	23a0      	movs	r3, #160	; 0xa0
1000bffe:	00db      	lsls	r3, r3, #3
1000c000:	459a      	cmp	sl, r3
1000c002:	d121      	bne.n	1000c048 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000c004:	4b61      	ldr	r3, [pc, #388]	; (1000c18c <platform_event_wait+0x23c>)
1000c006:	881b      	ldrh	r3, [r3, #0]
1000c008:	4443      	add	r3, r8
1000c00a:	22a0      	movs	r2, #160	; 0xa0
1000c00c:	0092      	lsls	r2, r2, #2
1000c00e:	4293      	cmp	r3, r2
1000c010:	dd02      	ble.n	1000c018 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000c012:	3a80      	subs	r2, #128	; 0x80
1000c014:	4b5d      	ldr	r3, [pc, #372]	; (1000c18c <platform_event_wait+0x23c>)
1000c016:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000c018:	4b5c      	ldr	r3, [pc, #368]	; (1000c18c <platform_event_wait+0x23c>)
1000c01a:	469a      	mov	sl, r3
1000c01c:	881d      	ldrh	r5, [r3, #0]
1000c01e:	4b5c      	ldr	r3, [pc, #368]	; (1000c190 <platform_event_wait+0x240>)
1000c020:	18ed      	adds	r5, r5, r3
1000c022:	0021      	movs	r1, r4
1000c024:	310c      	adds	r1, #12
1000c026:	4642      	mov	r2, r8
1000c028:	0028      	movs	r0, r5
1000c02a:	4b5a      	ldr	r3, [pc, #360]	; (1000c194 <platform_event_wait+0x244>)
1000c02c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000c02e:	4642      	mov	r2, r8
1000c030:	0029      	movs	r1, r5
1000c032:	4658      	mov	r0, fp
1000c034:	4b58      	ldr	r3, [pc, #352]	; (1000c198 <platform_event_wait+0x248>)
1000c036:	4798      	blx	r3
				plf_event_buff_index += len;
1000c038:	4653      	mov	r3, sl
1000c03a:	881b      	ldrh	r3, [r3, #0]
1000c03c:	4443      	add	r3, r8
1000c03e:	4652      	mov	r2, sl
1000c040:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c042:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000c044:	2502      	movs	r5, #2
1000c046:	e03a      	b.n	1000c0be <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c048:	4b54      	ldr	r3, [pc, #336]	; (1000c19c <platform_event_wait+0x24c>)
1000c04a:	681b      	ldr	r3, [r3, #0]
1000c04c:	2b00      	cmp	r3, #0
1000c04e:	d032      	beq.n	1000c0b6 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000c050:	4b4d      	ldr	r3, [pc, #308]	; (1000c188 <platform_event_wait+0x238>)
1000c052:	681a      	ldr	r2, [r3, #0]
1000c054:	8893      	ldrh	r3, [r2, #4]
1000c056:	21cd      	movs	r1, #205	; 0xcd
1000c058:	0089      	lsls	r1, r1, #2
1000c05a:	428b      	cmp	r3, r1
1000c05c:	d104      	bne.n	1000c068 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000c05e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000c060:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000c062:	2b00      	cmp	r3, #0
1000c064:	d02b      	beq.n	1000c0be <platform_event_wait+0x16e>
1000c066:	e028      	b.n	1000c0ba <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000c068:	4c4d      	ldr	r4, [pc, #308]	; (1000c1a0 <platform_event_wait+0x250>)
1000c06a:	4d49      	ldr	r5, [pc, #292]	; (1000c190 <platform_event_wait+0x240>)
1000c06c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000c06e:	702b      	strb	r3, [r5, #0]
1000c070:	0a1b      	lsrs	r3, r3, #8
1000c072:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000c074:	8910      	ldrh	r0, [r2, #8]
1000c076:	4b4b      	ldr	r3, [pc, #300]	; (1000c1a4 <platform_event_wait+0x254>)
1000c078:	681b      	ldr	r3, [r3, #0]
1000c07a:	4798      	blx	r3
1000c07c:	7128      	strb	r0, [r5, #4]
1000c07e:	0a00      	lsrs	r0, r0, #8
1000c080:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000c082:	6820      	ldr	r0, [r4, #0]
1000c084:	4b40      	ldr	r3, [pc, #256]	; (1000c188 <platform_event_wait+0x238>)
1000c086:	681a      	ldr	r2, [r3, #0]
1000c088:	88d2      	ldrh	r2, [r2, #6]
1000c08a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000c08c:	681d      	ldr	r5, [r3, #0]
1000c08e:	896b      	ldrh	r3, [r5, #10]
1000c090:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000c092:	3008      	adds	r0, #8
1000c094:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000c096:	896a      	ldrh	r2, [r5, #10]
1000c098:	2a00      	cmp	r2, #0
1000c09a:	d003      	beq.n	1000c0a4 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000c09c:	0029      	movs	r1, r5
1000c09e:	310c      	adds	r1, #12
1000c0a0:	4b3c      	ldr	r3, [pc, #240]	; (1000c194 <platform_event_wait+0x244>)
1000c0a2:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000c0a4:	8969      	ldrh	r1, [r5, #10]
1000c0a6:	3108      	adds	r1, #8
1000c0a8:	4b3c      	ldr	r3, [pc, #240]	; (1000c19c <platform_event_wait+0x24c>)
1000c0aa:	681b      	ldr	r3, [r3, #0]
1000c0ac:	4838      	ldr	r0, [pc, #224]	; (1000c190 <platform_event_wait+0x240>)
1000c0ae:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c0b0:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000c0b2:	2503      	movs	r5, #3
1000c0b4:	e003      	b.n	1000c0be <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c0b6:	2400      	movs	r4, #0
1000c0b8:	e001      	b.n	1000c0be <platform_event_wait+0x16e>
1000c0ba:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000c0bc:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000c0be:	4b32      	ldr	r3, [pc, #200]	; (1000c188 <platform_event_wait+0x238>)
1000c0c0:	6818      	ldr	r0, [r3, #0]
1000c0c2:	4b39      	ldr	r3, [pc, #228]	; (1000c1a8 <platform_event_wait+0x258>)
1000c0c4:	681b      	ldr	r3, [r3, #0]
1000c0c6:	4798      	blx	r3
1000c0c8:	e000      	b.n	1000c0cc <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000c0ca:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000c0cc:	2c00      	cmp	r4, #0
1000c0ce:	d000      	beq.n	1000c0d2 <platform_event_wait+0x182>
1000c0d0:	e76b      	b.n	1000bfaa <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000c0d2:	464b      	mov	r3, r9
1000c0d4:	2b00      	cmp	r3, #0
1000c0d6:	d046      	beq.n	1000c166 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000c0d8:	4b29      	ldr	r3, [pc, #164]	; (1000c180 <platform_event_wait+0x230>)
1000c0da:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000c0dc:	2e00      	cmp	r6, #0
1000c0de:	d104      	bne.n	1000c0ea <platform_event_wait+0x19a>
1000c0e0:	2300      	movs	r3, #0
1000c0e2:	6a1c      	ldr	r4, [r3, #32]
1000c0e4:	2c00      	cmp	r4, #0
1000c0e6:	d131      	bne.n	1000c14c <platform_event_wait+0x1fc>
1000c0e8:	e03d      	b.n	1000c166 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000c0ea:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000c0ec:	2314      	movs	r3, #20
1000c0ee:	469c      	mov	ip, r3
1000c0f0:	44b4      	add	ip, r6
1000c0f2:	4663      	mov	r3, ip
1000c0f4:	4660      	mov	r0, ip
1000c0f6:	9300      	str	r3, [sp, #0]
1000c0f8:	4b2c      	ldr	r3, [pc, #176]	; (1000c1ac <platform_event_wait+0x25c>)
1000c0fa:	681b      	ldr	r3, [r3, #0]
1000c0fc:	4798      	blx	r3
	while(NULL != current)
1000c0fe:	2c00      	cmp	r4, #0
1000c100:	d01f      	beq.n	1000c142 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000c102:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c104:	23cd      	movs	r3, #205	; 0xcd
1000c106:	009b      	lsls	r3, r3, #2
1000c108:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000c10a:	4b27      	ldr	r3, [pc, #156]	; (1000c1a8 <platform_event_wait+0x258>)
1000c10c:	469a      	mov	sl, r3
1000c10e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000c110:	6803      	ldr	r3, [r0, #0]
1000c112:	889b      	ldrh	r3, [r3, #4]
1000c114:	4543      	cmp	r3, r8
1000c116:	d110      	bne.n	1000c13a <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000c118:	2f00      	cmp	r7, #0
1000c11a:	d006      	beq.n	1000c12a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000c11c:	6883      	ldr	r3, [r0, #8]
1000c11e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000c120:	4653      	mov	r3, sl
1000c122:	681b      	ldr	r3, [r3, #0]
1000c124:	4798      	blx	r3
				current = prev->pstrNext;
1000c126:	68b8      	ldr	r0, [r7, #8]
1000c128:	e009      	b.n	1000c13e <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000c12a:	6883      	ldr	r3, [r0, #8]
1000c12c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000c12e:	4b1e      	ldr	r3, [pc, #120]	; (1000c1a8 <platform_event_wait+0x258>)
1000c130:	681b      	ldr	r3, [r3, #0]
1000c132:	9301      	str	r3, [sp, #4]
1000c134:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000c136:	6a30      	ldr	r0, [r6, #32]
1000c138:	e001      	b.n	1000c13e <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000c13a:	0007      	movs	r7, r0
1000c13c:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000c13e:	2800      	cmp	r0, #0
1000c140:	d1e6      	bne.n	1000c110 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000c142:	4b1b      	ldr	r3, [pc, #108]	; (1000c1b0 <platform_event_wait+0x260>)
1000c144:	681b      	ldr	r3, [r3, #0]
1000c146:	9800      	ldr	r0, [sp, #0]
1000c148:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000c14a:	e00c      	b.n	1000c166 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000c14c:	2314      	movs	r3, #20
1000c14e:	9300      	str	r3, [sp, #0]
1000c150:	4b16      	ldr	r3, [pc, #88]	; (1000c1ac <platform_event_wait+0x25c>)
1000c152:	681b      	ldr	r3, [r3, #0]
1000c154:	2014      	movs	r0, #20
1000c156:	4798      	blx	r3
1000c158:	e7d3      	b.n	1000c102 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c15a:	4b10      	ldr	r3, [pc, #64]	; (1000c19c <platform_event_wait+0x24c>)
1000c15c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000c15e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000c160:	2b00      	cmp	r3, #0
1000c162:	d0ac      	beq.n	1000c0be <platform_event_wait+0x16e>
1000c164:	e77b      	b.n	1000c05e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000c166:	0028      	movs	r0, r5
1000c168:	b007      	add	sp, #28
1000c16a:	bc3c      	pop	{r2, r3, r4, r5}
1000c16c:	4690      	mov	r8, r2
1000c16e:	4699      	mov	r9, r3
1000c170:	46a2      	mov	sl, r4
1000c172:	46ab      	mov	fp, r5
1000c174:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c176:	46c0      	nop			; (mov r8, r8)
1000c178:	10011c75 	.word	0x10011c75
1000c17c:	1000bec1 	.word	0x1000bec1
1000c180:	10015c2c 	.word	0x10015c2c
1000c184:	10015c14 	.word	0x10015c14
1000c188:	10015bf4 	.word	0x10015bf4
1000c18c:	10016d18 	.word	0x10016d18
1000c190:	10016a80 	.word	0x10016a80
1000c194:	10011c63 	.word	0x10011c63
1000c198:	1000bae1 	.word	0x1000bae1
1000c19c:	10015c20 	.word	0x10015c20
1000c1a0:	10015c1c 	.word	0x10015c1c
1000c1a4:	10015bec 	.word	0x10015bec
1000c1a8:	10015be8 	.word	0x10015be8
1000c1ac:	10015c0c 	.word	0x10015c0c
1000c1b0:	10015bf8 	.word	0x10015bf8

1000c1b4 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000c1b4:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000c1b6:	4b03      	ldr	r3, [pc, #12]	; (1000c1c4 <acquire_sleep_lock+0x10>)
1000c1b8:	681b      	ldr	r3, [r3, #0]
1000c1ba:	2080      	movs	r0, #128	; 0x80
1000c1bc:	0200      	lsls	r0, r0, #8
1000c1be:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000c1c0:	2008      	movs	r0, #8
1000c1c2:	bd10      	pop	{r4, pc}
1000c1c4:	10016a38 	.word	0x10016a38

1000c1c8 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000c1c8:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000c1ca:	4b03      	ldr	r3, [pc, #12]	; (1000c1d8 <release_message_lock+0x10>)
1000c1cc:	681b      	ldr	r3, [r3, #0]
1000c1ce:	2080      	movs	r0, #128	; 0x80
1000c1d0:	01c0      	lsls	r0, r0, #7
1000c1d2:	4798      	blx	r3
	return status;
}
1000c1d4:	2000      	movs	r0, #0
1000c1d6:	bd10      	pop	{r4, pc}
1000c1d8:	10016a44 	.word	0x10016a44

1000c1dc <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000c1dc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000c1de:	4a18      	ldr	r2, [pc, #96]	; (1000c240 <gpio1_combined_isr_handler+0x64>)
1000c1e0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c1e2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c1e4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000c1e6:	2180      	movs	r1, #128	; 0x80
1000c1e8:	0209      	lsls	r1, r1, #8
1000c1ea:	4301      	orrs	r1, r0
1000c1ec:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c1ee:	0010      	movs	r0, r2
1000c1f0:	4d14      	ldr	r5, [pc, #80]	; (1000c244 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c1f2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c1f4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c1f6:	05db      	lsls	r3, r3, #23
1000c1f8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c1fa:	d011      	beq.n	1000c220 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000c1fc:	b2db      	uxtb	r3, r3
1000c1fe:	4259      	negs	r1, r3
1000c200:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000c202:	2b01      	cmp	r3, #1
1000c204:	d006      	beq.n	1000c214 <gpio1_combined_isr_handler+0x38>
1000c206:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000c208:	085b      	lsrs	r3, r3, #1
				index++;
1000c20a:	3101      	adds	r1, #1
1000c20c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000c20e:	2b01      	cmp	r3, #1
1000c210:	d1fa      	bne.n	1000c208 <gpio1_combined_isr_handler+0x2c>
1000c212:	e000      	b.n	1000c216 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c214:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c216:	0023      	movs	r3, r4
1000c218:	408b      	lsls	r3, r1
1000c21a:	b29b      	uxth	r3, r3
1000c21c:	8703      	strh	r3, [r0, #56]	; 0x38
1000c21e:	e003      	b.n	1000c228 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c220:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000c222:	432b      	orrs	r3, r5
1000c224:	b29b      	uxth	r3, r3
1000c226:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000c228:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c22a:	05db      	lsls	r3, r3, #23
1000c22c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c22e:	d1e2      	bne.n	1000c1f6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000c230:	2180      	movs	r1, #128	; 0x80
1000c232:	0049      	lsls	r1, r1, #1
1000c234:	3381      	adds	r3, #129	; 0x81
1000c236:	33ff      	adds	r3, #255	; 0xff
1000c238:	4a03      	ldr	r2, [pc, #12]	; (1000c248 <gpio1_combined_isr_handler+0x6c>)
1000c23a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000c23c:	bd30      	pop	{r4, r5, pc}
1000c23e:	46c0      	nop			; (mov r8, r8)
1000c240:	40011000 	.word	0x40011000
1000c244:	ffff8000 	.word	0xffff8000
1000c248:	e000e100 	.word	0xe000e100

1000c24c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000c24c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000c24e:	4a17      	ldr	r2, [pc, #92]	; (1000c2ac <gpio0_combined_isr_handler+0x60>)
1000c250:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c252:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000c254:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000c256:	2180      	movs	r1, #128	; 0x80
1000c258:	0209      	lsls	r1, r1, #8
1000c25a:	4301      	orrs	r1, r0
1000c25c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c25e:	0010      	movs	r0, r2
1000c260:	4d13      	ldr	r5, [pc, #76]	; (1000c2b0 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c262:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c264:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c266:	05db      	lsls	r3, r3, #23
1000c268:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000c26a:	d011      	beq.n	1000c290 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000c26c:	b2db      	uxtb	r3, r3
1000c26e:	4259      	negs	r1, r3
1000c270:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000c272:	2b01      	cmp	r3, #1
1000c274:	d006      	beq.n	1000c284 <gpio0_combined_isr_handler+0x38>
1000c276:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000c278:	085b      	lsrs	r3, r3, #1
				index++;
1000c27a:	3101      	adds	r1, #1
1000c27c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000c27e:	2b01      	cmp	r3, #1
1000c280:	d1fa      	bne.n	1000c278 <gpio0_combined_isr_handler+0x2c>
1000c282:	e000      	b.n	1000c286 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000c284:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000c286:	0023      	movs	r3, r4
1000c288:	408b      	lsls	r3, r1
1000c28a:	b29b      	uxth	r3, r3
1000c28c:	8703      	strh	r3, [r0, #56]	; 0x38
1000c28e:	e003      	b.n	1000c298 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000c290:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000c292:	432b      	orrs	r3, r5
1000c294:	b29b      	uxth	r3, r3
1000c296:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000c298:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000c29a:	05db      	lsls	r3, r3, #23
1000c29c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000c29e:	d1e2      	bne.n	1000c266 <gpio0_combined_isr_handler+0x1a>
1000c2a0:	2180      	movs	r1, #128	; 0x80
1000c2a2:	3381      	adds	r3, #129	; 0x81
1000c2a4:	33ff      	adds	r3, #255	; 0xff
1000c2a6:	4a03      	ldr	r2, [pc, #12]	; (1000c2b4 <gpio0_combined_isr_handler+0x68>)
1000c2a8:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000c2aa:	bd30      	pop	{r4, r5, pc}
1000c2ac:	40010000 	.word	0x40010000
1000c2b0:	ffff8000 	.word	0xffff8000
1000c2b4:	e000e100 	.word	0xe000e100

1000c2b8 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000c2b8:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000c2ba:	4b0c      	ldr	r3, [pc, #48]	; (1000c2ec <PORT1_COMB_Handler+0x34>)
1000c2bc:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000c2be:	0b5b      	lsrs	r3, r3, #13
1000c2c0:	d010      	beq.n	1000c2e4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000c2c2:	4b0b      	ldr	r3, [pc, #44]	; (1000c2f0 <PORT1_COMB_Handler+0x38>)
1000c2c4:	681b      	ldr	r3, [r3, #0]
1000c2c6:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000c2c8:	4a08      	ldr	r2, [pc, #32]	; (1000c2ec <PORT1_COMB_Handler+0x34>)
1000c2ca:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000c2cc:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000c2ce:	0b5b      	lsrs	r3, r3, #13
1000c2d0:	035b      	lsls	r3, r3, #13
1000c2d2:	430b      	orrs	r3, r1
1000c2d4:	8713      	strh	r3, [r2, #56]	; 0x38
1000c2d6:	2180      	movs	r1, #128	; 0x80
1000c2d8:	0049      	lsls	r1, r1, #1
1000c2da:	23c0      	movs	r3, #192	; 0xc0
1000c2dc:	005b      	lsls	r3, r3, #1
1000c2de:	4a05      	ldr	r2, [pc, #20]	; (1000c2f4 <PORT1_COMB_Handler+0x3c>)
1000c2e0:	50d1      	str	r1, [r2, r3]
1000c2e2:	e001      	b.n	1000c2e8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000c2e4:	4b04      	ldr	r3, [pc, #16]	; (1000c2f8 <PORT1_COMB_Handler+0x40>)
1000c2e6:	4798      	blx	r3
	}
}
1000c2e8:	bd10      	pop	{r4, pc}
1000c2ea:	46c0      	nop			; (mov r8, r8)
1000c2ec:	40011000 	.word	0x40011000
1000c2f0:	10016d04 	.word	0x10016d04
1000c2f4:	e000e100 	.word	0xe000e100
1000c2f8:	1000c1dd 	.word	0x1000c1dd

1000c2fc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000c2fc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000c2fe:	2802      	cmp	r0, #2
1000c300:	d804      	bhi.n	1000c30c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000c302:	0080      	lsls	r0, r0, #2
1000c304:	2200      	movs	r2, #0
1000c306:	4b02      	ldr	r3, [pc, #8]	; (1000c310 <wakeup_int_unregister_callback+0x14>)
1000c308:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000c30a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000c30c:	0018      	movs	r0, r3
1000c30e:	4770      	bx	lr
1000c310:	10016d1c 	.word	0x10016d1c

1000c314 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000c314:	b510      	push	{r4, lr}
1000c316:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000c318:	7803      	ldrb	r3, [r0, #0]
1000c31a:	2b01      	cmp	r3, #1
1000c31c:	d108      	bne.n	1000c330 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000c31e:	4b11      	ldr	r3, [pc, #68]	; (1000c364 <wakeup_active_event_callback+0x50>)
1000c320:	681b      	ldr	r3, [r3, #0]
1000c322:	2b00      	cmp	r3, #0
1000c324:	d000      	beq.n	1000c328 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000c326:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000c328:	23ff      	movs	r3, #255	; 0xff
1000c32a:	6822      	ldr	r2, [r4, #0]
1000c32c:	439a      	bics	r2, r3
1000c32e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000c330:	7863      	ldrb	r3, [r4, #1]
1000c332:	2b01      	cmp	r3, #1
1000c334:	d108      	bne.n	1000c348 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000c336:	4b0b      	ldr	r3, [pc, #44]	; (1000c364 <wakeup_active_event_callback+0x50>)
1000c338:	685b      	ldr	r3, [r3, #4]
1000c33a:	2b00      	cmp	r3, #0
1000c33c:	d000      	beq.n	1000c340 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000c33e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000c340:	4b09      	ldr	r3, [pc, #36]	; (1000c368 <wakeup_active_event_callback+0x54>)
1000c342:	6822      	ldr	r2, [r4, #0]
1000c344:	4013      	ands	r3, r2
1000c346:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000c348:	78a3      	ldrb	r3, [r4, #2]
1000c34a:	2b01      	cmp	r3, #1
1000c34c:	d108      	bne.n	1000c360 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000c34e:	4b05      	ldr	r3, [pc, #20]	; (1000c364 <wakeup_active_event_callback+0x50>)
1000c350:	689b      	ldr	r3, [r3, #8]
1000c352:	2b00      	cmp	r3, #0
1000c354:	d000      	beq.n	1000c358 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000c356:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000c358:	4b04      	ldr	r3, [pc, #16]	; (1000c36c <wakeup_active_event_callback+0x58>)
1000c35a:	6822      	ldr	r2, [r4, #0]
1000c35c:	4013      	ands	r3, r2
1000c35e:	6023      	str	r3, [r4, #0]
	}
}
1000c360:	bd10      	pop	{r4, pc}
1000c362:	46c0      	nop			; (mov r8, r8)
1000c364:	10016d1c 	.word	0x10016d1c
1000c368:	ffff00ff 	.word	0xffff00ff
1000c36c:	ff00ffff 	.word	0xff00ffff

1000c370 <ble_paired_app_event>:
}

/* Callback registered for AT_BLE_PAIR_DONE event from stack */
static at_ble_status_t ble_paired_app_event(void *param)
{
	timer_cb_done = false;
1000c370:	2200      	movs	r2, #0
1000c372:	4b02      	ldr	r3, [pc, #8]	; (1000c37c <ble_paired_app_event+0xc>)
1000c374:	701a      	strb	r2, [r3, #0]
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000c376:	2000      	movs	r0, #0
1000c378:	4770      	bx	lr
1000c37a:	46c0      	nop			; (mov r8, r8)
1000c37c:	10015c41 	.word	0x10015c41

1000c380 <ble_connected_app_event>:
}

static at_ble_status_t ble_connected_app_event(void *param)
{
	at_ble_connected_t *connected = (at_ble_connected_t *)param;
	bat_connection_handle = connected->handle;
1000c380:	8902      	ldrh	r2, [r0, #8]
1000c382:	4b02      	ldr	r3, [pc, #8]	; (1000c38c <ble_connected_app_event+0xc>)
1000c384:	801a      	strh	r2, [r3, #0]
	ble_paired_app_event(param);
	#else
	ALL_UNUSED(param);
	#endif
	return AT_BLE_SUCCESS;
}
1000c386:	2000      	movs	r0, #0
1000c388:	4770      	bx	lr
1000c38a:	46c0      	nop			; (mov r8, r8)
1000c38c:	10016d28 	.word	0x10016d28

1000c390 <ble_notification_confirmed_app_event>:

/* Callback registered for AT_BLE_NOTIFICATION_CONFIRMED event from stack */
static at_ble_status_t ble_notification_confirmed_app_event(void *param)
{
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)param;
	if(!notification_status->status)
1000c390:	78c3      	ldrb	r3, [r0, #3]
1000c392:	2b00      	cmp	r3, #0
1000c394:	d102      	bne.n	1000c39c <ble_notification_confirmed_app_event+0xc>
	{
		flag = true;
1000c396:	2201      	movs	r2, #1
1000c398:	4b01      	ldr	r3, [pc, #4]	; (1000c3a0 <ble_notification_confirmed_app_event+0x10>)
1000c39a:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("sending notification to the peer success");
	}
	return AT_BLE_SUCCESS;
}
1000c39c:	2000      	movs	r0, #0
1000c39e:	4770      	bx	lr
1000c3a0:	100141b4 	.word	0x100141b4

1000c3a4 <app_reset_handler>:
/** @brief energy expended handler called by profile to reset the energy values
 *
 */

static void app_reset_handler(void)
{
1000c3a4:	b510      	push	{r4, lr}
	energy_expended_val = 0;
1000c3a6:	2200      	movs	r2, #0
1000c3a8:	4b04      	ldr	r3, [pc, #16]	; (1000c3bc <app_reset_handler+0x18>)
1000c3aa:	801a      	strh	r2, [r3, #0]
	DBG_LOG("Energy Expended is made '0'on user Reset");
1000c3ac:	4804      	ldr	r0, [pc, #16]	; (1000c3c0 <app_reset_handler+0x1c>)
1000c3ae:	4b05      	ldr	r3, [pc, #20]	; (1000c3c4 <app_reset_handler+0x20>)
1000c3b0:	4798      	blx	r3
1000c3b2:	4805      	ldr	r0, [pc, #20]	; (1000c3c8 <app_reset_handler+0x24>)
1000c3b4:	4b05      	ldr	r3, [pc, #20]	; (1000c3cc <app_reset_handler+0x28>)
1000c3b6:	4798      	blx	r3
}
1000c3b8:	bd10      	pop	{r4, pc}
1000c3ba:	46c0      	nop			; (mov r8, r8)
1000c3bc:	100141ae 	.word	0x100141ae
1000c3c0:	10013098 	.word	0x10013098
1000c3c4:	10011da5 	.word	0x10011da5
1000c3c8:	10013bec 	.word	0x10013bec
1000c3cc:	10011c85 	.word	0x10011c85

1000c3d0 <app_htpt_cfg_indntf_ind_handler>:
	}
	
}

static at_ble_status_t  app_htpt_cfg_indntf_ind_handler(void *params)
{
1000c3d0:	b510      	push	{r4, lr}
	at_ble_htpt_cfg_indntf_ind_t htpt_cfg_indntf_ind_params;
	memcpy((uint8_t *)&htpt_cfg_indntf_ind_params, params, sizeof(at_ble_htpt_cfg_indntf_ind_t));
	if (htpt_cfg_indntf_ind_params.ntf_ind_cfg == 1) {
1000c3d2:	7843      	ldrb	r3, [r0, #1]
1000c3d4:	2b01      	cmp	r3, #1
1000c3d6:	d106      	bne.n	1000c3e6 <app_htpt_cfg_indntf_ind_handler+0x16>
		printf("Started HTP Temperature Notification");
1000c3d8:	4807      	ldr	r0, [pc, #28]	; (1000c3f8 <app_htpt_cfg_indntf_ind_handler+0x28>)
1000c3da:	4b08      	ldr	r3, [pc, #32]	; (1000c3fc <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000c3dc:	4798      	blx	r3
		Temp_Notification_Flag = true;
1000c3de:	2201      	movs	r2, #1
1000c3e0:	4b07      	ldr	r3, [pc, #28]	; (1000c400 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000c3e2:	701a      	strb	r2, [r3, #0]
1000c3e4:	e005      	b.n	1000c3f2 <app_htpt_cfg_indntf_ind_handler+0x22>
	}
	else {
		printf("HTP Temperature Notification Stopped");
1000c3e6:	4807      	ldr	r0, [pc, #28]	; (1000c404 <app_htpt_cfg_indntf_ind_handler+0x34>)
1000c3e8:	4b04      	ldr	r3, [pc, #16]	; (1000c3fc <app_htpt_cfg_indntf_ind_handler+0x2c>)
1000c3ea:	4798      	blx	r3
		Temp_Notification_Flag = false;
1000c3ec:	2200      	movs	r2, #0
1000c3ee:	4b04      	ldr	r3, [pc, #16]	; (1000c400 <app_htpt_cfg_indntf_ind_handler+0x30>)
1000c3f0:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
1000c3f2:	2000      	movs	r0, #0
1000c3f4:	bd10      	pop	{r4, pc}
1000c3f6:	46c0      	nop			; (mov r8, r8)
1000c3f8:	10013c18 	.word	0x10013c18
1000c3fc:	10011c85 	.word	0x10011c85
1000c400:	10015c3e 	.word	0x10015c3e
1000c404:	10013c40 	.word	0x10013c40

1000c408 <ble_char_changed_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_CHARACTERISTIC_CHANGED event from stack */
static at_ble_status_t ble_char_changed_app_event(void *param)
{
1000c408:	b510      	push	{r4, lr}
1000c40a:	0002      	movs	r2, r0
	if(bas_service_handler.serv_chars.client_config_handle == char_handle->char_handle)
	{
		device_listening = char_handle->char_new_value[1]<<8| char_handle->char_new_value[0];
		
	}
	return bat_char_changed_event(char_handle->conn_handle,&bas_service_handler, char_handle, &flag);
1000c40c:	7800      	ldrb	r0, [r0, #0]
1000c40e:	4b02      	ldr	r3, [pc, #8]	; (1000c418 <ble_char_changed_app_event+0x10>)
1000c410:	4902      	ldr	r1, [pc, #8]	; (1000c41c <ble_char_changed_app_event+0x14>)
1000c412:	4c03      	ldr	r4, [pc, #12]	; (1000c420 <ble_char_changed_app_event+0x18>)
1000c414:	47a0      	blx	r4
}
1000c416:	bd10      	pop	{r4, pc}
1000c418:	100141b4 	.word	0x100141b4
1000c41c:	10016d7c 	.word	0x10016d7c
1000c420:	10009fb1 	.word	0x10009fb1

1000c424 <app_notification_handler>:
	NULL,
	NULL
};

static void app_notification_handler(uint8_t notification_enable)
{
1000c424:	b510      	push	{r4, lr}
	if (notification_enable == true) {
1000c426:	2801      	cmp	r0, #1
1000c428:	d109      	bne.n	1000c43e <app_notification_handler+0x1a>
		DBG_LOG("Notification Enabled");
1000c42a:	480b      	ldr	r0, [pc, #44]	; (1000c458 <app_notification_handler+0x34>)
1000c42c:	4b0b      	ldr	r3, [pc, #44]	; (1000c45c <app_notification_handler+0x38>)
1000c42e:	4798      	blx	r3
1000c430:	480b      	ldr	r0, [pc, #44]	; (1000c460 <app_notification_handler+0x3c>)
1000c432:	4b0c      	ldr	r3, [pc, #48]	; (1000c464 <app_notification_handler+0x40>)
1000c434:	4798      	blx	r3
		hw_timer_start(NOTIFICATION_INTERVAL);
1000c436:	2001      	movs	r0, #1
1000c438:	4b0b      	ldr	r3, [pc, #44]	; (1000c468 <app_notification_handler+0x44>)
1000c43a:	4798      	blx	r3
1000c43c:	e00a      	b.n	1000c454 <app_notification_handler+0x30>
	} else {
		hw_timer_stop();
1000c43e:	4b0b      	ldr	r3, [pc, #44]	; (1000c46c <app_notification_handler+0x48>)
1000c440:	4798      	blx	r3
		notification_flag = false;
1000c442:	2200      	movs	r2, #0
1000c444:	4b0a      	ldr	r3, [pc, #40]	; (1000c470 <app_notification_handler+0x4c>)
1000c446:	701a      	strb	r2, [r3, #0]
		DBG_LOG("Notification Disabled");
1000c448:	4803      	ldr	r0, [pc, #12]	; (1000c458 <app_notification_handler+0x34>)
1000c44a:	4b04      	ldr	r3, [pc, #16]	; (1000c45c <app_notification_handler+0x38>)
1000c44c:	4798      	blx	r3
1000c44e:	4809      	ldr	r0, [pc, #36]	; (1000c474 <app_notification_handler+0x50>)
1000c450:	4b04      	ldr	r3, [pc, #16]	; (1000c464 <app_notification_handler+0x40>)
1000c452:	4798      	blx	r3
	}
}
1000c454:	bd10      	pop	{r4, pc}
1000c456:	46c0      	nop			; (mov r8, r8)
1000c458:	10013098 	.word	0x10013098
1000c45c:	10011da5 	.word	0x10011da5
1000c460:	10013c68 	.word	0x10013c68
1000c464:	10011c85 	.word	0x10011c85
1000c468:	1000b80d 	.word	0x1000b80d
1000c46c:	1000b839 	.word	0x1000b839
1000c470:	10015c38 	.word	0x10015c38
1000c474:	10013c80 	.word	0x10013c80

1000c478 <timer_callback_handler>:

/**
 * \brief Timer callback handler called on timer expiry
 */
static void timer_callback_handler(void)
{
1000c478:	b510      	push	{r4, lr}
	if (second_counter == START_OF_FIRST_ACTIVITY) {
1000c47a:	4b49      	ldr	r3, [pc, #292]	; (1000c5a0 <timer_callback_handler+0x128>)
1000c47c:	7818      	ldrb	r0, [r3, #0]
1000c47e:	2800      	cmp	r0, #0
1000c480:	d10c      	bne.n	1000c49c <timer_callback_handler+0x24>
		time_operator = 1;
1000c482:	2301      	movs	r3, #1
1000c484:	4a47      	ldr	r2, [pc, #284]	; (1000c5a4 <timer_callback_handler+0x12c>)
1000c486:	7013      	strb	r3, [r2, #0]
	} else if (second_counter == END_OF_LAST_ACTIVITY) {
		time_operator = -1;
	}
	second_counter += (time_operator);
1000c488:	4a45      	ldr	r2, [pc, #276]	; (1000c5a0 <timer_callback_handler+0x128>)
1000c48a:	7013      	strb	r3, [r2, #0]
 *	 Based on the time different heart rate values are chosen to indicate
 *	 different activity.
 */
static void heart_rate_value_init(void)
{
	activity = second_counter / 40;
1000c48c:	2200      	movs	r2, #0
1000c48e:	4b46      	ldr	r3, [pc, #280]	; (1000c5a8 <timer_callback_handler+0x130>)
1000c490:	701a      	strb	r2, [r3, #0]

	if (activity != prev_activity) {		
1000c492:	4b46      	ldr	r3, [pc, #280]	; (1000c5ac <timer_callback_handler+0x134>)
1000c494:	781b      	ldrb	r3, [r3, #0]
1000c496:	2b00      	cmp	r3, #0
1000c498:	d065      	beq.n	1000c566 <timer_callback_handler+0xee>
1000c49a:	e025      	b.n	1000c4e8 <timer_callback_handler+0x70>
 */
static void timer_callback_handler(void)
{
	if (second_counter == START_OF_FIRST_ACTIVITY) {
		time_operator = 1;
	} else if (second_counter == END_OF_LAST_ACTIVITY) {
1000c49c:	28c8      	cmp	r0, #200	; 0xc8
1000c49e:	d10d      	bne.n	1000c4bc <timer_callback_handler+0x44>
		time_operator = -1;
1000c4a0:	22ff      	movs	r2, #255	; 0xff
1000c4a2:	4b40      	ldr	r3, [pc, #256]	; (1000c5a4 <timer_callback_handler+0x12c>)
1000c4a4:	701a      	strb	r2, [r3, #0]
	}
	second_counter += (time_operator);
1000c4a6:	3a38      	subs	r2, #56	; 0x38
1000c4a8:	4b3d      	ldr	r3, [pc, #244]	; (1000c5a0 <timer_callback_handler+0x128>)
1000c4aa:	701a      	strb	r2, [r3, #0]
 *	 Based on the time different heart rate values are chosen to indicate
 *	 different activity.
 */
static void heart_rate_value_init(void)
{
	activity = second_counter / 40;
1000c4ac:	3ac3      	subs	r2, #195	; 0xc3
1000c4ae:	4b3e      	ldr	r3, [pc, #248]	; (1000c5a8 <timer_callback_handler+0x130>)
1000c4b0:	701a      	strb	r2, [r3, #0]

	if (activity != prev_activity) {		
1000c4b2:	4b3e      	ldr	r3, [pc, #248]	; (1000c5ac <timer_callback_handler+0x134>)
1000c4b4:	781b      	ldrb	r3, [r3, #0]
1000c4b6:	2b04      	cmp	r3, #4
1000c4b8:	d147      	bne.n	1000c54a <timer_callback_handler+0xd2>
1000c4ba:	e054      	b.n	1000c566 <timer_callback_handler+0xee>
	if (second_counter == START_OF_FIRST_ACTIVITY) {
		time_operator = 1;
	} else if (second_counter == END_OF_LAST_ACTIVITY) {
		time_operator = -1;
	}
	second_counter += (time_operator);
1000c4bc:	4b39      	ldr	r3, [pc, #228]	; (1000c5a4 <timer_callback_handler+0x12c>)
1000c4be:	781b      	ldrb	r3, [r3, #0]
1000c4c0:	18c0      	adds	r0, r0, r3
1000c4c2:	b2c0      	uxtb	r0, r0
1000c4c4:	4b36      	ldr	r3, [pc, #216]	; (1000c5a0 <timer_callback_handler+0x128>)
1000c4c6:	7018      	strb	r0, [r3, #0]
 *	 Based on the time different heart rate values are chosen to indicate
 *	 different activity.
 */
static void heart_rate_value_init(void)
{
	activity = second_counter / 40;
1000c4c8:	2128      	movs	r1, #40	; 0x28
1000c4ca:	4b39      	ldr	r3, [pc, #228]	; (1000c5b0 <timer_callback_handler+0x138>)
1000c4cc:	4798      	blx	r3
1000c4ce:	b2c0      	uxtb	r0, r0
1000c4d0:	4b35      	ldr	r3, [pc, #212]	; (1000c5a8 <timer_callback_handler+0x130>)
1000c4d2:	7018      	strb	r0, [r3, #0]

	if (activity != prev_activity) {		
1000c4d4:	4b35      	ldr	r3, [pc, #212]	; (1000c5ac <timer_callback_handler+0x134>)
1000c4d6:	781b      	ldrb	r3, [r3, #0]
1000c4d8:	4283      	cmp	r3, r0
1000c4da:	d044      	beq.n	1000c566 <timer_callback_handler+0xee>
		switch(activity) {
1000c4dc:	2804      	cmp	r0, #4
1000c4de:	d840      	bhi.n	1000c562 <timer_callback_handler+0xea>
1000c4e0:	0083      	lsls	r3, r0, #2
1000c4e2:	4a34      	ldr	r2, [pc, #208]	; (1000c5b4 <timer_callback_handler+0x13c>)
1000c4e4:	58d3      	ldr	r3, [r2, r3]
1000c4e6:	469f      	mov	pc, r3
		case ACTIVITY_NORMAL:
			hr_min_value = HEART_RATE_MIN_NORM;
1000c4e8:	2332      	movs	r3, #50	; 0x32
1000c4ea:	4a33      	ldr	r2, [pc, #204]	; (1000c5b8 <timer_callback_handler+0x140>)
1000c4ec:	7013      	strb	r3, [r2, #0]
			hr_max_value = HEART_RATE_MAX_NORM;
1000c4ee:	2146      	movs	r1, #70	; 0x46
1000c4f0:	4a32      	ldr	r2, [pc, #200]	; (1000c5bc <timer_callback_handler+0x144>)
1000c4f2:	7011      	strb	r1, [r2, #0]
			heart_rate_value = hr_min_value;
1000c4f4:	4a32      	ldr	r2, [pc, #200]	; (1000c5c0 <timer_callback_handler+0x148>)
1000c4f6:	8013      	strh	r3, [r2, #0]
			energy_incrementor = ENERGY_EXP_NORMAL;
1000c4f8:	2203      	movs	r2, #3
1000c4fa:	4b32      	ldr	r3, [pc, #200]	; (1000c5c4 <timer_callback_handler+0x14c>)
1000c4fc:	801a      	strh	r2, [r3, #0]
1000c4fe:	2000      	movs	r0, #0
1000c500:	e02f      	b.n	1000c562 <timer_callback_handler+0xea>
			break;
			
		case ACTIVITY_WALKING:
			hr_min_value = HEART_RATE_MIN_WALKING;
1000c502:	2347      	movs	r3, #71	; 0x47
1000c504:	4a2c      	ldr	r2, [pc, #176]	; (1000c5b8 <timer_callback_handler+0x140>)
1000c506:	7013      	strb	r3, [r2, #0]
			hr_max_value = HEART_RATE_MAX_WALKING;
1000c508:	215a      	movs	r1, #90	; 0x5a
1000c50a:	4a2c      	ldr	r2, [pc, #176]	; (1000c5bc <timer_callback_handler+0x144>)
1000c50c:	7011      	strb	r1, [r2, #0]
			heart_rate_value = hr_min_value;
1000c50e:	4a2c      	ldr	r2, [pc, #176]	; (1000c5c0 <timer_callback_handler+0x148>)
1000c510:	8013      	strh	r3, [r2, #0]
			energy_incrementor = ENERGY_EXP_WALKING;
1000c512:	220a      	movs	r2, #10
1000c514:	4b2b      	ldr	r3, [pc, #172]	; (1000c5c4 <timer_callback_handler+0x14c>)
1000c516:	801a      	strh	r2, [r3, #0]
1000c518:	e023      	b.n	1000c562 <timer_callback_handler+0xea>
			break;
			
		case ACTIVITY_BRISK_WALKING:
			hr_min_value = HEART_RATE_MIN_BRISK_WALK;
1000c51a:	235b      	movs	r3, #91	; 0x5b
1000c51c:	4a26      	ldr	r2, [pc, #152]	; (1000c5b8 <timer_callback_handler+0x140>)
1000c51e:	7013      	strb	r3, [r2, #0]
			hr_max_value = HEART_RATE_MAX_BRISK_WALK;
1000c520:	216e      	movs	r1, #110	; 0x6e
1000c522:	4a26      	ldr	r2, [pc, #152]	; (1000c5bc <timer_callback_handler+0x144>)
1000c524:	7011      	strb	r1, [r2, #0]
			heart_rate_value = hr_min_value;
1000c526:	4a26      	ldr	r2, [pc, #152]	; (1000c5c0 <timer_callback_handler+0x148>)
1000c528:	8013      	strh	r3, [r2, #0]
			energy_incrementor = ENERGY_EXP_BRISK_WALKING;
1000c52a:	2214      	movs	r2, #20
1000c52c:	4b25      	ldr	r3, [pc, #148]	; (1000c5c4 <timer_callback_handler+0x14c>)
1000c52e:	801a      	strh	r2, [r3, #0]
1000c530:	e017      	b.n	1000c562 <timer_callback_handler+0xea>
			break;
			
		case ACTIVITY_RUNNING:
			hr_min_value = HEART_RATE_MIN_RUNNING;
1000c532:	236f      	movs	r3, #111	; 0x6f
1000c534:	4a20      	ldr	r2, [pc, #128]	; (1000c5b8 <timer_callback_handler+0x140>)
1000c536:	7013      	strb	r3, [r2, #0]
			hr_max_value = HEART_RATE_MAX_RUNNING;
1000c538:	2182      	movs	r1, #130	; 0x82
1000c53a:	4a20      	ldr	r2, [pc, #128]	; (1000c5bc <timer_callback_handler+0x144>)
1000c53c:	7011      	strb	r1, [r2, #0]
			heart_rate_value = hr_min_value;
1000c53e:	4a20      	ldr	r2, [pc, #128]	; (1000c5c0 <timer_callback_handler+0x148>)
1000c540:	8013      	strh	r3, [r2, #0]
			energy_incrementor = ENERGY_EXP_RUNNING;
1000c542:	2228      	movs	r2, #40	; 0x28
1000c544:	4b1f      	ldr	r3, [pc, #124]	; (1000c5c4 <timer_callback_handler+0x14c>)
1000c546:	801a      	strh	r2, [r3, #0]
1000c548:	e00b      	b.n	1000c562 <timer_callback_handler+0xea>
			break;
			
		case ACTIVITY_FAST_RUNNING:
			hr_min_value = HEART_RATE_MIN_FAST_RUNNING;
1000c54a:	2382      	movs	r3, #130	; 0x82
1000c54c:	4a1a      	ldr	r2, [pc, #104]	; (1000c5b8 <timer_callback_handler+0x140>)
1000c54e:	7013      	strb	r3, [r2, #0]
			hr_max_value = HEART_RATE_MAX_FAST_RUNNING;
1000c550:	2197      	movs	r1, #151	; 0x97
1000c552:	4a1a      	ldr	r2, [pc, #104]	; (1000c5bc <timer_callback_handler+0x144>)
1000c554:	7011      	strb	r1, [r2, #0]
			heart_rate_value = hr_min_value;
1000c556:	4a1a      	ldr	r2, [pc, #104]	; (1000c5c0 <timer_callback_handler+0x148>)
1000c558:	8013      	strh	r3, [r2, #0]
			energy_incrementor = ENERGY_EXP_FAST_RUNNING;
1000c55a:	223c      	movs	r2, #60	; 0x3c
1000c55c:	4b19      	ldr	r3, [pc, #100]	; (1000c5c4 <timer_callback_handler+0x14c>)
1000c55e:	801a      	strh	r2, [r3, #0]
1000c560:	2004      	movs	r0, #4
			break;
		}
		prev_activity = activity;
1000c562:	4b12      	ldr	r3, [pc, #72]	; (1000c5ac <timer_callback_handler+0x134>)
1000c564:	7018      	strb	r0, [r3, #0]
	}
	
	if (heart_rate_value == hr_max_value) {
1000c566:	4b16      	ldr	r3, [pc, #88]	; (1000c5c0 <timer_callback_handler+0x148>)
1000c568:	881b      	ldrh	r3, [r3, #0]
1000c56a:	4a14      	ldr	r2, [pc, #80]	; (1000c5bc <timer_callback_handler+0x144>)
1000c56c:	7812      	ldrb	r2, [r2, #0]
1000c56e:	429a      	cmp	r2, r3
1000c570:	d103      	bne.n	1000c57a <timer_callback_handler+0x102>
		inc_changer = -1;
1000c572:	22ff      	movs	r2, #255	; 0xff
1000c574:	4b14      	ldr	r3, [pc, #80]	; (1000c5c8 <timer_callback_handler+0x150>)
1000c576:	701a      	strb	r2, [r3, #0]
1000c578:	e006      	b.n	1000c588 <timer_callback_handler+0x110>
	} else if (heart_rate_value == hr_min_value) {
1000c57a:	4a0f      	ldr	r2, [pc, #60]	; (1000c5b8 <timer_callback_handler+0x140>)
1000c57c:	7812      	ldrb	r2, [r2, #0]
1000c57e:	429a      	cmp	r2, r3
1000c580:	d102      	bne.n	1000c588 <timer_callback_handler+0x110>
		inc_changer = 1;
1000c582:	2201      	movs	r2, #1
1000c584:	4b10      	ldr	r3, [pc, #64]	; (1000c5c8 <timer_callback_handler+0x150>)
1000c586:	701a      	strb	r2, [r3, #0]
	} else if (second_counter == END_OF_LAST_ACTIVITY) {
		time_operator = -1;
	}
	second_counter += (time_operator);
	heart_rate_value_init();
	notification_flag = true;
1000c588:	2301      	movs	r3, #1
1000c58a:	4a10      	ldr	r2, [pc, #64]	; (1000c5cc <timer_callback_handler+0x154>)
1000c58c:	7013      	strb	r3, [r2, #0]
	Timer_Flag = true;
1000c58e:	4a10      	ldr	r2, [pc, #64]	; (1000c5d0 <timer_callback_handler+0x158>)
1000c590:	7013      	strb	r3, [r2, #0]
	
	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000c592:	2300      	movs	r3, #0
1000c594:	2200      	movs	r2, #0
1000c596:	2101      	movs	r1, #1
1000c598:	2041      	movs	r0, #65	; 0x41
1000c59a:	4c0e      	ldr	r4, [pc, #56]	; (1000c5d4 <timer_callback_handler+0x15c>)
1000c59c:	47a0      	blx	r4
}
1000c59e:	bd10      	pop	{r4, pc}
1000c5a0:	10015c3d 	.word	0x10015c3d
1000c5a4:	10016dcc 	.word	0x10016dcc
1000c5a8:	10015c40 	.word	0x10015c40
1000c5ac:	100141ad 	.word	0x100141ad
1000c5b0:	100103dd 	.word	0x100103dd
1000c5b4:	10013b2c 	.word	0x10013b2c
1000c5b8:	10016d48 	.word	0x10016d48
1000c5bc:	10016dcd 	.word	0x10016dcd
1000c5c0:	100141aa 	.word	0x100141aa
1000c5c4:	10016d40 	.word	0x10016d40
1000c5c8:	100141b5 	.word	0x100141b5
1000c5cc:	10015c38 	.word	0x10015c38
1000c5d0:	10015c37 	.word	0x10015c37
1000c5d4:	1000bf11 	.word	0x1000bf11

1000c5d8 <button_cb>:

/**
 * @brief Button Press Callback
 */
static void button_cb(void)
{
1000c5d8:	b510      	push	{r4, lr}
	if (app_state) {
1000c5da:	4b0e      	ldr	r3, [pc, #56]	; (1000c614 <button_cb+0x3c>)
1000c5dc:	781b      	ldrb	r3, [r3, #0]
1000c5de:	2b00      	cmp	r3, #0
1000c5e0:	d003      	beq.n	1000c5ea <button_cb+0x12>
		DBG_LOG_DEV("Going to disconnect ");
		disconnect_flag = true;
1000c5e2:	2201      	movs	r2, #1
1000c5e4:	4b0c      	ldr	r3, [pc, #48]	; (1000c618 <button_cb+0x40>)
1000c5e6:	701a      	strb	r2, [r3, #0]
1000c5e8:	e00c      	b.n	1000c604 <button_cb+0x2c>
	} else if (app_state == false && advertisement_flag == false) {
1000c5ea:	4b0a      	ldr	r3, [pc, #40]	; (1000c614 <button_cb+0x3c>)
1000c5ec:	781b      	ldrb	r3, [r3, #0]
1000c5ee:	2b00      	cmp	r3, #0
1000c5f0:	d108      	bne.n	1000c604 <button_cb+0x2c>
1000c5f2:	4b0a      	ldr	r3, [pc, #40]	; (1000c61c <button_cb+0x44>)
1000c5f4:	781b      	ldrb	r3, [r3, #0]
1000c5f6:	2b00      	cmp	r3, #0
1000c5f8:	d104      	bne.n	1000c604 <button_cb+0x2c>
		/* To check if the device is in advertisement */
		DBG_LOG_DEV("Going to advertisement");
		start_advertisement = true;
1000c5fa:	3301      	adds	r3, #1
1000c5fc:	4a08      	ldr	r2, [pc, #32]	; (1000c620 <button_cb+0x48>)
1000c5fe:	7013      	strb	r3, [r2, #0]
		advertisement_flag = true;	
1000c600:	4a06      	ldr	r2, [pc, #24]	; (1000c61c <button_cb+0x44>)
1000c602:	7013      	strb	r3, [r2, #0]
	}
	send_plf_int_msg_ind(USER_TIMER_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000c604:	2300      	movs	r3, #0
1000c606:	2200      	movs	r2, #0
1000c608:	2101      	movs	r1, #1
1000c60a:	2041      	movs	r0, #65	; 0x41
1000c60c:	4c05      	ldr	r4, [pc, #20]	; (1000c624 <button_cb+0x4c>)
1000c60e:	47a0      	blx	r4
}
1000c610:	bd10      	pop	{r4, pc}
1000c612:	46c0      	nop			; (mov r8, r8)
1000c614:	10015c3c 	.word	0x10015c3c
1000c618:	10015c3f 	.word	0x10015c3f
1000c61c:	10015c39 	.word	0x10015c39
1000c620:	10015c36 	.word	0x10015c36
1000c624:	1000bf11 	.word	0x1000bf11

1000c628 <ble_paired_cb>:
	}
}

/* Callback registered for AT_BLE_CONNECTED event*/
static at_ble_status_t ble_paired_cb (void *param)
{
1000c628:	b570      	push	{r4, r5, r6, lr}
1000c62a:	0005      	movs	r5, r0
	at_ble_pair_done_t *pair_params = param;
	printf("\nAssignment 3.2: Application paired ");
1000c62c:	4809      	ldr	r0, [pc, #36]	; (1000c654 <ble_paired_cb+0x2c>)
1000c62e:	4c0a      	ldr	r4, [pc, #40]	; (1000c658 <ble_paired_cb+0x30>)
1000c630:	47a0      	blx	r4
	/* Enable the HTP Profile */
	printf("\nAssignment 4.1: enable health temperature service ");
1000c632:	480a      	ldr	r0, [pc, #40]	; (1000c65c <ble_paired_cb+0x34>)
1000c634:	47a0      	blx	r4
	status = at_ble_htpt_enable(pair_params->handle,
1000c636:	8868      	ldrh	r0, [r5, #2]
1000c638:	2101      	movs	r1, #1
1000c63a:	4b09      	ldr	r3, [pc, #36]	; (1000c660 <ble_paired_cb+0x38>)
1000c63c:	4798      	blx	r3
1000c63e:	4b09      	ldr	r3, [pc, #36]	; (1000c664 <ble_paired_cb+0x3c>)
1000c640:	7018      	strb	r0, [r3, #0]
	HTPT_CFG_STABLE_MEAS_IND);
	if(status != AT_BLE_SUCCESS){
1000c642:	781b      	ldrb	r3, [r3, #0]
1000c644:	2b00      	cmp	r3, #0
1000c646:	d003      	beq.n	1000c650 <ble_paired_cb+0x28>
		printf("*** Failure in HTP Profile Enable");
1000c648:	4807      	ldr	r0, [pc, #28]	; (1000c668 <ble_paired_cb+0x40>)
1000c64a:	4b03      	ldr	r3, [pc, #12]	; (1000c658 <ble_paired_cb+0x30>)
1000c64c:	4798      	blx	r3
1000c64e:	e7fe      	b.n	1000c64e <ble_paired_cb+0x26>
		while(1);
	}
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000c650:	2000      	movs	r0, #0
1000c652:	bd70      	pop	{r4, r5, r6, pc}
1000c654:	10013c98 	.word	0x10013c98
1000c658:	10011c85 	.word	0x10011c85
1000c65c:	10013cc0 	.word	0x10013cc0
1000c660:	1000e799 	.word	0x1000e799
1000c664:	10016dce 	.word	0x10016dce
1000c668:	10013cf4 	.word	0x10013cf4

1000c66c <battery_service_advertise>:
uint8_t i = 0;
/////////////////////////////////////////////////////////////////////


static at_ble_status_t battery_service_advertise(void)
{
1000c66c:	b510      	push	{r4, lr}
1000c66e:	b084      	sub	sp, #16
 status = AT_BLE_FAILURE;
1000c670:	4c1c      	ldr	r4, [pc, #112]	; (1000c6e4 <battery_service_advertise+0x78>)
1000c672:	23e2      	movs	r3, #226	; 0xe2
1000c674:	7023      	strb	r3, [r4, #0]
	
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS)
1000c676:	4b1c      	ldr	r3, [pc, #112]	; (1000c6e8 <battery_service_advertise+0x7c>)
1000c678:	4798      	blx	r3
1000c67a:	7020      	strb	r0, [r4, #0]
1000c67c:	2800      	cmp	r0, #0
1000c67e:	d00b      	beq.n	1000c698 <battery_service_advertise+0x2c>
	{
		DBG_LOG("advertisement data set failed reason :%d",status);
1000c680:	481a      	ldr	r0, [pc, #104]	; (1000c6ec <battery_service_advertise+0x80>)
1000c682:	4b1b      	ldr	r3, [pc, #108]	; (1000c6f0 <battery_service_advertise+0x84>)
1000c684:	4798      	blx	r3
1000c686:	4c17      	ldr	r4, [pc, #92]	; (1000c6e4 <battery_service_advertise+0x78>)
1000c688:	7821      	ldrb	r1, [r4, #0]
1000c68a:	b2c9      	uxtb	r1, r1
1000c68c:	4819      	ldr	r0, [pc, #100]	; (1000c6f4 <battery_service_advertise+0x88>)
1000c68e:	4b1a      	ldr	r3, [pc, #104]	; (1000c6f8 <battery_service_advertise+0x8c>)
1000c690:	4798      	blx	r3
		return status;
1000c692:	7824      	ldrb	r4, [r4, #0]
1000c694:	b2e4      	uxtb	r4, r4
1000c696:	e022      	b.n	1000c6de <battery_service_advertise+0x72>
	}
	
	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_BAS_FAST_ADV, APP_BAS_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000c698:	2300      	movs	r3, #0
1000c69a:	9302      	str	r3, [sp, #8]
1000c69c:	4b17      	ldr	r3, [pc, #92]	; (1000c6fc <battery_service_advertise+0x90>)
1000c69e:	9301      	str	r3, [sp, #4]
1000c6a0:	23c8      	movs	r3, #200	; 0xc8
1000c6a2:	00db      	lsls	r3, r3, #3
1000c6a4:	9300      	str	r3, [sp, #0]
1000c6a6:	2300      	movs	r3, #0
1000c6a8:	2200      	movs	r2, #0
1000c6aa:	2101      	movs	r1, #1
1000c6ac:	2000      	movs	r0, #0
1000c6ae:	4c14      	ldr	r4, [pc, #80]	; (1000c700 <battery_service_advertise+0x94>)
1000c6b0:	47a0      	blx	r4
1000c6b2:	1e04      	subs	r4, r0, #0
1000c6b4:	4b0b      	ldr	r3, [pc, #44]	; (1000c6e4 <battery_service_advertise+0x78>)
1000c6b6:	7018      	strb	r0, [r3, #0]
1000c6b8:	d106      	bne.n	1000c6c8 <battery_service_advertise+0x5c>
	{
		DBG_LOG("BLE Started Adv");
1000c6ba:	480c      	ldr	r0, [pc, #48]	; (1000c6ec <battery_service_advertise+0x80>)
1000c6bc:	4b0c      	ldr	r3, [pc, #48]	; (1000c6f0 <battery_service_advertise+0x84>)
1000c6be:	4798      	blx	r3
1000c6c0:	4810      	ldr	r0, [pc, #64]	; (1000c704 <battery_service_advertise+0x98>)
1000c6c2:	4b0d      	ldr	r3, [pc, #52]	; (1000c6f8 <battery_service_advertise+0x8c>)
1000c6c4:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000c6c6:	e00a      	b.n	1000c6de <battery_service_advertise+0x72>
	}
	else
	{
		DBG_LOG("BLE Adv start Failed reason :%d",status);
1000c6c8:	4808      	ldr	r0, [pc, #32]	; (1000c6ec <battery_service_advertise+0x80>)
1000c6ca:	4b09      	ldr	r3, [pc, #36]	; (1000c6f0 <battery_service_advertise+0x84>)
1000c6cc:	4798      	blx	r3
1000c6ce:	4c05      	ldr	r4, [pc, #20]	; (1000c6e4 <battery_service_advertise+0x78>)
1000c6d0:	7821      	ldrb	r1, [r4, #0]
1000c6d2:	b2c9      	uxtb	r1, r1
1000c6d4:	480c      	ldr	r0, [pc, #48]	; (1000c708 <battery_service_advertise+0x9c>)
1000c6d6:	4b08      	ldr	r3, [pc, #32]	; (1000c6f8 <battery_service_advertise+0x8c>)
1000c6d8:	4798      	blx	r3
	}
	return status;
1000c6da:	7824      	ldrb	r4, [r4, #0]
1000c6dc:	b2e4      	uxtb	r4, r4
}
1000c6de:	0020      	movs	r0, r4
1000c6e0:	b004      	add	sp, #16
1000c6e2:	bd10      	pop	{r4, pc}
1000c6e4:	10016dce 	.word	0x10016dce
1000c6e8:	1000b165 	.word	0x1000b165
1000c6ec:	10013098 	.word	0x10013098
1000c6f0:	10011da5 	.word	0x10011da5
1000c6f4:	10013d18 	.word	0x10013d18
1000c6f8:	10011c85 	.word	0x10011c85
1000c6fc:	0000028f 	.word	0x0000028f
1000c700:	1000d98d 	.word	0x1000d98d
1000c704:	10013d44 	.word	0x10013d44
1000c708:	10013d54 	.word	0x10013d54

1000c70c <ble_disconnected_app_event>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event from stack */
static at_ble_status_t ble_disconnected_app_event(void *param)
{
1000c70c:	b510      	push	{r4, lr}
	timer_cb_done = false;
1000c70e:	2200      	movs	r2, #0
1000c710:	4b04      	ldr	r3, [pc, #16]	; (1000c724 <ble_disconnected_app_event+0x18>)
1000c712:	701a      	strb	r2, [r3, #0]
	flag = true;
1000c714:	3201      	adds	r2, #1
1000c716:	4b04      	ldr	r3, [pc, #16]	; (1000c728 <ble_disconnected_app_event+0x1c>)
1000c718:	701a      	strb	r2, [r3, #0]
	
	
	battery_service_advertise();
1000c71a:	4b04      	ldr	r3, [pc, #16]	; (1000c72c <ble_disconnected_app_event+0x20>)
1000c71c:	4798      	blx	r3
	ALL_UNUSED(param);
	return AT_BLE_SUCCESS;
}
1000c71e:	2000      	movs	r0, #0
1000c720:	bd10      	pop	{r4, pc}
1000c722:	46c0      	nop			; (mov r8, r8)
1000c724:	10015c41 	.word	0x10015c41
1000c728:	100141b4 	.word	0x100141b4
1000c72c:	1000c66d 	.word	0x1000c66d

1000c730 <ble_advertise>:
	}
}


static void ble_advertise (void)
{
1000c730:	b510      	push	{r4, lr}
1000c732:	b084      	sub	sp, #16
	printf("\nAssignment 2.1 : Start Advertising");
1000c734:	4815      	ldr	r0, [pc, #84]	; (1000c78c <ble_advertise+0x5c>)
1000c736:	4b16      	ldr	r3, [pc, #88]	; (1000c790 <ble_advertise+0x60>)
1000c738:	4798      	blx	r3
	status = ble_advertisement_data_set();
1000c73a:	4b16      	ldr	r3, [pc, #88]	; (1000c794 <ble_advertise+0x64>)
1000c73c:	4798      	blx	r3
1000c73e:	4b16      	ldr	r3, [pc, #88]	; (1000c798 <ble_advertise+0x68>)
1000c740:	7018      	strb	r0, [r3, #0]
	if(status != AT_BLE_SUCCESS)
1000c742:	781b      	ldrb	r3, [r3, #0]
1000c744:	2b00      	cmp	r3, #0
1000c746:	d006      	beq.n	1000c756 <ble_advertise+0x26>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000c748:	4b13      	ldr	r3, [pc, #76]	; (1000c798 <ble_advertise+0x68>)
1000c74a:	7819      	ldrb	r1, [r3, #0]
1000c74c:	b2c9      	uxtb	r1, r1
1000c74e:	4813      	ldr	r0, [pc, #76]	; (1000c79c <ble_advertise+0x6c>)
1000c750:	4b0f      	ldr	r3, [pc, #60]	; (1000c790 <ble_advertise+0x60>)
1000c752:	4798      	blx	r3
1000c754:	e7fe      	b.n	1000c754 <ble_advertise+0x24>
		while(1);
	}
	/* Start of advertisement */
	status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED,\
1000c756:	2300      	movs	r3, #0
1000c758:	9302      	str	r3, [sp, #8]
1000c75a:	4b11      	ldr	r3, [pc, #68]	; (1000c7a0 <ble_advertise+0x70>)
1000c75c:	9301      	str	r3, [sp, #4]
1000c75e:	335a      	adds	r3, #90	; 0x5a
1000c760:	33ff      	adds	r3, #255	; 0xff
1000c762:	9300      	str	r3, [sp, #0]
1000c764:	2300      	movs	r3, #0
1000c766:	2200      	movs	r2, #0
1000c768:	2101      	movs	r1, #1
1000c76a:	2000      	movs	r0, #0
1000c76c:	4c0d      	ldr	r4, [pc, #52]	; (1000c7a4 <ble_advertise+0x74>)
1000c76e:	47a0      	blx	r4
1000c770:	4b09      	ldr	r3, [pc, #36]	; (1000c798 <ble_advertise+0x68>)
1000c772:	7018      	strb	r0, [r3, #0]
	NULL,\
	AT_BLE_ADV_FP_ANY,\
	1000,\
	655,\
	0);
	if(status != AT_BLE_SUCCESS)
1000c774:	781b      	ldrb	r3, [r3, #0]
1000c776:	2b00      	cmp	r3, #0
1000c778:	d006      	beq.n	1000c788 <ble_advertise+0x58>
	{
		printf("\n\r## Advertisement data set failed : error %x",status);
1000c77a:	4b07      	ldr	r3, [pc, #28]	; (1000c798 <ble_advertise+0x68>)
1000c77c:	7819      	ldrb	r1, [r3, #0]
1000c77e:	b2c9      	uxtb	r1, r1
1000c780:	4806      	ldr	r0, [pc, #24]	; (1000c79c <ble_advertise+0x6c>)
1000c782:	4b03      	ldr	r3, [pc, #12]	; (1000c790 <ble_advertise+0x60>)
1000c784:	4798      	blx	r3
1000c786:	e7fe      	b.n	1000c786 <ble_advertise+0x56>
		while(1);
	}
}
1000c788:	b004      	add	sp, #16
1000c78a:	bd10      	pop	{r4, pc}
1000c78c:	10013d74 	.word	0x10013d74
1000c790:	10011c85 	.word	0x10011c85
1000c794:	1000b165 	.word	0x1000b165
1000c798:	10016dce 	.word	0x10016dce
1000c79c:	10013d98 	.word	0x10013d98
1000c7a0:	0000028f 	.word	0x0000028f
1000c7a4:	1000d98d 	.word	0x1000d98d

1000c7a8 <ble_disconnected_cb>:
	return AT_BLE_SUCCESS;
}

/* Callback registered for AT_BLE_DISCONNECTED event */
static at_ble_status_t ble_disconnected_cb (void *param)
{
1000c7a8:	b510      	push	{r4, lr}
	printf("\nAssignment 3.2: Application disconnected ");
1000c7aa:	4803      	ldr	r0, [pc, #12]	; (1000c7b8 <ble_disconnected_cb+0x10>)
1000c7ac:	4b03      	ldr	r3, [pc, #12]	; (1000c7bc <ble_disconnected_cb+0x14>)
1000c7ae:	4798      	blx	r3
	ble_advertise();
1000c7b0:	4b03      	ldr	r3, [pc, #12]	; (1000c7c0 <ble_disconnected_cb+0x18>)
1000c7b2:	4798      	blx	r3
	ALL_UNUSED(param);return AT_BLE_SUCCESS;
}
1000c7b4:	2000      	movs	r0, #0
1000c7b6:	bd10      	pop	{r4, pc}
1000c7b8:	10013dc8 	.word	0x10013dc8
1000c7bc:	10011c85 	.word	0x10011c85
1000c7c0:	1000c731 	.word	0x1000c731

1000c7c4 <transfer_done_rx>:
 */

//////////////////////////////////////////////////////////////////////////////////

static void transfer_done_rx(struct dma_resource* const resource )
{
1000c7c4:	b510      	push	{r4, lr}
// 			gpio_pin_toggle_output_level(LED_0_PIN);
// 			state=true;
// 			}
// 		}
	
	dma_start_transfer_job(&uart_dma_resource_rx);
1000c7c6:	4802      	ldr	r0, [pc, #8]	; (1000c7d0 <transfer_done_rx+0xc>)
1000c7c8:	4b02      	ldr	r3, [pc, #8]	; (1000c7d4 <transfer_done_rx+0x10>)
1000c7ca:	4798      	blx	r3
	
}
1000c7cc:	bd10      	pop	{r4, pc}
1000c7ce:	46c0      	nop			; (mov r8, r8)
1000c7d0:	10016d4c 	.word	0x10016d4c
1000c7d4:	100082d1 	.word	0x100082d1

1000c7d8 <main>:
		configure_dma_callback();
		dma_start_transfer_job(&uart_dma_resource_rx);
}

int main (void)
{
1000c7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c7da:	b091      	sub	sp, #68	; 0x44
	
		app_state = 0;  /*!< flag to represent the application state*/
1000c7dc:	2300      	movs	r3, #0
1000c7de:	2500      	movs	r5, #0
1000c7e0:	4ad1      	ldr	r2, [pc, #836]	; (1000cb28 <main+0x350>)
1000c7e2:	7013      	strb	r3, [r2, #0]
		start_advertisement = 0; /*!< flag to start advertisement*/
1000c7e4:	4ad1      	ldr	r2, [pc, #836]	; (1000cb2c <main+0x354>)
1000c7e6:	7013      	strb	r3, [r2, #0]
		advertisement_flag = false; /*!< to check if the device is in advertisement*/
1000c7e8:	4ad1      	ldr	r2, [pc, #836]	; (1000cb30 <main+0x358>)
1000c7ea:	7013      	strb	r3, [r2, #0]
		notification_flag = false; /*!< flag to start notification*/
1000c7ec:	4ad1      	ldr	r2, [pc, #836]	; (1000cb34 <main+0x35c>)
1000c7ee:	7013      	strb	r3, [r2, #0]
		disconnect_flag = false;        /*!< flag for disconnection*/
1000c7f0:	4ad1      	ldr	r2, [pc, #836]	; (1000cb38 <main+0x360>)
1000c7f2:	7013      	strb	r3, [r2, #0]
		hr_initializer_flag = 1; /*!< flag for initialization of hr for each category*/
1000c7f4:	2601      	movs	r6, #1
1000c7f6:	4ad1      	ldr	r2, [pc, #836]	; (1000cb3c <main+0x364>)
1000c7f8:	7016      	strb	r6, [r2, #0]
		second_counter = 0;     /*!< second_counter to count the time*/
1000c7fa:	4ad1      	ldr	r2, [pc, #836]	; (1000cb40 <main+0x368>)
1000c7fc:	7013      	strb	r3, [r2, #0]
		energy_expended_val = ENERGY_EXP_NORMAL; /*!< to count the energy expended*/
1000c7fe:	2103      	movs	r1, #3
1000c800:	4ad0      	ldr	r2, [pc, #832]	; (1000cb44 <main+0x36c>)
1000c802:	8011      	strh	r1, [r2, #0]
		energy_incrementor = 0;
1000c804:	4ad0      	ldr	r2, [pc, #832]	; (1000cb48 <main+0x370>)
1000c806:	8013      	strh	r3, [r2, #0]
		heart_rate_value = HEART_RATE_MIN_NORM; /*!< to count the heart rate value*/
1000c808:	2232      	movs	r2, #50	; 0x32
1000c80a:	4bd0      	ldr	r3, [pc, #832]	; (1000cb4c <main+0x374>)
1000c80c:	801a      	strh	r2, [r3, #0]
		rr_interval_value = RR_VALUE_MIN; /*!< to count the rr interval value*/
1000c80e:	3232      	adds	r2, #50	; 0x32
1000c810:	4bcf      	ldr	r3, [pc, #828]	; (1000cb50 <main+0x378>)
1000c812:	801a      	strh	r2, [r3, #0]
		activity = 0; /*!< activiy which will determine the */
1000c814:	4bcf      	ldr	r3, [pc, #828]	; (1000cb54 <main+0x37c>)
1000c816:	2200      	movs	r2, #0
1000c818:	701a      	strb	r2, [r3, #0]
		prev_activity = DEFAULT_ACTIVITY; /*!< previous activity */
1000c81a:	22ff      	movs	r2, #255	; 0xff
1000c81c:	4bce      	ldr	r3, [pc, #824]	; (1000cb58 <main+0x380>)
1000c81e:	701a      	strb	r2, [r3, #0]
		inc_changer     = 1; /*!< increment operator to change heart rate */
1000c820:	4bce      	ldr	r3, [pc, #824]	; (1000cb5c <main+0x384>)
1000c822:	701e      	strb	r6, [r3, #0]
		time_operator = 0; /*!< operator to change the seconds */
1000c824:	4bce      	ldr	r3, [pc, #824]	; (1000cb60 <main+0x388>)
1000c826:	701d      	strb	r5, [r3, #0]
		hr_min_value = 0; /*!<the minimum heart rate value*/
1000c828:	4bce      	ldr	r3, [pc, #824]	; (1000cb64 <main+0x38c>)
1000c82a:	701d      	strb	r5, [r3, #0]
		hr_max_value = 0; /*!<the maximum heart rate value*/
1000c82c:	4bce      	ldr	r3, [pc, #824]	; (1000cb68 <main+0x390>)
1000c82e:	701d      	strb	r5, [r3, #0]

		app_exec = true;
1000c830:	4bce      	ldr	r3, [pc, #824]	; (1000cb6c <main+0x394>)
1000c832:	701e      	strb	r6, [r3, #0]
		//at_ble_status_t status;
		uint8_t battery_level = BATTERY_MIN_LEVEL;
1000c834:	233f      	movs	r3, #63	; 0x3f
1000c836:	446b      	add	r3, sp
1000c838:	701d      	strb	r5, [r3, #0]
	platform_driver_init();
1000c83a:	4bcd      	ldr	r3, [pc, #820]	; (1000cb70 <main+0x398>)
1000c83c:	4798      	blx	r3
	acquire_sleep_lock();
1000c83e:	4bcd      	ldr	r3, [pc, #820]	; (1000cb74 <main+0x39c>)
1000c840:	4798      	blx	r3
	
		gpio_init();
1000c842:	4bcd      	ldr	r3, [pc, #820]	; (1000cb78 <main+0x3a0>)
1000c844:	4798      	blx	r3
		button_init();
1000c846:	4bcd      	ldr	r3, [pc, #820]	; (1000cb7c <main+0x3a4>)
1000c848:	4798      	blx	r3
		button_register_callback(button_cb);
1000c84a:	48cd      	ldr	r0, [pc, #820]	; (1000cb80 <main+0x3a8>)
1000c84c:	4bcd      	ldr	r3, [pc, #820]	; (1000cb84 <main+0x3ac>)
1000c84e:	4798      	blx	r3

static void configure_gpio_pins(void)
 {
			struct gpio_config config_gpio_pin;

			gpio_get_config_defaults(&config_gpio_pin);
1000c850:	ac05      	add	r4, sp, #20
1000c852:	0020      	movs	r0, r4
1000c854:	4bcc      	ldr	r3, [pc, #816]	; (1000cb88 <main+0x3b0>)
1000c856:	4798      	blx	r3

			config_gpio_pin.direction  = GPIO_PIN_DIR_INPUT;
1000c858:	7025      	strb	r5, [r4, #0]
			config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
1000c85a:	7065      	strb	r5, [r4, #1]

			gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin);
1000c85c:	0021      	movs	r1, r4
1000c85e:	2017      	movs	r0, #23
1000c860:	4dca      	ldr	r5, [pc, #808]	; (1000cb8c <main+0x3b4>)
1000c862:	47a8      	blx	r5

			config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000c864:	7026      	strb	r6, [r4, #0]

			gpio_pin_set_config(LED_0_PIN, &config_gpio_pin);
1000c866:	0021      	movs	r1, r4
1000c868:	2016      	movs	r0, #22
1000c86a:	47a8      	blx	r5
			gpio_pin_toggle_output_level(LED_0_PIN);
1000c86c:	2016      	movs	r0, #22
1000c86e:	4bc8      	ldr	r3, [pc, #800]	; (1000cb90 <main+0x3b8>)
1000c870:	4798      	blx	r3
		
		//led_init();
	
	configure_gpio_pins();
	/* Initialize serial console */
	serial_console_init();
1000c872:	4bc8      	ldr	r3, [pc, #800]	; (1000cb94 <main+0x3bc>)
1000c874:	4798      	blx	r3
	/* Initialize the hardware timer */
	hw_timer_init();
1000c876:	4bc8      	ldr	r3, [pc, #800]	; (1000cb98 <main+0x3c0>)
1000c878:	4798      	blx	r3
	/* Register the callback */
	hw_timer_register_callback(timer_callback_handler);
1000c87a:	48c8      	ldr	r0, [pc, #800]	; (1000cb9c <main+0x3c4>)
1000c87c:	4bc8      	ldr	r3, [pc, #800]	; (1000cba0 <main+0x3c8>)
1000c87e:	4798      	blx	r3
	/* Start timer */
	hw_timer_start(1);
1000c880:	2001      	movs	r0, #1
1000c882:	4bc8      	ldr	r3, [pc, #800]	; (1000cba4 <main+0x3cc>)
1000c884:	4798      	blx	r3
	//configure_gpio_pins();
	//enable_uart();
	/* initialize the BLE chip and Set the Device Address */
	ble_device_init(NULL);
1000c886:	2000      	movs	r0, #0
1000c888:	4bc7      	ldr	r3, [pc, #796]	; (1000cba8 <main+0x3d0>)
1000c88a:	4798      	blx	r3
	
	hr_sensor_init(NULL);
1000c88c:	2000      	movs	r0, #0
1000c88e:	4bc7      	ldr	r3, [pc, #796]	; (1000cbac <main+0x3d4>)
1000c890:	4798      	blx	r3
	NULL
};


static void htp_init (void){
	printf("\nAssignment 4.1: Init Health temperature service ");
1000c892:	48c7      	ldr	r0, [pc, #796]	; (1000cbb0 <main+0x3d8>)
1000c894:	4bc7      	ldr	r3, [pc, #796]	; (1000cbb4 <main+0x3dc>)
1000c896:	4798      	blx	r3
	/* Create htp service in GATT database*/
	status = at_ble_htpt_create_db(
1000c898:	4bc7      	ldr	r3, [pc, #796]	; (1000cbb8 <main+0x3e0>)
1000c89a:	9302      	str	r3, [sp, #8]
1000c89c:	230c      	movs	r3, #12
1000c89e:	9301      	str	r3, [sp, #4]
1000c8a0:	9600      	str	r6, [sp, #0]
1000c8a2:	3312      	adds	r3, #18
1000c8a4:	2201      	movs	r2, #1
1000c8a6:	2101      	movs	r1, #1
1000c8a8:	2001      	movs	r0, #1
1000c8aa:	4cc4      	ldr	r4, [pc, #784]	; (1000cbbc <main+0x3e4>)
1000c8ac:	47a0      	blx	r4
1000c8ae:	4bc4      	ldr	r3, [pc, #784]	; (1000cbc0 <main+0x3e8>)
1000c8b0:	7018      	strb	r0, [r3, #0]
	1,
	30,
	1,
	HTPT_AUTH,
	&htpt_conn_handle);
	if (status != AT_BLE_SUCCESS){
1000c8b2:	781b      	ldrb	r3, [r3, #0]
1000c8b4:	2b00      	cmp	r3, #0
1000c8b6:	d003      	beq.n	1000c8c0 <main+0xe8>
		printf("HTP Data Base creation failed");
1000c8b8:	48c2      	ldr	r0, [pc, #776]	; (1000cbc4 <main+0x3ec>)
1000c8ba:	4bbe      	ldr	r3, [pc, #760]	; (1000cbb4 <main+0x3dc>)
1000c8bc:	4798      	blx	r3
1000c8be:	e7fe      	b.n	1000c8be <main+0xe6>
};

static void register_ble_callbacks (void)
{
	/* Register GAP Callbacks */
	printf("\nAssignment 3.2: Register bluetooth events callbacks");
1000c8c0:	48c1      	ldr	r0, [pc, #772]	; (1000cbc8 <main+0x3f0>)
1000c8c2:	4bbc      	ldr	r3, [pc, #752]	; (1000cbb4 <main+0x3dc>)
1000c8c4:	4798      	blx	r3
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000c8c6:	4ac1      	ldr	r2, [pc, #772]	; (1000cbcc <main+0x3f4>)
1000c8c8:	2100      	movs	r1, #0
1000c8ca:	2000      	movs	r0, #0
1000c8cc:	4bc0      	ldr	r3, [pc, #768]	; (1000cbd0 <main+0x3f8>)
1000c8ce:	4798      	blx	r3
1000c8d0:	4bbb      	ldr	r3, [pc, #748]	; (1000cbc0 <main+0x3e8>)
1000c8d2:	7018      	strb	r0, [r3, #0]
	BLE_GAP_EVENT_TYPE,app_gap_cb);
	if (status != true) {
1000c8d4:	781b      	ldrb	r3, [r3, #0]
1000c8d6:	2b01      	cmp	r3, #1
1000c8d8:	d002      	beq.n	1000c8e0 <main+0x108>
		printf("\n##Error when Registering  SAMB11 gap callbacks");
1000c8da:	48be      	ldr	r0, [pc, #760]	; (1000cbd4 <main+0x3fc>)
1000c8dc:	4bb5      	ldr	r3, [pc, #724]	; (1000cbb4 <main+0x3dc>)
1000c8de:	4798      	blx	r3
	}
	status = ble_mgr_events_callback_handler(REGISTER_CALL_BACK,\
1000c8e0:	4abd      	ldr	r2, [pc, #756]	; (1000cbd8 <main+0x400>)
1000c8e2:	2104      	movs	r1, #4
1000c8e4:	2000      	movs	r0, #0
1000c8e6:	4bba      	ldr	r3, [pc, #744]	; (1000cbd0 <main+0x3f8>)
1000c8e8:	4798      	blx	r3
1000c8ea:	4bb5      	ldr	r3, [pc, #724]	; (1000cbc0 <main+0x3e8>)
1000c8ec:	7018      	strb	r0, [r3, #0]
	BLE_GATT_HTPT_EVENT_TYPE,app_htpt_handle);
	if (status != true) {
1000c8ee:	781b      	ldrb	r3, [r3, #0]
1000c8f0:	2b01      	cmp	r3, #1
1000c8f2:	d002      	beq.n	1000c8fa <main+0x122>
		printf("\n##Error when Registering  SAMB11 htpt callbacks");
1000c8f4:	48b9      	ldr	r0, [pc, #740]	; (1000cbdc <main+0x404>)
1000c8f6:	4baf      	ldr	r3, [pc, #700]	; (1000cbb4 <main+0x3dc>)
1000c8f8:	4798      	blx	r3
	hr_sensor_init(NULL);
	htp_init();
	/* Register Bluetooth events Callbacks */
	register_ble_callbacks();
		/* Registering the app_notification_handler with the profile */
		register_hr_notification_handler(app_notification_handler);
1000c8fa:	48b9      	ldr	r0, [pc, #740]	; (1000cbe0 <main+0x408>)
1000c8fc:	4bb9      	ldr	r3, [pc, #740]	; (1000cbe4 <main+0x40c>)
1000c8fe:	4798      	blx	r3

		/* Registering the app_reset_handler with the profile */
		register_hr_reset_handler(app_reset_handler);
1000c900:	48b9      	ldr	r0, [pc, #740]	; (1000cbe8 <main+0x410>)
1000c902:	4bba      	ldr	r3, [pc, #744]	; (1000cbec <main+0x414>)
1000c904:	4798      	blx	r3
		
		bat_init_service(&bas_service_handler, &battery_level);
1000c906:	4cba      	ldr	r4, [pc, #744]	; (1000cbf0 <main+0x418>)
1000c908:	213f      	movs	r1, #63	; 0x3f
1000c90a:	4469      	add	r1, sp
1000c90c:	0020      	movs	r0, r4
1000c90e:	4bb9      	ldr	r3, [pc, #740]	; (1000cbf4 <main+0x41c>)
1000c910:	4798      	blx	r3
		
		/* Define the primary service in the GATT server database */
		if((status = bat_primary_service_define(&bas_service_handler))!= AT_BLE_SUCCESS)
1000c912:	0020      	movs	r0, r4
1000c914:	4bb8      	ldr	r3, [pc, #736]	; (1000cbf8 <main+0x420>)
1000c916:	4798      	blx	r3
1000c918:	4ba9      	ldr	r3, [pc, #676]	; (1000cbc0 <main+0x3e8>)
1000c91a:	7018      	strb	r0, [r3, #0]
1000c91c:	2800      	cmp	r0, #0
1000c91e:	d008      	beq.n	1000c932 <main+0x15a>
		{
			DBG_LOG("defining battery service failed %d", status);
1000c920:	48b6      	ldr	r0, [pc, #728]	; (1000cbfc <main+0x424>)
1000c922:	4bb7      	ldr	r3, [pc, #732]	; (1000cc00 <main+0x428>)
1000c924:	4798      	blx	r3
1000c926:	4ba6      	ldr	r3, [pc, #664]	; (1000cbc0 <main+0x3e8>)
1000c928:	7819      	ldrb	r1, [r3, #0]
1000c92a:	b2c9      	uxtb	r1, r1
1000c92c:	48b5      	ldr	r0, [pc, #724]	; (1000cc04 <main+0x42c>)
1000c92e:	4ba1      	ldr	r3, [pc, #644]	; (1000cbb4 <main+0x3dc>)
1000c930:	4798      	blx	r3
		}
	
	battery_service_advertise();
1000c932:	4bb5      	ldr	r3, [pc, #724]	; (1000cc08 <main+0x430>)
1000c934:	4798      	blx	r3

    ble_advertise();
1000c936:	4bb5      	ldr	r3, [pc, #724]	; (1000cc0c <main+0x434>)
1000c938:	4798      	blx	r3
	
		ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c93a:	4ab5      	ldr	r2, [pc, #724]	; (1000cc10 <main+0x438>)
1000c93c:	2100      	movs	r1, #0
1000c93e:	2000      	movs	r0, #0
1000c940:	4ca3      	ldr	r4, [pc, #652]	; (1000cbd0 <main+0x3f8>)
1000c942:	47a0      	blx	r4
		BLE_GAP_EVENT_TYPE,
		battery_app_gap_cb);
		
		/* Register callbacks for gatt server related events */
		ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c944:	4ab3      	ldr	r2, [pc, #716]	; (1000cc14 <main+0x43c>)
1000c946:	2102      	movs	r1, #2
1000c948:	2000      	movs	r0, #0
1000c94a:	47a0      	blx	r4
			gpio_pin_toggle_output_level(LED_0_PIN);
 }

static void enable_uart(void)
{
		system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000c94c:	2100      	movs	r1, #0
1000c94e:	2000      	movs	r0, #0
1000c950:	4bb1      	ldr	r3, [pc, #708]	; (1000cc18 <main+0x440>)
1000c952:	4798      	blx	r3

static void configure_usart(void)
{
	struct uart_config config_uart;

	uart_get_config_defaults(&config_uart);
1000c954:	a805      	add	r0, sp, #20
1000c956:	4bb1      	ldr	r3, [pc, #708]	; (1000cc1c <main+0x444>)
1000c958:	4798      	blx	r3
	
	config_uart.baud_rate = 9600;
1000c95a:	2396      	movs	r3, #150	; 0x96
1000c95c:	019b      	lsls	r3, r3, #6
1000c95e:	9305      	str	r3, [sp, #20]
config_uart.pin_number_pad[0] = EDBG_CDC_SERCOM_PIN_PAD0;
1000c960:	2302      	movs	r3, #2
1000c962:	9307      	str	r3, [sp, #28]
config_uart.pin_number_pad[1] = EDBG_CDC_SERCOM_PIN_PAD1;
1000c964:	2203      	movs	r2, #3
1000c966:	9208      	str	r2, [sp, #32]
config_uart.pin_number_pad[2] = EDBG_CDC_SERCOM_PIN_PAD2;
1000c968:	3201      	adds	r2, #1
1000c96a:	9209      	str	r2, [sp, #36]	; 0x24
config_uart.pin_number_pad[3] = EDBG_CDC_SERCOM_PIN_PAD3;
1000c96c:	3201      	adds	r2, #1
1000c96e:	920a      	str	r2, [sp, #40]	; 0x28
config_uart.pinmux_sel_pad[0] = EDBG_CDC_SERCOM_MUX_PAD0;
1000c970:	930b      	str	r3, [sp, #44]	; 0x2c
config_uart.pinmux_sel_pad[1] = EDBG_CDC_SERCOM_MUX_PAD1;
1000c972:	930c      	str	r3, [sp, #48]	; 0x30
config_uart.pinmux_sel_pad[2] = EDBG_CDC_SERCOM_MUX_PAD2;
1000c974:	930d      	str	r3, [sp, #52]	; 0x34
config_uart.pinmux_sel_pad[3] = EDBG_CDC_SERCOM_MUX_PAD3;
1000c976:	930e      	str	r3, [sp, #56]	; 0x38


	while (uart_init(&uart_instance,
1000c978:	4da9      	ldr	r5, [pc, #676]	; (1000cc20 <main+0x448>)
1000c97a:	4caa      	ldr	r4, [pc, #680]	; (1000cc24 <main+0x44c>)
1000c97c:	aa05      	add	r2, sp, #20
1000c97e:	49aa      	ldr	r1, [pc, #680]	; (1000cc28 <main+0x450>)
1000c980:	0028      	movs	r0, r5
1000c982:	47a0      	blx	r4
1000c984:	2800      	cmp	r0, #0
1000c986:	d1f9      	bne.n	1000c97c <main+0x1a4>
	EDBG_CDC_MODULE, &config_uart) != STATUS_OK) {
	}

	//uart_enable_transmit_dma(&uart_instance);
	uart_enable_receive_dma(&uart_instance);
1000c988:	4fa5      	ldr	r7, [pc, #660]	; (1000cc20 <main+0x448>)
1000c98a:	0038      	movs	r0, r7
1000c98c:	4ba7      	ldr	r3, [pc, #668]	; (1000cc2c <main+0x454>)
1000c98e:	4798      	blx	r3

static void configure_dma_resource_rx(struct dma_resource *resource)
{
	struct dma_resource_config config;

	dma_get_config_defaults(&config);
1000c990:	ad05      	add	r5, sp, #20
1000c992:	0028      	movs	r0, r5
1000c994:	4ba6      	ldr	r3, [pc, #664]	; (1000cc30 <main+0x458>)
1000c996:	4798      	blx	r3

	config.src.periph = UART0RX_DMA_PERIPHERAL;
1000c998:	2301      	movs	r3, #1
1000c99a:	2601      	movs	r6, #1
1000c99c:	70eb      	strb	r3, [r5, #3]
	config.src.enable_inc_addr = false;
1000c99e:	2200      	movs	r2, #0
1000c9a0:	70aa      	strb	r2, [r5, #2]
	config.src.periph_delay = 1;
1000c9a2:	712b      	strb	r3, [r5, #4]

	dma_allocate(resource, &config);
1000c9a4:	4ca3      	ldr	r4, [pc, #652]	; (1000cc34 <main+0x45c>)
1000c9a6:	0029      	movs	r1, r5
1000c9a8:	0020      	movs	r0, r4
1000c9aa:	4ba3      	ldr	r3, [pc, #652]	; (1000cc38 <main+0x460>)
1000c9ac:	4798      	blx	r3
	/* Default write buffer size is set to 0 */
	config->write_start_addr = 0;
	/* Set beat size to one byte */
	config->buffer_size = 1;
	/* Enable transferred interrupt */
	config->cmd.set_interrupt = 1;
1000c9ae:	49a3      	ldr	r1, [pc, #652]	; (1000cc3c <main+0x464>)
1000c9b0:	7b0b      	ldrb	r3, [r1, #12]
1000c9b2:	4333      	orrs	r3, r6
1000c9b4:	001a      	movs	r2, r3
	/* Channel stops when buffer done */
	config->cmd.last = 1;
1000c9b6:	2302      	movs	r3, #2
1000c9b8:	4313      	orrs	r3, r2
1000c9ba:	730b      	strb	r3, [r1, #12]
	/* Set next command to 0 */
	config->cmd.next_addr = 0;
1000c9bc:	2303      	movs	r3, #3
1000c9be:	68ca      	ldr	r2, [r1, #12]
1000c9c0:	4013      	ands	r3, r2
1000c9c2:	60cb      	str	r3, [r1, #12]

static void setup_transfer_descriptor_rx(struct dma_descriptor *descriptor)
{
	dma_descriptor_get_config_defaults(descriptor);

	descriptor->buffer_size = BUFFER_LEN;
1000c9c4:	2306      	movs	r3, #6
1000c9c6:	608b      	str	r3, [r1, #8]
    descriptor->read_start_addr =
    (uint32_t)(&(uart_instance.hw->RECEIVE_DATA.reg));
1000c9c8:	683b      	ldr	r3, [r7, #0]
1000c9ca:	3310      	adds	r3, #16
static void setup_transfer_descriptor_rx(struct dma_descriptor *descriptor)
{
	dma_descriptor_get_config_defaults(descriptor);

	descriptor->buffer_size = BUFFER_LEN;
    descriptor->read_start_addr =
1000c9cc:	600b      	str	r3, [r1, #0]
    (uint32_t)(&(uart_instance.hw->RECEIVE_DATA.reg));
	descriptor->write_start_addr = (uint32_t)string	;
1000c9ce:	4b9c      	ldr	r3, [pc, #624]	; (1000cc40 <main+0x468>)
1000c9d0:	604b      	str	r3, [r1, #4]
		system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
		
		configure_usart();
		configure_dma_resource_rx(&uart_dma_resource_rx);
		setup_transfer_descriptor_rx(&example_descriptor_rx);
		dma_add_descriptor(&uart_dma_resource_rx, &example_descriptor_rx);
1000c9d2:	0020      	movs	r0, r4
1000c9d4:	4b9b      	ldr	r3, [pc, #620]	; (1000cc44 <main+0x46c>)
1000c9d6:	4798      	blx	r3
 *
 */
static inline void dma_register_callback(struct dma_resource *resource,
		dma_callback_t callback, enum dma_callback_type type)
{
	resource->callback[type] = callback;
1000c9d8:	4b9b      	ldr	r3, [pc, #620]	; (1000cc48 <main+0x470>)
1000c9da:	6063      	str	r3, [r4, #4]
 *
 */
static inline void dma_enable_callback(struct dma_resource *resource,
		enum dma_callback_type type)
{
	resource->callback_enable |= 1 << type;
1000c9dc:	2324      	movs	r3, #36	; 0x24
1000c9de:	5ce2      	ldrb	r2, [r4, r3]
1000c9e0:	4316      	orrs	r6, r2
1000c9e2:	54e6      	strb	r6, [r4, r3]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000c9e4:	2280      	movs	r2, #128	; 0x80
1000c9e6:	0212      	lsls	r2, r2, #8
1000c9e8:	4b98      	ldr	r3, [pc, #608]	; (1000cc4c <main+0x474>)
1000c9ea:	601a      	str	r2, [r3, #0]
		configure_dma_callback();
		dma_start_transfer_job(&uart_dma_resource_rx);
1000c9ec:	0020      	movs	r0, r4
1000c9ee:	4b98      	ldr	r3, [pc, #608]	; (1000cc50 <main+0x478>)
1000c9f0:	4798      	blx	r3
	timestamp.min = 2;
	timestamp.month = 8;
	timestamp.sec = 36;
	timestamp.year = 15;
	temperature = (float *)&string[0];
	pressure_ptr = (uint16_t *)&string[4];
1000c9f2:	4e93      	ldr	r6, [pc, #588]	; (1000cc40 <main+0x468>)
1000c9f4:	1d37      	adds	r7, r6, #4
	
	enable_uart();
	//at_ble_tx_power_set(AT_BLE_TX_PWR_LVL_NEG_20_DB);
	
	while(1) {
		i++;
1000c9f6:	4a97      	ldr	r2, [pc, #604]	; (1000cc54 <main+0x47c>)
1000c9f8:	7813      	ldrb	r3, [r2, #0]
1000c9fa:	3301      	adds	r3, #1
1000c9fc:	7013      	strb	r3, [r2, #0]
		
		if (start_advertisement == true || disconnect_flag == true) {
1000c9fe:	4b4b      	ldr	r3, [pc, #300]	; (1000cb2c <main+0x354>)
1000ca00:	781b      	ldrb	r3, [r3, #0]
1000ca02:	2b00      	cmp	r3, #0
1000ca04:	d101      	bne.n	1000ca0a <main+0x232>
1000ca06:	4b4c      	ldr	r3, [pc, #304]	; (1000cb38 <main+0x360>)
1000ca08:	781b      	ldrb	r3, [r3, #0]
			/* button debounce delay*/
			/*delay_ms(350);*/
		}
		
		/* Flag to start advertisement */
		if (start_advertisement) {
1000ca0a:	4b48      	ldr	r3, [pc, #288]	; (1000cb2c <main+0x354>)
1000ca0c:	781b      	ldrb	r3, [r3, #0]
1000ca0e:	2b00      	cmp	r3, #0
1000ca10:	d004      	beq.n	1000ca1c <main+0x244>
			hr_sensor_adv();
1000ca12:	4b91      	ldr	r3, [pc, #580]	; (1000cc58 <main+0x480>)
1000ca14:	4798      	blx	r3
			start_advertisement = false;
1000ca16:	2200      	movs	r2, #0
1000ca18:	4b44      	ldr	r3, [pc, #272]	; (1000cb2c <main+0x354>)
1000ca1a:	701a      	strb	r2, [r3, #0]
		}

		/* Flag to start notification */
		if (notification_flag) {
1000ca1c:	4b45      	ldr	r3, [pc, #276]	; (1000cb34 <main+0x35c>)
1000ca1e:	781b      	ldrb	r3, [r3, #0]
1000ca20:	2b00      	cmp	r3, #0
1000ca22:	d100      	bne.n	1000ca26 <main+0x24e>
1000ca24:	e13f      	b.n	1000cca6 <main+0x4ce>
			//LED_Toggle(LED0);
			if (notification_sent) {
1000ca26:	4b8d      	ldr	r3, [pc, #564]	; (1000cc5c <main+0x484>)
1000ca28:	781b      	ldrb	r3, [r3, #0]
1000ca2a:	2b00      	cmp	r3, #0
1000ca2c:	d100      	bne.n	1000ca30 <main+0x258>
1000ca2e:	e131      	b.n	1000cc94 <main+0x4bc>
static void hr_measurment_send(void)
{
	uint8_t hr_data[HR_CHAR_VALUE_LEN];
	uint8_t idx = 0;
	
	if ((energy_expended_val == ENERGY_RESET) || (second_counter % 10 == energy_inclusion)) {
1000ca30:	4b44      	ldr	r3, [pc, #272]	; (1000cb44 <main+0x36c>)
1000ca32:	881b      	ldrh	r3, [r3, #0]
1000ca34:	2b00      	cmp	r3, #0
1000ca36:	d100      	bne.n	1000ca3a <main+0x262>
1000ca38:	e16c      	b.n	1000cd14 <main+0x53c>
1000ca3a:	4b41      	ldr	r3, [pc, #260]	; (1000cb40 <main+0x368>)
1000ca3c:	7818      	ldrb	r0, [r3, #0]
1000ca3e:	210a      	movs	r1, #10
1000ca40:	4b87      	ldr	r3, [pc, #540]	; (1000cc60 <main+0x488>)
1000ca42:	4798      	blx	r3
1000ca44:	4b87      	ldr	r3, [pc, #540]	; (1000cc64 <main+0x48c>)
1000ca46:	781b      	ldrb	r3, [r3, #0]
1000ca48:	b2c9      	uxtb	r1, r1
1000ca4a:	428b      	cmp	r3, r1
1000ca4c:	d100      	bne.n	1000ca50 <main+0x278>
1000ca4e:	e16c      	b.n	1000cd2a <main+0x552>
		/* To send energy expended after 10 notifications after reset */
		if (energy_expended_val == ENERGY_RESET) {
			energy_inclusion = second_counter % 10 ;
		}
	} else {
		hr_data[idx] = RR_INTERVAL_VALUE_PRESENT ;
1000ca50:	2210      	movs	r2, #16
1000ca52:	ab05      	add	r3, sp, #20
1000ca54:	701a      	strb	r2, [r3, #0]
	}
	idx += 1;			
	DBG_LOG("Heart Rate: %d bpm", heart_rate_value);
1000ca56:	4869      	ldr	r0, [pc, #420]	; (1000cbfc <main+0x424>)
1000ca58:	4b69      	ldr	r3, [pc, #420]	; (1000cc00 <main+0x428>)
1000ca5a:	4798      	blx	r3
1000ca5c:	4c3b      	ldr	r4, [pc, #236]	; (1000cb4c <main+0x374>)
1000ca5e:	8821      	ldrh	r1, [r4, #0]
1000ca60:	4881      	ldr	r0, [pc, #516]	; (1000cc68 <main+0x490>)
1000ca62:	4b54      	ldr	r3, [pc, #336]	; (1000cbb4 <main+0x3dc>)
1000ca64:	4798      	blx	r3
	heart_rate_value += (inc_changer);
1000ca66:	4b3d      	ldr	r3, [pc, #244]	; (1000cb5c <main+0x384>)
1000ca68:	2200      	movs	r2, #0
1000ca6a:	569a      	ldrsb	r2, [r3, r2]
1000ca6c:	8823      	ldrh	r3, [r4, #0]
1000ca6e:	18d3      	adds	r3, r2, r3
1000ca70:	8023      	strh	r3, [r4, #0]
	hr_data[idx++] = string[5];
1000ca72:	ab05      	add	r3, sp, #20
1000ca74:	4a72      	ldr	r2, [pc, #456]	; (1000cc40 <main+0x468>)
1000ca76:	7952      	ldrb	r2, [r2, #5]
1000ca78:	705a      	strb	r2, [r3, #1]
	/* Heart Rate Value 8bit*/
	//hr_data[idx++] = (uint8_t)heart_rate_value ;
	if (hr_data[0] & ENERGY_EXPENDED_FIELD_PRESENT) {
1000ca7a:	781b      	ldrb	r3, [r3, #0]
		hr_data[idx] = RR_INTERVAL_VALUE_PRESENT ;
	}
	idx += 1;			
	DBG_LOG("Heart Rate: %d bpm", heart_rate_value);
	heart_rate_value += (inc_changer);
	hr_data[idx++] = string[5];
1000ca7c:	2402      	movs	r4, #2
	/* Heart Rate Value 8bit*/
	//hr_data[idx++] = (uint8_t)heart_rate_value ;
	if (hr_data[0] & ENERGY_EXPENDED_FIELD_PRESENT) {
1000ca7e:	071b      	lsls	r3, r3, #28
1000ca80:	d505      	bpl.n	1000ca8e <main+0x2b6>
		memcpy(&hr_data[idx], &energy_expended_val, 2);
1000ca82:	4b30      	ldr	r3, [pc, #192]	; (1000cb44 <main+0x36c>)
1000ca84:	881a      	ldrh	r2, [r3, #0]
1000ca86:	2316      	movs	r3, #22
1000ca88:	446b      	add	r3, sp
1000ca8a:	801a      	strh	r2, [r3, #0]
		idx += 2;	
1000ca8c:	3402      	adds	r4, #2
	}
	
	/* Appending RR interval values*/	
	if (rr_interval_value >= RR_VALUE_MAX) {
1000ca8e:	4b30      	ldr	r3, [pc, #192]	; (1000cb50 <main+0x378>)
1000ca90:	881a      	ldrh	r2, [r3, #0]
1000ca92:	4b76      	ldr	r3, [pc, #472]	; (1000cc6c <main+0x494>)
1000ca94:	429a      	cmp	r2, r3
1000ca96:	d902      	bls.n	1000ca9e <main+0x2c6>
		rr_interval_value = (uint8_t) RR_VALUE_MIN; 
1000ca98:	2264      	movs	r2, #100	; 0x64
1000ca9a:	4b2d      	ldr	r3, [pc, #180]	; (1000cb50 <main+0x378>)
1000ca9c:	801a      	strh	r2, [r3, #0]
	}	
	DBG_LOG_CONT("\tRR Values:(%d,%d)msec",
1000ca9e:	4d2c      	ldr	r5, [pc, #176]	; (1000cb50 <main+0x378>)
1000caa0:	8829      	ldrh	r1, [r5, #0]
1000caa2:	000a      	movs	r2, r1
1000caa4:	32c8      	adds	r2, #200	; 0xc8
1000caa6:	4872      	ldr	r0, [pc, #456]	; (1000cc70 <main+0x498>)
1000caa8:	4b42      	ldr	r3, [pc, #264]	; (1000cbb4 <main+0x3dc>)
1000caaa:	4798      	blx	r3
				rr_interval_value, rr_interval_value + 200);
	memcpy(&hr_data[idx], &rr_interval_value, 2);
1000caac:	aa05      	add	r2, sp, #20
1000caae:	882b      	ldrh	r3, [r5, #0]
1000cab0:	5313      	strh	r3, [r2, r4]
	idx += 2;
	rr_interval_value += 200;
1000cab2:	0019      	movs	r1, r3
1000cab4:	31c8      	adds	r1, #200	; 0xc8
1000cab6:	0008      	movs	r0, r1
	memcpy(&hr_data[idx], &rr_interval_value, 2);
1000cab8:	1ca1      	adds	r1, r4, #2
1000caba:	5250      	strh	r0, [r2, r1]
	idx += 2;
1000cabc:	3404      	adds	r4, #4
	rr_interval_value += 200;
1000cabe:	3391      	adds	r3, #145	; 0x91
1000cac0:	33ff      	adds	r3, #255	; 0xff
1000cac2:	802b      	strh	r3, [r5, #0]
	
	/*printing the user activity,simulation*/
	switch(activity) {
1000cac4:	4b23      	ldr	r3, [pc, #140]	; (1000cb54 <main+0x37c>)
1000cac6:	781a      	ldrb	r2, [r3, #0]
1000cac8:	2a04      	cmp	r2, #4
1000caca:	d816      	bhi.n	1000cafa <main+0x322>
1000cacc:	0093      	lsls	r3, r2, #2
1000cace:	4a69      	ldr	r2, [pc, #420]	; (1000cc74 <main+0x49c>)
1000cad0:	58d3      	ldr	r3, [r2, r3]
1000cad2:	469f      	mov	pc, r3
	case ACTIVITY_NORMAL:
		DBG_LOG_CONT(" User Status:Idle");
1000cad4:	4868      	ldr	r0, [pc, #416]	; (1000cc78 <main+0x4a0>)
1000cad6:	4b37      	ldr	r3, [pc, #220]	; (1000cbb4 <main+0x3dc>)
1000cad8:	4798      	blx	r3
1000cada:	e00e      	b.n	1000cafa <main+0x322>
		break;
		
	case ACTIVITY_WALKING:
		DBG_LOG_CONT(" User Status:Walking");
1000cadc:	4867      	ldr	r0, [pc, #412]	; (1000cc7c <main+0x4a4>)
1000cade:	4b35      	ldr	r3, [pc, #212]	; (1000cbb4 <main+0x3dc>)
1000cae0:	4798      	blx	r3
1000cae2:	e00a      	b.n	1000cafa <main+0x322>
		break;
		
	case ACTIVITY_BRISK_WALKING:
		DBG_LOG_CONT(" User status:Brisk walking");
1000cae4:	4866      	ldr	r0, [pc, #408]	; (1000cc80 <main+0x4a8>)
1000cae6:	4b33      	ldr	r3, [pc, #204]	; (1000cbb4 <main+0x3dc>)
1000cae8:	4798      	blx	r3
1000caea:	e006      	b.n	1000cafa <main+0x322>
		break;
		
	case ACTIVITY_RUNNING:
		DBG_LOG_CONT(" User status:Running");
1000caec:	4865      	ldr	r0, [pc, #404]	; (1000cc84 <main+0x4ac>)
1000caee:	4b31      	ldr	r3, [pc, #196]	; (1000cbb4 <main+0x3dc>)
1000caf0:	4798      	blx	r3
1000caf2:	e002      	b.n	1000cafa <main+0x322>
		break;
		
	case ACTIVITY_FAST_RUNNING:
		DBG_LOG_CONT(" User Status:Fast Running");
1000caf4:	4864      	ldr	r0, [pc, #400]	; (1000cc88 <main+0x4b0>)
1000caf6:	4b2f      	ldr	r3, [pc, #188]	; (1000cbb4 <main+0x3dc>)
1000caf8:	4798      	blx	r3
		break;	
	}
	
	/* Printing the energy*/
	if ((hr_data[0] & ENERGY_EXPENDED_FIELD_PRESENT)) {
1000cafa:	ab05      	add	r3, sp, #20
1000cafc:	781b      	ldrb	r3, [r3, #0]
1000cafe:	071b      	lsls	r3, r3, #28
1000cb00:	d50c      	bpl.n	1000cb1c <main+0x344>
		DBG_LOG("Energy Expended :%d KJ\n", energy_expended_val);
1000cb02:	483e      	ldr	r0, [pc, #248]	; (1000cbfc <main+0x424>)
1000cb04:	4b3e      	ldr	r3, [pc, #248]	; (1000cc00 <main+0x428>)
1000cb06:	4798      	blx	r3
1000cb08:	4d0e      	ldr	r5, [pc, #56]	; (1000cb44 <main+0x36c>)
1000cb0a:	8829      	ldrh	r1, [r5, #0]
1000cb0c:	485f      	ldr	r0, [pc, #380]	; (1000cc8c <main+0x4b4>)
1000cb0e:	4b29      	ldr	r3, [pc, #164]	; (1000cbb4 <main+0x3dc>)
1000cb10:	4798      	blx	r3
		energy_expended_val += energy_incrementor;
1000cb12:	882a      	ldrh	r2, [r5, #0]
1000cb14:	4b0c      	ldr	r3, [pc, #48]	; (1000cb48 <main+0x370>)
1000cb16:	881b      	ldrh	r3, [r3, #0]
1000cb18:	18d3      	adds	r3, r2, r3
1000cb1a:	802b      	strh	r3, [r5, #0]
	}
	
	/* Sending the data for notifications*/
	hr_sensor_send_notification(hr_data, idx);
1000cb1c:	0021      	movs	r1, r4
1000cb1e:	a805      	add	r0, sp, #20
1000cb20:	4b5b      	ldr	r3, [pc, #364]	; (1000cc90 <main+0x4b8>)
1000cb22:	4798      	blx	r3
1000cb24:	e0bc      	b.n	1000cca0 <main+0x4c8>
1000cb26:	46c0      	nop			; (mov r8, r8)
1000cb28:	10015c3c 	.word	0x10015c3c
1000cb2c:	10015c36 	.word	0x10015c36
1000cb30:	10015c39 	.word	0x10015c39
1000cb34:	10015c38 	.word	0x10015c38
1000cb38:	10015c3f 	.word	0x10015c3f
1000cb3c:	100141b1 	.word	0x100141b1
1000cb40:	10015c3d 	.word	0x10015c3d
1000cb44:	100141ae 	.word	0x100141ae
1000cb48:	10016d40 	.word	0x10016d40
1000cb4c:	100141aa 	.word	0x100141aa
1000cb50:	100141b2 	.word	0x100141b2
1000cb54:	10015c40 	.word	0x10015c40
1000cb58:	100141ad 	.word	0x100141ad
1000cb5c:	100141b5 	.word	0x100141b5
1000cb60:	10016dcc 	.word	0x10016dcc
1000cb64:	10016d48 	.word	0x10016d48
1000cb68:	10016dcd 	.word	0x10016dcd
1000cb6c:	100141ac 	.word	0x100141ac
1000cb70:	1000bc61 	.word	0x1000bc61
1000cb74:	1000c1b5 	.word	0x1000c1b5
1000cb78:	10008d15 	.word	0x10008d15
1000cb7c:	1000b871 	.word	0x1000b871
1000cb80:	1000c5d9 	.word	0x1000c5d9
1000cb84:	1000b899 	.word	0x1000b899
1000cb88:	1000884d 	.word	0x1000884d
1000cb8c:	1000885d 	.word	0x1000885d
1000cb90:	10008a15 	.word	0x10008a15
1000cb94:	1000b955 	.word	0x1000b955
1000cb98:	1000b7ad 	.word	0x1000b7ad
1000cb9c:	1000c479 	.word	0x1000c479
1000cba0:	1000b7d9 	.word	0x1000b7d9
1000cba4:	1000b80d 	.word	0x1000b80d
1000cba8:	1000a9f1 	.word	0x1000a9f1
1000cbac:	10009e41 	.word	0x10009e41
1000cbb0:	10013df4 	.word	0x10013df4
1000cbb4:	10011c85 	.word	0x10011c85
1000cbb8:	10016d2c 	.word	0x10016d2c
1000cbbc:	1000e779 	.word	0x1000e779
1000cbc0:	10016dce 	.word	0x10016dce
1000cbc4:	10013e28 	.word	0x10013e28
1000cbc8:	10013e48 	.word	0x10013e48
1000cbcc:	10013b78 	.word	0x10013b78
1000cbd0:	1000a921 	.word	0x1000a921
1000cbd4:	10013e80 	.word	0x10013e80
1000cbd8:	10013b54 	.word	0x10013b54
1000cbdc:	10013eb0 	.word	0x10013eb0
1000cbe0:	1000c425 	.word	0x1000c425
1000cbe4:	10009c9d 	.word	0x10009c9d
1000cbe8:	1000c3a5 	.word	0x1000c3a5
1000cbec:	10009ca9 	.word	0x10009ca9
1000cbf0:	10016d7c 	.word	0x10016d7c
1000cbf4:	10009e9d 	.word	0x10009e9d
1000cbf8:	10009f0d 	.word	0x10009f0d
1000cbfc:	10013098 	.word	0x10013098
1000cc00:	10011da5 	.word	0x10011da5
1000cc04:	10013ee4 	.word	0x10013ee4
1000cc08:	1000c66d 	.word	0x1000c66d
1000cc0c:	1000c731 	.word	0x1000c731
1000cc10:	10013fe8 	.word	0x10013fe8
1000cc14:	10013bc4 	.word	0x10013bc4
1000cc18:	10008d81 	.word	0x10008d81
1000cc1c:	1000980d 	.word	0x1000980d
1000cc20:	100169e4 	.word	0x100169e4
1000cc24:	10009839 	.word	0x10009839
1000cc28:	40004000 	.word	0x40004000
1000cc2c:	10009a95 	.word	0x10009a95
1000cc30:	100081f9 	.word	0x100081f9
1000cc34:	10016d4c 	.word	0x10016d4c
1000cc38:	10008349 	.word	0x10008349
1000cc3c:	10016d30 	.word	0x10016d30
1000cc40:	10015c30 	.word	0x10015c30
1000cc44:	10008229 	.word	0x10008229
1000cc48:	1000c7c5 	.word	0x1000c7c5
1000cc4c:	e000e100 	.word	0xe000e100
1000cc50:	100082d1 	.word	0x100082d1
1000cc54:	10015c3b 	.word	0x10015c3b
1000cc58:	10009d71 	.word	0x10009d71
1000cc5c:	100141b0 	.word	0x100141b0
1000cc60:	100104e9 	.word	0x100104e9
1000cc64:	10015c3a 	.word	0x10015c3a
1000cc68:	10013f08 	.word	0x10013f08
1000cc6c:	000003e7 	.word	0x000003e7
1000cc70:	10013f1c 	.word	0x10013f1c
1000cc74:	10013b40 	.word	0x10013b40
1000cc78:	10013f34 	.word	0x10013f34
1000cc7c:	10013f48 	.word	0x10013f48
1000cc80:	10013f60 	.word	0x10013f60
1000cc84:	10013f7c 	.word	0x10013f7c
1000cc88:	10013f94 	.word	0x10013f94
1000cc8c:	10013fb0 	.word	0x10013fb0
1000cc90:	10009cb5 	.word	0x10009cb5
		if (notification_flag) {
			//LED_Toggle(LED0);
			if (notification_sent) {
				hr_measurment_send();
				} else {
				DBG_LOG("Previous notification not sent");
1000cc94:	4827      	ldr	r0, [pc, #156]	; (1000cd34 <main+0x55c>)
1000cc96:	4b28      	ldr	r3, [pc, #160]	; (1000cd38 <main+0x560>)
1000cc98:	4798      	blx	r3
1000cc9a:	4828      	ldr	r0, [pc, #160]	; (1000cd3c <main+0x564>)
1000cc9c:	4b28      	ldr	r3, [pc, #160]	; (1000cd40 <main+0x568>)
1000cc9e:	4798      	blx	r3
			}
			
			notification_flag = false;
1000cca0:	2200      	movs	r2, #0
1000cca2:	4b28      	ldr	r3, [pc, #160]	; (1000cd44 <main+0x56c>)
1000cca4:	701a      	strb	r2, [r3, #0]
		}

		/* Flag to disconnect with the peer device */
		if (disconnect_flag) {
1000cca6:	4b28      	ldr	r3, [pc, #160]	; (1000cd48 <main+0x570>)
1000cca8:	781b      	ldrb	r3, [r3, #0]
1000ccaa:	2b00      	cmp	r3, #0
1000ccac:	d006      	beq.n	1000ccbc <main+0x4e4>
			hr_sensor_disconnect();
1000ccae:	4b27      	ldr	r3, [pc, #156]	; (1000cd4c <main+0x574>)
1000ccb0:	4798      	blx	r3
			app_state = false;
1000ccb2:	2300      	movs	r3, #0
1000ccb4:	4a26      	ldr	r2, [pc, #152]	; (1000cd50 <main+0x578>)
1000ccb6:	7013      	strb	r3, [r2, #0]
			disconnect_flag = false;
1000ccb8:	4a23      	ldr	r2, [pc, #140]	; (1000cd48 <main+0x570>)
1000ccba:	7013      	strb	r3, [r2, #0]
		}
					ble_event_task(655);  
1000ccbc:	4825      	ldr	r0, [pc, #148]	; (1000cd54 <main+0x57c>)
1000ccbe:	4b26      	ldr	r3, [pc, #152]	; (1000cd58 <main+0x580>)
1000ccc0:	4798      	blx	r3
// 	temperature = at30tse_read_temperature();
// #ifdef HTPT_FLAG_FAHRENHEIT
// 	temperature = (((temperature * 9.0)/5.0) + 32.0);
// #endif
	/* Read Temperature Value from IO1 Xplained Pro */
	timestamp.day = 1;
1000ccc2:	ac05      	add	r4, sp, #20
1000ccc4:	2501      	movs	r5, #1
1000ccc6:	70e5      	strb	r5, [r4, #3]
	timestamp.hour = 9;
1000ccc8:	2309      	movs	r3, #9
1000ccca:	7123      	strb	r3, [r4, #4]
	timestamp.min = 2;
1000cccc:	3b07      	subs	r3, #7
1000ccce:	7163      	strb	r3, [r4, #5]
	timestamp.month = 8;
1000ccd0:	3306      	adds	r3, #6
1000ccd2:	70a3      	strb	r3, [r4, #2]
	timestamp.sec = 36;
1000ccd4:	331c      	adds	r3, #28
1000ccd6:	71a3      	strb	r3, [r4, #6]
	timestamp.year = 15;
1000ccd8:	3b15      	subs	r3, #21
1000ccda:	8023      	strh	r3, [r4, #0]
	temperature = (float *)&string[0];
	pressure_ptr = (uint16_t *)&string[4];
1000ccdc:	4b1f      	ldr	r3, [pc, #124]	; (1000cd5c <main+0x584>)
1000ccde:	601f      	str	r7, [r3, #0]
	pressure = *pressure_ptr;
1000cce0:	88b2      	ldrh	r2, [r6, #4]
1000cce2:	4b1f      	ldr	r3, [pc, #124]	; (1000cd60 <main+0x588>)
1000cce4:	801a      	strh	r2, [r3, #0]
	//uint16_t temperature_value = *temperature;

	
		
	/* Read Temperature Value from IO1 Xplained Pro */
	if(at_ble_htpt_temp_send(convert_ieee754_ieee11073_float(*temperature),
1000cce6:	491f      	ldr	r1, [pc, #124]	; (1000cd64 <main+0x58c>)
1000cce8:	6830      	ldr	r0, [r6, #0]
1000ccea:	4b1f      	ldr	r3, [pc, #124]	; (1000cd68 <main+0x590>)
1000ccec:	4798      	blx	r3
1000ccee:	4b1f      	ldr	r3, [pc, #124]	; (1000cd6c <main+0x594>)
1000ccf0:	4798      	blx	r3
1000ccf2:	23ff      	movs	r3, #255	; 0xff
1000ccf4:	061b      	lsls	r3, r3, #24
1000ccf6:	4318      	orrs	r0, r3
1000ccf8:	9500      	str	r5, [sp, #0]
1000ccfa:	2306      	movs	r3, #6
1000ccfc:	2204      	movs	r2, #4
1000ccfe:	0021      	movs	r1, r4
1000cd00:	4c1b      	ldr	r4, [pc, #108]	; (1000cd70 <main+0x598>)
1000cd02:	47a0      	blx	r4
			app_state = false;
			disconnect_flag = false;
		}
					ble_event_task(655);  
					htp_temperature_send();
					bat_update_char_value(bat_connection_handle,&bas_service_handler, string[4], &flag);
1000cd04:	7932      	ldrb	r2, [r6, #4]
1000cd06:	4b1b      	ldr	r3, [pc, #108]	; (1000cd74 <main+0x59c>)
1000cd08:	8818      	ldrh	r0, [r3, #0]
1000cd0a:	4b1b      	ldr	r3, [pc, #108]	; (1000cd78 <main+0x5a0>)
1000cd0c:	491b      	ldr	r1, [pc, #108]	; (1000cd7c <main+0x5a4>)
1000cd0e:	4c1c      	ldr	r4, [pc, #112]	; (1000cd80 <main+0x5a8>)
1000cd10:	47a0      	blx	r4
				
	}
1000cd12:	e670      	b.n	1000c9f6 <main+0x21e>
{
	uint8_t hr_data[HR_CHAR_VALUE_LEN];
	uint8_t idx = 0;
	
	if ((energy_expended_val == ENERGY_RESET) || (second_counter % 10 == energy_inclusion)) {
		hr_data[idx] = (RR_INTERVAL_VALUE_PRESENT | ENERGY_EXPENDED_FIELD_PRESENT);
1000cd14:	2218      	movs	r2, #24
1000cd16:	ab05      	add	r3, sp, #20
1000cd18:	701a      	strb	r2, [r3, #0]
		
		/* To send energy expended after 10 notifications after reset */
		if (energy_expended_val == ENERGY_RESET) {
			energy_inclusion = second_counter % 10 ;
1000cd1a:	4b1a      	ldr	r3, [pc, #104]	; (1000cd84 <main+0x5ac>)
1000cd1c:	7818      	ldrb	r0, [r3, #0]
1000cd1e:	210a      	movs	r1, #10
1000cd20:	4b19      	ldr	r3, [pc, #100]	; (1000cd88 <main+0x5b0>)
1000cd22:	4798      	blx	r3
1000cd24:	4b19      	ldr	r3, [pc, #100]	; (1000cd8c <main+0x5b4>)
1000cd26:	7019      	strb	r1, [r3, #0]
1000cd28:	e695      	b.n	1000ca56 <main+0x27e>
{
	uint8_t hr_data[HR_CHAR_VALUE_LEN];
	uint8_t idx = 0;
	
	if ((energy_expended_val == ENERGY_RESET) || (second_counter % 10 == energy_inclusion)) {
		hr_data[idx] = (RR_INTERVAL_VALUE_PRESENT | ENERGY_EXPENDED_FIELD_PRESENT);
1000cd2a:	2218      	movs	r2, #24
1000cd2c:	ab05      	add	r3, sp, #20
1000cd2e:	701a      	strb	r2, [r3, #0]
1000cd30:	e691      	b.n	1000ca56 <main+0x27e>
1000cd32:	46c0      	nop			; (mov r8, r8)
1000cd34:	10013098 	.word	0x10013098
1000cd38:	10011da5 	.word	0x10011da5
1000cd3c:	10013fc8 	.word	0x10013fc8
1000cd40:	10011c85 	.word	0x10011c85
1000cd44:	10015c38 	.word	0x10015c38
1000cd48:	10015c3f 	.word	0x10015c3f
1000cd4c:	10009d25 	.word	0x10009d25
1000cd50:	10015c3c 	.word	0x10015c3c
1000cd54:	0000028f 	.word	0x0000028f
1000cd58:	1000b135 	.word	0x1000b135
1000cd5c:	10016d44 	.word	0x10016d44
1000cd60:	10016d2a 	.word	0x10016d2a
1000cd64:	41200000 	.word	0x41200000
1000cd68:	10010561 	.word	0x10010561
1000cd6c:	100104f5 	.word	0x100104f5
1000cd70:	1000e7a5 	.word	0x1000e7a5
1000cd74:	10016d28 	.word	0x10016d28
1000cd78:	100141b4 	.word	0x100141b4
1000cd7c:	10016d7c 	.word	0x10016d7c
1000cd80:	10009f31 	.word	0x10009f31
1000cd84:	10015c3d 	.word	0x10015c3d
1000cd88:	100104e9 	.word	0x100104e9
1000cd8c:	10015c3a 	.word	0x10015c3a

1000cd90 <internal_event_post>:
1000cd90:	b570      	push	{r4, r5, r6, lr}
1000cd92:	4d12      	ldr	r5, [pc, #72]	; (1000cddc <internal_event_post+0x4c>)
1000cd94:	682c      	ldr	r4, [r5, #0]
1000cd96:	2c00      	cmp	r4, #0
1000cd98:	d014      	beq.n	1000cdc4 <internal_event_post+0x34>
1000cd9a:	6826      	ldr	r6, [r4, #0]
1000cd9c:	60e2      	str	r2, [r4, #12]
1000cd9e:	602e      	str	r6, [r5, #0]
1000cda0:	2500      	movs	r5, #0
1000cda2:	4a0f      	ldr	r2, [pc, #60]	; (1000cde0 <internal_event_post+0x50>)
1000cda4:	8123      	strh	r3, [r4, #8]
1000cda6:	6813      	ldr	r3, [r2, #0]
1000cda8:	6025      	str	r5, [r4, #0]
1000cdaa:	80a0      	strh	r0, [r4, #4]
1000cdac:	80e1      	strh	r1, [r4, #6]
1000cdae:	42ab      	cmp	r3, r5
1000cdb0:	d101      	bne.n	1000cdb6 <internal_event_post+0x26>
1000cdb2:	6014      	str	r4, [r2, #0]
1000cdb4:	e011      	b.n	1000cdda <internal_event_post+0x4a>
1000cdb6:	681a      	ldr	r2, [r3, #0]
1000cdb8:	2a00      	cmp	r2, #0
1000cdba:	d001      	beq.n	1000cdc0 <internal_event_post+0x30>
1000cdbc:	1c13      	adds	r3, r2, #0
1000cdbe:	e7fa      	b.n	1000cdb6 <internal_event_post+0x26>
1000cdc0:	601c      	str	r4, [r3, #0]
1000cdc2:	e00a      	b.n	1000cdda <internal_event_post+0x4a>
1000cdc4:	b2c4      	uxtb	r4, r0
1000cdc6:	2c00      	cmp	r4, #0
1000cdc8:	d107      	bne.n	1000cdda <internal_event_post+0x4a>
1000cdca:	4c06      	ldr	r4, [pc, #24]	; (1000cde4 <internal_event_post+0x54>)
1000cdcc:	60e2      	str	r2, [r4, #12]
1000cdce:	2201      	movs	r2, #1
1000cdd0:	8123      	strh	r3, [r4, #8]
1000cdd2:	4b05      	ldr	r3, [pc, #20]	; (1000cde8 <internal_event_post+0x58>)
1000cdd4:	80a0      	strh	r0, [r4, #4]
1000cdd6:	80e1      	strh	r1, [r4, #6]
1000cdd8:	701a      	strb	r2, [r3, #0]
1000cdda:	bd70      	pop	{r4, r5, r6, pc}
1000cddc:	10015c5c 	.word	0x10015c5c
1000cde0:	10015c58 	.word	0x10015c58
1000cde4:	10015c44 	.word	0x10015c44
1000cde8:	10015c54 	.word	0x10015c54

1000cdec <internal_event_init>:
1000cdec:	b510      	push	{r4, lr}
1000cdee:	4b08      	ldr	r3, [pc, #32]	; (1000ce10 <internal_event_init+0x24>)
1000cdf0:	0900      	lsrs	r0, r0, #4
1000cdf2:	0100      	lsls	r0, r0, #4
1000cdf4:	681a      	ldr	r2, [r3, #0]
1000cdf6:	1808      	adds	r0, r1, r0
1000cdf8:	4281      	cmp	r1, r0
1000cdfa:	d003      	beq.n	1000ce04 <internal_event_init+0x18>
1000cdfc:	600a      	str	r2, [r1, #0]
1000cdfe:	1c0a      	adds	r2, r1, #0
1000ce00:	3110      	adds	r1, #16
1000ce02:	e7f9      	b.n	1000cdf8 <internal_event_init+0xc>
1000ce04:	601a      	str	r2, [r3, #0]
1000ce06:	2200      	movs	r2, #0
1000ce08:	4b02      	ldr	r3, [pc, #8]	; (1000ce14 <internal_event_init+0x28>)
1000ce0a:	601a      	str	r2, [r3, #0]
1000ce0c:	bd10      	pop	{r4, pc}
1000ce0e:	46c0      	nop			; (mov r8, r8)
1000ce10:	10015c5c 	.word	0x10015c5c
1000ce14:	10015c58 	.word	0x10015c58

1000ce18 <special_events_handler>:
1000ce18:	b538      	push	{r3, r4, r5, lr}
1000ce1a:	4c1b      	ldr	r4, [pc, #108]	; (1000ce88 <special_events_handler+0x70>)
1000ce1c:	1c03      	adds	r3, r0, #0
1000ce1e:	8825      	ldrh	r5, [r4, #0]
1000ce20:	1c08      	adds	r0, r1, #0
1000ce22:	1c21      	adds	r1, r4, #0
1000ce24:	429d      	cmp	r5, r3
1000ce26:	d107      	bne.n	1000ce38 <special_events_handler+0x20>
1000ce28:	88a5      	ldrh	r5, [r4, #4]
1000ce2a:	4285      	cmp	r5, r0
1000ce2c:	d104      	bne.n	1000ce38 <special_events_handler+0x20>
1000ce2e:	2301      	movs	r3, #1
1000ce30:	425b      	negs	r3, r3
1000ce32:	8023      	strh	r3, [r4, #0]
1000ce34:	60a2      	str	r2, [r4, #8]
1000ce36:	e009      	b.n	1000ce4c <special_events_handler+0x34>
1000ce38:	884c      	ldrh	r4, [r1, #2]
1000ce3a:	429c      	cmp	r4, r3
1000ce3c:	d10a      	bne.n	1000ce54 <special_events_handler+0x3c>
1000ce3e:	888c      	ldrh	r4, [r1, #4]
1000ce40:	4284      	cmp	r4, r0
1000ce42:	d107      	bne.n	1000ce54 <special_events_handler+0x3c>
1000ce44:	2301      	movs	r3, #1
1000ce46:	425b      	negs	r3, r3
1000ce48:	804b      	strh	r3, [r1, #2]
1000ce4a:	608a      	str	r2, [r1, #8]
1000ce4c:	4b0f      	ldr	r3, [pc, #60]	; (1000ce8c <special_events_handler+0x74>)
1000ce4e:	4798      	blx	r3
1000ce50:	2001      	movs	r0, #1
1000ce52:	e017      	b.n	1000ce84 <special_events_handler+0x6c>
1000ce54:	490e      	ldr	r1, [pc, #56]	; (1000ce90 <special_events_handler+0x78>)
1000ce56:	428b      	cmp	r3, r1
1000ce58:	d00e      	beq.n	1000ce78 <special_events_handler+0x60>
1000ce5a:	490e      	ldr	r1, [pc, #56]	; (1000ce94 <special_events_handler+0x7c>)
1000ce5c:	428b      	cmp	r3, r1
1000ce5e:	d007      	beq.n	1000ce70 <special_events_handler+0x58>
1000ce60:	490d      	ldr	r1, [pc, #52]	; (1000ce98 <special_events_handler+0x80>)
1000ce62:	2000      	movs	r0, #0
1000ce64:	428b      	cmp	r3, r1
1000ce66:	d10d      	bne.n	1000ce84 <special_events_handler+0x6c>
1000ce68:	1c10      	adds	r0, r2, #0
1000ce6a:	4b0c      	ldr	r3, [pc, #48]	; (1000ce9c <special_events_handler+0x84>)
1000ce6c:	4798      	blx	r3
1000ce6e:	e7ef      	b.n	1000ce50 <special_events_handler+0x38>
1000ce70:	1c11      	adds	r1, r2, #0
1000ce72:	4b0b      	ldr	r3, [pc, #44]	; (1000cea0 <special_events_handler+0x88>)
1000ce74:	2200      	movs	r2, #0
1000ce76:	e002      	b.n	1000ce7e <special_events_handler+0x66>
1000ce78:	1c11      	adds	r1, r2, #0
1000ce7a:	2200      	movs	r2, #0
1000ce7c:	4b09      	ldr	r3, [pc, #36]	; (1000cea4 <special_events_handler+0x8c>)
1000ce7e:	4798      	blx	r3
1000ce80:	4243      	negs	r3, r0
1000ce82:	4158      	adcs	r0, r3
1000ce84:	bd38      	pop	{r3, r4, r5, pc}
1000ce86:	46c0      	nop			; (mov r8, r8)
1000ce88:	10016dd0 	.word	0x10016dd0
1000ce8c:	1000e8b1 	.word	0x1000e8b1
1000ce90:	00000e13 	.word	0x00000e13
1000ce94:	00000e15 	.word	0x00000e15
1000ce98:	00000e01 	.word	0x00000e01
1000ce9c:	1000ec21 	.word	0x1000ec21
1000cea0:	1000ede1 	.word	0x1000ede1
1000cea4:	1000eeb9 	.word	0x1000eeb9

1000cea8 <at_ble_event_get>:
1000cea8:	2300      	movs	r3, #0
1000ceaa:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ceac:	b087      	sub	sp, #28
1000ceae:	9204      	str	r2, [sp, #16]
1000ceb0:	7003      	strb	r3, [r0, #0]
1000ceb2:	9b04      	ldr	r3, [sp, #16]
1000ceb4:	9003      	str	r0, [sp, #12]
1000ceb6:	3b01      	subs	r3, #1
1000ceb8:	1c0d      	adds	r5, r1, #0
1000ceba:	9305      	str	r3, [sp, #20]
1000cebc:	3303      	adds	r3, #3
1000cebe:	d802      	bhi.n	1000cec6 <at_ble_event_get+0x1e>
1000cec0:	9804      	ldr	r0, [sp, #16]
1000cec2:	4bae      	ldr	r3, [pc, #696]	; (1000d17c <at_ble_event_get+0x2d4>)
1000cec4:	4798      	blx	r3
1000cec6:	9b05      	ldr	r3, [sp, #20]
1000cec8:	4cad      	ldr	r4, [pc, #692]	; (1000d180 <at_ble_event_get+0x2d8>)
1000ceca:	3303      	adds	r3, #3
1000cecc:	d902      	bls.n	1000ced4 <at_ble_event_get+0x2c>
1000cece:	2300      	movs	r3, #0
1000ced0:	9302      	str	r3, [sp, #8]
1000ced2:	e015      	b.n	1000cf00 <at_ble_event_get+0x58>
1000ced4:	2300      	movs	r3, #0
1000ced6:	9302      	str	r3, [sp, #8]
1000ced8:	6823      	ldr	r3, [r4, #0]
1000ceda:	2b00      	cmp	r3, #0
1000cedc:	d113      	bne.n	1000cf06 <at_ble_event_get+0x5e>
1000cede:	9b02      	ldr	r3, [sp, #8]
1000cee0:	2bd0      	cmp	r3, #208	; 0xd0
1000cee2:	d100      	bne.n	1000cee6 <at_ble_event_get+0x3e>
1000cee4:	e2da      	b.n	1000d49c <at_ble_event_get+0x5f4>
1000cee6:	9804      	ldr	r0, [sp, #16]
1000cee8:	4ba6      	ldr	r3, [pc, #664]	; (1000d184 <at_ble_event_get+0x2dc>)
1000ceea:	4798      	blx	r3
1000ceec:	9002      	str	r0, [sp, #8]
1000ceee:	2802      	cmp	r0, #2
1000cef0:	d1f2      	bne.n	1000ced8 <at_ble_event_get+0x30>
1000cef2:	e03f      	b.n	1000cf74 <at_ble_event_get+0xcc>
1000cef4:	9804      	ldr	r0, [sp, #16]
1000cef6:	4ba3      	ldr	r3, [pc, #652]	; (1000d184 <at_ble_event_get+0x2dc>)
1000cef8:	4798      	blx	r3
1000cefa:	9002      	str	r0, [sp, #8]
1000cefc:	2802      	cmp	r0, #2
1000cefe:	d039      	beq.n	1000cf74 <at_ble_event_get+0xcc>
1000cf00:	6823      	ldr	r3, [r4, #0]
1000cf02:	2b00      	cmp	r3, #0
1000cf04:	d0f6      	beq.n	1000cef4 <at_ble_event_get+0x4c>
1000cf06:	9b02      	ldr	r3, [sp, #8]
1000cf08:	2bd0      	cmp	r3, #208	; 0xd0
1000cf0a:	d100      	bne.n	1000cf0e <at_ble_event_get+0x66>
1000cf0c:	e2c6      	b.n	1000d49c <at_ble_event_get+0x5f4>
1000cf0e:	9b02      	ldr	r3, [sp, #8]
1000cf10:	3b03      	subs	r3, #3
1000cf12:	1e5a      	subs	r2, r3, #1
1000cf14:	4193      	sbcs	r3, r2
1000cf16:	9a02      	ldr	r2, [sp, #8]
1000cf18:	425b      	negs	r3, r3
1000cf1a:	401a      	ands	r2, r3
1000cf1c:	6823      	ldr	r3, [r4, #0]
1000cf1e:	9202      	str	r2, [sp, #8]
1000cf20:	2b00      	cmp	r3, #0
1000cf22:	d100      	bne.n	1000cf26 <at_ble_event_get+0x7e>
1000cf24:	e2c2      	b.n	1000d4ac <at_ble_event_get+0x604>
1000cf26:	681a      	ldr	r2, [r3, #0]
1000cf28:	68de      	ldr	r6, [r3, #12]
1000cf2a:	6022      	str	r2, [r4, #0]
1000cf2c:	88da      	ldrh	r2, [r3, #6]
1000cf2e:	9201      	str	r2, [sp, #4]
1000cf30:	4a95      	ldr	r2, [pc, #596]	; (1000d188 <at_ble_event_get+0x2e0>)
1000cf32:	889c      	ldrh	r4, [r3, #4]
1000cf34:	6811      	ldr	r1, [r2, #0]
1000cf36:	6013      	str	r3, [r2, #0]
1000cf38:	6019      	str	r1, [r3, #0]
1000cf3a:	4b94      	ldr	r3, [pc, #592]	; (1000d18c <at_ble_event_get+0x2e4>)
1000cf3c:	781b      	ldrb	r3, [r3, #0]
1000cf3e:	2b01      	cmp	r3, #1
1000cf40:	d10f      	bne.n	1000cf62 <at_ble_event_get+0xba>
1000cf42:	4b93      	ldr	r3, [pc, #588]	; (1000d190 <at_ble_event_get+0x2e8>)
1000cf44:	4a92      	ldr	r2, [pc, #584]	; (1000d190 <at_ble_event_get+0x2e8>)
1000cf46:	8898      	ldrh	r0, [r3, #4]
1000cf48:	88d9      	ldrh	r1, [r3, #6]
1000cf4a:	68d2      	ldr	r2, [r2, #12]
1000cf4c:	891b      	ldrh	r3, [r3, #8]
1000cf4e:	4f91      	ldr	r7, [pc, #580]	; (1000d194 <at_ble_event_get+0x2ec>)
1000cf50:	47b8      	blx	r7
1000cf52:	2210      	movs	r2, #16
1000cf54:	4b90      	ldr	r3, [pc, #576]	; (1000d198 <at_ble_event_get+0x2f0>)
1000cf56:	488e      	ldr	r0, [pc, #568]	; (1000d190 <at_ble_event_get+0x2e8>)
1000cf58:	2100      	movs	r1, #0
1000cf5a:	4798      	blx	r3
1000cf5c:	2300      	movs	r3, #0
1000cf5e:	4a8b      	ldr	r2, [pc, #556]	; (1000d18c <at_ble_event_get+0x2e4>)
1000cf60:	7013      	strb	r3, [r2, #0]
1000cf62:	9b02      	ldr	r3, [sp, #8]
1000cf64:	2b00      	cmp	r3, #0
1000cf66:	d114      	bne.n	1000cf92 <at_ble_event_get+0xea>
1000cf68:	4b8c      	ldr	r3, [pc, #560]	; (1000d19c <at_ble_event_get+0x2f4>)
1000cf6a:	429c      	cmp	r4, r3
1000cf6c:	d009      	beq.n	1000cf82 <at_ble_event_get+0xda>
1000cf6e:	4b8c      	ldr	r3, [pc, #560]	; (1000d1a0 <at_ble_event_get+0x2f8>)
1000cf70:	429c      	cmp	r4, r3
1000cf72:	d127      	bne.n	1000cfc4 <at_ble_event_get+0x11c>
1000cf74:	233a      	movs	r3, #58	; 0x3a
1000cf76:	9a03      	ldr	r2, [sp, #12]
1000cf78:	7013      	strb	r3, [r2, #0]
1000cf7a:	2300      	movs	r3, #0
1000cf7c:	9302      	str	r3, [sp, #8]
1000cf7e:	1c1d      	adds	r5, r3, #0
1000cf80:	e007      	b.n	1000cf92 <at_ble_event_get+0xea>
1000cf82:	9b01      	ldr	r3, [sp, #4]
1000cf84:	42a3      	cmp	r3, r4
1000cf86:	d000      	beq.n	1000cf8a <at_ble_event_get+0xe2>
1000cf88:	e28a      	b.n	1000d4a0 <at_ble_event_get+0x5f8>
1000cf8a:	2338      	movs	r3, #56	; 0x38
1000cf8c:	9a03      	ldr	r2, [sp, #12]
1000cf8e:	7013      	strb	r3, [r2, #0]
1000cf90:	602e      	str	r6, [r5, #0]
1000cf92:	9b03      	ldr	r3, [sp, #12]
1000cf94:	781b      	ldrb	r3, [r3, #0]
1000cf96:	2b3b      	cmp	r3, #59	; 0x3b
1000cf98:	d101      	bne.n	1000cf9e <at_ble_event_get+0xf6>
1000cf9a:	4b82      	ldr	r3, [pc, #520]	; (1000d1a4 <at_ble_event_get+0x2fc>)
1000cf9c:	4798      	blx	r3
1000cf9e:	9b03      	ldr	r3, [sp, #12]
1000cfa0:	781b      	ldrb	r3, [r3, #0]
1000cfa2:	2b3b      	cmp	r3, #59	; 0x3b
1000cfa4:	d003      	beq.n	1000cfae <at_ble_event_get+0x106>
1000cfa6:	9b05      	ldr	r3, [sp, #20]
1000cfa8:	3303      	adds	r3, #3
1000cfaa:	d904      	bls.n	1000cfb6 <at_ble_event_get+0x10e>
1000cfac:	e283      	b.n	1000d4b6 <at_ble_event_get+0x60e>
1000cfae:	9b02      	ldr	r3, [sp, #8]
1000cfb0:	2b00      	cmp	r3, #0
1000cfb2:	d088      	beq.n	1000cec6 <at_ble_event_get+0x1e>
1000cfb4:	e7f7      	b.n	1000cfa6 <at_ble_event_get+0xfe>
1000cfb6:	9b02      	ldr	r3, [sp, #8]
1000cfb8:	2bd0      	cmp	r3, #208	; 0xd0
1000cfba:	d100      	bne.n	1000cfbe <at_ble_event_get+0x116>
1000cfbc:	e27b      	b.n	1000d4b6 <at_ble_event_get+0x60e>
1000cfbe:	4b7a      	ldr	r3, [pc, #488]	; (1000d1a8 <at_ble_event_get+0x300>)
1000cfc0:	4798      	blx	r3
1000cfc2:	e278      	b.n	1000d4b6 <at_ble_event_get+0x60e>
1000cfc4:	9b01      	ldr	r3, [sp, #4]
1000cfc6:	2bbb      	cmp	r3, #187	; 0xbb
1000cfc8:	d125      	bne.n	1000d016 <at_ble_event_get+0x16e>
1000cfca:	2cbb      	cmp	r4, #187	; 0xbb
1000cfcc:	d123      	bne.n	1000d016 <at_ble_event_get+0x16e>
1000cfce:	466b      	mov	r3, sp
1000cfd0:	891b      	ldrh	r3, [r3, #8]
1000cfd2:	80ab      	strh	r3, [r5, #4]
1000cfd4:	78b3      	ldrb	r3, [r6, #2]
1000cfd6:	7872      	ldrb	r2, [r6, #1]
1000cfd8:	78f0      	ldrb	r0, [r6, #3]
1000cfda:	021b      	lsls	r3, r3, #8
1000cfdc:	4313      	orrs	r3, r2
1000cfde:	7971      	ldrb	r1, [r6, #5]
1000cfe0:	7932      	ldrb	r2, [r6, #4]
1000cfe2:	70a8      	strb	r0, [r5, #2]
1000cfe4:	4871      	ldr	r0, [pc, #452]	; (1000d1ac <at_ble_event_get+0x304>)
1000cfe6:	802b      	strh	r3, [r5, #0]
1000cfe8:	4283      	cmp	r3, r0
1000cfea:	d806      	bhi.n	1000cffa <at_ble_event_get+0x152>
1000cfec:	4a70      	ldr	r2, [pc, #448]	; (1000d1b0 <at_ble_event_get+0x308>)
1000cfee:	4293      	cmp	r3, r2
1000cff0:	d20b      	bcs.n	1000d00a <at_ble_event_get+0x162>
1000cff2:	4a70      	ldr	r2, [pc, #448]	; (1000d1b4 <at_ble_event_get+0x30c>)
1000cff4:	4293      	cmp	r3, r2
1000cff6:	d008      	beq.n	1000d00a <at_ble_event_get+0x162>
1000cff8:	e009      	b.n	1000d00e <at_ble_event_get+0x166>
1000cffa:	486f      	ldr	r0, [pc, #444]	; (1000d1b8 <at_ble_event_get+0x310>)
1000cffc:	4283      	cmp	r3, r0
1000cffe:	d106      	bne.n	1000d00e <at_ble_event_get+0x166>
1000d000:	020b      	lsls	r3, r1, #8
1000d002:	4313      	orrs	r3, r2
1000d004:	80ab      	strh	r3, [r5, #4]
1000d006:	2337      	movs	r3, #55	; 0x37
1000d008:	e002      	b.n	1000d010 <at_ble_event_get+0x168>
1000d00a:	2336      	movs	r3, #54	; 0x36
1000d00c:	e000      	b.n	1000d010 <at_ble_event_get+0x168>
1000d00e:	2300      	movs	r3, #0
1000d010:	9a03      	ldr	r2, [sp, #12]
1000d012:	7013      	strb	r3, [r2, #0]
1000d014:	e7bd      	b.n	1000cf92 <at_ble_event_get+0xea>
1000d016:	4b69      	ldr	r3, [pc, #420]	; (1000d1bc <at_ble_event_get+0x314>)
1000d018:	429c      	cmp	r4, r3
1000d01a:	d100      	bne.n	1000d01e <at_ble_event_get+0x176>
1000d01c:	e144      	b.n	1000d2a8 <at_ble_event_get+0x400>
1000d01e:	d865      	bhi.n	1000d0ec <at_ble_event_get+0x244>
1000d020:	4b67      	ldr	r3, [pc, #412]	; (1000d1c0 <at_ble_event_get+0x318>)
1000d022:	429c      	cmp	r4, r3
1000d024:	d100      	bne.n	1000d028 <at_ble_event_get+0x180>
1000d026:	e1d5      	b.n	1000d3d4 <at_ble_event_get+0x52c>
1000d028:	d82f      	bhi.n	1000d08a <at_ble_event_get+0x1e2>
1000d02a:	4b66      	ldr	r3, [pc, #408]	; (1000d1c4 <at_ble_event_get+0x31c>)
1000d02c:	429c      	cmp	r4, r3
1000d02e:	d100      	bne.n	1000d032 <at_ble_event_get+0x18a>
1000d030:	e1e0      	b.n	1000d3f4 <at_ble_event_get+0x54c>
1000d032:	d813      	bhi.n	1000d05c <at_ble_event_get+0x1b4>
1000d034:	4b64      	ldr	r3, [pc, #400]	; (1000d1c8 <at_ble_event_get+0x320>)
1000d036:	429c      	cmp	r4, r3
1000d038:	d100      	bne.n	1000d03c <at_ble_event_get+0x194>
1000d03a:	e1a3      	b.n	1000d384 <at_ble_event_get+0x4dc>
1000d03c:	d804      	bhi.n	1000d048 <at_ble_event_get+0x1a0>
1000d03e:	2638      	movs	r6, #56	; 0x38
1000d040:	42b4      	cmp	r4, r6
1000d042:	d100      	bne.n	1000d046 <at_ble_event_get+0x19e>
1000d044:	e225      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d046:	e117      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d048:	4b60      	ldr	r3, [pc, #384]	; (1000d1cc <at_ble_event_get+0x324>)
1000d04a:	429c      	cmp	r4, r3
1000d04c:	d100      	bne.n	1000d050 <at_ble_event_get+0x1a8>
1000d04e:	e19f      	b.n	1000d390 <at_ble_event_get+0x4e8>
1000d050:	33fe      	adds	r3, #254	; 0xfe
1000d052:	33ff      	adds	r3, #255	; 0xff
1000d054:	429c      	cmp	r4, r3
1000d056:	d100      	bne.n	1000d05a <at_ble_event_get+0x1b2>
1000d058:	e1d3      	b.n	1000d402 <at_ble_event_get+0x55a>
1000d05a:	e10d      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d05c:	4b5c      	ldr	r3, [pc, #368]	; (1000d1d0 <at_ble_event_get+0x328>)
1000d05e:	429c      	cmp	r4, r3
1000d060:	d100      	bne.n	1000d064 <at_ble_event_get+0x1bc>
1000d062:	e1a9      	b.n	1000d3b8 <at_ble_event_get+0x510>
1000d064:	d808      	bhi.n	1000d078 <at_ble_event_get+0x1d0>
1000d066:	4b5b      	ldr	r3, [pc, #364]	; (1000d1d4 <at_ble_event_get+0x32c>)
1000d068:	429c      	cmp	r4, r3
1000d06a:	d100      	bne.n	1000d06e <at_ble_event_get+0x1c6>
1000d06c:	e196      	b.n	1000d39c <at_ble_event_get+0x4f4>
1000d06e:	4b5a      	ldr	r3, [pc, #360]	; (1000d1d8 <at_ble_event_get+0x330>)
1000d070:	429c      	cmp	r4, r3
1000d072:	d100      	bne.n	1000d076 <at_ble_event_get+0x1ce>
1000d074:	e199      	b.n	1000d3aa <at_ble_event_get+0x502>
1000d076:	e0ff      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d078:	4b58      	ldr	r3, [pc, #352]	; (1000d1dc <at_ble_event_get+0x334>)
1000d07a:	429c      	cmp	r4, r3
1000d07c:	d100      	bne.n	1000d080 <at_ble_event_get+0x1d8>
1000d07e:	e1a2      	b.n	1000d3c6 <at_ble_event_get+0x51e>
1000d080:	4b57      	ldr	r3, [pc, #348]	; (1000d1e0 <at_ble_event_get+0x338>)
1000d082:	429c      	cmp	r4, r3
1000d084:	d100      	bne.n	1000d088 <at_ble_event_get+0x1e0>
1000d086:	e1d4      	b.n	1000d432 <at_ble_event_get+0x58a>
1000d088:	e0f6      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d08a:	4b56      	ldr	r3, [pc, #344]	; (1000d1e4 <at_ble_event_get+0x33c>)
1000d08c:	429c      	cmp	r4, r3
1000d08e:	d100      	bne.n	1000d092 <at_ble_event_get+0x1ea>
1000d090:	e1c8      	b.n	1000d424 <at_ble_event_get+0x57c>
1000d092:	d812      	bhi.n	1000d0ba <at_ble_event_get+0x212>
1000d094:	4b54      	ldr	r3, [pc, #336]	; (1000d1e8 <at_ble_event_get+0x340>)
1000d096:	429c      	cmp	r4, r3
1000d098:	d100      	bne.n	1000d09c <at_ble_event_get+0x1f4>
1000d09a:	e1d1      	b.n	1000d440 <at_ble_event_get+0x598>
1000d09c:	d804      	bhi.n	1000d0a8 <at_ble_event_get+0x200>
1000d09e:	4b53      	ldr	r3, [pc, #332]	; (1000d1ec <at_ble_event_get+0x344>)
1000d0a0:	429c      	cmp	r4, r3
1000d0a2:	d100      	bne.n	1000d0a6 <at_ble_event_get+0x1fe>
1000d0a4:	e19b      	b.n	1000d3de <at_ble_event_get+0x536>
1000d0a6:	e0e7      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d0a8:	4b51      	ldr	r3, [pc, #324]	; (1000d1f0 <at_ble_event_get+0x348>)
1000d0aa:	429c      	cmp	r4, r3
1000d0ac:	d100      	bne.n	1000d0b0 <at_ble_event_get+0x208>
1000d0ae:	e1ad      	b.n	1000d40c <at_ble_event_get+0x564>
1000d0b0:	4b50      	ldr	r3, [pc, #320]	; (1000d1f4 <at_ble_event_get+0x34c>)
1000d0b2:	429c      	cmp	r4, r3
1000d0b4:	d100      	bne.n	1000d0b8 <at_ble_event_get+0x210>
1000d0b6:	e1b0      	b.n	1000d41a <at_ble_event_get+0x572>
1000d0b8:	e0de      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d0ba:	4b4f      	ldr	r3, [pc, #316]	; (1000d1f8 <at_ble_event_get+0x350>)
1000d0bc:	429c      	cmp	r4, r3
1000d0be:	d100      	bne.n	1000d0c2 <at_ble_event_get+0x21a>
1000d0c0:	e0e0      	b.n	1000d284 <at_ble_event_get+0x3dc>
1000d0c2:	d809      	bhi.n	1000d0d8 <at_ble_event_get+0x230>
1000d0c4:	3b08      	subs	r3, #8
1000d0c6:	429c      	cmp	r4, r3
1000d0c8:	d100      	bne.n	1000d0cc <at_ble_event_get+0x224>
1000d0ca:	e0d7      	b.n	1000d27c <at_ble_event_get+0x3d4>
1000d0cc:	4b4b      	ldr	r3, [pc, #300]	; (1000d1fc <at_ble_event_get+0x354>)
1000d0ce:	2639      	movs	r6, #57	; 0x39
1000d0d0:	429c      	cmp	r4, r3
1000d0d2:	d100      	bne.n	1000d0d6 <at_ble_event_get+0x22e>
1000d0d4:	e1dd      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d0d6:	e0cf      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d0d8:	23d1      	movs	r3, #209	; 0xd1
1000d0da:	011b      	lsls	r3, r3, #4
1000d0dc:	429c      	cmp	r4, r3
1000d0de:	d100      	bne.n	1000d0e2 <at_ble_event_get+0x23a>
1000d0e0:	e0d6      	b.n	1000d290 <at_ble_event_get+0x3e8>
1000d0e2:	4b47      	ldr	r3, [pc, #284]	; (1000d200 <at_ble_event_get+0x358>)
1000d0e4:	429c      	cmp	r4, r3
1000d0e6:	d100      	bne.n	1000d0ea <at_ble_event_get+0x242>
1000d0e8:	e0d8      	b.n	1000d29c <at_ble_event_get+0x3f4>
1000d0ea:	e0c5      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d0ec:	4b45      	ldr	r3, [pc, #276]	; (1000d204 <at_ble_event_get+0x35c>)
1000d0ee:	429c      	cmp	r4, r3
1000d0f0:	d100      	bne.n	1000d0f4 <at_ble_event_get+0x24c>
1000d0f2:	e117      	b.n	1000d324 <at_ble_event_get+0x47c>
1000d0f4:	d82e      	bhi.n	1000d154 <at_ble_event_get+0x2ac>
1000d0f6:	4b44      	ldr	r3, [pc, #272]	; (1000d208 <at_ble_event_get+0x360>)
1000d0f8:	429c      	cmp	r4, r3
1000d0fa:	d100      	bne.n	1000d0fe <at_ble_event_get+0x256>
1000d0fc:	e13d      	b.n	1000d37a <at_ble_event_get+0x4d2>
1000d0fe:	d812      	bhi.n	1000d126 <at_ble_event_get+0x27e>
1000d100:	4b42      	ldr	r3, [pc, #264]	; (1000d20c <at_ble_event_get+0x364>)
1000d102:	429c      	cmp	r4, r3
1000d104:	d100      	bne.n	1000d108 <at_ble_event_get+0x260>
1000d106:	e0e8      	b.n	1000d2da <at_ble_event_get+0x432>
1000d108:	d804      	bhi.n	1000d114 <at_ble_event_get+0x26c>
1000d10a:	3b03      	subs	r3, #3
1000d10c:	429c      	cmp	r4, r3
1000d10e:	d100      	bne.n	1000d112 <at_ble_event_get+0x26a>
1000d110:	e0d0      	b.n	1000d2b4 <at_ble_event_get+0x40c>
1000d112:	e0b1      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d114:	4b3e      	ldr	r3, [pc, #248]	; (1000d210 <at_ble_event_get+0x368>)
1000d116:	429c      	cmp	r4, r3
1000d118:	d100      	bne.n	1000d11c <at_ble_event_get+0x274>
1000d11a:	e0d0      	b.n	1000d2be <at_ble_event_get+0x416>
1000d11c:	4b3d      	ldr	r3, [pc, #244]	; (1000d214 <at_ble_event_get+0x36c>)
1000d11e:	429c      	cmp	r4, r3
1000d120:	d100      	bne.n	1000d124 <at_ble_event_get+0x27c>
1000d122:	e0f9      	b.n	1000d318 <at_ble_event_get+0x470>
1000d124:	e0a8      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d126:	4b3c      	ldr	r3, [pc, #240]	; (1000d218 <at_ble_event_get+0x370>)
1000d128:	429c      	cmp	r4, r3
1000d12a:	d100      	bne.n	1000d12e <at_ble_event_get+0x286>
1000d12c:	e0db      	b.n	1000d2e6 <at_ble_event_get+0x43e>
1000d12e:	d808      	bhi.n	1000d142 <at_ble_event_get+0x29a>
1000d130:	4b3a      	ldr	r3, [pc, #232]	; (1000d21c <at_ble_event_get+0x374>)
1000d132:	429c      	cmp	r4, r3
1000d134:	d100      	bne.n	1000d138 <at_ble_event_get+0x290>
1000d136:	e11b      	b.n	1000d370 <at_ble_event_get+0x4c8>
1000d138:	4b39      	ldr	r3, [pc, #228]	; (1000d220 <at_ble_event_get+0x378>)
1000d13a:	429c      	cmp	r4, r3
1000d13c:	d100      	bne.n	1000d140 <at_ble_event_get+0x298>
1000d13e:	e0d8      	b.n	1000d2f2 <at_ble_event_get+0x44a>
1000d140:	e09a      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d142:	4b38      	ldr	r3, [pc, #224]	; (1000d224 <at_ble_event_get+0x37c>)
1000d144:	429c      	cmp	r4, r3
1000d146:	d100      	bne.n	1000d14a <at_ble_event_get+0x2a2>
1000d148:	e0d8      	b.n	1000d2fc <at_ble_event_get+0x454>
1000d14a:	4b37      	ldr	r3, [pc, #220]	; (1000d228 <at_ble_event_get+0x380>)
1000d14c:	429c      	cmp	r4, r3
1000d14e:	d100      	bne.n	1000d152 <at_ble_event_get+0x2aa>
1000d150:	e0db      	b.n	1000d30a <at_ble_event_get+0x462>
1000d152:	e091      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d154:	4b35      	ldr	r3, [pc, #212]	; (1000d22c <at_ble_event_get+0x384>)
1000d156:	429c      	cmp	r4, r3
1000d158:	d100      	bne.n	1000d15c <at_ble_event_get+0x2b4>
1000d15a:	e0f7      	b.n	1000d34c <at_ble_event_get+0x4a4>
1000d15c:	d876      	bhi.n	1000d24c <at_ble_event_get+0x3a4>
1000d15e:	4b34      	ldr	r3, [pc, #208]	; (1000d230 <at_ble_event_get+0x388>)
1000d160:	429c      	cmp	r4, r3
1000d162:	d100      	bne.n	1000d166 <at_ble_event_get+0x2be>
1000d164:	e0f8      	b.n	1000d358 <at_ble_event_get+0x4b0>
1000d166:	d869      	bhi.n	1000d23c <at_ble_event_get+0x394>
1000d168:	4b32      	ldr	r3, [pc, #200]	; (1000d234 <at_ble_event_get+0x38c>)
1000d16a:	429c      	cmp	r4, r3
1000d16c:	d100      	bne.n	1000d170 <at_ble_event_get+0x2c8>
1000d16e:	e0e0      	b.n	1000d332 <at_ble_event_get+0x48a>
1000d170:	4b31      	ldr	r3, [pc, #196]	; (1000d238 <at_ble_event_get+0x390>)
1000d172:	429c      	cmp	r4, r3
1000d174:	d100      	bne.n	1000d178 <at_ble_event_get+0x2d0>
1000d176:	e0a9      	b.n	1000d2cc <at_ble_event_get+0x424>
1000d178:	e07e      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d17a:	46c0      	nop			; (mov r8, r8)
1000d17c:	1000e8e9 	.word	0x1000e8e9
1000d180:	10015c58 	.word	0x10015c58
1000d184:	1000bf51 	.word	0x1000bf51
1000d188:	10015c5c 	.word	0x10015c5c
1000d18c:	10015c54 	.word	0x10015c54
1000d190:	10015c44 	.word	0x10015c44
1000d194:	1000cd91 	.word	0x1000cd91
1000d198:	10011c75 	.word	0x10011c75
1000d19c:	0000ffff 	.word	0x0000ffff
1000d1a0:	0000fffe 	.word	0x0000fffe
1000d1a4:	1000c1c9 	.word	0x1000c1c9
1000d1a8:	1000e8eb 	.word	0x1000e8eb
1000d1ac:	0000201e 	.word	0x0000201e
1000d1b0:	0000201d 	.word	0x0000201d
1000d1b4:	00000c03 	.word	0x00000c03
1000d1b8:	0000201f 	.word	0x0000201f
1000d1bc:	00000d1c 	.word	0x00000d1c
1000d1c0:	00000c0c 	.word	0x00000c0c
1000d1c4:	00000c02 	.word	0x00000c02
1000d1c8:	00000a02 	.word	0x00000a02
1000d1cc:	00000a03 	.word	0x00000a03
1000d1d0:	00000c06 	.word	0x00000c06
1000d1d4:	00000c04 	.word	0x00000c04
1000d1d8:	00000c05 	.word	0x00000c05
1000d1dc:	00000c07 	.word	0x00000c07
1000d1e0:	00000c09 	.word	0x00000c09
1000d1e4:	00000c17 	.word	0x00000c17
1000d1e8:	00000c12 	.word	0x00000c12
1000d1ec:	00000c0d 	.word	0x00000c0d
1000d1f0:	00000c13 	.word	0x00000c13
1000d1f4:	00000c15 	.word	0x00000c15
1000d1f8:	00000d08 	.word	0x00000d08
1000d1fc:	00000d01 	.word	0x00000d01
1000d200:	00000d15 	.word	0x00000d15
1000d204:	00000e1b 	.word	0x00000e1b
1000d208:	00000e0f 	.word	0x00000e0f
1000d20c:	00000e03 	.word	0x00000e03
1000d210:	00000e06 	.word	0x00000e06
1000d214:	00000e0a 	.word	0x00000e0a
1000d218:	00000e15 	.word	0x00000e15
1000d21c:	00000e11 	.word	0x00000e11
1000d220:	00000e13 	.word	0x00000e13
1000d224:	00000e17 	.word	0x00000e17
1000d228:	00000e19 	.word	0x00000e19
1000d22c:	00000e27 	.word	0x00000e27
1000d230:	00000e21 	.word	0x00000e21
1000d234:	00000e1c 	.word	0x00000e1c
1000d238:	00000e1d 	.word	0x00000e1d
1000d23c:	4b9f      	ldr	r3, [pc, #636]	; (1000d4bc <at_ble_event_get+0x614>)
1000d23e:	429c      	cmp	r4, r3
1000d240:	d07e      	beq.n	1000d340 <at_ble_event_get+0x498>
1000d242:	4b9f      	ldr	r3, [pc, #636]	; (1000d4c0 <at_ble_event_get+0x618>)
1000d244:	429c      	cmp	r4, r3
1000d246:	d100      	bne.n	1000d24a <at_ble_event_get+0x3a2>
1000d248:	e08c      	b.n	1000d364 <at_ble_event_get+0x4bc>
1000d24a:	e015      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d24c:	4b9d      	ldr	r3, [pc, #628]	; (1000d4c4 <at_ble_event_get+0x61c>)
1000d24e:	429c      	cmp	r4, r3
1000d250:	d100      	bne.n	1000d254 <at_ble_event_get+0x3ac>
1000d252:	e10a      	b.n	1000d46a <at_ble_event_get+0x5c2>
1000d254:	d808      	bhi.n	1000d268 <at_ble_event_get+0x3c0>
1000d256:	4b9c      	ldr	r3, [pc, #624]	; (1000d4c8 <at_ble_event_get+0x620>)
1000d258:	429c      	cmp	r4, r3
1000d25a:	d100      	bne.n	1000d25e <at_ble_event_get+0x3b6>
1000d25c:	e0f7      	b.n	1000d44e <at_ble_event_get+0x5a6>
1000d25e:	4b9b      	ldr	r3, [pc, #620]	; (1000d4cc <at_ble_event_get+0x624>)
1000d260:	429c      	cmp	r4, r3
1000d262:	d100      	bne.n	1000d266 <at_ble_event_get+0x3be>
1000d264:	e0fa      	b.n	1000d45c <at_ble_event_get+0x5b4>
1000d266:	e007      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d268:	4b99      	ldr	r3, [pc, #612]	; (1000d4d0 <at_ble_event_get+0x628>)
1000d26a:	429c      	cmp	r4, r3
1000d26c:	d100      	bne.n	1000d270 <at_ble_event_get+0x3c8>
1000d26e:	e103      	b.n	1000d478 <at_ble_event_get+0x5d0>
1000d270:	4b98      	ldr	r3, [pc, #608]	; (1000d4d4 <at_ble_event_get+0x62c>)
1000d272:	429c      	cmp	r4, r3
1000d274:	d100      	bne.n	1000d278 <at_ble_event_get+0x3d0>
1000d276:	e106      	b.n	1000d486 <at_ble_event_get+0x5de>
1000d278:	2600      	movs	r6, #0
1000d27a:	e10a      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d27c:	1c30      	adds	r0, r6, #0
1000d27e:	1c29      	adds	r1, r5, #0
1000d280:	4b95      	ldr	r3, [pc, #596]	; (1000d4d8 <at_ble_event_get+0x630>)
1000d282:	e014      	b.n	1000d2ae <at_ble_event_get+0x406>
1000d284:	1c30      	adds	r0, r6, #0
1000d286:	1c29      	adds	r1, r5, #0
1000d288:	4b94      	ldr	r3, [pc, #592]	; (1000d4dc <at_ble_event_get+0x634>)
1000d28a:	4798      	blx	r3
1000d28c:	2604      	movs	r6, #4
1000d28e:	e100      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d290:	1c30      	adds	r0, r6, #0
1000d292:	1c29      	adds	r1, r5, #0
1000d294:	4b92      	ldr	r3, [pc, #584]	; (1000d4e0 <at_ble_event_get+0x638>)
1000d296:	4798      	blx	r3
1000d298:	2601      	movs	r6, #1
1000d29a:	e0fa      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d29c:	1c30      	adds	r0, r6, #0
1000d29e:	1c29      	adds	r1, r5, #0
1000d2a0:	4b90      	ldr	r3, [pc, #576]	; (1000d4e4 <at_ble_event_get+0x63c>)
1000d2a2:	4798      	blx	r3
1000d2a4:	260f      	movs	r6, #15
1000d2a6:	e0f4      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d2a8:	1c30      	adds	r0, r6, #0
1000d2aa:	1c29      	adds	r1, r5, #0
1000d2ac:	4b8e      	ldr	r3, [pc, #568]	; (1000d4e8 <at_ble_event_get+0x640>)
1000d2ae:	4798      	blx	r3
1000d2b0:	1c06      	adds	r6, r0, #0
1000d2b2:	e0ee      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d2b4:	9801      	ldr	r0, [sp, #4]
1000d2b6:	1c31      	adds	r1, r6, #0
1000d2b8:	1c2a      	adds	r2, r5, #0
1000d2ba:	4b8c      	ldr	r3, [pc, #560]	; (1000d4ec <at_ble_event_get+0x644>)
1000d2bc:	e017      	b.n	1000d2ee <at_ble_event_get+0x446>
1000d2be:	1c31      	adds	r1, r6, #0
1000d2c0:	9801      	ldr	r0, [sp, #4]
1000d2c2:	1c2a      	adds	r2, r5, #0
1000d2c4:	4b8a      	ldr	r3, [pc, #552]	; (1000d4f0 <at_ble_event_get+0x648>)
1000d2c6:	4798      	blx	r3
1000d2c8:	2611      	movs	r6, #17
1000d2ca:	e0e2      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d2cc:	1c31      	adds	r1, r6, #0
1000d2ce:	9801      	ldr	r0, [sp, #4]
1000d2d0:	1c2a      	adds	r2, r5, #0
1000d2d2:	4b88      	ldr	r3, [pc, #544]	; (1000d4f4 <at_ble_event_get+0x64c>)
1000d2d4:	4798      	blx	r3
1000d2d6:	2612      	movs	r6, #18
1000d2d8:	e0db      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d2da:	1c30      	adds	r0, r6, #0
1000d2dc:	1c29      	adds	r1, r5, #0
1000d2de:	4b86      	ldr	r3, [pc, #536]	; (1000d4f8 <at_ble_event_get+0x650>)
1000d2e0:	4798      	blx	r3
1000d2e2:	2606      	movs	r6, #6
1000d2e4:	e0d5      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d2e6:	1c31      	adds	r1, r6, #0
1000d2e8:	1c2a      	adds	r2, r5, #0
1000d2ea:	9801      	ldr	r0, [sp, #4]
1000d2ec:	4b83      	ldr	r3, [pc, #524]	; (1000d4fc <at_ble_event_get+0x654>)
1000d2ee:	4798      	blx	r3
1000d2f0:	e7de      	b.n	1000d2b0 <at_ble_event_get+0x408>
1000d2f2:	9801      	ldr	r0, [sp, #4]
1000d2f4:	1c31      	adds	r1, r6, #0
1000d2f6:	1c2a      	adds	r2, r5, #0
1000d2f8:	4b81      	ldr	r3, [pc, #516]	; (1000d500 <at_ble_event_get+0x658>)
1000d2fa:	e7f8      	b.n	1000d2ee <at_ble_event_get+0x446>
1000d2fc:	1c31      	adds	r1, r6, #0
1000d2fe:	9801      	ldr	r0, [sp, #4]
1000d300:	1c2a      	adds	r2, r5, #0
1000d302:	4b80      	ldr	r3, [pc, #512]	; (1000d504 <at_ble_event_get+0x65c>)
1000d304:	4798      	blx	r3
1000d306:	260d      	movs	r6, #13
1000d308:	e0c3      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d30a:	1c31      	adds	r1, r6, #0
1000d30c:	9801      	ldr	r0, [sp, #4]
1000d30e:	1c2a      	adds	r2, r5, #0
1000d310:	4b7d      	ldr	r3, [pc, #500]	; (1000d508 <at_ble_event_get+0x660>)
1000d312:	4798      	blx	r3
1000d314:	260e      	movs	r6, #14
1000d316:	e0bc      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d318:	9801      	ldr	r0, [sp, #4]
1000d31a:	1c31      	adds	r1, r6, #0
1000d31c:	1c2a      	adds	r2, r5, #0
1000d31e:	4b7b      	ldr	r3, [pc, #492]	; (1000d50c <at_ble_event_get+0x664>)
1000d320:	4798      	blx	r3
1000d322:	e084      	b.n	1000d42e <at_ble_event_get+0x586>
1000d324:	1c31      	adds	r1, r6, #0
1000d326:	9801      	ldr	r0, [sp, #4]
1000d328:	1c2a      	adds	r2, r5, #0
1000d32a:	4b79      	ldr	r3, [pc, #484]	; (1000d510 <at_ble_event_get+0x668>)
1000d32c:	4798      	blx	r3
1000d32e:	260b      	movs	r6, #11
1000d330:	e0af      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d332:	1c31      	adds	r1, r6, #0
1000d334:	9801      	ldr	r0, [sp, #4]
1000d336:	1c2a      	adds	r2, r5, #0
1000d338:	4b76      	ldr	r3, [pc, #472]	; (1000d514 <at_ble_event_get+0x66c>)
1000d33a:	4798      	blx	r3
1000d33c:	2610      	movs	r6, #16
1000d33e:	e0a8      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d340:	1c30      	adds	r0, r6, #0
1000d342:	1c29      	adds	r1, r5, #0
1000d344:	4b74      	ldr	r3, [pc, #464]	; (1000d518 <at_ble_event_get+0x670>)
1000d346:	4798      	blx	r3
1000d348:	2628      	movs	r6, #40	; 0x28
1000d34a:	e0a2      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d34c:	1c30      	adds	r0, r6, #0
1000d34e:	1c29      	adds	r1, r5, #0
1000d350:	4b72      	ldr	r3, [pc, #456]	; (1000d51c <at_ble_event_get+0x674>)
1000d352:	4798      	blx	r3
1000d354:	2629      	movs	r6, #41	; 0x29
1000d356:	e09c      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d358:	1c30      	adds	r0, r6, #0
1000d35a:	1c29      	adds	r1, r5, #0
1000d35c:	4b70      	ldr	r3, [pc, #448]	; (1000d520 <at_ble_event_get+0x678>)
1000d35e:	4798      	blx	r3
1000d360:	2627      	movs	r6, #39	; 0x27
1000d362:	e096      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d364:	1c30      	adds	r0, r6, #0
1000d366:	1c29      	adds	r1, r5, #0
1000d368:	4b6e      	ldr	r3, [pc, #440]	; (1000d524 <at_ble_event_get+0x67c>)
1000d36a:	4798      	blx	r3
1000d36c:	262a      	movs	r6, #42	; 0x2a
1000d36e:	e090      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d370:	9801      	ldr	r0, [sp, #4]
1000d372:	1c31      	adds	r1, r6, #0
1000d374:	1c2a      	adds	r2, r5, #0
1000d376:	4b6c      	ldr	r3, [pc, #432]	; (1000d528 <at_ble_event_get+0x680>)
1000d378:	e7b9      	b.n	1000d2ee <at_ble_event_get+0x446>
1000d37a:	9801      	ldr	r0, [sp, #4]
1000d37c:	1c31      	adds	r1, r6, #0
1000d37e:	1c2a      	adds	r2, r5, #0
1000d380:	4b6a      	ldr	r3, [pc, #424]	; (1000d52c <at_ble_event_get+0x684>)
1000d382:	e7b4      	b.n	1000d2ee <at_ble_event_get+0x446>
1000d384:	1c30      	adds	r0, r6, #0
1000d386:	1c29      	adds	r1, r5, #0
1000d388:	4b69      	ldr	r3, [pc, #420]	; (1000d530 <at_ble_event_get+0x688>)
1000d38a:	4798      	blx	r3
1000d38c:	262b      	movs	r6, #43	; 0x2b
1000d38e:	e080      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d390:	1c30      	adds	r0, r6, #0
1000d392:	1c29      	adds	r1, r5, #0
1000d394:	4b67      	ldr	r3, [pc, #412]	; (1000d534 <at_ble_event_get+0x68c>)
1000d396:	4798      	blx	r3
1000d398:	262c      	movs	r6, #44	; 0x2c
1000d39a:	e07a      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d39c:	1c31      	adds	r1, r6, #0
1000d39e:	9801      	ldr	r0, [sp, #4]
1000d3a0:	1c2a      	adds	r2, r5, #0
1000d3a2:	4b65      	ldr	r3, [pc, #404]	; (1000d538 <at_ble_event_get+0x690>)
1000d3a4:	4798      	blx	r3
1000d3a6:	2613      	movs	r6, #19
1000d3a8:	e073      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d3aa:	1c31      	adds	r1, r6, #0
1000d3ac:	9801      	ldr	r0, [sp, #4]
1000d3ae:	1c2a      	adds	r2, r5, #0
1000d3b0:	4b62      	ldr	r3, [pc, #392]	; (1000d53c <at_ble_event_get+0x694>)
1000d3b2:	4798      	blx	r3
1000d3b4:	2614      	movs	r6, #20
1000d3b6:	e06c      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d3b8:	1c31      	adds	r1, r6, #0
1000d3ba:	9801      	ldr	r0, [sp, #4]
1000d3bc:	1c2a      	adds	r2, r5, #0
1000d3be:	4b60      	ldr	r3, [pc, #384]	; (1000d540 <at_ble_event_get+0x698>)
1000d3c0:	4798      	blx	r3
1000d3c2:	2615      	movs	r6, #21
1000d3c4:	e065      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d3c6:	1c31      	adds	r1, r6, #0
1000d3c8:	9801      	ldr	r0, [sp, #4]
1000d3ca:	1c2a      	adds	r2, r5, #0
1000d3cc:	4b5d      	ldr	r3, [pc, #372]	; (1000d544 <at_ble_event_get+0x69c>)
1000d3ce:	4798      	blx	r3
1000d3d0:	2616      	movs	r6, #22
1000d3d2:	e05e      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d3d4:	9801      	ldr	r0, [sp, #4]
1000d3d6:	1c31      	adds	r1, r6, #0
1000d3d8:	1c2a      	adds	r2, r5, #0
1000d3da:	4b5b      	ldr	r3, [pc, #364]	; (1000d548 <at_ble_event_get+0x6a0>)
1000d3dc:	e787      	b.n	1000d2ee <at_ble_event_get+0x446>
1000d3de:	1c31      	adds	r1, r6, #0
1000d3e0:	9801      	ldr	r0, [sp, #4]
1000d3e2:	1c2a      	adds	r2, r5, #0
1000d3e4:	4b58      	ldr	r3, [pc, #352]	; (1000d548 <at_ble_event_get+0x6a0>)
1000d3e6:	4798      	blx	r3
1000d3e8:	88a9      	ldrh	r1, [r5, #4]
1000d3ea:	1c06      	adds	r6, r0, #0
1000d3ec:	4b57      	ldr	r3, [pc, #348]	; (1000d54c <at_ble_event_get+0x6a4>)
1000d3ee:	8828      	ldrh	r0, [r5, #0]
1000d3f0:	4798      	blx	r3
1000d3f2:	e04e      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d3f4:	1c31      	adds	r1, r6, #0
1000d3f6:	9801      	ldr	r0, [sp, #4]
1000d3f8:	1c2a      	adds	r2, r5, #0
1000d3fa:	4b55      	ldr	r3, [pc, #340]	; (1000d550 <at_ble_event_get+0x6a8>)
1000d3fc:	4798      	blx	r3
1000d3fe:	2623      	movs	r6, #35	; 0x23
1000d400:	e047      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d402:	9801      	ldr	r0, [sp, #4]
1000d404:	1c31      	adds	r1, r6, #0
1000d406:	1c2a      	adds	r2, r5, #0
1000d408:	4b52      	ldr	r3, [pc, #328]	; (1000d554 <at_ble_event_get+0x6ac>)
1000d40a:	e770      	b.n	1000d2ee <at_ble_event_get+0x446>
1000d40c:	9b01      	ldr	r3, [sp, #4]
1000d40e:	1c30      	adds	r0, r6, #0
1000d410:	0a1f      	lsrs	r7, r3, #8
1000d412:	802f      	strh	r7, [r5, #0]
1000d414:	1c29      	adds	r1, r5, #0
1000d416:	4b50      	ldr	r3, [pc, #320]	; (1000d558 <at_ble_event_get+0x6b0>)
1000d418:	e749      	b.n	1000d2ae <at_ble_event_get+0x406>
1000d41a:	9801      	ldr	r0, [sp, #4]
1000d41c:	1c31      	adds	r1, r6, #0
1000d41e:	1c2a      	adds	r2, r5, #0
1000d420:	4b4e      	ldr	r3, [pc, #312]	; (1000d55c <at_ble_event_get+0x6b4>)
1000d422:	e764      	b.n	1000d2ee <at_ble_event_get+0x446>
1000d424:	1c30      	adds	r0, r6, #0
1000d426:	1c29      	adds	r1, r5, #0
1000d428:	9a01      	ldr	r2, [sp, #4]
1000d42a:	4b4d      	ldr	r3, [pc, #308]	; (1000d560 <at_ble_event_get+0x6b8>)
1000d42c:	4798      	blx	r3
1000d42e:	263b      	movs	r6, #59	; 0x3b
1000d430:	e02f      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d432:	1c31      	adds	r1, r6, #0
1000d434:	9801      	ldr	r0, [sp, #4]
1000d436:	1c2a      	adds	r2, r5, #0
1000d438:	4b4a      	ldr	r3, [pc, #296]	; (1000d564 <at_ble_event_get+0x6bc>)
1000d43a:	4798      	blx	r3
1000d43c:	2618      	movs	r6, #24
1000d43e:	e028      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d440:	1c31      	adds	r1, r6, #0
1000d442:	9801      	ldr	r0, [sp, #4]
1000d444:	1c2a      	adds	r2, r5, #0
1000d446:	4b48      	ldr	r3, [pc, #288]	; (1000d568 <at_ble_event_get+0x6c0>)
1000d448:	4798      	blx	r3
1000d44a:	2620      	movs	r6, #32
1000d44c:	e021      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d44e:	1c31      	adds	r1, r6, #0
1000d450:	9801      	ldr	r0, [sp, #4]
1000d452:	1c2a      	adds	r2, r5, #0
1000d454:	4b45      	ldr	r3, [pc, #276]	; (1000d56c <at_ble_event_get+0x6c4>)
1000d456:	4798      	blx	r3
1000d458:	2633      	movs	r6, #51	; 0x33
1000d45a:	e01a      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d45c:	1c31      	adds	r1, r6, #0
1000d45e:	9801      	ldr	r0, [sp, #4]
1000d460:	1c2a      	adds	r2, r5, #0
1000d462:	4b43      	ldr	r3, [pc, #268]	; (1000d570 <at_ble_event_get+0x6c8>)
1000d464:	4798      	blx	r3
1000d466:	2630      	movs	r6, #48	; 0x30
1000d468:	e013      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d46a:	1c31      	adds	r1, r6, #0
1000d46c:	9801      	ldr	r0, [sp, #4]
1000d46e:	1c2a      	adds	r2, r5, #0
1000d470:	4b40      	ldr	r3, [pc, #256]	; (1000d574 <at_ble_event_get+0x6cc>)
1000d472:	4798      	blx	r3
1000d474:	2634      	movs	r6, #52	; 0x34
1000d476:	e00c      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d478:	1c31      	adds	r1, r6, #0
1000d47a:	9801      	ldr	r0, [sp, #4]
1000d47c:	1c2a      	adds	r2, r5, #0
1000d47e:	4b3e      	ldr	r3, [pc, #248]	; (1000d578 <at_ble_event_get+0x6d0>)
1000d480:	4798      	blx	r3
1000d482:	2635      	movs	r6, #53	; 0x35
1000d484:	e005      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d486:	1c31      	adds	r1, r6, #0
1000d488:	9801      	ldr	r0, [sp, #4]
1000d48a:	1c2a      	adds	r2, r5, #0
1000d48c:	4b3b      	ldr	r3, [pc, #236]	; (1000d57c <at_ble_event_get+0x6d4>)
1000d48e:	4798      	blx	r3
1000d490:	2632      	movs	r6, #50	; 0x32
1000d492:	9b03      	ldr	r3, [sp, #12]
1000d494:	701e      	strb	r6, [r3, #0]
1000d496:	2300      	movs	r3, #0
1000d498:	9302      	str	r3, [sp, #8]
1000d49a:	e57a      	b.n	1000cf92 <at_ble_event_get+0xea>
1000d49c:	23d0      	movs	r3, #208	; 0xd0
1000d49e:	e7fb      	b.n	1000d498 <at_ble_event_get+0x5f0>
1000d4a0:	9b01      	ldr	r3, [sp, #4]
1000d4a2:	9e02      	ldr	r6, [sp, #8]
1000d4a4:	2bbb      	cmp	r3, #187	; 0xbb
1000d4a6:	d000      	beq.n	1000d4aa <at_ble_event_get+0x602>
1000d4a8:	e6e6      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d4aa:	e7f2      	b.n	1000d492 <at_ble_event_get+0x5ea>
1000d4ac:	9b02      	ldr	r3, [sp, #8]
1000d4ae:	2b00      	cmp	r3, #0
1000d4b0:	d000      	beq.n	1000d4b4 <at_ble_event_get+0x60c>
1000d4b2:	e56e      	b.n	1000cf92 <at_ble_event_get+0xea>
1000d4b4:	e6e0      	b.n	1000d278 <at_ble_event_get+0x3d0>
1000d4b6:	9802      	ldr	r0, [sp, #8]
1000d4b8:	b007      	add	sp, #28
1000d4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d4bc:	00000e22 	.word	0x00000e22
1000d4c0:	00000e25 	.word	0x00000e25
1000d4c4:	00001b05 	.word	0x00001b05
1000d4c8:	00001b01 	.word	0x00001b01
1000d4cc:	00001b03 	.word	0x00001b03
1000d4d0:	00001b06 	.word	0x00001b06
1000d4d4:	00001b08 	.word	0x00001b08
1000d4d8:	1000f715 	.word	0x1000f715
1000d4dc:	1000f6f9 	.word	0x1000f6f9
1000d4e0:	1000f995 	.word	0x1000f995
1000d4e4:	1000fa85 	.word	0x1000fa85
1000d4e8:	1000fb91 	.word	0x1000fb91
1000d4ec:	1000ea8d 	.word	0x1000ea8d
1000d4f0:	1000f30d 	.word	0x1000f30d
1000d4f4:	1000f389 	.word	0x1000f389
1000d4f8:	1000ed45 	.word	0x1000ed45
1000d4fc:	1000ede1 	.word	0x1000ede1
1000d500:	1000eeb9 	.word	0x1000eeb9
1000d504:	1000f141 	.word	0x1000f141
1000d508:	1000f1e1 	.word	0x1000f1e1
1000d50c:	1000f299 	.word	0x1000f299
1000d510:	1000f2c1 	.word	0x1000f2c1
1000d514:	1000f2d7 	.word	0x1000f2d7
1000d518:	1000f3a1 	.word	0x1000f3a1
1000d51c:	1000f3cf 	.word	0x1000f3cf
1000d520:	1000f3e5 	.word	0x1000f3e5
1000d524:	1000f40f 	.word	0x1000f40f
1000d528:	1000f23d 	.word	0x1000f23d
1000d52c:	1000f267 	.word	0x1000f267
1000d530:	1000e485 	.word	0x1000e485
1000d534:	1000e4b1 	.word	0x1000e4b1
1000d538:	1000fdb1 	.word	0x1000fdb1
1000d53c:	1000fded 	.word	0x1000fded
1000d540:	1000fe35 	.word	0x1000fe35
1000d544:	1000fe79 	.word	0x1000fe79
1000d548:	1000fead 	.word	0x1000fead
1000d54c:	1000fd71 	.word	0x1000fd71
1000d550:	1000ff79 	.word	0x1000ff79
1000d554:	1000ff01 	.word	0x1000ff01
1000d558:	1000e369 	.word	0x1000e369
1000d55c:	1000e3d5 	.word	0x1000e3d5
1000d560:	1000e399 	.word	0x1000e399
1000d564:	1000ff89 	.word	0x1000ff89
1000d568:	1000ffc9 	.word	0x1000ffc9
1000d56c:	10010389 	.word	0x10010389
1000d570:	10010393 	.word	0x10010393
1000d574:	10010399 	.word	0x10010399
1000d578:	1001039f 	.word	0x1001039f
1000d57c:	100103ab 	.word	0x100103ab

1000d580 <internal_event_flush>:
1000d580:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d582:	490e      	ldr	r1, [pc, #56]	; (1000d5bc <internal_event_flush+0x3c>)
1000d584:	2400      	movs	r4, #0
1000d586:	680b      	ldr	r3, [r1, #0]
1000d588:	1c0f      	adds	r7, r1, #0
1000d58a:	1c1e      	adds	r6, r3, #0
1000d58c:	4a0c      	ldr	r2, [pc, #48]	; (1000d5c0 <internal_event_flush+0x40>)
1000d58e:	6815      	ldr	r5, [r2, #0]
1000d590:	9201      	str	r2, [sp, #4]
1000d592:	2b00      	cmp	r3, #0
1000d594:	d00e      	beq.n	1000d5b4 <internal_event_flush+0x34>
1000d596:	889a      	ldrh	r2, [r3, #4]
1000d598:	6819      	ldr	r1, [r3, #0]
1000d59a:	4282      	cmp	r2, r0
1000d59c:	d107      	bne.n	1000d5ae <internal_event_flush+0x2e>
1000d59e:	2c00      	cmp	r4, #0
1000d5a0:	d001      	beq.n	1000d5a6 <internal_event_flush+0x26>
1000d5a2:	6021      	str	r1, [r4, #0]
1000d5a4:	e000      	b.n	1000d5a8 <internal_event_flush+0x28>
1000d5a6:	1c0e      	adds	r6, r1, #0
1000d5a8:	601d      	str	r5, [r3, #0]
1000d5aa:	1c1d      	adds	r5, r3, #0
1000d5ac:	1c23      	adds	r3, r4, #0
1000d5ae:	1c1c      	adds	r4, r3, #0
1000d5b0:	1c0b      	adds	r3, r1, #0
1000d5b2:	e7ee      	b.n	1000d592 <internal_event_flush+0x12>
1000d5b4:	9b01      	ldr	r3, [sp, #4]
1000d5b6:	603e      	str	r6, [r7, #0]
1000d5b8:	601d      	str	r5, [r3, #0]
1000d5ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d5bc:	10015c58 	.word	0x10015c58
1000d5c0:	10015c5c 	.word	0x10015c5c

1000d5c4 <internal_conn_flush>:
1000d5c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000d5c6:	4a12      	ldr	r2, [pc, #72]	; (1000d610 <internal_conn_flush+0x4c>)
1000d5c8:	9000      	str	r0, [sp, #0]
1000d5ca:	6813      	ldr	r3, [r2, #0]
1000d5cc:	4811      	ldr	r0, [pc, #68]	; (1000d614 <internal_conn_flush+0x50>)
1000d5ce:	1c1f      	adds	r7, r3, #0
1000d5d0:	2100      	movs	r1, #0
1000d5d2:	4684      	mov	ip, r0
1000d5d4:	6804      	ldr	r4, [r0, #0]
1000d5d6:	9201      	str	r2, [sp, #4]
1000d5d8:	2b00      	cmp	r3, #0
1000d5da:	d014      	beq.n	1000d606 <internal_conn_flush+0x42>
1000d5dc:	88d8      	ldrh	r0, [r3, #6]
1000d5de:	9a00      	ldr	r2, [sp, #0]
1000d5e0:	681d      	ldr	r5, [r3, #0]
1000d5e2:	0a06      	lsrs	r6, r0, #8
1000d5e4:	4296      	cmp	r6, r2
1000d5e6:	d10b      	bne.n	1000d600 <internal_conn_flush+0x3c>
1000d5e8:	26fd      	movs	r6, #253	; 0xfd
1000d5ea:	4006      	ands	r6, r0
1000d5ec:	2e0c      	cmp	r6, #12
1000d5ee:	d107      	bne.n	1000d600 <internal_conn_flush+0x3c>
1000d5f0:	2900      	cmp	r1, #0
1000d5f2:	d001      	beq.n	1000d5f8 <internal_conn_flush+0x34>
1000d5f4:	600d      	str	r5, [r1, #0]
1000d5f6:	e000      	b.n	1000d5fa <internal_conn_flush+0x36>
1000d5f8:	1c2f      	adds	r7, r5, #0
1000d5fa:	601c      	str	r4, [r3, #0]
1000d5fc:	1c1c      	adds	r4, r3, #0
1000d5fe:	1c0b      	adds	r3, r1, #0
1000d600:	1c19      	adds	r1, r3, #0
1000d602:	1c2b      	adds	r3, r5, #0
1000d604:	e7e8      	b.n	1000d5d8 <internal_conn_flush+0x14>
1000d606:	9b01      	ldr	r3, [sp, #4]
1000d608:	601f      	str	r7, [r3, #0]
1000d60a:	4663      	mov	r3, ip
1000d60c:	601c      	str	r4, [r3, #0]
1000d60e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000d610:	10015c58 	.word	0x10015c58
1000d614:	10015c5c 	.word	0x10015c5c

1000d618 <at_ble_device_name_set>:
1000d618:	b530      	push	{r4, r5, lr}
1000d61a:	23cf      	movs	r3, #207	; 0xcf
1000d61c:	2800      	cmp	r0, #0
1000d61e:	d010      	beq.n	1000d642 <at_ble_device_name_set+0x2a>
1000d620:	1e4a      	subs	r2, r1, #1
1000d622:	2a1f      	cmp	r2, #31
1000d624:	d80d      	bhi.n	1000d642 <at_ble_device_name_set+0x2a>
1000d626:	4a08      	ldr	r2, [pc, #32]	; (1000d648 <at_ble_device_name_set+0x30>)
1000d628:	1c13      	adds	r3, r2, #0
1000d62a:	33aa      	adds	r3, #170	; 0xaa
1000d62c:	8019      	strh	r1, [r3, #0]
1000d62e:	2300      	movs	r3, #0
1000d630:	1c1c      	adds	r4, r3, #0
1000d632:	5cc5      	ldrb	r5, [r0, r3]
1000d634:	34ac      	adds	r4, #172	; 0xac
1000d636:	3301      	adds	r3, #1
1000d638:	5515      	strb	r5, [r2, r4]
1000d63a:	b2dc      	uxtb	r4, r3
1000d63c:	428c      	cmp	r4, r1
1000d63e:	d3f7      	bcc.n	1000d630 <at_ble_device_name_set+0x18>
1000d640:	2300      	movs	r3, #0
1000d642:	1c18      	adds	r0, r3, #0
1000d644:	bd30      	pop	{r4, r5, pc}
1000d646:	46c0      	nop			; (mov r8, r8)
1000d648:	10016e6e 	.word	0x10016e6e

1000d64c <at_ble_addr_get>:
1000d64c:	b510      	push	{r4, lr}
1000d64e:	1c04      	adds	r4, r0, #0
1000d650:	20cf      	movs	r0, #207	; 0xcf
1000d652:	2c00      	cmp	r4, #0
1000d654:	d006      	beq.n	1000d664 <at_ble_addr_get+0x18>
1000d656:	4b04      	ldr	r3, [pc, #16]	; (1000d668 <at_ble_addr_get+0x1c>)
1000d658:	38ce      	subs	r0, #206	; 0xce
1000d65a:	1c21      	adds	r1, r4, #0
1000d65c:	4798      	blx	r3
1000d65e:	4b03      	ldr	r3, [pc, #12]	; (1000d66c <at_ble_addr_get+0x20>)
1000d660:	791b      	ldrb	r3, [r3, #4]
1000d662:	7023      	strb	r3, [r4, #0]
1000d664:	bd10      	pop	{r4, pc}
1000d666:	46c0      	nop			; (mov r8, r8)
1000d668:	1000f5a9 	.word	0x1000f5a9
1000d66c:	10016e6e 	.word	0x10016e6e

1000d670 <at_ble_set_dev_config>:
1000d670:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d672:	7906      	ldrb	r6, [r0, #4]
1000d674:	b089      	sub	sp, #36	; 0x24
1000d676:	25cf      	movs	r5, #207	; 0xcf
1000d678:	2e03      	cmp	r6, #3
1000d67a:	d838      	bhi.n	1000d6ee <at_ble_set_dev_config+0x7e>
1000d67c:	7803      	ldrb	r3, [r0, #0]
1000d67e:	3511      	adds	r5, #17
1000d680:	2b0f      	cmp	r3, #15
1000d682:	d834      	bhi.n	1000d6ee <at_ble_set_dev_config+0x7e>
1000d684:	2380      	movs	r3, #128	; 0x80
1000d686:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000d688:	3d11      	subs	r5, #17
1000d68a:	009b      	lsls	r3, r3, #2
1000d68c:	429f      	cmp	r7, r3
1000d68e:	d82e      	bhi.n	1000d6ee <at_ble_set_dev_config+0x7e>
1000d690:	7fc5      	ldrb	r5, [r0, #31]
1000d692:	7f83      	ldrb	r3, [r0, #30]
1000d694:	01ad      	lsls	r5, r5, #6
1000d696:	015b      	lsls	r3, r3, #5
1000d698:	431d      	orrs	r5, r3
1000d69a:	7ec3      	ldrb	r3, [r0, #27]
1000d69c:	431d      	orrs	r5, r3
1000d69e:	7f43      	ldrb	r3, [r0, #29]
1000d6a0:	011b      	lsls	r3, r3, #4
1000d6a2:	431d      	orrs	r5, r3
1000d6a4:	7f03      	ldrb	r3, [r0, #28]
1000d6a6:	009b      	lsls	r3, r3, #2
1000d6a8:	431d      	orrs	r5, r3
1000d6aa:	4b12      	ldr	r3, [pc, #72]	; (1000d6f4 <at_ble_set_dev_config+0x84>)
1000d6ac:	b2ed      	uxtb	r5, r5
1000d6ae:	711e      	strb	r6, [r3, #4]
1000d6b0:	7903      	ldrb	r3, [r0, #4]
1000d6b2:	3b02      	subs	r3, #2
1000d6b4:	2b01      	cmp	r3, #1
1000d6b6:	d801      	bhi.n	1000d6bc <at_ble_set_dev_config+0x4c>
1000d6b8:	2302      	movs	r3, #2
1000d6ba:	7103      	strb	r3, [r0, #4]
1000d6bc:	1c04      	adds	r4, r0, #0
1000d6be:	1c23      	adds	r3, r4, #0
1000d6c0:	330b      	adds	r3, #11
1000d6c2:	8861      	ldrh	r1, [r4, #2]
1000d6c4:	9307      	str	r3, [sp, #28]
1000d6c6:	7923      	ldrb	r3, [r4, #4]
1000d6c8:	7800      	ldrb	r0, [r0, #0]
1000d6ca:	9300      	str	r3, [sp, #0]
1000d6cc:	9501      	str	r5, [sp, #4]
1000d6ce:	8c25      	ldrh	r5, [r4, #32]
1000d6d0:	1d62      	adds	r2, r4, #5
1000d6d2:	9502      	str	r5, [sp, #8]
1000d6d4:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000d6d6:	9b07      	ldr	r3, [sp, #28]
1000d6d8:	9503      	str	r5, [sp, #12]
1000d6da:	9704      	str	r7, [sp, #16]
1000d6dc:	4d06      	ldr	r5, [pc, #24]	; (1000d6f8 <at_ble_set_dev_config+0x88>)
1000d6de:	47a8      	blx	r5
1000d6e0:	7126      	strb	r6, [r4, #4]
1000d6e2:	1c05      	adds	r5, r0, #0
1000d6e4:	1c21      	adds	r1, r4, #0
1000d6e6:	4803      	ldr	r0, [pc, #12]	; (1000d6f4 <at_ble_set_dev_config+0x84>)
1000d6e8:	2226      	movs	r2, #38	; 0x26
1000d6ea:	4b04      	ldr	r3, [pc, #16]	; (1000d6fc <at_ble_set_dev_config+0x8c>)
1000d6ec:	4798      	blx	r3
1000d6ee:	1c28      	adds	r0, r5, #0
1000d6f0:	b009      	add	sp, #36	; 0x24
1000d6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6f4:	10016e6e 	.word	0x10016e6e
1000d6f8:	1000f4a1 	.word	0x1000f4a1
1000d6fc:	10011c63 	.word	0x10011c63

1000d700 <at_ble_init>:
1000d700:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d702:	b087      	sub	sp, #28
1000d704:	af03      	add	r7, sp, #12
1000d706:	4954      	ldr	r1, [pc, #336]	; (1000d858 <at_ble_init+0x158>)
1000d708:	220b      	movs	r2, #11
1000d70a:	4b54      	ldr	r3, [pc, #336]	; (1000d85c <at_ble_init+0x15c>)
1000d70c:	1c04      	adds	r4, r0, #0
1000d70e:	1c38      	adds	r0, r7, #0
1000d710:	4798      	blx	r3
1000d712:	2205      	movs	r2, #5
1000d714:	4b52      	ldr	r3, [pc, #328]	; (1000d860 <at_ble_init+0x160>)
1000d716:	2640      	movs	r6, #64	; 0x40
1000d718:	801a      	strh	r2, [r3, #0]
1000d71a:	2300      	movs	r3, #0
1000d71c:	4a51      	ldr	r2, [pc, #324]	; (1000d864 <at_ble_init+0x164>)
1000d71e:	6013      	str	r3, [r2, #0]
1000d720:	4a51      	ldr	r2, [pc, #324]	; (1000d868 <at_ble_init+0x168>)
1000d722:	7013      	strb	r3, [r2, #0]
1000d724:	4a51      	ldr	r2, [pc, #324]	; (1000d86c <at_ble_init+0x16c>)
1000d726:	7013      	strb	r3, [r2, #0]
1000d728:	4b51      	ldr	r3, [pc, #324]	; (1000d870 <at_ble_init+0x170>)
1000d72a:	4798      	blx	r3
1000d72c:	4b51      	ldr	r3, [pc, #324]	; (1000d874 <at_ble_init+0x174>)
1000d72e:	4798      	blx	r3
1000d730:	4b51      	ldr	r3, [pc, #324]	; (1000d878 <at_ble_init+0x178>)
1000d732:	4798      	blx	r3
1000d734:	4b51      	ldr	r3, [pc, #324]	; (1000d87c <at_ble_init+0x17c>)
1000d736:	4798      	blx	r3
1000d738:	2c00      	cmp	r4, #0
1000d73a:	d100      	bne.n	1000d73e <at_ble_init+0x3e>
1000d73c:	e089      	b.n	1000d852 <at_ble_init+0x152>
1000d73e:	68a3      	ldr	r3, [r4, #8]
1000d740:	2b00      	cmp	r3, #0
1000d742:	d100      	bne.n	1000d746 <at_ble_init+0x46>
1000d744:	e085      	b.n	1000d852 <at_ble_init+0x152>
1000d746:	6923      	ldr	r3, [r4, #16]
1000d748:	2b00      	cmp	r3, #0
1000d74a:	d100      	bne.n	1000d74e <at_ble_init+0x4e>
1000d74c:	e081      	b.n	1000d852 <at_ble_init+0x152>
1000d74e:	6820      	ldr	r0, [r4, #0]
1000d750:	2800      	cmp	r0, #0
1000d752:	d102      	bne.n	1000d75a <at_ble_init+0x5a>
1000d754:	6863      	ldr	r3, [r4, #4]
1000d756:	2b00      	cmp	r3, #0
1000d758:	d17b      	bne.n	1000d852 <at_ble_init+0x152>
1000d75a:	4b49      	ldr	r3, [pc, #292]	; (1000d880 <at_ble_init+0x180>)
1000d75c:	6861      	ldr	r1, [r4, #4]
1000d75e:	4798      	blx	r3
1000d760:	4b48      	ldr	r3, [pc, #288]	; (1000d884 <at_ble_init+0x184>)
1000d762:	4798      	blx	r3
1000d764:	2801      	cmp	r0, #1
1000d766:	d901      	bls.n	1000d76c <at_ble_init+0x6c>
1000d768:	26e2      	movs	r6, #226	; 0xe2
1000d76a:	e072      	b.n	1000d852 <at_ble_init+0x152>
1000d76c:	4846      	ldr	r0, [pc, #280]	; (1000d888 <at_ble_init+0x188>)
1000d76e:	4b47      	ldr	r3, [pc, #284]	; (1000d88c <at_ble_init+0x18c>)
1000d770:	4798      	blx	r3
1000d772:	2800      	cmp	r0, #0
1000d774:	d1f8      	bne.n	1000d768 <at_ble_init+0x68>
1000d776:	1c20      	adds	r0, r4, #0
1000d778:	4b45      	ldr	r3, [pc, #276]	; (1000d890 <at_ble_init+0x190>)
1000d77a:	4798      	blx	r3
1000d77c:	68e0      	ldr	r0, [r4, #12]
1000d77e:	68a1      	ldr	r1, [r4, #8]
1000d780:	4b44      	ldr	r3, [pc, #272]	; (1000d894 <at_ble_init+0x194>)
1000d782:	4798      	blx	r3
1000d784:	466b      	mov	r3, sp
1000d786:	2201      	movs	r2, #1
1000d788:	1cdc      	adds	r4, r3, #3
1000d78a:	1c20      	adds	r0, r4, #0
1000d78c:	a901      	add	r1, sp, #4
1000d78e:	4252      	negs	r2, r2
1000d790:	4b41      	ldr	r3, [pc, #260]	; (1000d898 <at_ble_init+0x198>)
1000d792:	4798      	blx	r3
1000d794:	2800      	cmp	r0, #0
1000d796:	d102      	bne.n	1000d79e <at_ble_init+0x9e>
1000d798:	7823      	ldrb	r3, [r4, #0]
1000d79a:	2b39      	cmp	r3, #57	; 0x39
1000d79c:	d1f2      	bne.n	1000d784 <at_ble_init+0x84>
1000d79e:	4b3f      	ldr	r3, [pc, #252]	; (1000d89c <at_ble_init+0x19c>)
1000d7a0:	4798      	blx	r3
1000d7a2:	1e06      	subs	r6, r0, #0
1000d7a4:	d155      	bne.n	1000d852 <at_ble_init+0x152>
1000d7a6:	1c03      	adds	r3, r0, #0
1000d7a8:	2101      	movs	r1, #1
1000d7aa:	4a3d      	ldr	r2, [pc, #244]	; (1000d8a0 <at_ble_init+0x1a0>)
1000d7ac:	4249      	negs	r1, r1
1000d7ae:	189a      	adds	r2, r3, r2
1000d7b0:	3312      	adds	r3, #18
1000d7b2:	8151      	strh	r1, [r2, #10]
1000d7b4:	2b90      	cmp	r3, #144	; 0x90
1000d7b6:	d1f7      	bne.n	1000d7a8 <at_ble_init+0xa8>
1000d7b8:	4c3a      	ldr	r4, [pc, #232]	; (1000d8a4 <at_ble_init+0x1a4>)
1000d7ba:	3b81      	subs	r3, #129	; 0x81
1000d7bc:	7023      	strb	r3, [r4, #0]
1000d7be:	4b3a      	ldr	r3, [pc, #232]	; (1000d8a8 <at_ble_init+0x1a8>)
1000d7c0:	4a3a      	ldr	r2, [pc, #232]	; (1000d8ac <at_ble_init+0x1ac>)
1000d7c2:	8063      	strh	r3, [r4, #2]
1000d7c4:	2300      	movs	r3, #0
1000d7c6:	7123      	strb	r3, [r4, #4]
1000d7c8:	3301      	adds	r3, #1
1000d7ca:	1e58      	subs	r0, r3, #1
1000d7cc:	0119      	lsls	r1, r3, #4
1000d7ce:	4301      	orrs	r1, r0
1000d7d0:	3302      	adds	r3, #2
1000d7d2:	7011      	strb	r1, [r2, #0]
1000d7d4:	3201      	adds	r2, #1
1000d7d6:	2b21      	cmp	r3, #33	; 0x21
1000d7d8:	d1f7      	bne.n	1000d7ca <at_ble_init+0xca>
1000d7da:	33e0      	adds	r3, #224	; 0xe0
1000d7dc:	33ff      	adds	r3, #255	; 0xff
1000d7de:	84a3      	strh	r3, [r4, #36]	; 0x24
1000d7e0:	1c23      	adds	r3, r4, #0
1000d7e2:	2500      	movs	r5, #0
1000d7e4:	3373      	adds	r3, #115	; 0x73
1000d7e6:	701d      	strb	r5, [r3, #0]
1000d7e8:	1c23      	adds	r3, r4, #0
1000d7ea:	3372      	adds	r3, #114	; 0x72
1000d7ec:	701d      	strb	r5, [r3, #0]
1000d7ee:	1c23      	adds	r3, r4, #0
1000d7f0:	3376      	adds	r3, #118	; 0x76
1000d7f2:	701d      	strb	r5, [r3, #0]
1000d7f4:	1c23      	adds	r3, r4, #0
1000d7f6:	33cc      	adds	r3, #204	; 0xcc
1000d7f8:	801d      	strh	r5, [r3, #0]
1000d7fa:	1c22      	adds	r2, r4, #0
1000d7fc:	23a0      	movs	r3, #160	; 0xa0
1000d7fe:	32d0      	adds	r2, #208	; 0xd0
1000d800:	005b      	lsls	r3, r3, #1
1000d802:	8013      	strh	r3, [r2, #0]
1000d804:	1c22      	adds	r2, r4, #0
1000d806:	32ce      	adds	r2, #206	; 0xce
1000d808:	8013      	strh	r3, [r2, #0]
1000d80a:	1c23      	adds	r3, r4, #0
1000d80c:	33d2      	adds	r3, #210	; 0xd2
1000d80e:	801d      	strh	r5, [r3, #0]
1000d810:	22fa      	movs	r2, #250	; 0xfa
1000d812:	1c23      	adds	r3, r4, #0
1000d814:	0052      	lsls	r2, r2, #1
1000d816:	33d4      	adds	r3, #212	; 0xd4
1000d818:	801a      	strh	r2, [r3, #0]
1000d81a:	1c23      	adds	r3, r4, #0
1000d81c:	33d6      	adds	r3, #214	; 0xd6
1000d81e:	701d      	strb	r5, [r3, #0]
1000d820:	1c20      	adds	r0, r4, #0
1000d822:	4b23      	ldr	r3, [pc, #140]	; (1000d8b0 <at_ble_init+0x1b0>)
1000d824:	76e5      	strb	r5, [r4, #27]
1000d826:	7725      	strb	r5, [r4, #28]
1000d828:	7765      	strb	r5, [r4, #29]
1000d82a:	77a5      	strb	r5, [r4, #30]
1000d82c:	77e5      	strb	r5, [r4, #31]
1000d82e:	8425      	strh	r5, [r4, #32]
1000d830:	8465      	strh	r5, [r4, #34]	; 0x22
1000d832:	4798      	blx	r3
1000d834:	1c23      	adds	r3, r4, #0
1000d836:	2207      	movs	r2, #7
1000d838:	3374      	adds	r3, #116	; 0x74
1000d83a:	701a      	strb	r2, [r3, #0]
1000d83c:	1c23      	adds	r3, r4, #0
1000d83e:	3204      	adds	r2, #4
1000d840:	33aa      	adds	r3, #170	; 0xaa
1000d842:	801a      	strh	r2, [r3, #0]
1000d844:	1c2b      	adds	r3, r5, #0
1000d846:	5d7a      	ldrb	r2, [r7, r5]
1000d848:	33ac      	adds	r3, #172	; 0xac
1000d84a:	3501      	adds	r5, #1
1000d84c:	54e2      	strb	r2, [r4, r3]
1000d84e:	2d0b      	cmp	r5, #11
1000d850:	d1f8      	bne.n	1000d844 <at_ble_init+0x144>
1000d852:	1c30      	adds	r0, r6, #0
1000d854:	b007      	add	sp, #28
1000d856:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d858:	10014034 	.word	0x10014034
1000d85c:	10011c63 	.word	0x10011c63
1000d860:	10016ddc 	.word	0x10016ddc
1000d864:	10015d08 	.word	0x10015d08
1000d868:	10015c68 	.word	0x10015c68
1000d86c:	100141b6 	.word	0x100141b6
1000d870:	1000ffd9 	.word	0x1000ffd9
1000d874:	1000db65 	.word	0x1000db65
1000d878:	1000e1c5 	.word	0x1000e1c5
1000d87c:	1000e479 	.word	0x1000e479
1000d880:	1000e201 	.word	0x1000e201
1000d884:	1000bc61 	.word	0x1000bc61
1000d888:	1000e7c1 	.word	0x1000e7c1
1000d88c:	1000bea5 	.word	0x1000bea5
1000d890:	1000e869 	.word	0x1000e869
1000d894:	1000cded 	.word	0x1000cded
1000d898:	1000cea9 	.word	0x1000cea9
1000d89c:	1000f431 	.word	0x1000f431
1000d8a0:	10016dde 	.word	0x10016dde
1000d8a4:	10016e6e 	.word	0x10016e6e
1000d8a8:	00003a98 	.word	0x00003a98
1000d8ac:	10016e79 	.word	0x10016e79
1000d8b0:	1000d671 	.word	0x1000d671

1000d8b4 <at_ble_addr_set>:
1000d8b4:	b538      	push	{r3, r4, r5, lr}
1000d8b6:	1c45      	adds	r5, r0, #1
1000d8b8:	1c03      	adds	r3, r0, #0
1000d8ba:	20cf      	movs	r0, #207	; 0xcf
1000d8bc:	2d00      	cmp	r5, #0
1000d8be:	d018      	beq.n	1000d8f2 <at_ble_addr_set+0x3e>
1000d8c0:	781a      	ldrb	r2, [r3, #0]
1000d8c2:	2a03      	cmp	r2, #3
1000d8c4:	d815      	bhi.n	1000d8f2 <at_ble_addr_set+0x3e>
1000d8c6:	2a01      	cmp	r2, #1
1000d8c8:	d102      	bne.n	1000d8d0 <at_ble_addr_set+0x1c>
1000d8ca:	785a      	ldrb	r2, [r3, #1]
1000d8cc:	2a00      	cmp	r2, #0
1000d8ce:	d010      	beq.n	1000d8f2 <at_ble_addr_set+0x3e>
1000d8d0:	1c1c      	adds	r4, r3, #0
1000d8d2:	1c29      	adds	r1, r5, #0
1000d8d4:	2206      	movs	r2, #6
1000d8d6:	4b07      	ldr	r3, [pc, #28]	; (1000d8f4 <at_ble_addr_set+0x40>)
1000d8d8:	4807      	ldr	r0, [pc, #28]	; (1000d8f8 <at_ble_addr_set+0x44>)
1000d8da:	4798      	blx	r3
1000d8dc:	7823      	ldrb	r3, [r4, #0]
1000d8de:	4807      	ldr	r0, [pc, #28]	; (1000d8fc <at_ble_addr_set+0x48>)
1000d8e0:	7103      	strb	r3, [r0, #4]
1000d8e2:	4b07      	ldr	r3, [pc, #28]	; (1000d900 <at_ble_addr_set+0x4c>)
1000d8e4:	4798      	blx	r3
1000d8e6:	7823      	ldrb	r3, [r4, #0]
1000d8e8:	2b00      	cmp	r3, #0
1000d8ea:	d102      	bne.n	1000d8f2 <at_ble_addr_set+0x3e>
1000d8ec:	1c28      	adds	r0, r5, #0
1000d8ee:	4b05      	ldr	r3, [pc, #20]	; (1000d904 <at_ble_addr_set+0x50>)
1000d8f0:	4798      	blx	r3
1000d8f2:	bd38      	pop	{r3, r4, r5, pc}
1000d8f4:	10011c63 	.word	0x10011c63
1000d8f8:	10016e73 	.word	0x10016e73
1000d8fc:	10016e6e 	.word	0x10016e6e
1000d900:	1000d671 	.word	0x1000d671
1000d904:	1000e8ed 	.word	0x1000e8ed

1000d908 <at_ble_adv_data_set>:
1000d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d90a:	4684      	mov	ip, r0
1000d90c:	1c0f      	adds	r7, r1, #0
1000d90e:	1c16      	adds	r6, r2, #0
1000d910:	1c1c      	adds	r4, r3, #0
1000d912:	2800      	cmp	r0, #0
1000d914:	d102      	bne.n	1000d91c <at_ble_adv_data_set+0x14>
1000d916:	20e2      	movs	r0, #226	; 0xe2
1000d918:	2a00      	cmp	r2, #0
1000d91a:	d02b      	beq.n	1000d974 <at_ble_adv_data_set+0x6c>
1000d91c:	20cf      	movs	r0, #207	; 0xcf
1000d91e:	2f1f      	cmp	r7, #31
1000d920:	d828      	bhi.n	1000d974 <at_ble_adv_data_set+0x6c>
1000d922:	2c1f      	cmp	r4, #31
1000d924:	d826      	bhi.n	1000d974 <at_ble_adv_data_set+0x6c>
1000d926:	4663      	mov	r3, ip
1000d928:	2b00      	cmp	r3, #0
1000d92a:	d00e      	beq.n	1000d94a <at_ble_adv_data_set+0x42>
1000d92c:	4812      	ldr	r0, [pc, #72]	; (1000d978 <at_ble_adv_data_set+0x70>)
1000d92e:	4d13      	ldr	r5, [pc, #76]	; (1000d97c <at_ble_adv_data_set+0x74>)
1000d930:	2f00      	cmp	r7, #0
1000d932:	d104      	bne.n	1000d93e <at_ble_adv_data_set+0x36>
1000d934:	1c39      	adds	r1, r7, #0
1000d936:	221f      	movs	r2, #31
1000d938:	4b11      	ldr	r3, [pc, #68]	; (1000d980 <at_ble_adv_data_set+0x78>)
1000d93a:	4798      	blx	r3
1000d93c:	e003      	b.n	1000d946 <at_ble_adv_data_set+0x3e>
1000d93e:	4661      	mov	r1, ip
1000d940:	1c3a      	adds	r2, r7, #0
1000d942:	4b10      	ldr	r3, [pc, #64]	; (1000d984 <at_ble_adv_data_set+0x7c>)
1000d944:	4798      	blx	r3
1000d946:	3572      	adds	r5, #114	; 0x72
1000d948:	702f      	strb	r7, [r5, #0]
1000d94a:	1e30      	subs	r0, r6, #0
1000d94c:	d012      	beq.n	1000d974 <at_ble_adv_data_set+0x6c>
1000d94e:	4d0b      	ldr	r5, [pc, #44]	; (1000d97c <at_ble_adv_data_set+0x74>)
1000d950:	480d      	ldr	r0, [pc, #52]	; (1000d988 <at_ble_adv_data_set+0x80>)
1000d952:	2c00      	cmp	r4, #0
1000d954:	d107      	bne.n	1000d966 <at_ble_adv_data_set+0x5e>
1000d956:	1c21      	adds	r1, r4, #0
1000d958:	221f      	movs	r2, #31
1000d95a:	4b09      	ldr	r3, [pc, #36]	; (1000d980 <at_ble_adv_data_set+0x78>)
1000d95c:	3573      	adds	r5, #115	; 0x73
1000d95e:	4798      	blx	r3
1000d960:	702c      	strb	r4, [r5, #0]
1000d962:	1c20      	adds	r0, r4, #0
1000d964:	e006      	b.n	1000d974 <at_ble_adv_data_set+0x6c>
1000d966:	1c31      	adds	r1, r6, #0
1000d968:	1c22      	adds	r2, r4, #0
1000d96a:	4b06      	ldr	r3, [pc, #24]	; (1000d984 <at_ble_adv_data_set+0x7c>)
1000d96c:	4798      	blx	r3
1000d96e:	2000      	movs	r0, #0
1000d970:	3573      	adds	r5, #115	; 0x73
1000d972:	702c      	strb	r4, [r5, #0]
1000d974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d976:	46c0      	nop			; (mov r8, r8)
1000d978:	10016ea2 	.word	0x10016ea2
1000d97c:	10016e6e 	.word	0x10016e6e
1000d980:	10011c75 	.word	0x10011c75
1000d984:	10011c63 	.word	0x10011c63
1000d988:	10016ec1 	.word	0x10016ec1

1000d98c <at_ble_adv_start>:
1000d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d98e:	b091      	sub	sp, #68	; 0x44
1000d990:	1c1f      	adds	r7, r3, #0
1000d992:	ab16      	add	r3, sp, #88	; 0x58
1000d994:	881d      	ldrh	r5, [r3, #0]
1000d996:	ab17      	add	r3, sp, #92	; 0x5c
1000d998:	881b      	ldrh	r3, [r3, #0]
1000d99a:	910d      	str	r1, [sp, #52]	; 0x34
1000d99c:	930e      	str	r3, [sp, #56]	; 0x38
1000d99e:	ab18      	add	r3, sp, #96	; 0x60
1000d9a0:	781b      	ldrb	r3, [r3, #0]
1000d9a2:	1c04      	adds	r4, r0, #0
1000d9a4:	930f      	str	r3, [sp, #60]	; 0x3c
1000d9a6:	4b42      	ldr	r3, [pc, #264]	; (1000dab0 <at_ble_adv_start+0x124>)
1000d9a8:	1c16      	adds	r6, r2, #0
1000d9aa:	3373      	adds	r3, #115	; 0x73
1000d9ac:	781b      	ldrb	r3, [r3, #0]
1000d9ae:	20cf      	movs	r0, #207	; 0xcf
1000d9b0:	930c      	str	r3, [sp, #48]	; 0x30
1000d9b2:	2c01      	cmp	r4, #1
1000d9b4:	d103      	bne.n	1000d9be <at_ble_adv_start+0x32>
1000d9b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000d9b8:	2b00      	cmp	r3, #0
1000d9ba:	d176      	bne.n	1000daaa <at_ble_adv_start+0x11e>
1000d9bc:	e024      	b.n	1000da08 <at_ble_adv_start+0x7c>
1000d9be:	2c04      	cmp	r4, #4
1000d9c0:	d873      	bhi.n	1000daaa <at_ble_adv_start+0x11e>
1000d9c2:	2380      	movs	r3, #128	; 0x80
1000d9c4:	01db      	lsls	r3, r3, #7
1000d9c6:	429d      	cmp	r5, r3
1000d9c8:	d86f      	bhi.n	1000daaa <at_ble_adv_start+0x11e>
1000d9ca:	2c00      	cmp	r4, #0
1000d9cc:	d102      	bne.n	1000d9d4 <at_ble_adv_start+0x48>
1000d9ce:	2d1f      	cmp	r5, #31
1000d9d0:	d96b      	bls.n	1000daaa <at_ble_adv_start+0x11e>
1000d9d2:	e003      	b.n	1000d9dc <at_ble_adv_start+0x50>
1000d9d4:	2d9f      	cmp	r5, #159	; 0x9f
1000d9d6:	d801      	bhi.n	1000d9dc <at_ble_adv_start+0x50>
1000d9d8:	2c01      	cmp	r4, #1
1000d9da:	d166      	bne.n	1000daaa <at_ble_adv_start+0x11e>
1000d9dc:	2f00      	cmp	r7, #0
1000d9de:	d009      	beq.n	1000d9f4 <at_ble_adv_start+0x68>
1000d9e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000d9e2:	20cf      	movs	r0, #207	; 0xcf
1000d9e4:	3b01      	subs	r3, #1
1000d9e6:	2b01      	cmp	r3, #1
1000d9e8:	d95f      	bls.n	1000daaa <at_ble_adv_start+0x11e>
1000d9ea:	2c01      	cmp	r4, #1
1000d9ec:	d102      	bne.n	1000d9f4 <at_ble_adv_start+0x68>
1000d9ee:	2d00      	cmp	r5, #0
1000d9f0:	d100      	bne.n	1000d9f4 <at_ble_adv_start+0x68>
1000d9f2:	3520      	adds	r5, #32
1000d9f4:	4b2f      	ldr	r3, [pc, #188]	; (1000dab4 <at_ble_adv_start+0x128>)
1000d9f6:	4798      	blx	r3
1000d9f8:	1c01      	adds	r1, r0, #0
1000d9fa:	2e00      	cmp	r6, #0
1000d9fc:	d043      	beq.n	1000da86 <at_ble_adv_start+0xfa>
1000d9fe:	7833      	ldrb	r3, [r6, #0]
1000da00:	1e60      	subs	r0, r4, #1
1000da02:	2b00      	cmp	r3, #0
1000da04:	d109      	bne.n	1000da1a <at_ble_adv_start+0x8e>
1000da06:	e03b      	b.n	1000da80 <at_ble_adv_start+0xf4>
1000da08:	2380      	movs	r3, #128	; 0x80
1000da0a:	01db      	lsls	r3, r3, #7
1000da0c:	429d      	cmp	r5, r3
1000da0e:	d84c      	bhi.n	1000daaa <at_ble_adv_start+0x11e>
1000da10:	2e00      	cmp	r6, #0
1000da12:	d04a      	beq.n	1000daaa <at_ble_adv_start+0x11e>
1000da14:	2f00      	cmp	r7, #0
1000da16:	d1e3      	bne.n	1000d9e0 <at_ble_adv_start+0x54>
1000da18:	e02b      	b.n	1000da72 <at_ble_adv_start+0xe6>
1000da1a:	2301      	movs	r3, #1
1000da1c:	2803      	cmp	r0, #3
1000da1e:	d93a      	bls.n	1000da96 <at_ble_adv_start+0x10a>
1000da20:	200d      	movs	r0, #13
1000da22:	1c72      	adds	r2, r6, #1
1000da24:	e002      	b.n	1000da2c <at_ble_adv_start+0xa0>
1000da26:	200e      	movs	r0, #14
1000da28:	1e32      	subs	r2, r6, #0
1000da2a:	d1fa      	bne.n	1000da22 <at_ble_adv_start+0x96>
1000da2c:	4c20      	ldr	r4, [pc, #128]	; (1000dab0 <at_ble_adv_start+0x124>)
1000da2e:	3474      	adds	r4, #116	; 0x74
1000da30:	7826      	ldrb	r6, [r4, #0]
1000da32:	2407      	movs	r4, #7
1000da34:	2e00      	cmp	r6, #0
1000da36:	d000      	beq.n	1000da3a <at_ble_adv_start+0xae>
1000da38:	1c34      	adds	r4, r6, #0
1000da3a:	9200      	str	r2, [sp, #0]
1000da3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000da3e:	9403      	str	r4, [sp, #12]
1000da40:	9204      	str	r2, [sp, #16]
1000da42:	4a1b      	ldr	r2, [pc, #108]	; (1000dab0 <at_ble_adv_start+0x124>)
1000da44:	9501      	str	r5, [sp, #4]
1000da46:	9502      	str	r5, [sp, #8]
1000da48:	9705      	str	r7, [sp, #20]
1000da4a:	3272      	adds	r2, #114	; 0x72
1000da4c:	7812      	ldrb	r2, [r2, #0]
1000da4e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000da50:	9206      	str	r2, [sp, #24]
1000da52:	4a19      	ldr	r2, [pc, #100]	; (1000dab8 <at_ble_adv_start+0x12c>)
1000da54:	9207      	str	r2, [sp, #28]
1000da56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000da58:	9208      	str	r2, [sp, #32]
1000da5a:	4a18      	ldr	r2, [pc, #96]	; (1000dabc <at_ble_adv_start+0x130>)
1000da5c:	9209      	str	r2, [sp, #36]	; 0x24
1000da5e:	2264      	movs	r2, #100	; 0x64
1000da60:	4362      	muls	r2, r4
1000da62:	b292      	uxth	r2, r2
1000da64:	920a      	str	r2, [sp, #40]	; 0x28
1000da66:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000da68:	4c15      	ldr	r4, [pc, #84]	; (1000dac0 <at_ble_adv_start+0x134>)
1000da6a:	920b      	str	r2, [sp, #44]	; 0x2c
1000da6c:	4a15      	ldr	r2, [pc, #84]	; (1000dac4 <at_ble_adv_start+0x138>)
1000da6e:	47a0      	blx	r4
1000da70:	e01b      	b.n	1000daaa <at_ble_adv_start+0x11e>
1000da72:	2d00      	cmp	r5, #0
1000da74:	d1be      	bne.n	1000d9f4 <at_ble_adv_start+0x68>
1000da76:	4b0f      	ldr	r3, [pc, #60]	; (1000dab4 <at_ble_adv_start+0x128>)
1000da78:	4798      	blx	r3
1000da7a:	2520      	movs	r5, #32
1000da7c:	1c01      	adds	r1, r0, #0
1000da7e:	e7be      	b.n	1000d9fe <at_ble_adv_start+0x72>
1000da80:	2803      	cmp	r0, #3
1000da82:	d8cd      	bhi.n	1000da20 <at_ble_adv_start+0x94>
1000da84:	e006      	b.n	1000da94 <at_ble_adv_start+0x108>
1000da86:	1e60      	subs	r0, r4, #1
1000da88:	2803      	cmp	r0, #3
1000da8a:	d903      	bls.n	1000da94 <at_ble_adv_start+0x108>
1000da8c:	1c33      	adds	r3, r6, #0
1000da8e:	200d      	movs	r0, #13
1000da90:	1c32      	adds	r2, r6, #0
1000da92:	e7cb      	b.n	1000da2c <at_ble_adv_start+0xa0>
1000da94:	2300      	movs	r3, #0
1000da96:	f002 fc8d 	bl	100103b4 <__gnu_thumb1_case_sqi>
1000da9a:	06c6      	.short	0x06c6
1000da9c:	0204      	.short	0x0204
1000da9e:	200f      	movs	r0, #15
1000daa0:	e7c2      	b.n	1000da28 <at_ble_adv_start+0x9c>
1000daa2:	2200      	movs	r2, #0
1000daa4:	920c      	str	r2, [sp, #48]	; 0x30
1000daa6:	200c      	movs	r0, #12
1000daa8:	e7be      	b.n	1000da28 <at_ble_adv_start+0x9c>
1000daaa:	b011      	add	sp, #68	; 0x44
1000daac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000daae:	46c0      	nop			; (mov r8, r8)
1000dab0:	10016e6e 	.word	0x10016e6e
1000dab4:	1000f97d 	.word	0x1000f97d
1000dab8:	10016ea2 	.word	0x10016ea2
1000dabc:	10016ec1 	.word	0x10016ec1
1000dac0:	1000f85d 	.word	0x1000f85d
1000dac4:	00003a98 	.word	0x00003a98

1000dac8 <at_ble_scan_stop>:
1000dac8:	b510      	push	{r4, lr}
1000daca:	4b05      	ldr	r3, [pc, #20]	; (1000dae0 <at_ble_scan_stop+0x18>)
1000dacc:	4798      	blx	r3
1000dace:	1e04      	subs	r4, r0, #0
1000dad0:	d103      	bne.n	1000dada <at_ble_scan_stop+0x12>
1000dad2:	20d1      	movs	r0, #209	; 0xd1
1000dad4:	4b03      	ldr	r3, [pc, #12]	; (1000dae4 <at_ble_scan_stop+0x1c>)
1000dad6:	0100      	lsls	r0, r0, #4
1000dad8:	4798      	blx	r3
1000dada:	1c20      	adds	r0, r4, #0
1000dadc:	bd10      	pop	{r4, pc}
1000dade:	46c0      	nop			; (mov r8, r8)
1000dae0:	1000f689 	.word	0x1000f689
1000dae4:	1000d581 	.word	0x1000d581

1000dae8 <at_ble_disconnect>:
1000dae8:	b538      	push	{r3, r4, r5, lr}
1000daea:	1c04      	adds	r4, r0, #0
1000daec:	4b04      	ldr	r3, [pc, #16]	; (1000db00 <at_ble_disconnect+0x18>)
1000daee:	1c08      	adds	r0, r1, #0
1000daf0:	1c21      	adds	r1, r4, #0
1000daf2:	4798      	blx	r3
1000daf4:	1c05      	adds	r5, r0, #0
1000daf6:	4b03      	ldr	r3, [pc, #12]	; (1000db04 <at_ble_disconnect+0x1c>)
1000daf8:	1c20      	adds	r0, r4, #0
1000dafa:	4798      	blx	r3
1000dafc:	1c28      	adds	r0, r5, #0
1000dafe:	bd38      	pop	{r3, r4, r5, pc}
1000db00:	1000ed01 	.word	0x1000ed01
1000db04:	1000d5c5 	.word	0x1000d5c5

1000db08 <at_ble_conn_update_reply>:
1000db08:	b510      	push	{r4, lr}
1000db0a:	4c01      	ldr	r4, [pc, #4]	; (1000db10 <at_ble_conn_update_reply+0x8>)
1000db0c:	47a0      	blx	r4
1000db0e:	bd10      	pop	{r4, pc}
1000db10:	1000f1f1 	.word	0x1000f1f1

1000db14 <at_ble_random_address_resolve>:
1000db14:	b510      	push	{r4, lr}
1000db16:	23cf      	movs	r3, #207	; 0xcf
1000db18:	2800      	cmp	r0, #0
1000db1a:	d00a      	beq.n	1000db32 <at_ble_random_address_resolve+0x1e>
1000db1c:	2900      	cmp	r1, #0
1000db1e:	d008      	beq.n	1000db32 <at_ble_random_address_resolve+0x1e>
1000db20:	2a00      	cmp	r2, #0
1000db22:	d006      	beq.n	1000db32 <at_ble_random_address_resolve+0x1e>
1000db24:	780c      	ldrb	r4, [r1, #0]
1000db26:	2c02      	cmp	r4, #2
1000db28:	d103      	bne.n	1000db32 <at_ble_random_address_resolve+0x1e>
1000db2a:	4b03      	ldr	r3, [pc, #12]	; (1000db38 <at_ble_random_address_resolve+0x24>)
1000db2c:	3101      	adds	r1, #1
1000db2e:	4798      	blx	r3
1000db30:	2300      	movs	r3, #0
1000db32:	1c18      	adds	r0, r3, #0
1000db34:	bd10      	pop	{r4, pc}
1000db36:	46c0      	nop			; (mov r8, r8)
1000db38:	1000fa1d 	.word	0x1000fa1d

1000db3c <at_ble_uuid_type2len>:
1000db3c:	23cf      	movs	r3, #207	; 0xcf
1000db3e:	2802      	cmp	r0, #2
1000db40:	d801      	bhi.n	1000db46 <at_ble_uuid_type2len+0xa>
1000db42:	4b02      	ldr	r3, [pc, #8]	; (1000db4c <at_ble_uuid_type2len+0x10>)
1000db44:	5c1b      	ldrb	r3, [r3, r0]
1000db46:	1c18      	adds	r0, r3, #0
1000db48:	4770      	bx	lr
1000db4a:	46c0      	nop			; (mov r8, r8)
1000db4c:	1001403f 	.word	0x1001403f

1000db50 <at_ble_uuid_len2type>:
1000db50:	1e83      	subs	r3, r0, #2
1000db52:	b2db      	uxtb	r3, r3
1000db54:	2003      	movs	r0, #3
1000db56:	2b0e      	cmp	r3, #14
1000db58:	d801      	bhi.n	1000db5e <at_ble_uuid_len2type+0xe>
1000db5a:	4a01      	ldr	r2, [pc, #4]	; (1000db60 <at_ble_uuid_len2type+0x10>)
1000db5c:	5cd0      	ldrb	r0, [r2, r3]
1000db5e:	4770      	bx	lr
1000db60:	10014042 	.word	0x10014042

1000db64 <init_gatt_client_module>:
1000db64:	2200      	movs	r2, #0
1000db66:	4b01      	ldr	r3, [pc, #4]	; (1000db6c <init_gatt_client_module+0x8>)
1000db68:	801a      	strh	r2, [r3, #0]
1000db6a:	4770      	bx	lr
1000db6c:	10015c60 	.word	0x10015c60

1000db70 <db_searchATT>:
1000db70:	b570      	push	{r4, r5, r6, lr}
1000db72:	1c05      	adds	r5, r0, #0
1000db74:	2400      	movs	r4, #0
1000db76:	4b0c      	ldr	r3, [pc, #48]	; (1000dba8 <db_searchATT+0x38>)
1000db78:	6819      	ldr	r1, [r3, #0]
1000db7a:	4b0c      	ldr	r3, [pc, #48]	; (1000dbac <db_searchATT+0x3c>)
1000db7c:	681e      	ldr	r6, [r3, #0]
1000db7e:	428c      	cmp	r4, r1
1000db80:	dc10      	bgt.n	1000dba4 <db_searchATT+0x34>
1000db82:	200c      	movs	r0, #12
1000db84:	1863      	adds	r3, r4, r1
1000db86:	0fda      	lsrs	r2, r3, #31
1000db88:	18d3      	adds	r3, r2, r3
1000db8a:	1c02      	adds	r2, r0, #0
1000db8c:	105b      	asrs	r3, r3, #1
1000db8e:	435a      	muls	r2, r3
1000db90:	18b0      	adds	r0, r6, r2
1000db92:	8802      	ldrh	r2, [r0, #0]
1000db94:	42aa      	cmp	r2, r5
1000db96:	d201      	bcs.n	1000db9c <db_searchATT+0x2c>
1000db98:	1e59      	subs	r1, r3, #1
1000db9a:	e7f0      	b.n	1000db7e <db_searchATT+0xe>
1000db9c:	42aa      	cmp	r2, r5
1000db9e:	d902      	bls.n	1000dba6 <db_searchATT+0x36>
1000dba0:	1c5c      	adds	r4, r3, #1
1000dba2:	e7ec      	b.n	1000db7e <db_searchATT+0xe>
1000dba4:	2000      	movs	r0, #0
1000dba6:	bd70      	pop	{r4, r5, r6, pc}
1000dba8:	10015c74 	.word	0x10015c74
1000dbac:	10015c6c 	.word	0x10015c6c

1000dbb0 <att_permissions>:
1000dbb0:	b530      	push	{r4, r5, lr}
1000dbb2:	2403      	movs	r4, #3
1000dbb4:	1c05      	adds	r5, r0, #0
1000dbb6:	2301      	movs	r3, #1
1000dbb8:	4025      	ands	r5, r4
1000dbba:	42a5      	cmp	r5, r4
1000dbbc:	d009      	beq.n	1000dbd2 <att_permissions+0x22>
1000dbbe:	1c23      	adds	r3, r4, #0
1000dbc0:	1924      	adds	r4, r4, r4
1000dbc2:	4220      	tst	r0, r4
1000dbc4:	d105      	bne.n	1000dbd2 <att_permissions+0x22>
1000dbc6:	3b02      	subs	r3, #2
1000dbc8:	4218      	tst	r0, r3
1000dbca:	d102      	bne.n	1000dbd2 <att_permissions+0x22>
1000dbcc:	1e4b      	subs	r3, r1, #1
1000dbce:	4199      	sbcs	r1, r3
1000dbd0:	b28b      	uxth	r3, r1
1000dbd2:	2130      	movs	r1, #48	; 0x30
1000dbd4:	4001      	ands	r1, r0
1000dbd6:	2930      	cmp	r1, #48	; 0x30
1000dbd8:	d007      	beq.n	1000dbea <att_permissions+0x3a>
1000dbda:	0641      	lsls	r1, r0, #25
1000dbdc:	d401      	bmi.n	1000dbe2 <att_permissions+0x32>
1000dbde:	0681      	lsls	r1, r0, #26
1000dbe0:	d501      	bpl.n	1000dbe6 <att_permissions+0x36>
1000dbe2:	4807      	ldr	r0, [pc, #28]	; (1000dc00 <att_permissions+0x50>)
1000dbe4:	e009      	b.n	1000dbfa <att_permissions+0x4a>
1000dbe6:	06c1      	lsls	r1, r0, #27
1000dbe8:	d501      	bpl.n	1000dbee <att_permissions+0x3e>
1000dbea:	4806      	ldr	r0, [pc, #24]	; (1000dc04 <att_permissions+0x54>)
1000dbec:	e005      	b.n	1000dbfa <att_permissions+0x4a>
1000dbee:	2a00      	cmp	r2, #0
1000dbf0:	d001      	beq.n	1000dbf6 <att_permissions+0x46>
1000dbf2:	2204      	movs	r2, #4
1000dbf4:	4313      	orrs	r3, r2
1000dbf6:	2080      	movs	r0, #128	; 0x80
1000dbf8:	0180      	lsls	r0, r0, #6
1000dbfa:	4318      	orrs	r0, r3
1000dbfc:	bd30      	pop	{r4, r5, pc}
1000dbfe:	46c0      	nop			; (mov r8, r8)
1000dc00:	0000200c 	.word	0x0000200c
1000dc04:	00002004 	.word	0x00002004

1000dc08 <char_permissions>:
1000dc08:	b530      	push	{r4, r5, lr}
1000dc0a:	2300      	movs	r3, #0
1000dc0c:	0784      	lsls	r4, r0, #30
1000dc0e:	d503      	bpl.n	1000dc18 <char_permissions+0x10>
1000dc10:	3301      	adds	r3, #1
1000dc12:	4219      	tst	r1, r3
1000dc14:	d100      	bne.n	1000dc18 <char_permissions+0x10>
1000dc16:	3302      	adds	r3, #2
1000dc18:	0704      	lsls	r4, r0, #28
1000dc1a:	d508      	bpl.n	1000dc2e <char_permissions+0x26>
1000dc1c:	06cc      	lsls	r4, r1, #27
1000dc1e:	d501      	bpl.n	1000dc24 <char_permissions+0x1c>
1000dc20:	2404      	movs	r4, #4
1000dc22:	e000      	b.n	1000dc26 <char_permissions+0x1e>
1000dc24:	240c      	movs	r4, #12
1000dc26:	4323      	orrs	r3, r4
1000dc28:	2480      	movs	r4, #128	; 0x80
1000dc2a:	01a4      	lsls	r4, r4, #6
1000dc2c:	4323      	orrs	r3, r4
1000dc2e:	0684      	lsls	r4, r0, #26
1000dc30:	d506      	bpl.n	1000dc40 <char_permissions+0x38>
1000dc32:	2406      	movs	r4, #6
1000dc34:	4221      	tst	r1, r4
1000dc36:	d101      	bne.n	1000dc3c <char_permissions+0x34>
1000dc38:	340a      	adds	r4, #10
1000dc3a:	e000      	b.n	1000dc3e <char_permissions+0x36>
1000dc3c:	2430      	movs	r4, #48	; 0x30
1000dc3e:	4323      	orrs	r3, r4
1000dc40:	06c4      	lsls	r4, r0, #27
1000dc42:	d506      	bpl.n	1000dc52 <char_permissions+0x4a>
1000dc44:	2406      	movs	r4, #6
1000dc46:	4221      	tst	r1, r4
1000dc48:	d101      	bne.n	1000dc4e <char_permissions+0x46>
1000dc4a:	343a      	adds	r4, #58	; 0x3a
1000dc4c:	e000      	b.n	1000dc50 <char_permissions+0x48>
1000dc4e:	24c0      	movs	r4, #192	; 0xc0
1000dc50:	4323      	orrs	r3, r4
1000dc52:	2480      	movs	r4, #128	; 0x80
1000dc54:	0064      	lsls	r4, r4, #1
1000dc56:	4220      	tst	r0, r4
1000dc58:	d000      	beq.n	1000dc5c <char_permissions+0x54>
1000dc5a:	4323      	orrs	r3, r4
1000dc5c:	07c4      	lsls	r4, r0, #31
1000dc5e:	d502      	bpl.n	1000dc66 <char_permissions+0x5e>
1000dc60:	2480      	movs	r4, #128	; 0x80
1000dc62:	00a4      	lsls	r4, r4, #2
1000dc64:	4323      	orrs	r3, r4
1000dc66:	2404      	movs	r4, #4
1000dc68:	4220      	tst	r0, r4
1000dc6a:	d006      	beq.n	1000dc7a <char_permissions+0x72>
1000dc6c:	06cd      	lsls	r5, r1, #27
1000dc6e:	d400      	bmi.n	1000dc72 <char_permissions+0x6a>
1000dc70:	240c      	movs	r4, #12
1000dc72:	4323      	orrs	r3, r4
1000dc74:	2480      	movs	r4, #128	; 0x80
1000dc76:	0124      	lsls	r4, r4, #4
1000dc78:	4323      	orrs	r3, r4
1000dc7a:	0644      	lsls	r4, r0, #25
1000dc7c:	d501      	bpl.n	1000dc82 <char_permissions+0x7a>
1000dc7e:	4c08      	ldr	r4, [pc, #32]	; (1000dca0 <char_permissions+0x98>)
1000dc80:	4323      	orrs	r3, r4
1000dc82:	0600      	lsls	r0, r0, #24
1000dc84:	d507      	bpl.n	1000dc96 <char_permissions+0x8e>
1000dc86:	2004      	movs	r0, #4
1000dc88:	06c9      	lsls	r1, r1, #27
1000dc8a:	d400      	bmi.n	1000dc8e <char_permissions+0x86>
1000dc8c:	200c      	movs	r0, #12
1000dc8e:	4303      	orrs	r3, r0
1000dc90:	2084      	movs	r0, #132	; 0x84
1000dc92:	0180      	lsls	r0, r0, #6
1000dc94:	4303      	orrs	r3, r0
1000dc96:	0390      	lsls	r0, r2, #14
1000dc98:	4303      	orrs	r3, r0
1000dc9a:	b298      	uxth	r0, r3
1000dc9c:	bd30      	pop	{r4, r5, pc}
1000dc9e:	46c0      	nop			; (mov r8, r8)
1000dca0:	00001004 	.word	0x00001004

1000dca4 <presentation_format_define>:
1000dca4:	b507      	push	{r0, r1, r2, lr}
1000dca6:	466a      	mov	r2, sp
1000dca8:	780b      	ldrb	r3, [r1, #0]
1000dcaa:	7013      	strb	r3, [r2, #0]
1000dcac:	784b      	ldrb	r3, [r1, #1]
1000dcae:	7053      	strb	r3, [r2, #1]
1000dcb0:	884b      	ldrh	r3, [r1, #2]
1000dcb2:	7093      	strb	r3, [r2, #2]
1000dcb4:	0a1b      	lsrs	r3, r3, #8
1000dcb6:	70d3      	strb	r3, [r2, #3]
1000dcb8:	790b      	ldrb	r3, [r1, #4]
1000dcba:	7113      	strb	r3, [r2, #4]
1000dcbc:	88cb      	ldrh	r3, [r1, #6]
1000dcbe:	2107      	movs	r1, #7
1000dcc0:	7153      	strb	r3, [r2, #5]
1000dcc2:	0a1b      	lsrs	r3, r3, #8
1000dcc4:	7193      	strb	r3, [r2, #6]
1000dcc6:	4b01      	ldr	r3, [pc, #4]	; (1000dccc <presentation_format_define+0x28>)
1000dcc8:	4798      	blx	r3
1000dcca:	bd0e      	pop	{r1, r2, r3, pc}
1000dccc:	10010169 	.word	0x10010169

1000dcd0 <db_addATT>:
1000dcd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000dcd2:	4c29      	ldr	r4, [pc, #164]	; (1000dd78 <db_addATT+0xa8>)
1000dcd4:	1c1d      	adds	r5, r3, #0
1000dcd6:	6823      	ldr	r3, [r4, #0]
1000dcd8:	9001      	str	r0, [sp, #4]
1000dcda:	26d3      	movs	r6, #211	; 0xd3
1000dcdc:	2b00      	cmp	r3, #0
1000dcde:	d048      	beq.n	1000dd72 <db_addATT+0xa2>
1000dce0:	1c1e      	adds	r6, r3, #0
1000dce2:	3e0c      	subs	r6, #12
1000dce4:	6026      	str	r6, [r4, #0]
1000dce6:	2900      	cmp	r1, #0
1000dce8:	d005      	beq.n	1000dcf6 <db_addATT+0x26>
1000dcea:	4f24      	ldr	r7, [pc, #144]	; (1000dd7c <db_addATT+0xac>)
1000dcec:	46bc      	mov	ip, r7
1000dcee:	4660      	mov	r0, ip
1000dcf0:	683f      	ldr	r7, [r7, #0]
1000dcf2:	18bf      	adds	r7, r7, r2
1000dcf4:	6007      	str	r7, [r0, #0]
1000dcf6:	4821      	ldr	r0, [pc, #132]	; (1000dd7c <db_addATT+0xac>)
1000dcf8:	6807      	ldr	r7, [r0, #0]
1000dcfa:	4684      	mov	ip, r0
1000dcfc:	42be      	cmp	r6, r7
1000dcfe:	d932      	bls.n	1000dd66 <db_addATT+0x96>
1000dd00:	4668      	mov	r0, sp
1000dd02:	8880      	ldrh	r0, [r0, #4]
1000dd04:	3b0c      	subs	r3, #12
1000dd06:	8018      	strh	r0, [r3, #0]
1000dd08:	6823      	ldr	r3, [r4, #0]
1000dd0a:	2900      	cmp	r1, #0
1000dd0c:	d009      	beq.n	1000dd22 <db_addATT+0x52>
1000dd0e:	2a00      	cmp	r2, #0
1000dd10:	d007      	beq.n	1000dd22 <db_addATT+0x52>
1000dd12:	4660      	mov	r0, ip
1000dd14:	6800      	ldr	r0, [r0, #0]
1000dd16:	809a      	strh	r2, [r3, #4]
1000dd18:	1a80      	subs	r0, r0, r2
1000dd1a:	6098      	str	r0, [r3, #8]
1000dd1c:	4b18      	ldr	r3, [pc, #96]	; (1000dd80 <db_addATT+0xb0>)
1000dd1e:	4798      	blx	r3
1000dd20:	e002      	b.n	1000dd28 <db_addATT+0x58>
1000dd22:	2100      	movs	r1, #0
1000dd24:	809a      	strh	r2, [r3, #4]
1000dd26:	6099      	str	r1, [r3, #8]
1000dd28:	2300      	movs	r3, #0
1000dd2a:	6822      	ldr	r2, [r4, #0]
1000dd2c:	7093      	strb	r3, [r2, #2]
1000dd2e:	3303      	adds	r3, #3
1000dd30:	402b      	ands	r3, r5
1000dd32:	2b03      	cmp	r3, #3
1000dd34:	d001      	beq.n	1000dd3a <db_addATT+0x6a>
1000dd36:	076b      	lsls	r3, r5, #29
1000dd38:	d504      	bpl.n	1000dd44 <db_addATT+0x74>
1000dd3a:	2101      	movs	r1, #1
1000dd3c:	6822      	ldr	r2, [r4, #0]
1000dd3e:	7893      	ldrb	r3, [r2, #2]
1000dd40:	430b      	orrs	r3, r1
1000dd42:	7093      	strb	r3, [r2, #2]
1000dd44:	2330      	movs	r3, #48	; 0x30
1000dd46:	402b      	ands	r3, r5
1000dd48:	2b30      	cmp	r3, #48	; 0x30
1000dd4a:	d001      	beq.n	1000dd50 <db_addATT+0x80>
1000dd4c:	066b      	lsls	r3, r5, #25
1000dd4e:	d504      	bpl.n	1000dd5a <db_addATT+0x8a>
1000dd50:	2102      	movs	r1, #2
1000dd52:	6822      	ldr	r2, [r4, #0]
1000dd54:	7893      	ldrb	r3, [r2, #2]
1000dd56:	430b      	orrs	r3, r1
1000dd58:	7093      	strb	r3, [r2, #2]
1000dd5a:	4a0a      	ldr	r2, [pc, #40]	; (1000dd84 <db_addATT+0xb4>)
1000dd5c:	2600      	movs	r6, #0
1000dd5e:	6813      	ldr	r3, [r2, #0]
1000dd60:	3301      	adds	r3, #1
1000dd62:	6013      	str	r3, [r2, #0]
1000dd64:	e005      	b.n	1000dd72 <db_addATT+0xa2>
1000dd66:	6023      	str	r3, [r4, #0]
1000dd68:	2611      	movs	r6, #17
1000dd6a:	2900      	cmp	r1, #0
1000dd6c:	d001      	beq.n	1000dd72 <db_addATT+0xa2>
1000dd6e:	1aba      	subs	r2, r7, r2
1000dd70:	6002      	str	r2, [r0, #0]
1000dd72:	1c30      	adds	r0, r6, #0
1000dd74:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000dd76:	46c0      	nop			; (mov r8, r8)
1000dd78:	10015c6c 	.word	0x10015c6c
1000dd7c:	10015c70 	.word	0x10015c70
1000dd80:	10011c63 	.word	0x10011c63
1000dd84:	10015c74 	.word	0x10015c74

1000dd88 <user_description_define>:
1000dd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000dd8a:	1c05      	adds	r5, r0, #0
1000dd8c:	20cf      	movs	r0, #207	; 0xcf
1000dd8e:	2a00      	cmp	r2, #0
1000dd90:	d01c      	beq.n	1000ddcc <user_description_define+0x44>
1000dd92:	1c14      	adds	r4, r2, #0
1000dd94:	2203      	movs	r2, #3
1000dd96:	1c1e      	adds	r6, r3, #0
1000dd98:	400a      	ands	r2, r1
1000dd9a:	1c0b      	adds	r3, r1, #0
1000dd9c:	3a03      	subs	r2, #3
1000dd9e:	4251      	negs	r1, r2
1000dda0:	4151      	adcs	r1, r2
1000dda2:	075a      	lsls	r2, r3, #29
1000dda4:	0fd2      	lsrs	r2, r2, #31
1000dda6:	430a      	orrs	r2, r1
1000dda8:	03d2      	lsls	r2, r2, #15
1000ddaa:	4f09      	ldr	r7, [pc, #36]	; (1000ddd0 <user_description_define+0x48>)
1000ddac:	1c28      	adds	r0, r5, #0
1000ddae:	2a00      	cmp	r2, #0
1000ddb0:	d003      	beq.n	1000ddba <user_description_define+0x32>
1000ddb2:	1c21      	adds	r1, r4, #0
1000ddb4:	1c32      	adds	r2, r6, #0
1000ddb6:	47b8      	blx	r7
1000ddb8:	e008      	b.n	1000ddcc <user_description_define+0x44>
1000ddba:	1c11      	adds	r1, r2, #0
1000ddbc:	47b8      	blx	r7
1000ddbe:	2800      	cmp	r0, #0
1000ddc0:	d104      	bne.n	1000ddcc <user_description_define+0x44>
1000ddc2:	1c28      	adds	r0, r5, #0
1000ddc4:	1c31      	adds	r1, r6, #0
1000ddc6:	1c22      	adds	r2, r4, #0
1000ddc8:	4b02      	ldr	r3, [pc, #8]	; (1000ddd4 <user_description_define+0x4c>)
1000ddca:	4798      	blx	r3
1000ddcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ddce:	46c0      	nop			; (mov r8, r8)
1000ddd0:	1000dcd1 	.word	0x1000dcd1
1000ddd4:	10010169 	.word	0x10010169

1000ddd8 <at_ble_read_authorize_reply.part.1>:
1000ddd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ddda:	4b09      	ldr	r3, [pc, #36]	; (1000de00 <at_ble_read_authorize_reply.part.1+0x28>)
1000dddc:	1c05      	adds	r5, r0, #0
1000ddde:	1c08      	adds	r0, r1, #0
1000dde0:	1c0c      	adds	r4, r1, #0
1000dde2:	4798      	blx	r3
1000dde4:	2800      	cmp	r0, #0
1000dde6:	d009      	beq.n	1000ddfc <at_ble_read_authorize_reply.part.1+0x24>
1000dde8:	6882      	ldr	r2, [r0, #8]
1000ddea:	2a00      	cmp	r2, #0
1000ddec:	d006      	beq.n	1000ddfc <at_ble_read_authorize_reply.part.1+0x24>
1000ddee:	8883      	ldrh	r3, [r0, #4]
1000ddf0:	1c29      	adds	r1, r5, #0
1000ddf2:	9200      	str	r2, [sp, #0]
1000ddf4:	1c20      	adds	r0, r4, #0
1000ddf6:	2200      	movs	r2, #0
1000ddf8:	4c02      	ldr	r4, [pc, #8]	; (1000de04 <at_ble_read_authorize_reply.part.1+0x2c>)
1000ddfa:	47a0      	blx	r4
1000ddfc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ddfe:	46c0      	nop			; (mov r8, r8)
1000de00:	1000db71 	.word	0x1000db71
1000de04:	1000fc01 	.word	0x1000fc01

1000de08 <internal_at_ble_service_define>:
1000de08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de0a:	b08b      	sub	sp, #44	; 0x2c
1000de0c:	9306      	str	r3, [sp, #24]
1000de0e:	ab10      	add	r3, sp, #64	; 0x40
1000de10:	9202      	str	r2, [sp, #8]
1000de12:	cb04      	ldmia	r3!, {r2}
1000de14:	1c05      	adds	r5, r0, #0
1000de16:	881b      	ldrh	r3, [r3, #0]
1000de18:	9105      	str	r1, [sp, #20]
1000de1a:	9303      	str	r3, [sp, #12]
1000de1c:	ab12      	add	r3, sp, #72	; 0x48
1000de1e:	781b      	ldrb	r3, [r3, #0]
1000de20:	20cf      	movs	r0, #207	; 0xcf
1000de22:	9304      	str	r3, [sp, #16]
1000de24:	2d00      	cmp	r5, #0
1000de26:	d100      	bne.n	1000de2a <internal_at_ble_service_define+0x22>
1000de28:	e1ca      	b.n	1000e1c0 <internal_at_ble_service_define+0x3b8>
1000de2a:	2900      	cmp	r1, #0
1000de2c:	d100      	bne.n	1000de30 <internal_at_ble_service_define+0x28>
1000de2e:	e1c7      	b.n	1000e1c0 <internal_at_ble_service_define+0x3b8>
1000de30:	2a00      	cmp	r2, #0
1000de32:	d100      	bne.n	1000de36 <internal_at_ble_service_define+0x2e>
1000de34:	e1c4      	b.n	1000e1c0 <internal_at_ble_service_define+0x3b8>
1000de36:	9b03      	ldr	r3, [sp, #12]
1000de38:	2b00      	cmp	r3, #0
1000de3a:	d100      	bne.n	1000de3e <internal_at_ble_service_define+0x36>
1000de3c:	e1c0      	b.n	1000e1c0 <internal_at_ble_service_define+0x3b8>
1000de3e:	4bc9      	ldr	r3, [pc, #804]	; (1000e164 <internal_at_ble_service_define+0x35c>)
1000de40:	3004      	adds	r0, #4
1000de42:	681e      	ldr	r6, [r3, #0]
1000de44:	2e00      	cmp	r6, #0
1000de46:	d100      	bne.n	1000de4a <internal_at_ble_service_define+0x42>
1000de48:	e1ba      	b.n	1000e1c0 <internal_at_ble_service_define+0x3b8>
1000de4a:	2400      	movs	r4, #0
1000de4c:	4bc6      	ldr	r3, [pc, #792]	; (1000e168 <internal_at_ble_service_define+0x360>)
1000de4e:	8034      	strh	r4, [r6, #0]
1000de50:	881b      	ldrh	r3, [r3, #0]
1000de52:	1db7      	adds	r7, r6, #6
1000de54:	1c21      	adds	r1, r4, #0
1000de56:	2210      	movs	r2, #16
1000de58:	8073      	strh	r3, [r6, #2]
1000de5a:	1c38      	adds	r0, r7, #0
1000de5c:	4bc3      	ldr	r3, [pc, #780]	; (1000e16c <internal_at_ble_service_define+0x364>)
1000de5e:	4798      	blx	r3
1000de60:	7828      	ldrb	r0, [r5, #0]
1000de62:	4bc3      	ldr	r3, [pc, #780]	; (1000e170 <internal_at_ble_service_define+0x368>)
1000de64:	4798      	blx	r3
1000de66:	1c69      	adds	r1, r5, #1
1000de68:	1c02      	adds	r2, r0, #0
1000de6a:	4bc2      	ldr	r3, [pc, #776]	; (1000e174 <internal_at_ble_service_define+0x36c>)
1000de6c:	1c38      	adds	r0, r7, #0
1000de6e:	4798      	blx	r3
1000de70:	2204      	movs	r2, #4
1000de72:	782b      	ldrb	r3, [r5, #0]
1000de74:	9d02      	ldr	r5, [sp, #8]
1000de76:	011b      	lsls	r3, r3, #4
1000de78:	4313      	orrs	r3, r2
1000de7a:	9a04      	ldr	r2, [sp, #16]
1000de7c:	7174      	strb	r4, [r6, #5]
1000de7e:	0192      	lsls	r2, r2, #6
1000de80:	4313      	orrs	r3, r2
1000de82:	7133      	strb	r3, [r6, #4]
1000de84:	2316      	movs	r3, #22
1000de86:	9a06      	ldr	r2, [sp, #24]
1000de88:	3512      	adds	r5, #18
1000de8a:	4353      	muls	r3, r2
1000de8c:	9a02      	ldr	r2, [sp, #8]
1000de8e:	3312      	adds	r3, #18
1000de90:	18d7      	adds	r7, r2, r3
1000de92:	42bd      	cmp	r5, r7
1000de94:	d00f      	beq.n	1000deb6 <internal_at_ble_service_define+0xae>
1000de96:	4bb8      	ldr	r3, [pc, #736]	; (1000e178 <internal_at_ble_service_define+0x370>)
1000de98:	8829      	ldrh	r1, [r5, #0]
1000de9a:	9300      	str	r3, [sp, #0]
1000de9c:	230e      	movs	r3, #14
1000de9e:	aa06      	add	r2, sp, #24
1000dea0:	189b      	adds	r3, r3, r2
1000dea2:	9301      	str	r3, [sp, #4]
1000dea4:	4cb5      	ldr	r4, [pc, #724]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000dea6:	1c30      	adds	r0, r6, #0
1000dea8:	2201      	movs	r2, #1
1000deaa:	2302      	movs	r3, #2
1000deac:	47a0      	blx	r4
1000deae:	3516      	adds	r5, #22
1000deb0:	1e04      	subs	r4, r0, #0
1000deb2:	d0ee      	beq.n	1000de92 <internal_at_ble_service_define+0x8a>
1000deb4:	e183      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000deb6:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000deb8:	2300      	movs	r3, #0
1000deba:	3714      	adds	r7, #20
1000debc:	1c3d      	adds	r5, r7, #0
1000debe:	9302      	str	r3, [sp, #8]
1000dec0:	9b02      	ldr	r3, [sp, #8]
1000dec2:	9a03      	ldr	r2, [sp, #12]
1000dec4:	4293      	cmp	r3, r2
1000dec6:	db00      	blt.n	1000deca <internal_at_ble_service_define+0xc2>
1000dec8:	e0bf      	b.n	1000e04a <internal_at_ble_service_define+0x242>
1000deca:	4bad      	ldr	r3, [pc, #692]	; (1000e180 <internal_at_ble_service_define+0x378>)
1000decc:	aa06      	add	r2, sp, #24
1000dece:	9300      	str	r3, [sp, #0]
1000ded0:	230e      	movs	r3, #14
1000ded2:	189b      	adds	r3, r3, r2
1000ded4:	9301      	str	r3, [sp, #4]
1000ded6:	4ca9      	ldr	r4, [pc, #676]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000ded8:	1c30      	adds	r0, r6, #0
1000deda:	2104      	movs	r1, #4
1000dedc:	2201      	movs	r2, #1
1000dede:	2302      	movs	r3, #2
1000dee0:	47a0      	blx	r4
1000dee2:	1e04      	subs	r4, r0, #0
1000dee4:	d000      	beq.n	1000dee8 <internal_at_ble_service_define+0xe0>
1000dee6:	e16a      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000dee8:	1c2b      	adds	r3, r5, #0
1000deea:	3b12      	subs	r3, #18
1000deec:	7b2c      	ldrb	r4, [r5, #12]
1000deee:	781b      	ldrb	r3, [r3, #0]
1000def0:	1c21      	adds	r1, r4, #0
1000def2:	1c1a      	adds	r2, r3, #0
1000def4:	9304      	str	r3, [sp, #16]
1000def6:	8828      	ldrh	r0, [r5, #0]
1000def8:	4ba2      	ldr	r3, [pc, #648]	; (1000e184 <internal_at_ble_service_define+0x37c>)
1000defa:	4798      	blx	r3
1000defc:	2303      	movs	r3, #3
1000defe:	4023      	ands	r3, r4
1000df00:	3b03      	subs	r3, #3
1000df02:	4259      	negs	r1, r3
1000df04:	4159      	adcs	r1, r3
1000df06:	2301      	movs	r3, #1
1000df08:	08a4      	lsrs	r4, r4, #2
1000df0a:	401c      	ands	r4, r3
1000df0c:	430c      	orrs	r4, r1
1000df0e:	896b      	ldrh	r3, [r5, #10]
1000df10:	03e4      	lsls	r4, r4, #15
1000df12:	431c      	orrs	r4, r3
1000df14:	9007      	str	r0, [sp, #28]
1000df16:	4b96      	ldr	r3, [pc, #600]	; (1000e170 <internal_at_ble_service_define+0x368>)
1000df18:	9804      	ldr	r0, [sp, #16]
1000df1a:	4798      	blx	r3
1000df1c:	1c2a      	adds	r2, r5, #0
1000df1e:	3a11      	subs	r2, #17
1000df20:	9200      	str	r2, [sp, #0]
1000df22:	3a03      	subs	r2, #3
1000df24:	1c03      	adds	r3, r0, #0
1000df26:	9201      	str	r2, [sp, #4]
1000df28:	1c21      	adds	r1, r4, #0
1000df2a:	1c30      	adds	r0, r6, #0
1000df2c:	4c93      	ldr	r4, [pc, #588]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000df2e:	9a07      	ldr	r2, [sp, #28]
1000df30:	47a0      	blx	r4
1000df32:	1e04      	subs	r4, r0, #0
1000df34:	d000      	beq.n	1000df38 <internal_at_ble_service_define+0x130>
1000df36:	e142      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000df38:	22c0      	movs	r2, #192	; 0xc0
1000df3a:	882b      	ldrh	r3, [r5, #0]
1000df3c:	0052      	lsls	r2, r2, #1
1000df3e:	4213      	tst	r3, r2
1000df40:	d104      	bne.n	1000df4c <internal_at_ble_service_define+0x144>
1000df42:	8aab      	ldrh	r3, [r5, #20]
1000df44:	9304      	str	r3, [sp, #16]
1000df46:	2b00      	cmp	r3, #0
1000df48:	d116      	bne.n	1000df78 <internal_at_ble_service_define+0x170>
1000df4a:	e03a      	b.n	1000dfc2 <internal_at_ble_service_define+0x1ba>
1000df4c:	2201      	movs	r2, #1
1000df4e:	09d9      	lsrs	r1, r3, #7
1000df50:	4011      	ands	r1, r2
1000df52:	05db      	lsls	r3, r3, #23
1000df54:	d501      	bpl.n	1000df5a <internal_at_ble_service_define+0x152>
1000df56:	2302      	movs	r3, #2
1000df58:	4319      	orrs	r1, r3
1000df5a:	4b8b      	ldr	r3, [pc, #556]	; (1000e188 <internal_at_ble_service_define+0x380>)
1000df5c:	aa06      	add	r2, sp, #24
1000df5e:	9300      	str	r3, [sp, #0]
1000df60:	230e      	movs	r3, #14
1000df62:	189b      	adds	r3, r3, r2
1000df64:	9301      	str	r3, [sp, #4]
1000df66:	4c85      	ldr	r4, [pc, #532]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000df68:	0209      	lsls	r1, r1, #8
1000df6a:	1c30      	adds	r0, r6, #0
1000df6c:	2201      	movs	r2, #1
1000df6e:	2302      	movs	r3, #2
1000df70:	47a0      	blx	r4
1000df72:	1e04      	subs	r4, r0, #0
1000df74:	d0e5      	beq.n	1000df42 <internal_at_ble_service_define+0x13a>
1000df76:	e122      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000df78:	2380      	movs	r3, #128	; 0x80
1000df7a:	882a      	ldrh	r2, [r5, #0]
1000df7c:	7f2c      	ldrb	r4, [r5, #28]
1000df7e:	005b      	lsls	r3, r3, #1
1000df80:	401a      	ands	r2, r3
1000df82:	1c20      	adds	r0, r4, #0
1000df84:	2101      	movs	r1, #1
1000df86:	2a00      	cmp	r2, #0
1000df88:	d000      	beq.n	1000df8c <internal_at_ble_service_define+0x184>
1000df8a:	1c0a      	adds	r2, r1, #0
1000df8c:	4b7f      	ldr	r3, [pc, #508]	; (1000e18c <internal_at_ble_service_define+0x384>)
1000df8e:	4798      	blx	r3
1000df90:	2203      	movs	r2, #3
1000df92:	4022      	ands	r2, r4
1000df94:	3a03      	subs	r2, #3
1000df96:	4251      	negs	r1, r2
1000df98:	4151      	adcs	r1, r2
1000df9a:	4b7d      	ldr	r3, [pc, #500]	; (1000e190 <internal_at_ble_service_define+0x388>)
1000df9c:	1c0a      	adds	r2, r1, #0
1000df9e:	9300      	str	r3, [sp, #0]
1000dfa0:	1c2b      	adds	r3, r5, #0
1000dfa2:	0764      	lsls	r4, r4, #29
1000dfa4:	0fe4      	lsrs	r4, r4, #31
1000dfa6:	4322      	orrs	r2, r4
1000dfa8:	03d2      	lsls	r2, r2, #15
1000dfaa:	4310      	orrs	r0, r2
1000dfac:	3320      	adds	r3, #32
1000dfae:	b282      	uxth	r2, r0
1000dfb0:	9301      	str	r3, [sp, #4]
1000dfb2:	4c72      	ldr	r4, [pc, #456]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000dfb4:	1c30      	adds	r0, r6, #0
1000dfb6:	9904      	ldr	r1, [sp, #16]
1000dfb8:	2302      	movs	r3, #2
1000dfba:	47a0      	blx	r4
1000dfbc:	1e04      	subs	r4, r0, #0
1000dfbe:	d000      	beq.n	1000dfc2 <internal_at_ble_service_define+0x1ba>
1000dfc0:	e0fd      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000dfc2:	2101      	movs	r1, #1
1000dfc4:	882b      	ldrh	r3, [r5, #0]
1000dfc6:	420b      	tst	r3, r1
1000dfc8:	d011      	beq.n	1000dfee <internal_at_ble_service_define+0x1e6>
1000dfca:	7fa8      	ldrb	r0, [r5, #30]
1000dfcc:	4b6f      	ldr	r3, [pc, #444]	; (1000e18c <internal_at_ble_service_define+0x384>)
1000dfce:	2200      	movs	r2, #0
1000dfd0:	4798      	blx	r3
1000dfd2:	4b70      	ldr	r3, [pc, #448]	; (1000e194 <internal_at_ble_service_define+0x38c>)
1000dfd4:	1c02      	adds	r2, r0, #0
1000dfd6:	9300      	str	r3, [sp, #0]
1000dfd8:	1c2b      	adds	r3, r5, #0
1000dfda:	3324      	adds	r3, #36	; 0x24
1000dfdc:	9301      	str	r3, [sp, #4]
1000dfde:	4c67      	ldr	r4, [pc, #412]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000dfe0:	1c30      	adds	r0, r6, #0
1000dfe2:	496d      	ldr	r1, [pc, #436]	; (1000e198 <internal_at_ble_service_define+0x390>)
1000dfe4:	2302      	movs	r3, #2
1000dfe6:	47a0      	blx	r4
1000dfe8:	1e04      	subs	r4, r0, #0
1000dfea:	d000      	beq.n	1000dfee <internal_at_ble_service_define+0x1e6>
1000dfec:	e0e7      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000dfee:	2330      	movs	r3, #48	; 0x30
1000dff0:	882a      	ldrh	r2, [r5, #0]
1000dff2:	421a      	tst	r2, r3
1000dff4:	d012      	beq.n	1000e01c <internal_at_ble_service_define+0x214>
1000dff6:	2101      	movs	r1, #1
1000dff8:	7f68      	ldrb	r0, [r5, #29]
1000dffa:	1c0a      	adds	r2, r1, #0
1000dffc:	4b63      	ldr	r3, [pc, #396]	; (1000e18c <internal_at_ble_service_define+0x384>)
1000dffe:	4798      	blx	r3
1000e000:	4b66      	ldr	r3, [pc, #408]	; (1000e19c <internal_at_ble_service_define+0x394>)
1000e002:	1c02      	adds	r2, r0, #0
1000e004:	9300      	str	r3, [sp, #0]
1000e006:	1c2b      	adds	r3, r5, #0
1000e008:	3322      	adds	r3, #34	; 0x22
1000e00a:	9301      	str	r3, [sp, #4]
1000e00c:	4c5b      	ldr	r4, [pc, #364]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000e00e:	1c30      	adds	r0, r6, #0
1000e010:	4961      	ldr	r1, [pc, #388]	; (1000e198 <internal_at_ble_service_define+0x390>)
1000e012:	2302      	movs	r3, #2
1000e014:	47a0      	blx	r4
1000e016:	1e04      	subs	r4, r0, #0
1000e018:	d000      	beq.n	1000e01c <internal_at_ble_service_define+0x214>
1000e01a:	e0d0      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000e01c:	69ab      	ldr	r3, [r5, #24]
1000e01e:	2b00      	cmp	r3, #0
1000e020:	d00e      	beq.n	1000e040 <internal_at_ble_service_define+0x238>
1000e022:	4b5f      	ldr	r3, [pc, #380]	; (1000e1a0 <internal_at_ble_service_define+0x398>)
1000e024:	aa06      	add	r2, sp, #24
1000e026:	9300      	str	r3, [sp, #0]
1000e028:	230e      	movs	r3, #14
1000e02a:	189b      	adds	r3, r3, r2
1000e02c:	9301      	str	r3, [sp, #4]
1000e02e:	4c53      	ldr	r4, [pc, #332]	; (1000e17c <internal_at_ble_service_define+0x374>)
1000e030:	1c30      	adds	r0, r6, #0
1000e032:	2107      	movs	r1, #7
1000e034:	2201      	movs	r2, #1
1000e036:	2302      	movs	r3, #2
1000e038:	47a0      	blx	r4
1000e03a:	1e04      	subs	r4, r0, #0
1000e03c:	d000      	beq.n	1000e040 <internal_at_ble_service_define+0x238>
1000e03e:	e0be      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000e040:	9b02      	ldr	r3, [sp, #8]
1000e042:	353c      	adds	r5, #60	; 0x3c
1000e044:	3301      	adds	r3, #1
1000e046:	9302      	str	r3, [sp, #8]
1000e048:	e73a      	b.n	1000dec0 <internal_at_ble_service_define+0xb8>
1000e04a:	1c30      	adds	r0, r6, #0
1000e04c:	4b55      	ldr	r3, [pc, #340]	; (1000e1a4 <internal_at_ble_service_define+0x39c>)
1000e04e:	4798      	blx	r3
1000e050:	1e04      	subs	r4, r0, #0
1000e052:	d000      	beq.n	1000e056 <internal_at_ble_service_define+0x24e>
1000e054:	e0b3      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000e056:	8833      	ldrh	r3, [r6, #0]
1000e058:	9a05      	ldr	r2, [sp, #20]
1000e05a:	8013      	strh	r3, [r2, #0]
1000e05c:	8836      	ldrh	r6, [r6, #0]
1000e05e:	9b06      	ldr	r3, [sp, #24]
1000e060:	9a03      	ldr	r2, [sp, #12]
1000e062:	18f6      	adds	r6, r6, r3
1000e064:	b2b3      	uxth	r3, r6
1000e066:	9302      	str	r3, [sp, #8]
1000e068:	233c      	movs	r3, #60	; 0x3c
1000e06a:	4353      	muls	r3, r2
1000e06c:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000e06e:	3314      	adds	r3, #20
1000e070:	18d3      	adds	r3, r2, r3
1000e072:	9304      	str	r3, [sp, #16]
1000e074:	9b04      	ldr	r3, [sp, #16]
1000e076:	429f      	cmp	r7, r3
1000e078:	d100      	bne.n	1000e07c <internal_at_ble_service_define+0x274>
1000e07a:	e0a0      	b.n	1000e1be <internal_at_ble_service_define+0x3b6>
1000e07c:	9b02      	ldr	r3, [sp, #8]
1000e07e:	1c9d      	adds	r5, r3, #2
1000e080:	1c3b      	adds	r3, r7, #0
1000e082:	b2ad      	uxth	r5, r5
1000e084:	3b14      	subs	r3, #20
1000e086:	801d      	strh	r5, [r3, #0]
1000e088:	9303      	str	r3, [sp, #12]
1000e08a:	893b      	ldrh	r3, [r7, #8]
1000e08c:	2b00      	cmp	r3, #0
1000e08e:	d108      	bne.n	1000e0a2 <internal_at_ble_service_define+0x29a>
1000e090:	23c0      	movs	r3, #192	; 0xc0
1000e092:	883a      	ldrh	r2, [r7, #0]
1000e094:	005b      	lsls	r3, r3, #1
1000e096:	421a      	tst	r2, r3
1000e098:	d026      	beq.n	1000e0e8 <internal_at_ble_service_define+0x2e0>
1000e09a:	9e02      	ldr	r6, [sp, #8]
1000e09c:	3603      	adds	r6, #3
1000e09e:	b2b5      	uxth	r5, r6
1000e0a0:	e022      	b.n	1000e0e8 <internal_at_ble_service_define+0x2e0>
1000e0a2:	2103      	movs	r1, #3
1000e0a4:	7b3b      	ldrb	r3, [r7, #12]
1000e0a6:	4019      	ands	r1, r3
1000e0a8:	3903      	subs	r1, #3
1000e0aa:	424a      	negs	r2, r1
1000e0ac:	414a      	adcs	r2, r1
1000e0ae:	0759      	lsls	r1, r3, #29
1000e0b0:	0fc9      	lsrs	r1, r1, #31
1000e0b2:	4311      	orrs	r1, r2
1000e0b4:	03c9      	lsls	r1, r1, #15
1000e0b6:	897a      	ldrh	r2, [r7, #10]
1000e0b8:	2900      	cmp	r1, #0
1000e0ba:	d007      	beq.n	1000e0cc <internal_at_ble_service_define+0x2c4>
1000e0bc:	6879      	ldr	r1, [r7, #4]
1000e0be:	2900      	cmp	r1, #0
1000e0c0:	d100      	bne.n	1000e0c4 <internal_at_ble_service_define+0x2bc>
1000e0c2:	4939      	ldr	r1, [pc, #228]	; (1000e1a8 <internal_at_ble_service_define+0x3a0>)
1000e0c4:	1c28      	adds	r0, r5, #0
1000e0c6:	4e39      	ldr	r6, [pc, #228]	; (1000e1ac <internal_at_ble_service_define+0x3a4>)
1000e0c8:	47b0      	blx	r6
1000e0ca:	e00a      	b.n	1000e0e2 <internal_at_ble_service_define+0x2da>
1000e0cc:	1c28      	adds	r0, r5, #0
1000e0ce:	4e37      	ldr	r6, [pc, #220]	; (1000e1ac <internal_at_ble_service_define+0x3a4>)
1000e0d0:	47b0      	blx	r6
1000e0d2:	2800      	cmp	r0, #0
1000e0d4:	d172      	bne.n	1000e1bc <internal_at_ble_service_define+0x3b4>
1000e0d6:	9b03      	ldr	r3, [sp, #12]
1000e0d8:	8939      	ldrh	r1, [r7, #8]
1000e0da:	8818      	ldrh	r0, [r3, #0]
1000e0dc:	687a      	ldr	r2, [r7, #4]
1000e0de:	4b34      	ldr	r3, [pc, #208]	; (1000e1b0 <internal_at_ble_service_define+0x3a8>)
1000e0e0:	4798      	blx	r3
1000e0e2:	2800      	cmp	r0, #0
1000e0e4:	d0d4      	beq.n	1000e090 <internal_at_ble_service_define+0x288>
1000e0e6:	e069      	b.n	1000e1bc <internal_at_ble_service_define+0x3b4>
1000e0e8:	8abb      	ldrh	r3, [r7, #20]
1000e0ea:	2b00      	cmp	r3, #0
1000e0ec:	d00a      	beq.n	1000e104 <internal_at_ble_service_define+0x2fc>
1000e0ee:	3501      	adds	r5, #1
1000e0f0:	b2ad      	uxth	r5, r5
1000e0f2:	843d      	strh	r5, [r7, #32]
1000e0f4:	7f39      	ldrb	r1, [r7, #28]
1000e0f6:	8afb      	ldrh	r3, [r7, #22]
1000e0f8:	1c28      	adds	r0, r5, #0
1000e0fa:	693a      	ldr	r2, [r7, #16]
1000e0fc:	4e2d      	ldr	r6, [pc, #180]	; (1000e1b4 <internal_at_ble_service_define+0x3ac>)
1000e0fe:	47b0      	blx	r6
1000e100:	2800      	cmp	r0, #0
1000e102:	d15b      	bne.n	1000e1bc <internal_at_ble_service_define+0x3b4>
1000e104:	883b      	ldrh	r3, [r7, #0]
1000e106:	07db      	lsls	r3, r3, #31
1000e108:	d50d      	bpl.n	1000e126 <internal_at_ble_service_define+0x31e>
1000e10a:	2200      	movs	r2, #0
1000e10c:	3501      	adds	r5, #1
1000e10e:	b2ad      	uxth	r5, r5
1000e110:	a909      	add	r1, sp, #36	; 0x24
1000e112:	84bd      	strh	r5, [r7, #36]	; 0x24
1000e114:	7fbb      	ldrb	r3, [r7, #30]
1000e116:	1c28      	adds	r0, r5, #0
1000e118:	700a      	strb	r2, [r1, #0]
1000e11a:	704a      	strb	r2, [r1, #1]
1000e11c:	4e23      	ldr	r6, [pc, #140]	; (1000e1ac <internal_at_ble_service_define+0x3a4>)
1000e11e:	3202      	adds	r2, #2
1000e120:	47b0      	blx	r6
1000e122:	2800      	cmp	r0, #0
1000e124:	d14a      	bne.n	1000e1bc <internal_at_ble_service_define+0x3b4>
1000e126:	2330      	movs	r3, #48	; 0x30
1000e128:	883a      	ldrh	r2, [r7, #0]
1000e12a:	421a      	tst	r2, r3
1000e12c:	d00d      	beq.n	1000e14a <internal_at_ble_service_define+0x342>
1000e12e:	2200      	movs	r2, #0
1000e130:	3501      	adds	r5, #1
1000e132:	b2ad      	uxth	r5, r5
1000e134:	a909      	add	r1, sp, #36	; 0x24
1000e136:	847d      	strh	r5, [r7, #34]	; 0x22
1000e138:	7f7b      	ldrb	r3, [r7, #29]
1000e13a:	1c28      	adds	r0, r5, #0
1000e13c:	700a      	strb	r2, [r1, #0]
1000e13e:	704a      	strb	r2, [r1, #1]
1000e140:	4e1a      	ldr	r6, [pc, #104]	; (1000e1ac <internal_at_ble_service_define+0x3a4>)
1000e142:	3202      	adds	r2, #2
1000e144:	47b0      	blx	r6
1000e146:	2800      	cmp	r0, #0
1000e148:	d138      	bne.n	1000e1bc <internal_at_ble_service_define+0x3b4>
1000e14a:	69b9      	ldr	r1, [r7, #24]
1000e14c:	2900      	cmp	r1, #0
1000e14e:	d006      	beq.n	1000e15e <internal_at_ble_service_define+0x356>
1000e150:	3501      	adds	r5, #1
1000e152:	b2ad      	uxth	r5, r5
1000e154:	1c28      	adds	r0, r5, #0
1000e156:	4b18      	ldr	r3, [pc, #96]	; (1000e1b8 <internal_at_ble_service_define+0x3b0>)
1000e158:	4798      	blx	r3
1000e15a:	2800      	cmp	r0, #0
1000e15c:	d12e      	bne.n	1000e1bc <internal_at_ble_service_define+0x3b4>
1000e15e:	373c      	adds	r7, #60	; 0x3c
1000e160:	9502      	str	r5, [sp, #8]
1000e162:	e787      	b.n	1000e074 <internal_at_ble_service_define+0x26c>
1000e164:	10015c7c 	.word	0x10015c7c
1000e168:	10016ddc 	.word	0x10016ddc
1000e16c:	10011c75 	.word	0x10011c75
1000e170:	1000db3d 	.word	0x1000db3d
1000e174:	10011c63 	.word	0x10011c63
1000e178:	1001405b 	.word	0x1001405b
1000e17c:	100100f9 	.word	0x100100f9
1000e180:	1001405d 	.word	0x1001405d
1000e184:	1000dc09 	.word	0x1000dc09
1000e188:	10014059 	.word	0x10014059
1000e18c:	1000dbb1 	.word	0x1000dbb1
1000e190:	10014055 	.word	0x10014055
1000e194:	10014057 	.word	0x10014057
1000e198:	00008002 	.word	0x00008002
1000e19c:	10014051 	.word	0x10014051
1000e1a0:	10014053 	.word	0x10014053
1000e1a4:	1000ffed 	.word	0x1000ffed
1000e1a8:	10015c68 	.word	0x10015c68
1000e1ac:	1000dcd1 	.word	0x1000dcd1
1000e1b0:	10010169 	.word	0x10010169
1000e1b4:	1000dd89 	.word	0x1000dd89
1000e1b8:	1000dca5 	.word	0x1000dca5
1000e1bc:	1c04      	adds	r4, r0, #0
1000e1be:	1c20      	adds	r0, r4, #0
1000e1c0:	b00b      	add	sp, #44	; 0x2c
1000e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000e1c4 <initi_gatt_server_module>:
1000e1c4:	2300      	movs	r3, #0
1000e1c6:	4a07      	ldr	r2, [pc, #28]	; (1000e1e4 <initi_gatt_server_module+0x20>)
1000e1c8:	7013      	strb	r3, [r2, #0]
1000e1ca:	4a07      	ldr	r2, [pc, #28]	; (1000e1e8 <initi_gatt_server_module+0x24>)
1000e1cc:	6013      	str	r3, [r2, #0]
1000e1ce:	4a07      	ldr	r2, [pc, #28]	; (1000e1ec <initi_gatt_server_module+0x28>)
1000e1d0:	6013      	str	r3, [r2, #0]
1000e1d2:	4a07      	ldr	r2, [pc, #28]	; (1000e1f0 <initi_gatt_server_module+0x2c>)
1000e1d4:	6013      	str	r3, [r2, #0]
1000e1d6:	4a07      	ldr	r2, [pc, #28]	; (1000e1f4 <initi_gatt_server_module+0x30>)
1000e1d8:	6013      	str	r3, [r2, #0]
1000e1da:	4a07      	ldr	r2, [pc, #28]	; (1000e1f8 <initi_gatt_server_module+0x34>)
1000e1dc:	6013      	str	r3, [r2, #0]
1000e1de:	4a07      	ldr	r2, [pc, #28]	; (1000e1fc <initi_gatt_server_module+0x38>)
1000e1e0:	6013      	str	r3, [r2, #0]
1000e1e2:	4770      	bx	lr
1000e1e4:	10015c68 	.word	0x10015c68
1000e1e8:	10015c78 	.word	0x10015c78
1000e1ec:	10015c74 	.word	0x10015c74
1000e1f0:	10015c64 	.word	0x10015c64
1000e1f4:	10015c70 	.word	0x10015c70
1000e1f8:	10015c6c 	.word	0x10015c6c
1000e1fc:	10015c7c 	.word	0x10015c7c

1000e200 <db_init>:
1000e200:	4b0a      	ldr	r3, [pc, #40]	; (1000e22c <db_init+0x2c>)
1000e202:	4a0b      	ldr	r2, [pc, #44]	; (1000e230 <db_init+0x30>)
1000e204:	6018      	str	r0, [r3, #0]
1000e206:	084b      	lsrs	r3, r1, #1
1000e208:	6013      	str	r3, [r2, #0]
1000e20a:	4a0a      	ldr	r2, [pc, #40]	; (1000e234 <db_init+0x34>)
1000e20c:	18c3      	adds	r3, r0, r3
1000e20e:	6013      	str	r3, [r2, #0]
1000e210:	4a09      	ldr	r2, [pc, #36]	; (1000e238 <db_init+0x38>)
1000e212:	1841      	adds	r1, r0, r1
1000e214:	6013      	str	r3, [r2, #0]
1000e216:	2303      	movs	r3, #3
1000e218:	2200      	movs	r2, #0
1000e21a:	3103      	adds	r1, #3
1000e21c:	4399      	bics	r1, r3
1000e21e:	4b07      	ldr	r3, [pc, #28]	; (1000e23c <db_init+0x3c>)
1000e220:	3904      	subs	r1, #4
1000e222:	6019      	str	r1, [r3, #0]
1000e224:	4b06      	ldr	r3, [pc, #24]	; (1000e240 <db_init+0x40>)
1000e226:	601a      	str	r2, [r3, #0]
1000e228:	4770      	bx	lr
1000e22a:	46c0      	nop			; (mov r8, r8)
1000e22c:	10015c7c 	.word	0x10015c7c
1000e230:	10015c78 	.word	0x10015c78
1000e234:	10015c64 	.word	0x10015c64
1000e238:	10015c70 	.word	0x10015c70
1000e23c:	10015c6c 	.word	0x10015c6c
1000e240:	10015c74 	.word	0x10015c74

1000e244 <at_ble_primary_service_define>:
1000e244:	b530      	push	{r4, r5, lr}
1000e246:	b085      	sub	sp, #20
1000e248:	ac08      	add	r4, sp, #32
1000e24a:	cc20      	ldmia	r4!, {r5}
1000e24c:	8824      	ldrh	r4, [r4, #0]
1000e24e:	9500      	str	r5, [sp, #0]
1000e250:	9401      	str	r4, [sp, #4]
1000e252:	2401      	movs	r4, #1
1000e254:	9402      	str	r4, [sp, #8]
1000e256:	4c02      	ldr	r4, [pc, #8]	; (1000e260 <at_ble_primary_service_define+0x1c>)
1000e258:	47a0      	blx	r4
1000e25a:	b005      	add	sp, #20
1000e25c:	bd30      	pop	{r4, r5, pc}
1000e25e:	46c0      	nop			; (mov r8, r8)
1000e260:	1000de09 	.word	0x1000de09

1000e264 <at_ble_characteristic_value_set>:
1000e264:	b570      	push	{r4, r5, r6, lr}
1000e266:	4b0b      	ldr	r3, [pc, #44]	; (1000e294 <at_ble_characteristic_value_set+0x30>)
1000e268:	1c06      	adds	r6, r0, #0
1000e26a:	1c0c      	adds	r4, r1, #0
1000e26c:	1c15      	adds	r5, r2, #0
1000e26e:	4798      	blx	r3
1000e270:	2800      	cmp	r0, #0
1000e272:	d008      	beq.n	1000e286 <at_ble_characteristic_value_set+0x22>
1000e274:	6880      	ldr	r0, [r0, #8]
1000e276:	2800      	cmp	r0, #0
1000e278:	d005      	beq.n	1000e286 <at_ble_characteristic_value_set+0x22>
1000e27a:	1c21      	adds	r1, r4, #0
1000e27c:	1c2a      	adds	r2, r5, #0
1000e27e:	4b06      	ldr	r3, [pc, #24]	; (1000e298 <at_ble_characteristic_value_set+0x34>)
1000e280:	4798      	blx	r3
1000e282:	2000      	movs	r0, #0
1000e284:	e004      	b.n	1000e290 <at_ble_characteristic_value_set+0x2c>
1000e286:	1c30      	adds	r0, r6, #0
1000e288:	1c29      	adds	r1, r5, #0
1000e28a:	1c22      	adds	r2, r4, #0
1000e28c:	4b03      	ldr	r3, [pc, #12]	; (1000e29c <at_ble_characteristic_value_set+0x38>)
1000e28e:	4798      	blx	r3
1000e290:	bd70      	pop	{r4, r5, r6, pc}
1000e292:	46c0      	nop			; (mov r8, r8)
1000e294:	1000db71 	.word	0x1000db71
1000e298:	10011c63 	.word	0x10011c63
1000e29c:	10010169 	.word	0x10010169

1000e2a0 <at_ble_characteristic_value_get>:
1000e2a0:	b570      	push	{r4, r5, r6, lr}
1000e2a2:	4b0c      	ldr	r3, [pc, #48]	; (1000e2d4 <at_ble_characteristic_value_get+0x34>)
1000e2a4:	1c06      	adds	r6, r0, #0
1000e2a6:	1c0c      	adds	r4, r1, #0
1000e2a8:	1c15      	adds	r5, r2, #0
1000e2aa:	4798      	blx	r3
1000e2ac:	2800      	cmp	r0, #0
1000e2ae:	d00b      	beq.n	1000e2c8 <at_ble_characteristic_value_get+0x28>
1000e2b0:	6883      	ldr	r3, [r0, #8]
1000e2b2:	2b00      	cmp	r3, #0
1000e2b4:	d008      	beq.n	1000e2c8 <at_ble_characteristic_value_get+0x28>
1000e2b6:	8883      	ldrh	r3, [r0, #4]
1000e2b8:	802b      	strh	r3, [r5, #0]
1000e2ba:	8882      	ldrh	r2, [r0, #4]
1000e2bc:	6881      	ldr	r1, [r0, #8]
1000e2be:	4b06      	ldr	r3, [pc, #24]	; (1000e2d8 <at_ble_characteristic_value_get+0x38>)
1000e2c0:	1c20      	adds	r0, r4, #0
1000e2c2:	4798      	blx	r3
1000e2c4:	2000      	movs	r0, #0
1000e2c6:	e004      	b.n	1000e2d2 <at_ble_characteristic_value_get+0x32>
1000e2c8:	1c30      	adds	r0, r6, #0
1000e2ca:	1c29      	adds	r1, r5, #0
1000e2cc:	1c22      	adds	r2, r4, #0
1000e2ce:	4b03      	ldr	r3, [pc, #12]	; (1000e2dc <at_ble_characteristic_value_get+0x3c>)
1000e2d0:	4798      	blx	r3
1000e2d2:	bd70      	pop	{r4, r5, r6, pc}
1000e2d4:	1000db71 	.word	0x1000db71
1000e2d8:	10011c63 	.word	0x10011c63
1000e2dc:	100101f5 	.word	0x100101f5

1000e2e0 <at_ble_write_authorize_reply>:
1000e2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e2e2:	b085      	sub	sp, #20
1000e2e4:	1c04      	adds	r4, r0, #0
1000e2e6:	9101      	str	r1, [sp, #4]
1000e2e8:	2900      	cmp	r1, #0
1000e2ea:	d128      	bne.n	1000e33e <at_ble_write_authorize_reply+0x5e>
1000e2ec:	8843      	ldrh	r3, [r0, #2]
1000e2ee:	1c27      	adds	r7, r4, #0
1000e2f0:	9300      	str	r3, [sp, #0]
1000e2f2:	1c18      	adds	r0, r3, #0
1000e2f4:	4b16      	ldr	r3, [pc, #88]	; (1000e350 <at_ble_write_authorize_reply+0x70>)
1000e2f6:	4798      	blx	r3
1000e2f8:	3708      	adds	r7, #8
1000e2fa:	2800      	cmp	r0, #0
1000e2fc:	d009      	beq.n	1000e312 <at_ble_write_authorize_reply+0x32>
1000e2fe:	6880      	ldr	r0, [r0, #8]
1000e300:	2800      	cmp	r0, #0
1000e302:	d006      	beq.n	1000e312 <at_ble_write_authorize_reply+0x32>
1000e304:	88a3      	ldrh	r3, [r4, #4]
1000e306:	88e2      	ldrh	r2, [r4, #6]
1000e308:	18c0      	adds	r0, r0, r3
1000e30a:	1c39      	adds	r1, r7, #0
1000e30c:	4b11      	ldr	r3, [pc, #68]	; (1000e354 <at_ble_write_authorize_reply+0x74>)
1000e30e:	4798      	blx	r3
1000e310:	e015      	b.n	1000e33e <at_ble_write_authorize_reply+0x5e>
1000e312:	ab02      	add	r3, sp, #8
1000e314:	1d9e      	adds	r6, r3, #6
1000e316:	2300      	movs	r3, #0
1000e318:	4d0f      	ldr	r5, [pc, #60]	; (1000e358 <at_ble_write_authorize_reply+0x78>)
1000e31a:	8033      	strh	r3, [r6, #0]
1000e31c:	6829      	ldr	r1, [r5, #0]
1000e31e:	1c32      	adds	r2, r6, #0
1000e320:	4b0e      	ldr	r3, [pc, #56]	; (1000e35c <at_ble_write_authorize_reply+0x7c>)
1000e322:	9800      	ldr	r0, [sp, #0]
1000e324:	4798      	blx	r3
1000e326:	682b      	ldr	r3, [r5, #0]
1000e328:	88a0      	ldrh	r0, [r4, #4]
1000e32a:	88e2      	ldrh	r2, [r4, #6]
1000e32c:	1818      	adds	r0, r3, r0
1000e32e:	1c39      	adds	r1, r7, #0
1000e330:	4b08      	ldr	r3, [pc, #32]	; (1000e354 <at_ble_write_authorize_reply+0x74>)
1000e332:	4798      	blx	r3
1000e334:	8860      	ldrh	r0, [r4, #2]
1000e336:	8832      	ldrh	r2, [r6, #0]
1000e338:	6829      	ldr	r1, [r5, #0]
1000e33a:	4b09      	ldr	r3, [pc, #36]	; (1000e360 <at_ble_write_authorize_reply+0x80>)
1000e33c:	4798      	blx	r3
1000e33e:	8860      	ldrh	r0, [r4, #2]
1000e340:	8821      	ldrh	r1, [r4, #0]
1000e342:	9a01      	ldr	r2, [sp, #4]
1000e344:	4b07      	ldr	r3, [pc, #28]	; (1000e364 <at_ble_write_authorize_reply+0x84>)
1000e346:	4798      	blx	r3
1000e348:	2000      	movs	r0, #0
1000e34a:	b005      	add	sp, #20
1000e34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e34e:	46c0      	nop			; (mov r8, r8)
1000e350:	1000db71 	.word	0x1000db71
1000e354:	10011c63 	.word	0x10011c63
1000e358:	100141b8 	.word	0x100141b8
1000e35c:	1000e2a1 	.word	0x1000e2a1
1000e360:	1000e265 	.word	0x1000e265
1000e364:	1000fc6d 	.word	0x1000fc6d

1000e368 <gatts_handle_read_req>:
1000e368:	b538      	push	{r3, r4, r5, lr}
1000e36a:	1c0c      	adds	r4, r1, #0
1000e36c:	4b07      	ldr	r3, [pc, #28]	; (1000e38c <gatts_handle_read_req+0x24>)
1000e36e:	4798      	blx	r3
1000e370:	8865      	ldrh	r5, [r4, #2]
1000e372:	4b07      	ldr	r3, [pc, #28]	; (1000e390 <gatts_handle_read_req+0x28>)
1000e374:	1c28      	adds	r0, r5, #0
1000e376:	4798      	blx	r3
1000e378:	7883      	ldrb	r3, [r0, #2]
1000e37a:	2026      	movs	r0, #38	; 0x26
1000e37c:	07db      	lsls	r3, r3, #31
1000e37e:	d404      	bmi.n	1000e38a <gatts_handle_read_req+0x22>
1000e380:	8820      	ldrh	r0, [r4, #0]
1000e382:	1c29      	adds	r1, r5, #0
1000e384:	4b03      	ldr	r3, [pc, #12]	; (1000e394 <gatts_handle_read_req+0x2c>)
1000e386:	4798      	blx	r3
1000e388:	203b      	movs	r0, #59	; 0x3b
1000e38a:	bd38      	pop	{r3, r4, r5, pc}
1000e38c:	1000fbb1 	.word	0x1000fbb1
1000e390:	1000db71 	.word	0x1000db71
1000e394:	1000ddd9 	.word	0x1000ddd9

1000e398 <gatts_handle_att_info_req>:
1000e398:	b538      	push	{r3, r4, r5, lr}
1000e39a:	1c0d      	adds	r5, r1, #0
1000e39c:	4b0a      	ldr	r3, [pc, #40]	; (1000e3c8 <gatts_handle_att_info_req+0x30>)
1000e39e:	1c14      	adds	r4, r2, #0
1000e3a0:	4798      	blx	r3
1000e3a2:	882d      	ldrh	r5, [r5, #0]
1000e3a4:	4b09      	ldr	r3, [pc, #36]	; (1000e3cc <gatts_handle_att_info_req+0x34>)
1000e3a6:	1c28      	adds	r0, r5, #0
1000e3a8:	4798      	blx	r3
1000e3aa:	0a22      	lsrs	r2, r4, #8
1000e3ac:	1c03      	adds	r3, r0, #0
1000e3ae:	4c08      	ldr	r4, [pc, #32]	; (1000e3d0 <gatts_handle_att_info_req+0x38>)
1000e3b0:	b291      	uxth	r1, r2
1000e3b2:	2800      	cmp	r0, #0
1000e3b4:	d003      	beq.n	1000e3be <gatts_handle_att_info_req+0x26>
1000e3b6:	8882      	ldrh	r2, [r0, #4]
1000e3b8:	2300      	movs	r3, #0
1000e3ba:	1c28      	adds	r0, r5, #0
1000e3bc:	e001      	b.n	1000e3c2 <gatts_handle_att_info_req+0x2a>
1000e3be:	1c28      	adds	r0, r5, #0
1000e3c0:	2201      	movs	r2, #1
1000e3c2:	47a0      	blx	r4
1000e3c4:	203b      	movs	r0, #59	; 0x3b
1000e3c6:	bd38      	pop	{r3, r4, r5, pc}
1000e3c8:	1000fbf5 	.word	0x1000fbf5
1000e3cc:	1000db71 	.word	0x1000db71
1000e3d0:	1000fcb1 	.word	0x1000fcb1

1000e3d4 <gatts_handle_write_req>:
1000e3d4:	b510      	push	{r4, lr}
1000e3d6:	1c14      	adds	r4, r2, #0
1000e3d8:	4b07      	ldr	r3, [pc, #28]	; (1000e3f8 <gatts_handle_write_req+0x24>)
1000e3da:	4798      	blx	r3
1000e3dc:	4b07      	ldr	r3, [pc, #28]	; (1000e3fc <gatts_handle_write_req+0x28>)
1000e3de:	8860      	ldrh	r0, [r4, #2]
1000e3e0:	4798      	blx	r3
1000e3e2:	2302      	movs	r3, #2
1000e3e4:	7881      	ldrb	r1, [r0, #2]
1000e3e6:	2022      	movs	r0, #34	; 0x22
1000e3e8:	4019      	ands	r1, r3
1000e3ea:	d103      	bne.n	1000e3f4 <gatts_handle_write_req+0x20>
1000e3ec:	1c20      	adds	r0, r4, #0
1000e3ee:	4b04      	ldr	r3, [pc, #16]	; (1000e400 <gatts_handle_write_req+0x2c>)
1000e3f0:	4798      	blx	r3
1000e3f2:	201f      	movs	r0, #31
1000e3f4:	bd10      	pop	{r4, pc}
1000e3f6:	46c0      	nop			; (mov r8, r8)
1000e3f8:	1000fbbd 	.word	0x1000fbbd
1000e3fc:	1000db71 	.word	0x1000db71
1000e400:	1000e2e1 	.word	0x1000e2e1

1000e404 <at_ble_notification_send>:
1000e404:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e406:	4d17      	ldr	r5, [pc, #92]	; (1000e464 <at_ble_notification_send+0x60>)
1000e408:	4c17      	ldr	r4, [pc, #92]	; (1000e468 <at_ble_notification_send+0x64>)
1000e40a:	682a      	ldr	r2, [r5, #0]
1000e40c:	44a5      	add	sp, r4
1000e40e:	23d2      	movs	r3, #210	; 0xd2
1000e410:	2a04      	cmp	r2, #4
1000e412:	d822      	bhi.n	1000e45a <at_ble_notification_send+0x56>
1000e414:	1c06      	adds	r6, r0, #0
1000e416:	4b15      	ldr	r3, [pc, #84]	; (1000e46c <at_ble_notification_send+0x68>)
1000e418:	1c08      	adds	r0, r1, #0
1000e41a:	1c0c      	adds	r4, r1, #0
1000e41c:	4798      	blx	r3
1000e41e:	2800      	cmp	r0, #0
1000e420:	d008      	beq.n	1000e434 <at_ble_notification_send+0x30>
1000e422:	6883      	ldr	r3, [r0, #8]
1000e424:	2b00      	cmp	r3, #0
1000e426:	d005      	beq.n	1000e434 <at_ble_notification_send+0x30>
1000e428:	8882      	ldrh	r2, [r0, #4]
1000e42a:	1c21      	adds	r1, r4, #0
1000e42c:	9200      	str	r2, [sp, #0]
1000e42e:	2012      	movs	r0, #18
1000e430:	1c32      	adds	r2, r6, #0
1000e432:	e00c      	b.n	1000e44e <at_ble_notification_send+0x4a>
1000e434:	270e      	movs	r7, #14
1000e436:	446f      	add	r7, sp
1000e438:	1c39      	adds	r1, r7, #0
1000e43a:	aa04      	add	r2, sp, #16
1000e43c:	4b0c      	ldr	r3, [pc, #48]	; (1000e470 <at_ble_notification_send+0x6c>)
1000e43e:	1c20      	adds	r0, r4, #0
1000e440:	4798      	blx	r3
1000e442:	2012      	movs	r0, #18
1000e444:	1c21      	adds	r1, r4, #0
1000e446:	1c32      	adds	r2, r6, #0
1000e448:	883b      	ldrh	r3, [r7, #0]
1000e44a:	9300      	str	r3, [sp, #0]
1000e44c:	ab04      	add	r3, sp, #16
1000e44e:	4c09      	ldr	r4, [pc, #36]	; (1000e474 <at_ble_notification_send+0x70>)
1000e450:	47a0      	blx	r4
1000e452:	682b      	ldr	r3, [r5, #0]
1000e454:	3301      	adds	r3, #1
1000e456:	602b      	str	r3, [r5, #0]
1000e458:	2300      	movs	r3, #0
1000e45a:	1c18      	adds	r0, r3, #0
1000e45c:	2385      	movs	r3, #133	; 0x85
1000e45e:	009b      	lsls	r3, r3, #2
1000e460:	449d      	add	sp, r3
1000e462:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e464:	10015d08 	.word	0x10015d08
1000e468:	fffffdec 	.word	0xfffffdec
1000e46c:	1000db71 	.word	0x1000db71
1000e470:	100101f5 	.word	0x100101f5
1000e474:	1000fcf9 	.word	0x1000fcf9

1000e478 <init_l2cc_task_module>:
1000e478:	220a      	movs	r2, #10
1000e47a:	4b01      	ldr	r3, [pc, #4]	; (1000e480 <init_l2cc_task_module+0x8>)
1000e47c:	701a      	strb	r2, [r3, #0]
1000e47e:	4770      	bx	lr
1000e480:	100141b6 	.word	0x100141b6

1000e484 <l2cc_data_send_rsp_handler>:
1000e484:	b510      	push	{r4, lr}
1000e486:	7802      	ldrb	r2, [r0, #0]
1000e488:	700a      	strb	r2, [r1, #0]
1000e48a:	7883      	ldrb	r3, [r0, #2]
1000e48c:	7844      	ldrb	r4, [r0, #1]
1000e48e:	021b      	lsls	r3, r3, #8
1000e490:	4323      	orrs	r3, r4
1000e492:	804b      	strh	r3, [r1, #2]
1000e494:	7903      	ldrb	r3, [r0, #4]
1000e496:	78c0      	ldrb	r0, [r0, #3]
1000e498:	021b      	lsls	r3, r3, #8
1000e49a:	4303      	orrs	r3, r0
1000e49c:	808b      	strh	r3, [r1, #4]
1000e49e:	2a00      	cmp	r2, #0
1000e4a0:	d103      	bne.n	1000e4aa <l2cc_data_send_rsp_handler+0x26>
1000e4a2:	4a02      	ldr	r2, [pc, #8]	; (1000e4ac <l2cc_data_send_rsp_handler+0x28>)
1000e4a4:	7813      	ldrb	r3, [r2, #0]
1000e4a6:	3301      	adds	r3, #1
1000e4a8:	7013      	strb	r3, [r2, #0]
1000e4aa:	bd10      	pop	{r4, pc}
1000e4ac:	100141b6 	.word	0x100141b6

1000e4b0 <l2cc_data_received_handler>:
1000e4b0:	b508      	push	{r3, lr}
1000e4b2:	1c03      	adds	r3, r0, #0
1000e4b4:	7842      	ldrb	r2, [r0, #1]
1000e4b6:	7800      	ldrb	r0, [r0, #0]
1000e4b8:	0212      	lsls	r2, r2, #8
1000e4ba:	4302      	orrs	r2, r0
1000e4bc:	800a      	strh	r2, [r1, #0]
1000e4be:	78da      	ldrb	r2, [r3, #3]
1000e4c0:	7898      	ldrb	r0, [r3, #2]
1000e4c2:	0212      	lsls	r2, r2, #8
1000e4c4:	4302      	orrs	r2, r0
1000e4c6:	804a      	strh	r2, [r1, #2]
1000e4c8:	795a      	ldrb	r2, [r3, #5]
1000e4ca:	7918      	ldrb	r0, [r3, #4]
1000e4cc:	0212      	lsls	r2, r2, #8
1000e4ce:	4302      	orrs	r2, r0
1000e4d0:	808a      	strh	r2, [r1, #4]
1000e4d2:	1d88      	adds	r0, r1, #6
1000e4d4:	1d99      	adds	r1, r3, #6
1000e4d6:	4b01      	ldr	r3, [pc, #4]	; (1000e4dc <l2cc_data_received_handler+0x2c>)
1000e4d8:	4798      	blx	r3
1000e4da:	bd08      	pop	{r3, pc}
1000e4dc:	10011c63 	.word	0x10011c63

1000e4e0 <at_ble_authenticate>:
1000e4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4e2:	1c0c      	adds	r4, r1, #0
1000e4e4:	211f      	movs	r1, #31
1000e4e6:	b08b      	sub	sp, #44	; 0x2c
1000e4e8:	9307      	str	r3, [sp, #28]
1000e4ea:	ab02      	add	r3, sp, #8
1000e4ec:	18c9      	adds	r1, r1, r3
1000e4ee:	230f      	movs	r3, #15
1000e4f0:	700b      	strb	r3, [r1, #0]
1000e4f2:	4b40      	ldr	r3, [pc, #256]	; (1000e5f4 <at_ble_authenticate+0x114>)
1000e4f4:	1c05      	adds	r5, r0, #0
1000e4f6:	1c16      	adds	r6, r2, #0
1000e4f8:	4798      	blx	r3
1000e4fa:	1c07      	adds	r7, r0, #0
1000e4fc:	2001      	movs	r0, #1
1000e4fe:	2f07      	cmp	r7, #7
1000e500:	d875      	bhi.n	1000e5ee <at_ble_authenticate+0x10e>
1000e502:	2c00      	cmp	r4, #0
1000e504:	d113      	bne.n	1000e52e <at_ble_authenticate+0x4e>
1000e506:	2312      	movs	r3, #18
1000e508:	435f      	muls	r7, r3
1000e50a:	4b3b      	ldr	r3, [pc, #236]	; (1000e5f8 <at_ble_authenticate+0x118>)
1000e50c:	5cfb      	ldrb	r3, [r7, r3]
1000e50e:	4283      	cmp	r3, r0
1000e510:	d001      	beq.n	1000e516 <at_ble_authenticate+0x36>
1000e512:	20cf      	movs	r0, #207	; 0xcf
1000e514:	e06b      	b.n	1000e5ee <at_ble_authenticate+0x10e>
1000e516:	9504      	str	r5, [sp, #16]
1000e518:	9400      	str	r4, [sp, #0]
1000e51a:	9401      	str	r4, [sp, #4]
1000e51c:	9402      	str	r4, [sp, #8]
1000e51e:	9403      	str	r4, [sp, #12]
1000e520:	1c20      	adds	r0, r4, #0
1000e522:	1c21      	adds	r1, r4, #0
1000e524:	1c22      	adds	r2, r4, #0
1000e526:	1c23      	adds	r3, r4, #0
1000e528:	4d34      	ldr	r5, [pc, #208]	; (1000e5fc <at_ble_authenticate+0x11c>)
1000e52a:	47a8      	blx	r5
1000e52c:	e05e      	b.n	1000e5ec <at_ble_authenticate+0x10c>
1000e52e:	7922      	ldrb	r2, [r4, #4]
1000e530:	2a06      	cmp	r2, #6
1000e532:	d9ee      	bls.n	1000e512 <at_ble_authenticate+0x32>
1000e534:	7963      	ldrb	r3, [r4, #5]
1000e536:	2b10      	cmp	r3, #16
1000e538:	d8eb      	bhi.n	1000e512 <at_ble_authenticate+0x32>
1000e53a:	429a      	cmp	r2, r3
1000e53c:	d8e9      	bhi.n	1000e512 <at_ble_authenticate+0x32>
1000e53e:	7a23      	ldrb	r3, [r4, #8]
1000e540:	2b04      	cmp	r3, #4
1000e542:	d8e6      	bhi.n	1000e512 <at_ble_authenticate+0x32>
1000e544:	79a3      	ldrb	r3, [r4, #6]
1000e546:	2b07      	cmp	r3, #7
1000e548:	d8e3      	bhi.n	1000e512 <at_ble_authenticate+0x32>
1000e54a:	79e3      	ldrb	r3, [r4, #7]
1000e54c:	2b07      	cmp	r3, #7
1000e54e:	d8e0      	bhi.n	1000e512 <at_ble_authenticate+0x32>
1000e550:	78a3      	ldrb	r3, [r4, #2]
1000e552:	2b00      	cmp	r3, #0
1000e554:	d006      	beq.n	1000e564 <at_ble_authenticate+0x84>
1000e556:	2e00      	cmp	r6, #0
1000e558:	d0db      	beq.n	1000e512 <at_ble_authenticate+0x32>
1000e55a:	4829      	ldr	r0, [pc, #164]	; (1000e600 <at_ble_authenticate+0x120>)
1000e55c:	1c31      	adds	r1, r6, #0
1000e55e:	221c      	movs	r2, #28
1000e560:	4b28      	ldr	r3, [pc, #160]	; (1000e604 <at_ble_authenticate+0x124>)
1000e562:	4798      	blx	r3
1000e564:	9b07      	ldr	r3, [sp, #28]
1000e566:	2b00      	cmp	r3, #0
1000e568:	d005      	beq.n	1000e576 <at_ble_authenticate+0x96>
1000e56a:	4827      	ldr	r0, [pc, #156]	; (1000e608 <at_ble_authenticate+0x128>)
1000e56c:	1c19      	adds	r1, r3, #0
1000e56e:	309a      	adds	r0, #154	; 0x9a
1000e570:	2210      	movs	r2, #16
1000e572:	4b24      	ldr	r3, [pc, #144]	; (1000e604 <at_ble_authenticate+0x124>)
1000e574:	4798      	blx	r3
1000e576:	7863      	ldrb	r3, [r4, #1]
1000e578:	78a2      	ldrb	r2, [r4, #2]
1000e57a:	009b      	lsls	r3, r3, #2
1000e57c:	4313      	orrs	r3, r2
1000e57e:	2212      	movs	r2, #18
1000e580:	4357      	muls	r7, r2
1000e582:	4a1d      	ldr	r2, [pc, #116]	; (1000e5f8 <at_ble_authenticate+0x118>)
1000e584:	b2db      	uxtb	r3, r3
1000e586:	5cba      	ldrb	r2, [r7, r2]
1000e588:	2a00      	cmp	r2, #0
1000e58a:	d116      	bne.n	1000e5ba <at_ble_authenticate+0xda>
1000e58c:	79a0      	ldrb	r0, [r4, #6]
1000e58e:	0742      	lsls	r2, r0, #29
1000e590:	d502      	bpl.n	1000e598 <at_ble_authenticate+0xb8>
1000e592:	9a07      	ldr	r2, [sp, #28]
1000e594:	2a00      	cmp	r2, #0
1000e596:	d0bc      	beq.n	1000e512 <at_ble_authenticate+0x32>
1000e598:	07c2      	lsls	r2, r0, #31
1000e59a:	d501      	bpl.n	1000e5a0 <at_ble_authenticate+0xc0>
1000e59c:	2e00      	cmp	r6, #0
1000e59e:	d0b8      	beq.n	1000e512 <at_ble_authenticate+0x32>
1000e5a0:	7966      	ldrb	r6, [r4, #5]
1000e5a2:	7821      	ldrb	r1, [r4, #0]
1000e5a4:	78e2      	ldrb	r2, [r4, #3]
1000e5a6:	9600      	str	r6, [sp, #0]
1000e5a8:	9001      	str	r0, [sp, #4]
1000e5aa:	79e0      	ldrb	r0, [r4, #7]
1000e5ac:	9002      	str	r0, [sp, #8]
1000e5ae:	7a20      	ldrb	r0, [r4, #8]
1000e5b0:	4c16      	ldr	r4, [pc, #88]	; (1000e60c <at_ble_authenticate+0x12c>)
1000e5b2:	9003      	str	r0, [sp, #12]
1000e5b4:	1c28      	adds	r0, r5, #0
1000e5b6:	47a0      	blx	r4
1000e5b8:	e018      	b.n	1000e5ec <at_ble_authenticate+0x10c>
1000e5ba:	2a01      	cmp	r2, #1
1000e5bc:	d1a9      	bne.n	1000e512 <at_ble_authenticate+0x32>
1000e5be:	79e0      	ldrb	r0, [r4, #7]
1000e5c0:	0742      	lsls	r2, r0, #29
1000e5c2:	d502      	bpl.n	1000e5ca <at_ble_authenticate+0xea>
1000e5c4:	9a07      	ldr	r2, [sp, #28]
1000e5c6:	2a00      	cmp	r2, #0
1000e5c8:	d0a3      	beq.n	1000e512 <at_ble_authenticate+0x32>
1000e5ca:	07c2      	lsls	r2, r0, #31
1000e5cc:	d501      	bpl.n	1000e5d2 <at_ble_authenticate+0xf2>
1000e5ce:	2e00      	cmp	r6, #0
1000e5d0:	d09f      	beq.n	1000e512 <at_ble_authenticate+0x32>
1000e5d2:	7966      	ldrb	r6, [r4, #5]
1000e5d4:	7821      	ldrb	r1, [r4, #0]
1000e5d6:	78e2      	ldrb	r2, [r4, #3]
1000e5d8:	9600      	str	r6, [sp, #0]
1000e5da:	79a6      	ldrb	r6, [r4, #6]
1000e5dc:	9002      	str	r0, [sp, #8]
1000e5de:	9601      	str	r6, [sp, #4]
1000e5e0:	7a20      	ldrb	r0, [r4, #8]
1000e5e2:	9504      	str	r5, [sp, #16]
1000e5e4:	9003      	str	r0, [sp, #12]
1000e5e6:	4c05      	ldr	r4, [pc, #20]	; (1000e5fc <at_ble_authenticate+0x11c>)
1000e5e8:	2001      	movs	r0, #1
1000e5ea:	47a0      	blx	r4
1000e5ec:	2000      	movs	r0, #0
1000e5ee:	b00b      	add	sp, #44	; 0x2c
1000e5f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e5f2:	46c0      	nop			; (mov r8, r8)
1000e5f4:	1000ea29 	.word	0x1000ea29
1000e5f8:	10016dde 	.word	0x10016dde
1000e5fc:	1000ef99 	.word	0x1000ef99
1000e600:	10016eec 	.word	0x10016eec
1000e604:	10011c63 	.word	0x10011c63
1000e608:	10016e6e 	.word	0x10016e6e
1000e60c:	1000ed79 	.word	0x1000ed79

1000e610 <at_ble_pair_key_reply>:
1000e610:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e612:	b085      	sub	sp, #20
1000e614:	1c05      	adds	r5, r0, #0
1000e616:	1c0c      	adds	r4, r1, #0
1000e618:	1c16      	adds	r6, r2, #0
1000e61a:	2100      	movs	r1, #0
1000e61c:	4668      	mov	r0, sp
1000e61e:	2210      	movs	r2, #16
1000e620:	4b18      	ldr	r3, [pc, #96]	; (1000e684 <at_ble_pair_key_reply+0x74>)
1000e622:	4798      	blx	r3
1000e624:	2101      	movs	r1, #1
1000e626:	2e00      	cmp	r6, #0
1000e628:	d101      	bne.n	1000e62e <at_ble_pair_key_reply+0x1e>
1000e62a:	1c31      	adds	r1, r6, #0
1000e62c:	466e      	mov	r6, sp
1000e62e:	2c00      	cmp	r4, #0
1000e630:	d116      	bne.n	1000e660 <at_ble_pair_key_reply+0x50>
1000e632:	2701      	movs	r7, #1
1000e634:	1c23      	adds	r3, r4, #0
1000e636:	1d70      	adds	r0, r6, #5
1000e638:	3e01      	subs	r6, #1
1000e63a:	7802      	ldrb	r2, [r0, #0]
1000e63c:	3801      	subs	r0, #1
1000e63e:	3a30      	subs	r2, #48	; 0x30
1000e640:	437a      	muls	r2, r7
1000e642:	189b      	adds	r3, r3, r2
1000e644:	220a      	movs	r2, #10
1000e646:	4357      	muls	r7, r2
1000e648:	42b0      	cmp	r0, r6
1000e64a:	d1f6      	bne.n	1000e63a <at_ble_pair_key_reply+0x2a>
1000e64c:	466a      	mov	r2, sp
1000e64e:	4668      	mov	r0, sp
1000e650:	7013      	strb	r3, [r2, #0]
1000e652:	0a1a      	lsrs	r2, r3, #8
1000e654:	7042      	strb	r2, [r0, #1]
1000e656:	0c1a      	lsrs	r2, r3, #16
1000e658:	0e1b      	lsrs	r3, r3, #24
1000e65a:	7082      	strb	r2, [r0, #2]
1000e65c:	70c3      	strb	r3, [r0, #3]
1000e65e:	e009      	b.n	1000e674 <at_ble_pair_key_reply+0x64>
1000e660:	20cf      	movs	r0, #207	; 0xcf
1000e662:	2c01      	cmp	r4, #1
1000e664:	d10c      	bne.n	1000e680 <at_ble_pair_key_reply+0x70>
1000e666:	2300      	movs	r3, #0
1000e668:	4668      	mov	r0, sp
1000e66a:	5cf2      	ldrb	r2, [r6, r3]
1000e66c:	54c2      	strb	r2, [r0, r3]
1000e66e:	3301      	adds	r3, #1
1000e670:	2b10      	cmp	r3, #16
1000e672:	d1f9      	bne.n	1000e668 <at_ble_pair_key_reply+0x58>
1000e674:	2004      	movs	r0, #4
1000e676:	466a      	mov	r2, sp
1000e678:	1c2b      	adds	r3, r5, #0
1000e67a:	4c03      	ldr	r4, [pc, #12]	; (1000e688 <at_ble_pair_key_reply+0x78>)
1000e67c:	47a0      	blx	r4
1000e67e:	2000      	movs	r0, #0
1000e680:	b005      	add	sp, #20
1000e682:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e684:	10011c75 	.word	0x10011c75
1000e688:	1000f015 	.word	0x1000f015

1000e68c <at_ble_send_slave_sec_request>:
1000e68c:	b570      	push	{r4, r5, r6, lr}
1000e68e:	4b0c      	ldr	r3, [pc, #48]	; (1000e6c0 <at_ble_send_slave_sec_request+0x34>)
1000e690:	1c0e      	adds	r6, r1, #0
1000e692:	2100      	movs	r1, #0
1000e694:	1c05      	adds	r5, r0, #0
1000e696:	1c14      	adds	r4, r2, #0
1000e698:	4798      	blx	r3
1000e69a:	2301      	movs	r3, #1
1000e69c:	2807      	cmp	r0, #7
1000e69e:	d80d      	bhi.n	1000e6bc <at_ble_send_slave_sec_request+0x30>
1000e6a0:	3311      	adds	r3, #17
1000e6a2:	4358      	muls	r0, r3
1000e6a4:	4b07      	ldr	r3, [pc, #28]	; (1000e6c4 <at_ble_send_slave_sec_request+0x38>)
1000e6a6:	5cc2      	ldrb	r2, [r0, r3]
1000e6a8:	23e0      	movs	r3, #224	; 0xe0
1000e6aa:	2a01      	cmp	r2, #1
1000e6ac:	d106      	bne.n	1000e6bc <at_ble_send_slave_sec_request+0x30>
1000e6ae:	00b1      	lsls	r1, r6, #2
1000e6b0:	430c      	orrs	r4, r1
1000e6b2:	4b05      	ldr	r3, [pc, #20]	; (1000e6c8 <at_ble_send_slave_sec_request+0x3c>)
1000e6b4:	b2e1      	uxtb	r1, r4
1000e6b6:	1c28      	adds	r0, r5, #0
1000e6b8:	4798      	blx	r3
1000e6ba:	2300      	movs	r3, #0
1000e6bc:	1c18      	adds	r0, r3, #0
1000e6be:	bd70      	pop	{r4, r5, r6, pc}
1000e6c0:	1000ea29 	.word	0x1000ea29
1000e6c4:	10016dde 	.word	0x10016dde
1000e6c8:	1000f065 	.word	0x1000f065

1000e6cc <at_ble_encryption_start>:
1000e6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e6ce:	23cf      	movs	r3, #207	; 0xcf
1000e6d0:	2900      	cmp	r1, #0
1000e6d2:	d02b      	beq.n	1000e72c <at_ble_encryption_start+0x60>
1000e6d4:	2a05      	cmp	r2, #5
1000e6d6:	d829      	bhi.n	1000e72c <at_ble_encryption_start+0x60>
1000e6d8:	2701      	movs	r7, #1
1000e6da:	1c3d      	adds	r5, r7, #0
1000e6dc:	2433      	movs	r4, #51	; 0x33
1000e6de:	4095      	lsls	r5, r2
1000e6e0:	4225      	tst	r5, r4
1000e6e2:	d023      	beq.n	1000e72c <at_ble_encryption_start+0x60>
1000e6e4:	7e8c      	ldrb	r4, [r1, #26]
1000e6e6:	3c07      	subs	r4, #7
1000e6e8:	2c09      	cmp	r4, #9
1000e6ea:	d81f      	bhi.n	1000e72c <at_ble_encryption_start+0x60>
1000e6ec:	4b10      	ldr	r3, [pc, #64]	; (1000e730 <at_ble_encryption_start+0x64>)
1000e6ee:	1c0c      	adds	r4, r1, #0
1000e6f0:	2100      	movs	r1, #0
1000e6f2:	1c15      	adds	r5, r2, #0
1000e6f4:	1c06      	adds	r6, r0, #0
1000e6f6:	4798      	blx	r3
1000e6f8:	1c3b      	adds	r3, r7, #0
1000e6fa:	2807      	cmp	r0, #7
1000e6fc:	d816      	bhi.n	1000e72c <at_ble_encryption_start+0x60>
1000e6fe:	2312      	movs	r3, #18
1000e700:	4358      	muls	r0, r3
1000e702:	4b0c      	ldr	r3, [pc, #48]	; (1000e734 <at_ble_encryption_start+0x68>)
1000e704:	5cc7      	ldrb	r7, [r0, r3]
1000e706:	23e0      	movs	r3, #224	; 0xe0
1000e708:	2f00      	cmp	r7, #0
1000e70a:	d10f      	bne.n	1000e72c <at_ble_encryption_start+0x60>
1000e70c:	1c21      	adds	r1, r4, #0
1000e70e:	221c      	movs	r2, #28
1000e710:	4b09      	ldr	r3, [pc, #36]	; (1000e738 <at_ble_encryption_start+0x6c>)
1000e712:	480a      	ldr	r0, [pc, #40]	; (1000e73c <at_ble_encryption_start+0x70>)
1000e714:	4798      	blx	r3
1000e716:	1c23      	adds	r3, r4, #0
1000e718:	7ea1      	ldrb	r1, [r4, #26]
1000e71a:	8a22      	ldrh	r2, [r4, #16]
1000e71c:	3312      	adds	r3, #18
1000e71e:	9100      	str	r1, [sp, #0]
1000e720:	9501      	str	r5, [sp, #4]
1000e722:	1c21      	adds	r1, r4, #0
1000e724:	1c30      	adds	r0, r6, #0
1000e726:	4c06      	ldr	r4, [pc, #24]	; (1000e740 <at_ble_encryption_start+0x74>)
1000e728:	47a0      	blx	r4
1000e72a:	1c3b      	adds	r3, r7, #0
1000e72c:	1c18      	adds	r0, r3, #0
1000e72e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e730:	1000ea29 	.word	0x1000ea29
1000e734:	10016dde 	.word	0x10016dde
1000e738:	10011c63 	.word	0x10011c63
1000e73c:	10016eec 	.word	0x10016eec
1000e740:	1000f0a5 	.word	0x1000f0a5

1000e744 <at_ble_encryption_request_reply>:
1000e744:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000e746:	24cf      	movs	r4, #207	; 0xcf
1000e748:	2b00      	cmp	r3, #0
1000e74a:	d011      	beq.n	1000e770 <at_ble_encryption_request_reply+0x2c>
1000e74c:	2a00      	cmp	r2, #0
1000e74e:	d00a      	beq.n	1000e766 <at_ble_encryption_request_reply+0x22>
1000e750:	2905      	cmp	r1, #5
1000e752:	d80d      	bhi.n	1000e770 <at_ble_encryption_request_reply+0x2c>
1000e754:	2501      	movs	r5, #1
1000e756:	2633      	movs	r6, #51	; 0x33
1000e758:	408d      	lsls	r5, r1
1000e75a:	4235      	tst	r5, r6
1000e75c:	d008      	beq.n	1000e770 <at_ble_encryption_request_reply+0x2c>
1000e75e:	7e9d      	ldrb	r5, [r3, #26]
1000e760:	3d07      	subs	r5, #7
1000e762:	2d09      	cmp	r5, #9
1000e764:	d804      	bhi.n	1000e770 <at_ble_encryption_request_reply+0x2c>
1000e766:	7e9c      	ldrb	r4, [r3, #26]
1000e768:	9400      	str	r4, [sp, #0]
1000e76a:	4c02      	ldr	r4, [pc, #8]	; (1000e774 <at_ble_encryption_request_reply+0x30>)
1000e76c:	47a0      	blx	r4
1000e76e:	2400      	movs	r4, #0
1000e770:	1c20      	adds	r0, r4, #0
1000e772:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000e774:	1000f161 	.word	0x1000f161

1000e778 <at_ble_htpt_create_db>:
1000e778:	b530      	push	{r4, r5, lr}
1000e77a:	b085      	sub	sp, #20
1000e77c:	ac08      	add	r4, sp, #32
1000e77e:	8825      	ldrh	r5, [r4, #0]
1000e780:	ac09      	add	r4, sp, #36	; 0x24
1000e782:	7824      	ldrb	r4, [r4, #0]
1000e784:	9500      	str	r5, [sp, #0]
1000e786:	9401      	str	r4, [sp, #4]
1000e788:	9c0a      	ldr	r4, [sp, #40]	; 0x28
1000e78a:	9402      	str	r4, [sp, #8]
1000e78c:	4c01      	ldr	r4, [pc, #4]	; (1000e794 <at_ble_htpt_create_db+0x1c>)
1000e78e:	47a0      	blx	r4
1000e790:	b005      	add	sp, #20
1000e792:	bd30      	pop	{r4, r5, pc}
1000e794:	10010291 	.word	0x10010291

1000e798 <at_ble_htpt_enable>:
1000e798:	b508      	push	{r3, lr}
1000e79a:	4b01      	ldr	r3, [pc, #4]	; (1000e7a0 <at_ble_htpt_enable+0x8>)
1000e79c:	4798      	blx	r3
1000e79e:	bd08      	pop	{r3, pc}
1000e7a0:	100102d1 	.word	0x100102d1

1000e7a4 <at_ble_htpt_temp_send>:
1000e7a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e7a6:	1c04      	adds	r4, r0, #0
1000e7a8:	a806      	add	r0, sp, #24
1000e7aa:	7805      	ldrb	r5, [r0, #0]
1000e7ac:	20cf      	movs	r0, #207	; 0xcf
1000e7ae:	2900      	cmp	r1, #0
1000e7b0:	d003      	beq.n	1000e7ba <at_ble_htpt_temp_send+0x16>
1000e7b2:	1c20      	adds	r0, r4, #0
1000e7b4:	9500      	str	r5, [sp, #0]
1000e7b6:	4c01      	ldr	r4, [pc, #4]	; (1000e7bc <at_ble_htpt_temp_send+0x18>)
1000e7b8:	47a0      	blx	r4
1000e7ba:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e7bc:	10010311 	.word	0x10010311

1000e7c0 <rx_callback>:
1000e7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e7c2:	8883      	ldrh	r3, [r0, #4]
1000e7c4:	1c01      	adds	r1, r0, #0
1000e7c6:	9301      	str	r3, [sp, #4]
1000e7c8:	88c5      	ldrh	r5, [r0, #6]
1000e7ca:	8806      	ldrh	r6, [r0, #0]
1000e7cc:	2d00      	cmp	r5, #0
1000e7ce:	d10f      	bne.n	1000e7f0 <rx_callback+0x30>
1000e7d0:	1c19      	adds	r1, r3, #0
1000e7d2:	1c30      	adds	r0, r6, #0
1000e7d4:	4b19      	ldr	r3, [pc, #100]	; (1000e83c <rx_callback+0x7c>)
1000e7d6:	1c2a      	adds	r2, r5, #0
1000e7d8:	4798      	blx	r3
1000e7da:	1e03      	subs	r3, r0, #0
1000e7dc:	d105      	bne.n	1000e7ea <rx_callback+0x2a>
1000e7de:	1c30      	adds	r0, r6, #0
1000e7e0:	9901      	ldr	r1, [sp, #4]
1000e7e2:	1c1a      	adds	r2, r3, #0
1000e7e4:	4c16      	ldr	r4, [pc, #88]	; (1000e840 <rx_callback+0x80>)
1000e7e6:	47a0      	blx	r4
1000e7e8:	e027      	b.n	1000e83a <rx_callback+0x7a>
1000e7ea:	4b16      	ldr	r3, [pc, #88]	; (1000e844 <rx_callback+0x84>)
1000e7ec:	4798      	blx	r3
1000e7ee:	e024      	b.n	1000e83a <rx_callback+0x7a>
1000e7f0:	4c15      	ldr	r4, [pc, #84]	; (1000e848 <rx_callback+0x88>)
1000e7f2:	4a16      	ldr	r2, [pc, #88]	; (1000e84c <rx_callback+0x8c>)
1000e7f4:	6823      	ldr	r3, [r4, #0]
1000e7f6:	6812      	ldr	r2, [r2, #0]
1000e7f8:	18eb      	adds	r3, r5, r3
1000e7fa:	4293      	cmp	r3, r2
1000e7fc:	d901      	bls.n	1000e802 <rx_callback+0x42>
1000e7fe:	2300      	movs	r3, #0
1000e800:	6023      	str	r3, [r4, #0]
1000e802:	4f13      	ldr	r7, [pc, #76]	; (1000e850 <rx_callback+0x90>)
1000e804:	6822      	ldr	r2, [r4, #0]
1000e806:	683b      	ldr	r3, [r7, #0]
1000e808:	3108      	adds	r1, #8
1000e80a:	1898      	adds	r0, r3, r2
1000e80c:	1c2a      	adds	r2, r5, #0
1000e80e:	4b11      	ldr	r3, [pc, #68]	; (1000e854 <rx_callback+0x94>)
1000e810:	4798      	blx	r3
1000e812:	683b      	ldr	r3, [r7, #0]
1000e814:	6822      	ldr	r2, [r4, #0]
1000e816:	1c30      	adds	r0, r6, #0
1000e818:	189a      	adds	r2, r3, r2
1000e81a:	9901      	ldr	r1, [sp, #4]
1000e81c:	4b07      	ldr	r3, [pc, #28]	; (1000e83c <rx_callback+0x7c>)
1000e81e:	4798      	blx	r3
1000e820:	2800      	cmp	r0, #0
1000e822:	d1e2      	bne.n	1000e7ea <rx_callback+0x2a>
1000e824:	6823      	ldr	r3, [r4, #0]
1000e826:	683a      	ldr	r2, [r7, #0]
1000e828:	1c30      	adds	r0, r6, #0
1000e82a:	18d2      	adds	r2, r2, r3
1000e82c:	9901      	ldr	r1, [sp, #4]
1000e82e:	1c2b      	adds	r3, r5, #0
1000e830:	4e03      	ldr	r6, [pc, #12]	; (1000e840 <rx_callback+0x80>)
1000e832:	47b0      	blx	r6
1000e834:	6823      	ldr	r3, [r4, #0]
1000e836:	18ed      	adds	r5, r5, r3
1000e838:	6025      	str	r5, [r4, #0]
1000e83a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e83c:	1000ce19 	.word	0x1000ce19
1000e840:	1000cd91 	.word	0x1000cd91
1000e844:	1000c1c9 	.word	0x1000c1c9
1000e848:	10016f48 	.word	0x10016f48
1000e84c:	10015c84 	.word	0x10015c84
1000e850:	10015c80 	.word	0x10015c80
1000e854:	10011c63 	.word	0x10011c63

1000e858 <interface_send>:
1000e858:	b508      	push	{r3, lr}
1000e85a:	4b02      	ldr	r3, [pc, #8]	; (1000e864 <interface_send+0xc>)
1000e85c:	4798      	blx	r3
1000e85e:	2000      	movs	r0, #0
1000e860:	bd08      	pop	{r3, pc}
1000e862:	46c0      	nop			; (mov r8, r8)
1000e864:	1000bec1 	.word	0x1000bec1

1000e868 <interface_init>:
1000e868:	2280      	movs	r2, #128	; 0x80
1000e86a:	b510      	push	{r4, lr}
1000e86c:	2100      	movs	r1, #0
1000e86e:	1c04      	adds	r4, r0, #0
1000e870:	0092      	lsls	r2, r2, #2
1000e872:	4b08      	ldr	r3, [pc, #32]	; (1000e894 <interface_init+0x2c>)
1000e874:	4808      	ldr	r0, [pc, #32]	; (1000e898 <interface_init+0x30>)
1000e876:	4798      	blx	r3
1000e878:	2200      	movs	r2, #0
1000e87a:	4b08      	ldr	r3, [pc, #32]	; (1000e89c <interface_init+0x34>)
1000e87c:	601a      	str	r2, [r3, #0]
1000e87e:	4a08      	ldr	r2, [pc, #32]	; (1000e8a0 <interface_init+0x38>)
1000e880:	4b08      	ldr	r3, [pc, #32]	; (1000e8a4 <interface_init+0x3c>)
1000e882:	601a      	str	r2, [r3, #0]
1000e884:	4b08      	ldr	r3, [pc, #32]	; (1000e8a8 <interface_init+0x40>)
1000e886:	6922      	ldr	r2, [r4, #16]
1000e888:	601a      	str	r2, [r3, #0]
1000e88a:	6962      	ldr	r2, [r4, #20]
1000e88c:	4b07      	ldr	r3, [pc, #28]	; (1000e8ac <interface_init+0x44>)
1000e88e:	601a      	str	r2, [r3, #0]
1000e890:	bd10      	pop	{r4, pc}
1000e892:	46c0      	nop			; (mov r8, r8)
1000e894:	10011c75 	.word	0x10011c75
1000e898:	1001714c 	.word	0x1001714c
1000e89c:	10016f48 	.word	0x10016f48
1000e8a0:	10016f4c 	.word	0x10016f4c
1000e8a4:	100141b8 	.word	0x100141b8
1000e8a8:	10015c80 	.word	0x10015c80
1000e8ac:	10015c84 	.word	0x10015c84

1000e8b0 <platform_cmd_cmpl_signal>:
1000e8b0:	2201      	movs	r2, #1
1000e8b2:	4b01      	ldr	r3, [pc, #4]	; (1000e8b8 <platform_cmd_cmpl_signal+0x8>)
1000e8b4:	601a      	str	r2, [r3, #0]
1000e8b6:	4770      	bx	lr
1000e8b8:	10015c88 	.word	0x10015c88

1000e8bc <platform_cmd_cmpl_wait>:
1000e8bc:	b510      	push	{r4, lr}
1000e8be:	1c04      	adds	r4, r0, #0
1000e8c0:	4b07      	ldr	r3, [pc, #28]	; (1000e8e0 <platform_cmd_cmpl_wait+0x24>)
1000e8c2:	681a      	ldr	r2, [r3, #0]
1000e8c4:	2a01      	cmp	r2, #1
1000e8c6:	d003      	beq.n	1000e8d0 <platform_cmd_cmpl_wait+0x14>
1000e8c8:	4b06      	ldr	r3, [pc, #24]	; (1000e8e4 <platform_cmd_cmpl_wait+0x28>)
1000e8ca:	2000      	movs	r0, #0
1000e8cc:	4798      	blx	r3
1000e8ce:	e7f7      	b.n	1000e8c0 <platform_cmd_cmpl_wait+0x4>
1000e8d0:	6819      	ldr	r1, [r3, #0]
1000e8d2:	2901      	cmp	r1, #1
1000e8d4:	d102      	bne.n	1000e8dc <platform_cmd_cmpl_wait+0x20>
1000e8d6:	2200      	movs	r2, #0
1000e8d8:	601a      	str	r2, [r3, #0]
1000e8da:	e000      	b.n	1000e8de <platform_cmd_cmpl_wait+0x22>
1000e8dc:	7022      	strb	r2, [r4, #0]
1000e8de:	bd10      	pop	{r4, pc}
1000e8e0:	10015c88 	.word	0x10015c88
1000e8e4:	1000bf51 	.word	0x1000bf51

1000e8e8 <start_timer>:
1000e8e8:	4770      	bx	lr

1000e8ea <stop_timer>:
1000e8ea:	4770      	bx	lr

1000e8ec <dbg_le_set_bd_addr_req_handler>:
1000e8ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e8ee:	466b      	mov	r3, sp
1000e8f0:	1dde      	adds	r6, r3, #7
1000e8f2:	2300      	movs	r3, #0
1000e8f4:	7033      	strb	r3, [r6, #0]
1000e8f6:	230f      	movs	r3, #15
1000e8f8:	4c13      	ldr	r4, [pc, #76]	; (1000e948 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000e8fa:	2703      	movs	r7, #3
1000e8fc:	7023      	strb	r3, [r4, #0]
1000e8fe:	2300      	movs	r3, #0
1000e900:	70e3      	strb	r3, [r4, #3]
1000e902:	4b12      	ldr	r3, [pc, #72]	; (1000e94c <dbg_le_set_bd_addr_req_handler+0x60>)
1000e904:	1c01      	adds	r1, r0, #0
1000e906:	881a      	ldrh	r2, [r3, #0]
1000e908:	881b      	ldrh	r3, [r3, #0]
1000e90a:	7122      	strb	r2, [r4, #4]
1000e90c:	0a1b      	lsrs	r3, r3, #8
1000e90e:	2206      	movs	r2, #6
1000e910:	7163      	strb	r3, [r4, #5]
1000e912:	480f      	ldr	r0, [pc, #60]	; (1000e950 <dbg_le_set_bd_addr_req_handler+0x64>)
1000e914:	4b0f      	ldr	r3, [pc, #60]	; (1000e954 <dbg_le_set_bd_addr_req_handler+0x68>)
1000e916:	7067      	strb	r7, [r4, #1]
1000e918:	70a7      	strb	r7, [r4, #2]
1000e91a:	4798      	blx	r3
1000e91c:	4d0e      	ldr	r5, [pc, #56]	; (1000e958 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000e91e:	4b0f      	ldr	r3, [pc, #60]	; (1000e95c <dbg_le_set_bd_addr_req_handler+0x70>)
1000e920:	210e      	movs	r1, #14
1000e922:	802b      	strh	r3, [r5, #0]
1000e924:	2306      	movs	r3, #6
1000e926:	71a3      	strb	r3, [r4, #6]
1000e928:	2300      	movs	r3, #0
1000e92a:	1c20      	adds	r0, r4, #0
1000e92c:	71e3      	strb	r3, [r4, #7]
1000e92e:	4b0c      	ldr	r3, [pc, #48]	; (1000e960 <dbg_le_set_bd_addr_req_handler+0x74>)
1000e930:	80af      	strh	r7, [r5, #4]
1000e932:	4798      	blx	r3
1000e934:	1c30      	adds	r0, r6, #0
1000e936:	4b0b      	ldr	r3, [pc, #44]	; (1000e964 <dbg_le_set_bd_addr_req_handler+0x78>)
1000e938:	4798      	blx	r3
1000e93a:	7833      	ldrb	r3, [r6, #0]
1000e93c:	20e2      	movs	r0, #226	; 0xe2
1000e93e:	2b00      	cmp	r3, #0
1000e940:	d101      	bne.n	1000e946 <dbg_le_set_bd_addr_req_handler+0x5a>
1000e942:	68ab      	ldr	r3, [r5, #8]
1000e944:	7818      	ldrb	r0, [r3, #0]
1000e946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e948:	1001714c 	.word	0x1001714c
1000e94c:	10016ddc 	.word	0x10016ddc
1000e950:	10017154 	.word	0x10017154
1000e954:	10011c63 	.word	0x10011c63
1000e958:	10016dd0 	.word	0x10016dd0
1000e95c:	00000329 	.word	0x00000329
1000e960:	1000e859 	.word	0x1000e859
1000e964:	1000e8bd 	.word	0x1000e8bd

1000e968 <gapc_get_dev_info_cfm.constprop.1>:
1000e968:	b538      	push	{r3, r4, r5, lr}
1000e96a:	230b      	movs	r3, #11
1000e96c:	4c27      	ldr	r4, [pc, #156]	; (1000ea0c <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000e96e:	7023      	strb	r3, [r4, #0]
1000e970:	3303      	adds	r3, #3
1000e972:	7063      	strb	r3, [r4, #1]
1000e974:	3329      	adds	r3, #41	; 0x29
1000e976:	70a3      	strb	r3, [r4, #2]
1000e978:	4b25      	ldr	r3, [pc, #148]	; (1000ea10 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000e97a:	70e1      	strb	r1, [r4, #3]
1000e97c:	881a      	ldrh	r2, [r3, #0]
1000e97e:	881b      	ldrh	r3, [r3, #0]
1000e980:	7122      	strb	r2, [r4, #4]
1000e982:	0a1b      	lsrs	r3, r3, #8
1000e984:	7163      	strb	r3, [r4, #5]
1000e986:	2300      	movs	r3, #0
1000e988:	7220      	strb	r0, [r4, #8]
1000e98a:	7263      	strb	r3, [r4, #9]
1000e98c:	2801      	cmp	r0, #1
1000e98e:	d02b      	beq.n	1000e9e8 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000e990:	4298      	cmp	r0, r3
1000e992:	d01b      	beq.n	1000e9cc <gapc_get_dev_info_cfm.constprop.1+0x64>
1000e994:	2802      	cmp	r0, #2
1000e996:	d12f      	bne.n	1000e9f8 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000e998:	4b1e      	ldr	r3, [pc, #120]	; (1000ea14 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e99a:	2112      	movs	r1, #18
1000e99c:	1c1a      	adds	r2, r3, #0
1000e99e:	32ce      	adds	r2, #206	; 0xce
1000e9a0:	8812      	ldrh	r2, [r2, #0]
1000e9a2:	72a2      	strb	r2, [r4, #10]
1000e9a4:	0a12      	lsrs	r2, r2, #8
1000e9a6:	72e2      	strb	r2, [r4, #11]
1000e9a8:	1c1a      	adds	r2, r3, #0
1000e9aa:	32d0      	adds	r2, #208	; 0xd0
1000e9ac:	8812      	ldrh	r2, [r2, #0]
1000e9ae:	7322      	strb	r2, [r4, #12]
1000e9b0:	0a12      	lsrs	r2, r2, #8
1000e9b2:	7362      	strb	r2, [r4, #13]
1000e9b4:	1c1a      	adds	r2, r3, #0
1000e9b6:	32d2      	adds	r2, #210	; 0xd2
1000e9b8:	8812      	ldrh	r2, [r2, #0]
1000e9ba:	33d4      	adds	r3, #212	; 0xd4
1000e9bc:	73a2      	strb	r2, [r4, #14]
1000e9be:	0a12      	lsrs	r2, r2, #8
1000e9c0:	73e2      	strb	r2, [r4, #15]
1000e9c2:	881b      	ldrh	r3, [r3, #0]
1000e9c4:	7423      	strb	r3, [r4, #16]
1000e9c6:	0a1b      	lsrs	r3, r3, #8
1000e9c8:	7463      	strb	r3, [r4, #17]
1000e9ca:	e016      	b.n	1000e9fa <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e9cc:	4b11      	ldr	r3, [pc, #68]	; (1000ea14 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e9ce:	4912      	ldr	r1, [pc, #72]	; (1000ea18 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000e9d0:	33aa      	adds	r3, #170	; 0xaa
1000e9d2:	881d      	ldrh	r5, [r3, #0]
1000e9d4:	4811      	ldr	r0, [pc, #68]	; (1000ea1c <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000e9d6:	0a2b      	lsrs	r3, r5, #8
1000e9d8:	72a5      	strb	r5, [r4, #10]
1000e9da:	72e3      	strb	r3, [r4, #11]
1000e9dc:	1c2a      	adds	r2, r5, #0
1000e9de:	4b10      	ldr	r3, [pc, #64]	; (1000ea20 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000e9e0:	350c      	adds	r5, #12
1000e9e2:	4798      	blx	r3
1000e9e4:	b2a9      	uxth	r1, r5
1000e9e6:	e008      	b.n	1000e9fa <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e9e8:	4b0a      	ldr	r3, [pc, #40]	; (1000ea14 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000e9ea:	210c      	movs	r1, #12
1000e9ec:	33cc      	adds	r3, #204	; 0xcc
1000e9ee:	881b      	ldrh	r3, [r3, #0]
1000e9f0:	72a3      	strb	r3, [r4, #10]
1000e9f2:	0a1b      	lsrs	r3, r3, #8
1000e9f4:	72e3      	strb	r3, [r4, #11]
1000e9f6:	e000      	b.n	1000e9fa <gapc_get_dev_info_cfm.constprop.1+0x92>
1000e9f8:	210a      	movs	r1, #10
1000e9fa:	1c0b      	adds	r3, r1, #0
1000e9fc:	3b08      	subs	r3, #8
1000e9fe:	71a3      	strb	r3, [r4, #6]
1000ea00:	121b      	asrs	r3, r3, #8
1000ea02:	71e3      	strb	r3, [r4, #7]
1000ea04:	1c20      	adds	r0, r4, #0
1000ea06:	4b07      	ldr	r3, [pc, #28]	; (1000ea24 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000ea08:	4798      	blx	r3
1000ea0a:	bd38      	pop	{r3, r4, r5, pc}
1000ea0c:	1001714c 	.word	0x1001714c
1000ea10:	10016ddc 	.word	0x10016ddc
1000ea14:	10016e6e 	.word	0x10016e6e
1000ea18:	10016f1a 	.word	0x10016f1a
1000ea1c:	10017158 	.word	0x10017158
1000ea20:	10011c63 	.word	0x10011c63
1000ea24:	1000e859 	.word	0x1000e859

1000ea28 <check_ConnData_idx_role>:
1000ea28:	4b0c      	ldr	r3, [pc, #48]	; (1000ea5c <check_ConnData_idx_role+0x34>)
1000ea2a:	b570      	push	{r4, r5, r6, lr}
1000ea2c:	1c04      	adds	r4, r0, #0
1000ea2e:	2008      	movs	r0, #8
1000ea30:	429c      	cmp	r4, r3
1000ea32:	d011      	beq.n	1000ea58 <check_ConnData_idx_role+0x30>
1000ea34:	2300      	movs	r3, #0
1000ea36:	2212      	movs	r2, #18
1000ea38:	435a      	muls	r2, r3
1000ea3a:	4d09      	ldr	r5, [pc, #36]	; (1000ea60 <check_ConnData_idx_role+0x38>)
1000ea3c:	b2d8      	uxtb	r0, r3
1000ea3e:	1956      	adds	r6, r2, r5
1000ea40:	8976      	ldrh	r6, [r6, #10]
1000ea42:	42a6      	cmp	r6, r4
1000ea44:	d104      	bne.n	1000ea50 <check_ConnData_idx_role+0x28>
1000ea46:	2900      	cmp	r1, #0
1000ea48:	d006      	beq.n	1000ea58 <check_ConnData_idx_role+0x30>
1000ea4a:	5d53      	ldrb	r3, [r2, r5]
1000ea4c:	700b      	strb	r3, [r1, #0]
1000ea4e:	e003      	b.n	1000ea58 <check_ConnData_idx_role+0x30>
1000ea50:	3301      	adds	r3, #1
1000ea52:	2b08      	cmp	r3, #8
1000ea54:	d1ef      	bne.n	1000ea36 <check_ConnData_idx_role+0xe>
1000ea56:	1c18      	adds	r0, r3, #0
1000ea58:	bd70      	pop	{r4, r5, r6, pc}
1000ea5a:	46c0      	nop			; (mov r8, r8)
1000ea5c:	0000ffff 	.word	0x0000ffff
1000ea60:	10016dde 	.word	0x10016dde

1000ea64 <check_ConnData_emptyEntry>:
1000ea64:	2300      	movs	r3, #0
1000ea66:	2212      	movs	r2, #18
1000ea68:	435a      	muls	r2, r3
1000ea6a:	4906      	ldr	r1, [pc, #24]	; (1000ea84 <check_ConnData_emptyEntry+0x20>)
1000ea6c:	b2d8      	uxtb	r0, r3
1000ea6e:	1852      	adds	r2, r2, r1
1000ea70:	8951      	ldrh	r1, [r2, #10]
1000ea72:	4a05      	ldr	r2, [pc, #20]	; (1000ea88 <check_ConnData_emptyEntry+0x24>)
1000ea74:	4291      	cmp	r1, r2
1000ea76:	d003      	beq.n	1000ea80 <check_ConnData_emptyEntry+0x1c>
1000ea78:	3301      	adds	r3, #1
1000ea7a:	2b08      	cmp	r3, #8
1000ea7c:	d1f3      	bne.n	1000ea66 <check_ConnData_emptyEntry+0x2>
1000ea7e:	1c18      	adds	r0, r3, #0
1000ea80:	4770      	bx	lr
1000ea82:	46c0      	nop			; (mov r8, r8)
1000ea84:	10016dde 	.word	0x10016dde
1000ea88:	0000ffff 	.word	0x0000ffff

1000ea8c <gapc_cmp_evt>:
1000ea8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea8e:	780b      	ldrb	r3, [r1, #0]
1000ea90:	1c05      	adds	r5, r0, #0
1000ea92:	1e58      	subs	r0, r3, #1
1000ea94:	784e      	ldrb	r6, [r1, #1]
1000ea96:	280f      	cmp	r0, #15
1000ea98:	d85a      	bhi.n	1000eb50 <gapc_cmp_evt+0xc4>
1000ea9a:	1c14      	adds	r4, r2, #0
1000ea9c:	f001 fc94 	bl	100103c8 <__gnu_thumb1_case_uqi>
1000eaa0:	5858440a 	.word	0x5858440a
1000eaa4:	4b584444 	.word	0x4b584444
1000eaa8:	0825122d 	.word	0x0825122d
1000eaac:	3e395858 	.word	0x3e395858
1000eab0:	203b      	movs	r0, #59	; 0x3b
1000eab2:	e04e      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eab4:	203b      	movs	r0, #59	; 0x3b
1000eab6:	2e00      	cmp	r6, #0
1000eab8:	d04b      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eaba:	0a2d      	lsrs	r5, r5, #8
1000eabc:	8015      	strh	r5, [r2, #0]
1000eabe:	7096      	strb	r6, [r2, #2]
1000eac0:	3835      	subs	r0, #53	; 0x35
1000eac2:	e046      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eac4:	466b      	mov	r3, sp
1000eac6:	1ddf      	adds	r7, r3, #7
1000eac8:	2301      	movs	r3, #1
1000eaca:	0a2d      	lsrs	r5, r5, #8
1000eacc:	703b      	strb	r3, [r7, #0]
1000eace:	1c28      	adds	r0, r5, #0
1000ead0:	1c39      	adds	r1, r7, #0
1000ead2:	4b20      	ldr	r3, [pc, #128]	; (1000eb54 <gapc_cmp_evt+0xc8>)
1000ead4:	4798      	blx	r3
1000ead6:	2807      	cmp	r0, #7
1000ead8:	d803      	bhi.n	1000eae2 <gapc_cmp_evt+0x56>
1000eada:	783b      	ldrb	r3, [r7, #0]
1000eadc:	203b      	movs	r0, #59	; 0x3b
1000eade:	2b00      	cmp	r3, #0
1000eae0:	d037      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eae2:	8065      	strh	r5, [r4, #2]
1000eae4:	7126      	strb	r6, [r4, #4]
1000eae6:	2009      	movs	r0, #9
1000eae8:	e033      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eaea:	203b      	movs	r0, #59	; 0x3b
1000eaec:	2e00      	cmp	r6, #0
1000eaee:	d030      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eaf0:	0a2d      	lsrs	r5, r5, #8
1000eaf2:	8015      	strh	r5, [r2, #0]
1000eaf4:	7096      	strb	r6, [r2, #2]
1000eaf6:	382d      	subs	r0, #45	; 0x2d
1000eaf8:	e02b      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eafa:	203b      	movs	r0, #59	; 0x3b
1000eafc:	2e00      	cmp	r6, #0
1000eafe:	d028      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb00:	2300      	movs	r3, #0
1000eb02:	0a2d      	lsrs	r5, r5, #8
1000eb04:	8015      	strh	r5, [r2, #0]
1000eb06:	7096      	strb	r6, [r2, #2]
1000eb08:	8093      	strh	r3, [r2, #4]
1000eb0a:	80d3      	strh	r3, [r2, #6]
1000eb0c:	8113      	strh	r3, [r2, #8]
1000eb0e:	3834      	subs	r0, #52	; 0x34
1000eb10:	e01f      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb12:	203b      	movs	r0, #59	; 0x3b
1000eb14:	2e00      	cmp	r6, #0
1000eb16:	d01c      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb18:	7216      	strb	r6, [r2, #8]
1000eb1a:	e003      	b.n	1000eb24 <gapc_cmp_evt+0x98>
1000eb1c:	203b      	movs	r0, #59	; 0x3b
1000eb1e:	2e00      	cmp	r6, #0
1000eb20:	d017      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb22:	7116      	strb	r6, [r2, #4]
1000eb24:	3812      	subs	r0, #18
1000eb26:	e014      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb28:	203b      	movs	r0, #59	; 0x3b
1000eb2a:	2e00      	cmp	r6, #0
1000eb2c:	d011      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb2e:	7093      	strb	r3, [r2, #2]
1000eb30:	70d6      	strb	r6, [r2, #3]
1000eb32:	382a      	subs	r0, #42	; 0x2a
1000eb34:	e00d      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb36:	203b      	movs	r0, #59	; 0x3b
1000eb38:	2e00      	cmp	r6, #0
1000eb3a:	d00a      	beq.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb3c:	0a2d      	lsrs	r5, r5, #8
1000eb3e:	7016      	strb	r6, [r2, #0]
1000eb40:	8055      	strh	r5, [r2, #2]
1000eb42:	1d10      	adds	r0, r2, #4
1000eb44:	2100      	movs	r1, #0
1000eb46:	2205      	movs	r2, #5
1000eb48:	4b03      	ldr	r3, [pc, #12]	; (1000eb58 <gapc_cmp_evt+0xcc>)
1000eb4a:	4798      	blx	r3
1000eb4c:	2012      	movs	r0, #18
1000eb4e:	e000      	b.n	1000eb52 <gapc_cmp_evt+0xc6>
1000eb50:	2000      	movs	r0, #0
1000eb52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000eb54:	1000ea29 	.word	0x1000ea29
1000eb58:	10011c75 	.word	0x10011c75

1000eb5c <gapc_connection_cfm_handler>:
1000eb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb5e:	b085      	sub	sp, #20
1000eb60:	1c1d      	adds	r5, r3, #0
1000eb62:	ab0a      	add	r3, sp, #40	; 0x28
1000eb64:	781b      	ldrb	r3, [r3, #0]
1000eb66:	9201      	str	r2, [sp, #4]
1000eb68:	9302      	str	r3, [sp, #8]
1000eb6a:	ab0b      	add	r3, sp, #44	; 0x2c
1000eb6c:	781b      	ldrb	r3, [r3, #0]
1000eb6e:	1c07      	adds	r7, r0, #0
1000eb70:	9303      	str	r3, [sp, #12]
1000eb72:	ab0c      	add	r3, sp, #48	; 0x30
1000eb74:	881a      	ldrh	r2, [r3, #0]
1000eb76:	2302      	movs	r3, #2
1000eb78:	1c0e      	adds	r6, r1, #0
1000eb7a:	4c23      	ldr	r4, [pc, #140]	; (1000ec08 <gapc_connection_cfm_handler+0xac>)
1000eb7c:	1c39      	adds	r1, r7, #0
1000eb7e:	7023      	strb	r3, [r4, #0]
1000eb80:	330c      	adds	r3, #12
1000eb82:	7063      	strb	r3, [r4, #1]
1000eb84:	70a3      	strb	r3, [r4, #2]
1000eb86:	4b21      	ldr	r3, [pc, #132]	; (1000ec0c <gapc_connection_cfm_handler+0xb0>)
1000eb88:	70e2      	strb	r2, [r4, #3]
1000eb8a:	881a      	ldrh	r2, [r3, #0]
1000eb8c:	881b      	ldrh	r3, [r3, #0]
1000eb8e:	7122      	strb	r2, [r4, #4]
1000eb90:	0a1b      	lsrs	r3, r3, #8
1000eb92:	4f1f      	ldr	r7, [pc, #124]	; (1000ec10 <gapc_connection_cfm_handler+0xb4>)
1000eb94:	2210      	movs	r2, #16
1000eb96:	481f      	ldr	r0, [pc, #124]	; (1000ec14 <gapc_connection_cfm_handler+0xb8>)
1000eb98:	7163      	strb	r3, [r4, #5]
1000eb9a:	47b8      	blx	r7
1000eb9c:	0a33      	lsrs	r3, r6, #8
1000eb9e:	7626      	strb	r6, [r4, #24]
1000eba0:	7663      	strb	r3, [r4, #25]
1000eba2:	9901      	ldr	r1, [sp, #4]
1000eba4:	0c33      	lsrs	r3, r6, #16
1000eba6:	2210      	movs	r2, #16
1000eba8:	0e36      	lsrs	r6, r6, #24
1000ebaa:	481b      	ldr	r0, [pc, #108]	; (1000ec18 <gapc_connection_cfm_handler+0xbc>)
1000ebac:	76a3      	strb	r3, [r4, #26]
1000ebae:	76e6      	strb	r6, [r4, #27]
1000ebb0:	47b8      	blx	r7
1000ebb2:	1c23      	adds	r3, r4, #0
1000ebb4:	332c      	adds	r3, #44	; 0x2c
1000ebb6:	701d      	strb	r5, [r3, #0]
1000ebb8:	1c23      	adds	r3, r4, #0
1000ebba:	0a2a      	lsrs	r2, r5, #8
1000ebbc:	332d      	adds	r3, #45	; 0x2d
1000ebbe:	701a      	strb	r2, [r3, #0]
1000ebc0:	1c23      	adds	r3, r4, #0
1000ebc2:	0c2a      	lsrs	r2, r5, #16
1000ebc4:	332e      	adds	r3, #46	; 0x2e
1000ebc6:	701a      	strb	r2, [r3, #0]
1000ebc8:	1c23      	adds	r3, r4, #0
1000ebca:	0e2d      	lsrs	r5, r5, #24
1000ebcc:	332f      	adds	r3, #47	; 0x2f
1000ebce:	466a      	mov	r2, sp
1000ebd0:	701d      	strb	r5, [r3, #0]
1000ebd2:	1c23      	adds	r3, r4, #0
1000ebd4:	7a12      	ldrb	r2, [r2, #8]
1000ebd6:	3330      	adds	r3, #48	; 0x30
1000ebd8:	701a      	strb	r2, [r3, #0]
1000ebda:	1c23      	adds	r3, r4, #0
1000ebdc:	2500      	movs	r5, #0
1000ebde:	3331      	adds	r3, #49	; 0x31
1000ebe0:	466a      	mov	r2, sp
1000ebe2:	701d      	strb	r5, [r3, #0]
1000ebe4:	1c23      	adds	r3, r4, #0
1000ebe6:	7b12      	ldrb	r2, [r2, #12]
1000ebe8:	3332      	adds	r3, #50	; 0x32
1000ebea:	701a      	strb	r2, [r3, #0]
1000ebec:	1c23      	adds	r3, r4, #0
1000ebee:	3333      	adds	r3, #51	; 0x33
1000ebf0:	701d      	strb	r5, [r3, #0]
1000ebf2:	232c      	movs	r3, #44	; 0x2c
1000ebf4:	1c20      	adds	r0, r4, #0
1000ebf6:	71a3      	strb	r3, [r4, #6]
1000ebf8:	2134      	movs	r1, #52	; 0x34
1000ebfa:	4b08      	ldr	r3, [pc, #32]	; (1000ec1c <gapc_connection_cfm_handler+0xc0>)
1000ebfc:	71e5      	strb	r5, [r4, #7]
1000ebfe:	4798      	blx	r3
1000ec00:	1c28      	adds	r0, r5, #0
1000ec02:	b005      	add	sp, #20
1000ec04:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ec06:	46c0      	nop			; (mov r8, r8)
1000ec08:	1001714c 	.word	0x1001714c
1000ec0c:	10016ddc 	.word	0x10016ddc
1000ec10:	10011c63 	.word	0x10011c63
1000ec14:	10017154 	.word	0x10017154
1000ec18:	10017168 	.word	0x10017168
1000ec1c:	1000e859 	.word	0x1000e859

1000ec20 <gapc_con_req_ind>:
1000ec20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec22:	7845      	ldrb	r5, [r0, #1]
1000ec24:	7803      	ldrb	r3, [r0, #0]
1000ec26:	4c30      	ldr	r4, [pc, #192]	; (1000ece8 <gapc_con_req_ind+0xc8>)
1000ec28:	022d      	lsls	r5, r5, #8
1000ec2a:	431d      	orrs	r5, r3
1000ec2c:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000ec2e:	78c3      	ldrb	r3, [r0, #3]
1000ec30:	7882      	ldrb	r2, [r0, #2]
1000ec32:	b08b      	sub	sp, #44	; 0x2c
1000ec34:	021b      	lsls	r3, r3, #8
1000ec36:	431a      	orrs	r2, r3
1000ec38:	466b      	mov	r3, sp
1000ec3a:	9205      	str	r2, [sp, #20]
1000ec3c:	8a9b      	ldrh	r3, [r3, #20]
1000ec3e:	2120      	movs	r1, #32
1000ec40:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000ec42:	7943      	ldrb	r3, [r0, #5]
1000ec44:	7902      	ldrb	r2, [r0, #4]
1000ec46:	021b      	lsls	r3, r3, #8
1000ec48:	431a      	orrs	r2, r3
1000ec4a:	466b      	mov	r3, sp
1000ec4c:	9206      	str	r2, [sp, #24]
1000ec4e:	8b1b      	ldrh	r3, [r3, #24]
1000ec50:	1c06      	adds	r6, r0, #0
1000ec52:	8623      	strh	r3, [r4, #48]	; 0x30
1000ec54:	79c3      	ldrb	r3, [r0, #7]
1000ec56:	7982      	ldrb	r2, [r0, #6]
1000ec58:	021b      	lsls	r3, r3, #8
1000ec5a:	431a      	orrs	r2, r3
1000ec5c:	466b      	mov	r3, sp
1000ec5e:	9207      	str	r2, [sp, #28]
1000ec60:	466a      	mov	r2, sp
1000ec62:	8b9b      	ldrh	r3, [r3, #28]
1000ec64:	1852      	adds	r2, r2, r1
1000ec66:	8663      	strh	r3, [r4, #50]	; 0x32
1000ec68:	7a43      	ldrb	r3, [r0, #9]
1000ec6a:	1c01      	adds	r1, r0, #0
1000ec6c:	9308      	str	r3, [sp, #32]
1000ec6e:	1c23      	adds	r3, r4, #0
1000ec70:	7812      	ldrb	r2, [r2, #0]
1000ec72:	3377      	adds	r3, #119	; 0x77
1000ec74:	3478      	adds	r4, #120	; 0x78
1000ec76:	701a      	strb	r2, [r3, #0]
1000ec78:	310a      	adds	r1, #10
1000ec7a:	2206      	movs	r2, #6
1000ec7c:	4b1b      	ldr	r3, [pc, #108]	; (1000ecec <gapc_con_req_ind+0xcc>)
1000ec7e:	1c20      	adds	r0, r4, #0
1000ec80:	4798      	blx	r3
1000ec82:	7c33      	ldrb	r3, [r6, #16]
1000ec84:	9309      	str	r3, [sp, #36]	; 0x24
1000ec86:	4b1a      	ldr	r3, [pc, #104]	; (1000ecf0 <gapc_con_req_ind+0xd0>)
1000ec88:	4798      	blx	r3
1000ec8a:	4e1a      	ldr	r6, [pc, #104]	; (1000ecf4 <gapc_con_req_ind+0xd4>)
1000ec8c:	1e07      	subs	r7, r0, #0
1000ec8e:	2f07      	cmp	r7, #7
1000ec90:	d81b      	bhi.n	1000ecca <gapc_con_req_ind+0xaa>
1000ec92:	2312      	movs	r3, #18
1000ec94:	4343      	muls	r3, r0
1000ec96:	18f0      	adds	r0, r6, r3
1000ec98:	8145      	strh	r5, [r0, #10]
1000ec9a:	4669      	mov	r1, sp
1000ec9c:	2524      	movs	r5, #36	; 0x24
1000ec9e:	1949      	adds	r1, r1, r5
1000eca0:	7809      	ldrb	r1, [r1, #0]
1000eca2:	2206      	movs	r2, #6
1000eca4:	54f1      	strb	r1, [r6, r3]
1000eca6:	2120      	movs	r1, #32
1000eca8:	466b      	mov	r3, sp
1000ecaa:	185b      	adds	r3, r3, r1
1000ecac:	781b      	ldrb	r3, [r3, #0]
1000ecae:	1c21      	adds	r1, r4, #0
1000ecb0:	7043      	strb	r3, [r0, #1]
1000ecb2:	466b      	mov	r3, sp
1000ecb4:	8a9b      	ldrh	r3, [r3, #20]
1000ecb6:	3002      	adds	r0, #2
1000ecb8:	8143      	strh	r3, [r0, #10]
1000ecba:	466b      	mov	r3, sp
1000ecbc:	8b1b      	ldrh	r3, [r3, #24]
1000ecbe:	8183      	strh	r3, [r0, #12]
1000ecc0:	466b      	mov	r3, sp
1000ecc2:	8b9b      	ldrh	r3, [r3, #28]
1000ecc4:	81c3      	strh	r3, [r0, #14]
1000ecc6:	4b09      	ldr	r3, [pc, #36]	; (1000ecec <gapc_con_req_ind+0xcc>)
1000ecc8:	4798      	blx	r3
1000ecca:	2112      	movs	r1, #18
1000eccc:	2300      	movs	r3, #0
1000ecce:	434f      	muls	r7, r1
1000ecd0:	9300      	str	r3, [sp, #0]
1000ecd2:	9301      	str	r3, [sp, #4]
1000ecd4:	19f6      	adds	r6, r6, r7
1000ecd6:	8971      	ldrh	r1, [r6, #10]
1000ecd8:	4a07      	ldr	r2, [pc, #28]	; (1000ecf8 <gapc_con_req_ind+0xd8>)
1000ecda:	9102      	str	r1, [sp, #8]
1000ecdc:	1c10      	adds	r0, r2, #0
1000ecde:	1c19      	adds	r1, r3, #0
1000ece0:	4c06      	ldr	r4, [pc, #24]	; (1000ecfc <gapc_con_req_ind+0xdc>)
1000ece2:	47a0      	blx	r4
1000ece4:	b00b      	add	sp, #44	; 0x2c
1000ece6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ece8:	10016e6e 	.word	0x10016e6e
1000ecec:	10011c63 	.word	0x10011c63
1000ecf0:	1000ea65 	.word	0x1000ea65
1000ecf4:	10016dde 	.word	0x10016dde
1000ecf8:	10015c8c 	.word	0x10015c8c
1000ecfc:	1000eb5d 	.word	0x1000eb5d

1000ed00 <gapc_disconnect_cmd_handler>:
1000ed00:	2204      	movs	r2, #4
1000ed02:	b510      	push	{r4, lr}
1000ed04:	4b0c      	ldr	r3, [pc, #48]	; (1000ed38 <gapc_disconnect_cmd_handler+0x38>)
1000ed06:	2400      	movs	r4, #0
1000ed08:	701a      	strb	r2, [r3, #0]
1000ed0a:	320a      	adds	r2, #10
1000ed0c:	705a      	strb	r2, [r3, #1]
1000ed0e:	709a      	strb	r2, [r3, #2]
1000ed10:	4a0a      	ldr	r2, [pc, #40]	; (1000ed3c <gapc_disconnect_cmd_handler+0x3c>)
1000ed12:	70d9      	strb	r1, [r3, #3]
1000ed14:	8811      	ldrh	r1, [r2, #0]
1000ed16:	8812      	ldrh	r2, [r2, #0]
1000ed18:	7119      	strb	r1, [r3, #4]
1000ed1a:	0a12      	lsrs	r2, r2, #8
1000ed1c:	715a      	strb	r2, [r3, #5]
1000ed1e:	2201      	movs	r2, #1
1000ed20:	721a      	strb	r2, [r3, #8]
1000ed22:	1892      	adds	r2, r2, r2
1000ed24:	7258      	strb	r0, [r3, #9]
1000ed26:	719a      	strb	r2, [r3, #6]
1000ed28:	71dc      	strb	r4, [r3, #7]
1000ed2a:	1c18      	adds	r0, r3, #0
1000ed2c:	210a      	movs	r1, #10
1000ed2e:	4b04      	ldr	r3, [pc, #16]	; (1000ed40 <gapc_disconnect_cmd_handler+0x40>)
1000ed30:	4798      	blx	r3
1000ed32:	1c20      	adds	r0, r4, #0
1000ed34:	bd10      	pop	{r4, pc}
1000ed36:	46c0      	nop			; (mov r8, r8)
1000ed38:	1001714c 	.word	0x1001714c
1000ed3c:	10016ddc 	.word	0x10016ddc
1000ed40:	1000e859 	.word	0x1000e859

1000ed44 <gapc_disconnect_ind>:
1000ed44:	1c02      	adds	r2, r0, #0
1000ed46:	b508      	push	{r3, lr}
1000ed48:	7843      	ldrb	r3, [r0, #1]
1000ed4a:	7800      	ldrb	r0, [r0, #0]
1000ed4c:	021b      	lsls	r3, r3, #8
1000ed4e:	4318      	orrs	r0, r3
1000ed50:	8008      	strh	r0, [r1, #0]
1000ed52:	7893      	ldrb	r3, [r2, #2]
1000ed54:	708b      	strb	r3, [r1, #2]
1000ed56:	2100      	movs	r1, #0
1000ed58:	4b05      	ldr	r3, [pc, #20]	; (1000ed70 <gapc_disconnect_ind+0x2c>)
1000ed5a:	4798      	blx	r3
1000ed5c:	2807      	cmp	r0, #7
1000ed5e:	d806      	bhi.n	1000ed6e <gapc_disconnect_ind+0x2a>
1000ed60:	2312      	movs	r3, #18
1000ed62:	4358      	muls	r0, r3
1000ed64:	4b03      	ldr	r3, [pc, #12]	; (1000ed74 <gapc_disconnect_ind+0x30>)
1000ed66:	1818      	adds	r0, r3, r0
1000ed68:	2301      	movs	r3, #1
1000ed6a:	425b      	negs	r3, r3
1000ed6c:	8143      	strh	r3, [r0, #10]
1000ed6e:	bd08      	pop	{r3, pc}
1000ed70:	1000ea29 	.word	0x1000ea29
1000ed74:	10016dde 	.word	0x10016dde

1000ed78 <gapc_bond_cmd_handler>:
1000ed78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ed7a:	9300      	str	r3, [sp, #0]
1000ed7c:	2312      	movs	r3, #18
1000ed7e:	1c04      	adds	r4, r0, #0
1000ed80:	a808      	add	r0, sp, #32
1000ed82:	7807      	ldrb	r7, [r0, #0]
1000ed84:	a809      	add	r0, sp, #36	; 0x24
1000ed86:	7806      	ldrb	r6, [r0, #0]
1000ed88:	a80a      	add	r0, sp, #40	; 0x28
1000ed8a:	7805      	ldrb	r5, [r0, #0]
1000ed8c:	a80b      	add	r0, sp, #44	; 0x2c
1000ed8e:	7800      	ldrb	r0, [r0, #0]
1000ed90:	9001      	str	r0, [sp, #4]
1000ed92:	4810      	ldr	r0, [pc, #64]	; (1000edd4 <gapc_bond_cmd_handler+0x5c>)
1000ed94:	7003      	strb	r3, [r0, #0]
1000ed96:	230e      	movs	r3, #14
1000ed98:	70c4      	strb	r4, [r0, #3]
1000ed9a:	4c0f      	ldr	r4, [pc, #60]	; (1000edd8 <gapc_bond_cmd_handler+0x60>)
1000ed9c:	7043      	strb	r3, [r0, #1]
1000ed9e:	7083      	strb	r3, [r0, #2]
1000eda0:	8823      	ldrh	r3, [r4, #0]
1000eda2:	8824      	ldrh	r4, [r4, #0]
1000eda4:	7103      	strb	r3, [r0, #4]
1000eda6:	466b      	mov	r3, sp
1000eda8:	781b      	ldrb	r3, [r3, #0]
1000edaa:	0a24      	lsrs	r4, r4, #8
1000edac:	72c3      	strb	r3, [r0, #11]
1000edae:	466b      	mov	r3, sp
1000edb0:	791b      	ldrb	r3, [r3, #4]
1000edb2:	7144      	strb	r4, [r0, #5]
1000edb4:	73c3      	strb	r3, [r0, #15]
1000edb6:	2308      	movs	r3, #8
1000edb8:	7183      	strb	r3, [r0, #6]
1000edba:	2300      	movs	r3, #0
1000edbc:	240a      	movs	r4, #10
1000edbe:	7241      	strb	r1, [r0, #9]
1000edc0:	71c3      	strb	r3, [r0, #7]
1000edc2:	2110      	movs	r1, #16
1000edc4:	4b05      	ldr	r3, [pc, #20]	; (1000eddc <gapc_bond_cmd_handler+0x64>)
1000edc6:	7307      	strb	r7, [r0, #12]
1000edc8:	7346      	strb	r6, [r0, #13]
1000edca:	7385      	strb	r5, [r0, #14]
1000edcc:	7204      	strb	r4, [r0, #8]
1000edce:	7282      	strb	r2, [r0, #10]
1000edd0:	4798      	blx	r3
1000edd2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000edd4:	1001714c 	.word	0x1001714c
1000edd8:	10016ddc 	.word	0x10016ddc
1000eddc:	1000e859 	.word	0x1000e859

1000ede0 <gapc_bond_ind>:
1000ede0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ede2:	780e      	ldrb	r6, [r1, #0]
1000ede4:	1c03      	adds	r3, r0, #0
1000ede6:	1eb0      	subs	r0, r6, #2
1000ede8:	2805      	cmp	r0, #5
1000edea:	d85d      	bhi.n	1000eea8 <gapc_bond_ind+0xc8>
1000edec:	1c15      	adds	r5, r2, #0
1000edee:	1c0c      	adds	r4, r1, #0
1000edf0:	f001 faea 	bl	100103c8 <__gnu_thumb1_case_uqi>
1000edf4:	2f5a030d 	.word	0x2f5a030d
1000edf8:	4740      	.short	0x4740
1000edfa:	2009      	movs	r0, #9
1000edfc:	2a00      	cmp	r2, #0
1000edfe:	d054      	beq.n	1000eeaa <gapc_bond_ind+0xca>
1000ee00:	0a1b      	lsrs	r3, r3, #8
1000ee02:	8053      	strh	r3, [r2, #2]
1000ee04:	788b      	ldrb	r3, [r1, #2]
1000ee06:	4829      	ldr	r0, [pc, #164]	; (1000eeac <gapc_bond_ind+0xcc>)
1000ee08:	7113      	strb	r3, [r2, #4]
1000ee0a:	2100      	movs	r1, #0
1000ee0c:	e01c      	b.n	1000ee48 <gapc_bond_ind+0x68>
1000ee0e:	2009      	movs	r0, #9
1000ee10:	2a00      	cmp	r2, #0
1000ee12:	d04a      	beq.n	1000eeaa <gapc_bond_ind+0xca>
1000ee14:	4c25      	ldr	r4, [pc, #148]	; (1000eeac <gapc_bond_ind+0xcc>)
1000ee16:	0a1b      	lsrs	r3, r3, #8
1000ee18:	8053      	strh	r3, [r2, #2]
1000ee1a:	788b      	ldrb	r3, [r1, #2]
1000ee1c:	2700      	movs	r7, #0
1000ee1e:	1c10      	adds	r0, r2, #0
1000ee20:	1c21      	adds	r1, r4, #0
1000ee22:	7013      	strb	r3, [r2, #0]
1000ee24:	4e22      	ldr	r6, [pc, #136]	; (1000eeb0 <gapc_bond_ind+0xd0>)
1000ee26:	7117      	strb	r7, [r2, #4]
1000ee28:	312e      	adds	r1, #46	; 0x2e
1000ee2a:	2217      	movs	r2, #23
1000ee2c:	3032      	adds	r0, #50	; 0x32
1000ee2e:	47b0      	blx	r6
1000ee30:	1c28      	adds	r0, r5, #0
1000ee32:	1c21      	adds	r1, r4, #0
1000ee34:	2210      	movs	r2, #16
1000ee36:	311e      	adds	r1, #30
1000ee38:	3022      	adds	r0, #34	; 0x22
1000ee3a:	47b0      	blx	r6
1000ee3c:	1ca1      	adds	r1, r4, #2
1000ee3e:	1da8      	adds	r0, r5, #6
1000ee40:	221c      	movs	r2, #28
1000ee42:	47b0      	blx	r6
1000ee44:	1c20      	adds	r0, r4, #0
1000ee46:	1c39      	adds	r1, r7, #0
1000ee48:	2246      	movs	r2, #70	; 0x46
1000ee4a:	4b1a      	ldr	r3, [pc, #104]	; (1000eeb4 <gapc_bond_ind+0xd4>)
1000ee4c:	4798      	blx	r3
1000ee4e:	2009      	movs	r0, #9
1000ee50:	e02b      	b.n	1000eeaa <gapc_bond_ind+0xca>
1000ee52:	4d16      	ldr	r5, [pc, #88]	; (1000eeac <gapc_bond_ind+0xcc>)
1000ee54:	3102      	adds	r1, #2
1000ee56:	1c28      	adds	r0, r5, #0
1000ee58:	2210      	movs	r2, #16
1000ee5a:	4e15      	ldr	r6, [pc, #84]	; (1000eeb0 <gapc_bond_ind+0xd0>)
1000ee5c:	302e      	adds	r0, #46	; 0x2e
1000ee5e:	47b0      	blx	r6
1000ee60:	1c28      	adds	r0, r5, #0
1000ee62:	1c21      	adds	r1, r4, #0
1000ee64:	303f      	adds	r0, #63	; 0x3f
1000ee66:	3112      	adds	r1, #18
1000ee68:	2206      	movs	r2, #6
1000ee6a:	47b0      	blx	r6
1000ee6c:	7e23      	ldrb	r3, [r4, #24]
1000ee6e:	353e      	adds	r5, #62	; 0x3e
1000ee70:	702b      	strb	r3, [r5, #0]
1000ee72:	e019      	b.n	1000eea8 <gapc_bond_ind+0xc8>
1000ee74:	480d      	ldr	r0, [pc, #52]	; (1000eeac <gapc_bond_ind+0xcc>)
1000ee76:	3102      	adds	r1, #2
1000ee78:	2210      	movs	r2, #16
1000ee7a:	4b0d      	ldr	r3, [pc, #52]	; (1000eeb0 <gapc_bond_ind+0xd0>)
1000ee7c:	301e      	adds	r0, #30
1000ee7e:	4798      	blx	r3
1000ee80:	e012      	b.n	1000eea8 <gapc_bond_ind+0xc8>
1000ee82:	4d0a      	ldr	r5, [pc, #40]	; (1000eeac <gapc_bond_ind+0xcc>)
1000ee84:	3102      	adds	r1, #2
1000ee86:	2210      	movs	r2, #16
1000ee88:	4e09      	ldr	r6, [pc, #36]	; (1000eeb0 <gapc_bond_ind+0xd0>)
1000ee8a:	1ca8      	adds	r0, r5, #2
1000ee8c:	47b0      	blx	r6
1000ee8e:	1c28      	adds	r0, r5, #0
1000ee90:	1c21      	adds	r1, r4, #0
1000ee92:	7ce3      	ldrb	r3, [r4, #19]
1000ee94:	7ca2      	ldrb	r2, [r4, #18]
1000ee96:	021b      	lsls	r3, r3, #8
1000ee98:	4313      	orrs	r3, r2
1000ee9a:	3014      	adds	r0, #20
1000ee9c:	3114      	adds	r1, #20
1000ee9e:	2208      	movs	r2, #8
1000eea0:	826b      	strh	r3, [r5, #18]
1000eea2:	47b0      	blx	r6
1000eea4:	7f23      	ldrb	r3, [r4, #28]
1000eea6:	772b      	strb	r3, [r5, #28]
1000eea8:	2000      	movs	r0, #0
1000eeaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eeac:	10015cbc 	.word	0x10015cbc
1000eeb0:	10011c63 	.word	0x10011c63
1000eeb4:	10011c75 	.word	0x10011c75

1000eeb8 <gapc_bond_req_ind>:
1000eeb8:	b570      	push	{r4, r5, r6, lr}
1000eeba:	780c      	ldrb	r4, [r1, #0]
1000eebc:	1c03      	adds	r3, r0, #0
1000eebe:	7849      	ldrb	r1, [r1, #1]
1000eec0:	2c07      	cmp	r4, #7
1000eec2:	d85c      	bhi.n	1000ef7e <gapc_bond_req_ind+0xc6>
1000eec4:	1c20      	adds	r0, r4, #0
1000eec6:	f001 fa7f 	bl	100103c8 <__gnu_thumb1_case_uqi>
1000eeca:	5a04      	.short	0x5a04
1000eecc:	5a0b5a5a 	.word	0x5a0b5a5a
1000eed0:	1f1f      	.short	0x1f1f
1000eed2:	200a      	movs	r0, #10
1000eed4:	2a00      	cmp	r2, #0
1000eed6:	d053      	beq.n	1000ef80 <gapc_bond_req_ind+0xc8>
1000eed8:	0a1b      	lsrs	r3, r3, #8
1000eeda:	8013      	strh	r3, [r2, #0]
1000eedc:	7091      	strb	r1, [r2, #2]
1000eede:	e04f      	b.n	1000ef80 <gapc_bond_req_ind+0xc8>
1000eee0:	2a00      	cmp	r2, #0
1000eee2:	d00b      	beq.n	1000eefc <gapc_bond_req_ind+0x44>
1000eee4:	0a1b      	lsrs	r3, r3, #8
1000eee6:	8013      	strh	r3, [r2, #0]
1000eee8:	2900      	cmp	r1, #0
1000eeea:	d102      	bne.n	1000eef2 <gapc_bond_req_ind+0x3a>
1000eeec:	2301      	movs	r3, #1
1000eeee:	7093      	strb	r3, [r2, #2]
1000eef0:	e004      	b.n	1000eefc <gapc_bond_req_ind+0x44>
1000eef2:	2300      	movs	r3, #0
1000eef4:	7093      	strb	r3, [r2, #2]
1000eef6:	2902      	cmp	r1, #2
1000eef8:	d102      	bne.n	1000ef00 <gapc_bond_req_ind+0x48>
1000eefa:	70d3      	strb	r3, [r2, #3]
1000eefc:	200c      	movs	r0, #12
1000eefe:	e03f      	b.n	1000ef80 <gapc_bond_req_ind+0xc8>
1000ef00:	2901      	cmp	r1, #1
1000ef02:	d1fb      	bne.n	1000eefc <gapc_bond_req_ind+0x44>
1000ef04:	70d1      	strb	r1, [r2, #3]
1000ef06:	e7f9      	b.n	1000eefc <gapc_bond_req_ind+0x44>
1000ef08:	2214      	movs	r2, #20
1000ef0a:	481e      	ldr	r0, [pc, #120]	; (1000ef84 <gapc_bond_req_ind+0xcc>)
1000ef0c:	0a1b      	lsrs	r3, r3, #8
1000ef0e:	70c3      	strb	r3, [r0, #3]
1000ef10:	4b1d      	ldr	r3, [pc, #116]	; (1000ef88 <gapc_bond_req_ind+0xd0>)
1000ef12:	7002      	strb	r2, [r0, #0]
1000ef14:	3a06      	subs	r2, #6
1000ef16:	7042      	strb	r2, [r0, #1]
1000ef18:	7082      	strb	r2, [r0, #2]
1000ef1a:	881a      	ldrh	r2, [r3, #0]
1000ef1c:	881b      	ldrh	r3, [r3, #0]
1000ef1e:	4e1b      	ldr	r6, [pc, #108]	; (1000ef8c <gapc_bond_req_ind+0xd4>)
1000ef20:	0a1b      	lsrs	r3, r3, #8
1000ef22:	7143      	strb	r3, [r0, #5]
1000ef24:	2301      	movs	r3, #1
1000ef26:	7102      	strb	r2, [r0, #4]
1000ef28:	7204      	strb	r4, [r0, #8]
1000ef2a:	7243      	strb	r3, [r0, #9]
1000ef2c:	1c05      	adds	r5, r0, #0
1000ef2e:	1c31      	adds	r1, r6, #0
1000ef30:	300a      	adds	r0, #10
1000ef32:	2c07      	cmp	r4, #7
1000ef34:	d116      	bne.n	1000ef64 <gapc_bond_req_ind+0xac>
1000ef36:	317e      	adds	r1, #126	; 0x7e
1000ef38:	2210      	movs	r2, #16
1000ef3a:	4c15      	ldr	r4, [pc, #84]	; (1000ef90 <gapc_bond_req_ind+0xd8>)
1000ef3c:	47a0      	blx	r4
1000ef3e:	1c33      	adds	r3, r6, #0
1000ef40:	1c31      	adds	r1, r6, #0
1000ef42:	1c28      	adds	r0, r5, #0
1000ef44:	338e      	adds	r3, #142	; 0x8e
1000ef46:	881b      	ldrh	r3, [r3, #0]
1000ef48:	3190      	adds	r1, #144	; 0x90
1000ef4a:	76ab      	strb	r3, [r5, #26]
1000ef4c:	2208      	movs	r2, #8
1000ef4e:	0a1b      	lsrs	r3, r3, #8
1000ef50:	301c      	adds	r0, #28
1000ef52:	76eb      	strb	r3, [r5, #27]
1000ef54:	47a0      	blx	r4
1000ef56:	1c31      	adds	r1, r6, #0
1000ef58:	3198      	adds	r1, #152	; 0x98
1000ef5a:	780a      	ldrb	r2, [r1, #0]
1000ef5c:	1d6b      	adds	r3, r5, #5
1000ef5e:	77da      	strb	r2, [r3, #31]
1000ef60:	2125      	movs	r1, #37	; 0x25
1000ef62:	e004      	b.n	1000ef6e <gapc_bond_req_ind+0xb6>
1000ef64:	319a      	adds	r1, #154	; 0x9a
1000ef66:	2210      	movs	r2, #16
1000ef68:	4b09      	ldr	r3, [pc, #36]	; (1000ef90 <gapc_bond_req_ind+0xd8>)
1000ef6a:	4798      	blx	r3
1000ef6c:	211a      	movs	r1, #26
1000ef6e:	1c0b      	adds	r3, r1, #0
1000ef70:	2400      	movs	r4, #0
1000ef72:	3b08      	subs	r3, #8
1000ef74:	71ab      	strb	r3, [r5, #6]
1000ef76:	1c28      	adds	r0, r5, #0
1000ef78:	4b06      	ldr	r3, [pc, #24]	; (1000ef94 <gapc_bond_req_ind+0xdc>)
1000ef7a:	71ec      	strb	r4, [r5, #7]
1000ef7c:	4798      	blx	r3
1000ef7e:	2000      	movs	r0, #0
1000ef80:	bd70      	pop	{r4, r5, r6, pc}
1000ef82:	46c0      	nop			; (mov r8, r8)
1000ef84:	1001714c 	.word	0x1001714c
1000ef88:	10016ddc 	.word	0x10016ddc
1000ef8c:	10016e6e 	.word	0x10016e6e
1000ef90:	10011c63 	.word	0x10011c63
1000ef94:	1000e859 	.word	0x1000e859

1000ef98 <gapc_bond_cfm_handler_pair_resp>:
1000ef98:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ef9a:	b085      	sub	sp, #20
1000ef9c:	1c07      	adds	r7, r0, #0
1000ef9e:	a80a      	add	r0, sp, #40	; 0x28
1000efa0:	7806      	ldrb	r6, [r0, #0]
1000efa2:	a80b      	add	r0, sp, #44	; 0x2c
1000efa4:	7805      	ldrb	r5, [r0, #0]
1000efa6:	a80c      	add	r0, sp, #48	; 0x30
1000efa8:	7800      	ldrb	r0, [r0, #0]
1000efaa:	2414      	movs	r4, #20
1000efac:	9002      	str	r0, [sp, #8]
1000efae:	a80d      	add	r0, sp, #52	; 0x34
1000efb0:	7800      	ldrb	r0, [r0, #0]
1000efb2:	9301      	str	r3, [sp, #4]
1000efb4:	9003      	str	r0, [sp, #12]
1000efb6:	a80e      	add	r0, sp, #56	; 0x38
1000efb8:	8800      	ldrh	r0, [r0, #0]
1000efba:	4684      	mov	ip, r0
1000efbc:	4812      	ldr	r0, [pc, #72]	; (1000f008 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000efbe:	7004      	strb	r4, [r0, #0]
1000efc0:	3c06      	subs	r4, #6
1000efc2:	7044      	strb	r4, [r0, #1]
1000efc4:	7084      	strb	r4, [r0, #2]
1000efc6:	4664      	mov	r4, ip
1000efc8:	70c4      	strb	r4, [r0, #3]
1000efca:	4c10      	ldr	r4, [pc, #64]	; (1000f00c <gapc_bond_cfm_handler_pair_resp+0x74>)
1000efcc:	7247      	strb	r7, [r0, #9]
1000efce:	8823      	ldrh	r3, [r4, #0]
1000efd0:	8824      	ldrh	r4, [r4, #0]
1000efd2:	7103      	strb	r3, [r0, #4]
1000efd4:	466b      	mov	r3, sp
1000efd6:	791b      	ldrb	r3, [r3, #4]
1000efd8:	0a24      	lsrs	r4, r4, #8
1000efda:	7303      	strb	r3, [r0, #12]
1000efdc:	466b      	mov	r3, sp
1000efde:	7a1b      	ldrb	r3, [r3, #8]
1000efe0:	7144      	strb	r4, [r0, #5]
1000efe2:	73c3      	strb	r3, [r0, #15]
1000efe4:	466b      	mov	r3, sp
1000efe6:	7b1b      	ldrb	r3, [r3, #12]
1000efe8:	2401      	movs	r4, #1
1000efea:	7403      	strb	r3, [r0, #16]
1000efec:	2309      	movs	r3, #9
1000efee:	7183      	strb	r3, [r0, #6]
1000eff0:	2300      	movs	r3, #0
1000eff2:	7204      	strb	r4, [r0, #8]
1000eff4:	7281      	strb	r1, [r0, #10]
1000eff6:	72c2      	strb	r2, [r0, #11]
1000eff8:	7346      	strb	r6, [r0, #13]
1000effa:	7385      	strb	r5, [r0, #14]
1000effc:	71c3      	strb	r3, [r0, #7]
1000effe:	2111      	movs	r1, #17
1000f000:	4b03      	ldr	r3, [pc, #12]	; (1000f010 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000f002:	4798      	blx	r3
1000f004:	b005      	add	sp, #20
1000f006:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f008:	1001714c 	.word	0x1001714c
1000f00c:	10016ddc 	.word	0x10016ddc
1000f010:	1000e859 	.word	0x1000e859

1000f014 <gapc_bond_cfm_handler_key_exch>:
1000f014:	b538      	push	{r3, r4, r5, lr}
1000f016:	2514      	movs	r5, #20
1000f018:	4c0d      	ldr	r4, [pc, #52]	; (1000f050 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000f01a:	70e3      	strb	r3, [r4, #3]
1000f01c:	4b0d      	ldr	r3, [pc, #52]	; (1000f054 <gapc_bond_cfm_handler_key_exch+0x40>)
1000f01e:	7025      	strb	r5, [r4, #0]
1000f020:	3d06      	subs	r5, #6
1000f022:	7065      	strb	r5, [r4, #1]
1000f024:	70a5      	strb	r5, [r4, #2]
1000f026:	881d      	ldrh	r5, [r3, #0]
1000f028:	881b      	ldrh	r3, [r3, #0]
1000f02a:	7220      	strb	r0, [r4, #8]
1000f02c:	0a1b      	lsrs	r3, r3, #8
1000f02e:	7163      	strb	r3, [r4, #5]
1000f030:	7261      	strb	r1, [r4, #9]
1000f032:	4b09      	ldr	r3, [pc, #36]	; (1000f058 <gapc_bond_cfm_handler_key_exch+0x44>)
1000f034:	1c11      	adds	r1, r2, #0
1000f036:	4809      	ldr	r0, [pc, #36]	; (1000f05c <gapc_bond_cfm_handler_key_exch+0x48>)
1000f038:	2210      	movs	r2, #16
1000f03a:	7125      	strb	r5, [r4, #4]
1000f03c:	4798      	blx	r3
1000f03e:	2312      	movs	r3, #18
1000f040:	71a3      	strb	r3, [r4, #6]
1000f042:	2300      	movs	r3, #0
1000f044:	1c20      	adds	r0, r4, #0
1000f046:	71e3      	strb	r3, [r4, #7]
1000f048:	211a      	movs	r1, #26
1000f04a:	4b05      	ldr	r3, [pc, #20]	; (1000f060 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000f04c:	4798      	blx	r3
1000f04e:	bd38      	pop	{r3, r4, r5, pc}
1000f050:	1001714c 	.word	0x1001714c
1000f054:	10016ddc 	.word	0x10016ddc
1000f058:	10011c63 	.word	0x10011c63
1000f05c:	10017156 	.word	0x10017156
1000f060:	1000e859 	.word	0x1000e859

1000f064 <gapc_security_cmd_handler>:
1000f064:	221a      	movs	r2, #26
1000f066:	b508      	push	{r3, lr}
1000f068:	4b0b      	ldr	r3, [pc, #44]	; (1000f098 <gapc_security_cmd_handler+0x34>)
1000f06a:	701a      	strb	r2, [r3, #0]
1000f06c:	3a0c      	subs	r2, #12
1000f06e:	705a      	strb	r2, [r3, #1]
1000f070:	709a      	strb	r2, [r3, #2]
1000f072:	4a0a      	ldr	r2, [pc, #40]	; (1000f09c <gapc_security_cmd_handler+0x38>)
1000f074:	70d8      	strb	r0, [r3, #3]
1000f076:	8810      	ldrh	r0, [r2, #0]
1000f078:	8812      	ldrh	r2, [r2, #0]
1000f07a:	7118      	strb	r0, [r3, #4]
1000f07c:	0a12      	lsrs	r2, r2, #8
1000f07e:	715a      	strb	r2, [r3, #5]
1000f080:	220c      	movs	r2, #12
1000f082:	721a      	strb	r2, [r3, #8]
1000f084:	3a0a      	subs	r2, #10
1000f086:	719a      	strb	r2, [r3, #6]
1000f088:	2200      	movs	r2, #0
1000f08a:	7259      	strb	r1, [r3, #9]
1000f08c:	71da      	strb	r2, [r3, #7]
1000f08e:	1c18      	adds	r0, r3, #0
1000f090:	210a      	movs	r1, #10
1000f092:	4b03      	ldr	r3, [pc, #12]	; (1000f0a0 <gapc_security_cmd_handler+0x3c>)
1000f094:	4798      	blx	r3
1000f096:	bd08      	pop	{r3, pc}
1000f098:	1001714c 	.word	0x1001714c
1000f09c:	10016ddc 	.word	0x10016ddc
1000f0a0:	1000e859 	.word	0x1000e859

1000f0a4 <gapc_encrypt_cmd_handler>:
1000f0a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f0a6:	2500      	movs	r5, #0
1000f0a8:	b089      	sub	sp, #36	; 0x24
1000f0aa:	9306      	str	r3, [sp, #24]
1000f0ac:	ab0e      	add	r3, sp, #56	; 0x38
1000f0ae:	781b      	ldrb	r3, [r3, #0]
1000f0b0:	1c17      	adds	r7, r2, #0
1000f0b2:	9307      	str	r3, [sp, #28]
1000f0b4:	ab0f      	add	r3, sp, #60	; 0x3c
1000f0b6:	781b      	ldrb	r3, [r3, #0]
1000f0b8:	4a19      	ldr	r2, [pc, #100]	; (1000f120 <gapc_encrypt_cmd_handler+0x7c>)
1000f0ba:	1c06      	adds	r6, r0, #0
1000f0bc:	9105      	str	r1, [sp, #20]
1000f0be:	9300      	str	r3, [sp, #0]
1000f0c0:	9002      	str	r0, [sp, #8]
1000f0c2:	1c29      	adds	r1, r5, #0
1000f0c4:	1c2b      	adds	r3, r5, #0
1000f0c6:	9501      	str	r5, [sp, #4]
1000f0c8:	1c10      	adds	r0, r2, #0
1000f0ca:	4c16      	ldr	r4, [pc, #88]	; (1000f124 <gapc_encrypt_cmd_handler+0x80>)
1000f0cc:	47a0      	blx	r4
1000f0ce:	2316      	movs	r3, #22
1000f0d0:	4c15      	ldr	r4, [pc, #84]	; (1000f128 <gapc_encrypt_cmd_handler+0x84>)
1000f0d2:	9905      	ldr	r1, [sp, #20]
1000f0d4:	7023      	strb	r3, [r4, #0]
1000f0d6:	3b08      	subs	r3, #8
1000f0d8:	7063      	strb	r3, [r4, #1]
1000f0da:	70a3      	strb	r3, [r4, #2]
1000f0dc:	4b13      	ldr	r3, [pc, #76]	; (1000f12c <gapc_encrypt_cmd_handler+0x88>)
1000f0de:	70e6      	strb	r6, [r4, #3]
1000f0e0:	881a      	ldrh	r2, [r3, #0]
1000f0e2:	881b      	ldrh	r3, [r3, #0]
1000f0e4:	7122      	strb	r2, [r4, #4]
1000f0e6:	0a1b      	lsrs	r3, r3, #8
1000f0e8:	7163      	strb	r3, [r4, #5]
1000f0ea:	230b      	movs	r3, #11
1000f0ec:	4e10      	ldr	r6, [pc, #64]	; (1000f130 <gapc_encrypt_cmd_handler+0x8c>)
1000f0ee:	2210      	movs	r2, #16
1000f0f0:	4810      	ldr	r0, [pc, #64]	; (1000f134 <gapc_encrypt_cmd_handler+0x90>)
1000f0f2:	7223      	strb	r3, [r4, #8]
1000f0f4:	7265      	strb	r5, [r4, #9]
1000f0f6:	47b0      	blx	r6
1000f0f8:	0a3b      	lsrs	r3, r7, #8
1000f0fa:	9906      	ldr	r1, [sp, #24]
1000f0fc:	2208      	movs	r2, #8
1000f0fe:	480e      	ldr	r0, [pc, #56]	; (1000f138 <gapc_encrypt_cmd_handler+0x94>)
1000f100:	76e3      	strb	r3, [r4, #27]
1000f102:	76a7      	strb	r7, [r4, #26]
1000f104:	47b0      	blx	r6
1000f106:	466a      	mov	r2, sp
1000f108:	7f12      	ldrb	r2, [r2, #28]
1000f10a:	1d63      	adds	r3, r4, #5
1000f10c:	77da      	strb	r2, [r3, #31]
1000f10e:	231d      	movs	r3, #29
1000f110:	1c20      	adds	r0, r4, #0
1000f112:	71a3      	strb	r3, [r4, #6]
1000f114:	2125      	movs	r1, #37	; 0x25
1000f116:	4b09      	ldr	r3, [pc, #36]	; (1000f13c <gapc_encrypt_cmd_handler+0x98>)
1000f118:	71e5      	strb	r5, [r4, #7]
1000f11a:	4798      	blx	r3
1000f11c:	b009      	add	sp, #36	; 0x24
1000f11e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f120:	10015c9c 	.word	0x10015c9c
1000f124:	1000eb5d 	.word	0x1000eb5d
1000f128:	1001714c 	.word	0x1001714c
1000f12c:	10016ddc 	.word	0x10016ddc
1000f130:	10011c63 	.word	0x10011c63
1000f134:	10017156 	.word	0x10017156
1000f138:	10017168 	.word	0x10017168
1000f13c:	1000e859 	.word	0x1000e859

1000f140 <gapc_encrypt_req_ind>:
1000f140:	b508      	push	{r3, lr}
1000f142:	0a00      	lsrs	r0, r0, #8
1000f144:	8010      	strh	r0, [r2, #0]
1000f146:	784b      	ldrb	r3, [r1, #1]
1000f148:	7808      	ldrb	r0, [r1, #0]
1000f14a:	021b      	lsls	r3, r3, #8
1000f14c:	4303      	orrs	r3, r0
1000f14e:	8053      	strh	r3, [r2, #2]
1000f150:	1d10      	adds	r0, r2, #4
1000f152:	3102      	adds	r1, #2
1000f154:	2208      	movs	r2, #8
1000f156:	4b01      	ldr	r3, [pc, #4]	; (1000f15c <gapc_encrypt_req_ind+0x1c>)
1000f158:	4798      	blx	r3
1000f15a:	bd08      	pop	{r3, pc}
1000f15c:	10011c63 	.word	0x10011c63

1000f160 <gapc_encrypt_cfm_handler>:
1000f160:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f162:	2500      	movs	r5, #0
1000f164:	b087      	sub	sp, #28
1000f166:	9304      	str	r3, [sp, #16]
1000f168:	ab0c      	add	r3, sp, #48	; 0x30
1000f16a:	781b      	ldrb	r3, [r3, #0]
1000f16c:	1c17      	adds	r7, r2, #0
1000f16e:	4a15      	ldr	r2, [pc, #84]	; (1000f1c4 <gapc_encrypt_cfm_handler+0x64>)
1000f170:	1c06      	adds	r6, r0, #0
1000f172:	9305      	str	r3, [sp, #20]
1000f174:	9100      	str	r1, [sp, #0]
1000f176:	9002      	str	r0, [sp, #8]
1000f178:	1c29      	adds	r1, r5, #0
1000f17a:	1c2b      	adds	r3, r5, #0
1000f17c:	9501      	str	r5, [sp, #4]
1000f17e:	1c10      	adds	r0, r2, #0
1000f180:	4c11      	ldr	r4, [pc, #68]	; (1000f1c8 <gapc_encrypt_cfm_handler+0x68>)
1000f182:	47a0      	blx	r4
1000f184:	2318      	movs	r3, #24
1000f186:	4c11      	ldr	r4, [pc, #68]	; (1000f1cc <gapc_encrypt_cfm_handler+0x6c>)
1000f188:	9904      	ldr	r1, [sp, #16]
1000f18a:	7023      	strb	r3, [r4, #0]
1000f18c:	3b0a      	subs	r3, #10
1000f18e:	7063      	strb	r3, [r4, #1]
1000f190:	70a3      	strb	r3, [r4, #2]
1000f192:	4b0f      	ldr	r3, [pc, #60]	; (1000f1d0 <gapc_encrypt_cfm_handler+0x70>)
1000f194:	480f      	ldr	r0, [pc, #60]	; (1000f1d4 <gapc_encrypt_cfm_handler+0x74>)
1000f196:	881a      	ldrh	r2, [r3, #0]
1000f198:	881b      	ldrh	r3, [r3, #0]
1000f19a:	7122      	strb	r2, [r4, #4]
1000f19c:	0a1b      	lsrs	r3, r3, #8
1000f19e:	7163      	strb	r3, [r4, #5]
1000f1a0:	2210      	movs	r2, #16
1000f1a2:	4b0d      	ldr	r3, [pc, #52]	; (1000f1d8 <gapc_encrypt_cfm_handler+0x78>)
1000f1a4:	70e6      	strb	r6, [r4, #3]
1000f1a6:	7227      	strb	r7, [r4, #8]
1000f1a8:	4798      	blx	r3
1000f1aa:	466b      	mov	r3, sp
1000f1ac:	7d1b      	ldrb	r3, [r3, #20]
1000f1ae:	1c20      	adds	r0, r4, #0
1000f1b0:	7663      	strb	r3, [r4, #25]
1000f1b2:	2312      	movs	r3, #18
1000f1b4:	211a      	movs	r1, #26
1000f1b6:	71a3      	strb	r3, [r4, #6]
1000f1b8:	4b08      	ldr	r3, [pc, #32]	; (1000f1dc <gapc_encrypt_cfm_handler+0x7c>)
1000f1ba:	71e5      	strb	r5, [r4, #7]
1000f1bc:	4798      	blx	r3
1000f1be:	b007      	add	sp, #28
1000f1c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f1c2:	46c0      	nop			; (mov r8, r8)
1000f1c4:	10015cac 	.word	0x10015cac
1000f1c8:	1000eb5d 	.word	0x1000eb5d
1000f1cc:	1001714c 	.word	0x1001714c
1000f1d0:	10016ddc 	.word	0x10016ddc
1000f1d4:	10017155 	.word	0x10017155
1000f1d8:	10011c63 	.word	0x10011c63
1000f1dc:	1000e859 	.word	0x1000e859

1000f1e0 <gapc_encrypt_ind>:
1000f1e0:	780b      	ldrb	r3, [r1, #0]
1000f1e2:	0a00      	lsrs	r0, r0, #8
1000f1e4:	70d3      	strb	r3, [r2, #3]
1000f1e6:	2300      	movs	r3, #0
1000f1e8:	8010      	strh	r0, [r2, #0]
1000f1ea:	7093      	strb	r3, [r2, #2]
1000f1ec:	4770      	bx	lr
	...

1000f1f0 <gapc_param_update_cfm_handler>:
1000f1f0:	b538      	push	{r3, r4, r5, lr}
1000f1f2:	2410      	movs	r4, #16
1000f1f4:	1c05      	adds	r5, r0, #0
1000f1f6:	480e      	ldr	r0, [pc, #56]	; (1000f230 <gapc_param_update_cfm_handler+0x40>)
1000f1f8:	7004      	strb	r4, [r0, #0]
1000f1fa:	3c02      	subs	r4, #2
1000f1fc:	7044      	strb	r4, [r0, #1]
1000f1fe:	7084      	strb	r4, [r0, #2]
1000f200:	4c0c      	ldr	r4, [pc, #48]	; (1000f234 <gapc_param_update_cfm_handler+0x44>)
1000f202:	70c5      	strb	r5, [r0, #3]
1000f204:	8825      	ldrh	r5, [r4, #0]
1000f206:	8824      	ldrh	r4, [r4, #0]
1000f208:	72c3      	strb	r3, [r0, #11]
1000f20a:	0a1b      	lsrs	r3, r3, #8
1000f20c:	0a24      	lsrs	r4, r4, #8
1000f20e:	7303      	strb	r3, [r0, #12]
1000f210:	2305      	movs	r3, #5
1000f212:	7144      	strb	r4, [r0, #5]
1000f214:	2400      	movs	r4, #0
1000f216:	7201      	strb	r1, [r0, #8]
1000f218:	7242      	strb	r2, [r0, #9]
1000f21a:	7183      	strb	r3, [r0, #6]
1000f21c:	0a12      	lsrs	r2, r2, #8
1000f21e:	210d      	movs	r1, #13
1000f220:	4b05      	ldr	r3, [pc, #20]	; (1000f238 <gapc_param_update_cfm_handler+0x48>)
1000f222:	7105      	strb	r5, [r0, #4]
1000f224:	7282      	strb	r2, [r0, #10]
1000f226:	71c4      	strb	r4, [r0, #7]
1000f228:	4798      	blx	r3
1000f22a:	1c20      	adds	r0, r4, #0
1000f22c:	bd38      	pop	{r3, r4, r5, pc}
1000f22e:	46c0      	nop			; (mov r8, r8)
1000f230:	1001714c 	.word	0x1001714c
1000f234:	10016ddc 	.word	0x10016ddc
1000f238:	1000e859 	.word	0x1000e859

1000f23c <gapc_param_updated_ind>:
1000f23c:	2300      	movs	r3, #0
1000f23e:	0a00      	lsrs	r0, r0, #8
1000f240:	8010      	strh	r0, [r2, #0]
1000f242:	7093      	strb	r3, [r2, #2]
1000f244:	784b      	ldrb	r3, [r1, #1]
1000f246:	7808      	ldrb	r0, [r1, #0]
1000f248:	021b      	lsls	r3, r3, #8
1000f24a:	4303      	orrs	r3, r0
1000f24c:	8093      	strh	r3, [r2, #4]
1000f24e:	78cb      	ldrb	r3, [r1, #3]
1000f250:	7888      	ldrb	r0, [r1, #2]
1000f252:	021b      	lsls	r3, r3, #8
1000f254:	4303      	orrs	r3, r0
1000f256:	80d3      	strh	r3, [r2, #6]
1000f258:	794b      	ldrb	r3, [r1, #5]
1000f25a:	7909      	ldrb	r1, [r1, #4]
1000f25c:	021b      	lsls	r3, r3, #8
1000f25e:	430b      	orrs	r3, r1
1000f260:	2007      	movs	r0, #7
1000f262:	8113      	strh	r3, [r2, #8]
1000f264:	4770      	bx	lr

1000f266 <gapc_param_updated_req_ind>:
1000f266:	0a00      	lsrs	r0, r0, #8
1000f268:	8010      	strh	r0, [r2, #0]
1000f26a:	784b      	ldrb	r3, [r1, #1]
1000f26c:	7808      	ldrb	r0, [r1, #0]
1000f26e:	021b      	lsls	r3, r3, #8
1000f270:	4303      	orrs	r3, r0
1000f272:	8053      	strh	r3, [r2, #2]
1000f274:	78cb      	ldrb	r3, [r1, #3]
1000f276:	7888      	ldrb	r0, [r1, #2]
1000f278:	021b      	lsls	r3, r3, #8
1000f27a:	4303      	orrs	r3, r0
1000f27c:	8093      	strh	r3, [r2, #4]
1000f27e:	794b      	ldrb	r3, [r1, #5]
1000f280:	7908      	ldrb	r0, [r1, #4]
1000f282:	021b      	lsls	r3, r3, #8
1000f284:	4303      	orrs	r3, r0
1000f286:	80d3      	strh	r3, [r2, #6]
1000f288:	79cb      	ldrb	r3, [r1, #7]
1000f28a:	7989      	ldrb	r1, [r1, #6]
1000f28c:	021b      	lsls	r3, r3, #8
1000f28e:	430b      	orrs	r3, r1
1000f290:	2008      	movs	r0, #8
1000f292:	8113      	strh	r3, [r2, #8]
1000f294:	4770      	bx	lr
	...

1000f298 <gapc_dev_info_req_ind_handler>:
1000f298:	b508      	push	{r3, lr}
1000f29a:	1c0b      	adds	r3, r1, #0
1000f29c:	0a01      	lsrs	r1, r0, #8
1000f29e:	8011      	strh	r1, [r2, #0]
1000f2a0:	7818      	ldrb	r0, [r3, #0]
1000f2a2:	7090      	strb	r0, [r2, #2]
1000f2a4:	2800      	cmp	r0, #0
1000f2a6:	d104      	bne.n	1000f2b2 <gapc_dev_info_req_ind_handler+0x1a>
1000f2a8:	4b03      	ldr	r3, [pc, #12]	; (1000f2b8 <gapc_dev_info_req_ind_handler+0x20>)
1000f2aa:	33aa      	adds	r3, #170	; 0xaa
1000f2ac:	881b      	ldrh	r3, [r3, #0]
1000f2ae:	2b00      	cmp	r3, #0
1000f2b0:	d001      	beq.n	1000f2b6 <gapc_dev_info_req_ind_handler+0x1e>
1000f2b2:	4b02      	ldr	r3, [pc, #8]	; (1000f2bc <gapc_dev_info_req_ind_handler+0x24>)
1000f2b4:	4798      	blx	r3
1000f2b6:	bd08      	pop	{r3, pc}
1000f2b8:	10016e6e 	.word	0x10016e6e
1000f2bc:	1000e969 	.word	0x1000e969

1000f2c0 <gapc_sec_req_ind>:
1000f2c0:	0a00      	lsrs	r0, r0, #8
1000f2c2:	8010      	strh	r0, [r2, #0]
1000f2c4:	7809      	ldrb	r1, [r1, #0]
1000f2c6:	2301      	movs	r3, #1
1000f2c8:	1c08      	adds	r0, r1, #0
1000f2ca:	0889      	lsrs	r1, r1, #2
1000f2cc:	4018      	ands	r0, r3
1000f2ce:	400b      	ands	r3, r1
1000f2d0:	70d0      	strb	r0, [r2, #3]
1000f2d2:	7113      	strb	r3, [r2, #4]
1000f2d4:	4770      	bx	lr

1000f2d6 <gapc_sign_counter_ind_handler>:
1000f2d6:	0a00      	lsrs	r0, r0, #8
1000f2d8:	8010      	strh	r0, [r2, #0]
1000f2da:	784b      	ldrb	r3, [r1, #1]
1000f2dc:	0218      	lsls	r0, r3, #8
1000f2de:	788b      	ldrb	r3, [r1, #2]
1000f2e0:	041b      	lsls	r3, r3, #16
1000f2e2:	4303      	orrs	r3, r0
1000f2e4:	7808      	ldrb	r0, [r1, #0]
1000f2e6:	4303      	orrs	r3, r0
1000f2e8:	78c8      	ldrb	r0, [r1, #3]
1000f2ea:	0600      	lsls	r0, r0, #24
1000f2ec:	4303      	orrs	r3, r0
1000f2ee:	6053      	str	r3, [r2, #4]
1000f2f0:	794b      	ldrb	r3, [r1, #5]
1000f2f2:	0218      	lsls	r0, r3, #8
1000f2f4:	798b      	ldrb	r3, [r1, #6]
1000f2f6:	041b      	lsls	r3, r3, #16
1000f2f8:	4303      	orrs	r3, r0
1000f2fa:	7908      	ldrb	r0, [r1, #4]
1000f2fc:	79c9      	ldrb	r1, [r1, #7]
1000f2fe:	4303      	orrs	r3, r0
1000f300:	0609      	lsls	r1, r1, #24
1000f302:	430b      	orrs	r3, r1
1000f304:	2000      	movs	r0, #0
1000f306:	6093      	str	r3, [r2, #8]
1000f308:	4770      	bx	lr
	...

1000f30c <gapc_peer_att_info_ind_handler>:
1000f30c:	b510      	push	{r4, lr}
1000f30e:	0a00      	lsrs	r0, r0, #8
1000f310:	8010      	strh	r0, [r2, #0]
1000f312:	7808      	ldrb	r0, [r1, #0]
1000f314:	7090      	strb	r0, [r2, #2]
1000f316:	788b      	ldrb	r3, [r1, #2]
1000f318:	784c      	ldrb	r4, [r1, #1]
1000f31a:	021b      	lsls	r3, r3, #8
1000f31c:	4323      	orrs	r3, r4
1000f31e:	8093      	strh	r3, [r2, #4]
1000f320:	2801      	cmp	r0, #1
1000f322:	d027      	beq.n	1000f374 <gapc_peer_att_info_ind_handler+0x68>
1000f324:	2800      	cmp	r0, #0
1000f326:	d017      	beq.n	1000f358 <gapc_peer_att_info_ind_handler+0x4c>
1000f328:	2802      	cmp	r0, #2
1000f32a:	d12a      	bne.n	1000f382 <gapc_peer_att_info_ind_handler+0x76>
1000f32c:	790b      	ldrb	r3, [r1, #4]
1000f32e:	78c8      	ldrb	r0, [r1, #3]
1000f330:	021b      	lsls	r3, r3, #8
1000f332:	4303      	orrs	r3, r0
1000f334:	8113      	strh	r3, [r2, #8]
1000f336:	798b      	ldrb	r3, [r1, #6]
1000f338:	7948      	ldrb	r0, [r1, #5]
1000f33a:	021b      	lsls	r3, r3, #8
1000f33c:	4303      	orrs	r3, r0
1000f33e:	80d3      	strh	r3, [r2, #6]
1000f340:	7a0b      	ldrb	r3, [r1, #8]
1000f342:	79c8      	ldrb	r0, [r1, #7]
1000f344:	021b      	lsls	r3, r3, #8
1000f346:	4303      	orrs	r3, r0
1000f348:	8193      	strh	r3, [r2, #12]
1000f34a:	7a8b      	ldrb	r3, [r1, #10]
1000f34c:	7a49      	ldrb	r1, [r1, #9]
1000f34e:	021b      	lsls	r3, r3, #8
1000f350:	430b      	orrs	r3, r1
1000f352:	8153      	strh	r3, [r2, #10]
1000f354:	2306      	movs	r3, #6
1000f356:	e013      	b.n	1000f380 <gapc_peer_att_info_ind_handler+0x74>
1000f358:	1c14      	adds	r4, r2, #0
1000f35a:	1c20      	adds	r0, r4, #0
1000f35c:	790a      	ldrb	r2, [r1, #4]
1000f35e:	78cb      	ldrb	r3, [r1, #3]
1000f360:	0212      	lsls	r2, r2, #8
1000f362:	431a      	orrs	r2, r3
1000f364:	80e2      	strh	r2, [r4, #6]
1000f366:	4b07      	ldr	r3, [pc, #28]	; (1000f384 <gapc_peer_att_info_ind_handler+0x78>)
1000f368:	3008      	adds	r0, #8
1000f36a:	3105      	adds	r1, #5
1000f36c:	4798      	blx	r3
1000f36e:	2302      	movs	r3, #2
1000f370:	70a3      	strb	r3, [r4, #2]
1000f372:	e006      	b.n	1000f382 <gapc_peer_att_info_ind_handler+0x76>
1000f374:	790b      	ldrb	r3, [r1, #4]
1000f376:	78c9      	ldrb	r1, [r1, #3]
1000f378:	021b      	lsls	r3, r3, #8
1000f37a:	430b      	orrs	r3, r1
1000f37c:	80d3      	strh	r3, [r2, #6]
1000f37e:	2305      	movs	r3, #5
1000f380:	7093      	strb	r3, [r2, #2]
1000f382:	bd10      	pop	{r4, pc}
1000f384:	10011c63 	.word	0x10011c63

1000f388 <gapc_con_channel_map_ind_handler>:
1000f388:	b508      	push	{r3, lr}
1000f38a:	2300      	movs	r3, #0
1000f38c:	0a00      	lsrs	r0, r0, #8
1000f38e:	7013      	strb	r3, [r2, #0]
1000f390:	8050      	strh	r0, [r2, #2]
1000f392:	4b02      	ldr	r3, [pc, #8]	; (1000f39c <gapc_con_channel_map_ind_handler+0x14>)
1000f394:	1d10      	adds	r0, r2, #4
1000f396:	2205      	movs	r2, #5
1000f398:	4798      	blx	r3
1000f39a:	bd08      	pop	{r3, pc}
1000f39c:	10011c63 	.word	0x10011c63

1000f3a0 <gapc_lecb_connected>:
1000f3a0:	7843      	ldrb	r3, [r0, #1]
1000f3a2:	7802      	ldrb	r2, [r0, #0]
1000f3a4:	021b      	lsls	r3, r3, #8
1000f3a6:	4313      	orrs	r3, r2
1000f3a8:	800b      	strh	r3, [r1, #0]
1000f3aa:	78c3      	ldrb	r3, [r0, #3]
1000f3ac:	7882      	ldrb	r2, [r0, #2]
1000f3ae:	021b      	lsls	r3, r3, #8
1000f3b0:	4313      	orrs	r3, r2
1000f3b2:	804b      	strh	r3, [r1, #2]
1000f3b4:	7943      	ldrb	r3, [r0, #5]
1000f3b6:	7902      	ldrb	r2, [r0, #4]
1000f3b8:	021b      	lsls	r3, r3, #8
1000f3ba:	4313      	orrs	r3, r2
1000f3bc:	808b      	strh	r3, [r1, #4]
1000f3be:	79c3      	ldrb	r3, [r0, #7]
1000f3c0:	7982      	ldrb	r2, [r0, #6]
1000f3c2:	021b      	lsls	r3, r3, #8
1000f3c4:	4313      	orrs	r3, r2
1000f3c6:	80cb      	strh	r3, [r1, #6]
1000f3c8:	2300      	movs	r3, #0
1000f3ca:	720b      	strb	r3, [r1, #8]
1000f3cc:	4770      	bx	lr

1000f3ce <gapc_lecb_disconnected>:
1000f3ce:	7843      	ldrb	r3, [r0, #1]
1000f3d0:	7802      	ldrb	r2, [r0, #0]
1000f3d2:	021b      	lsls	r3, r3, #8
1000f3d4:	4313      	orrs	r3, r2
1000f3d6:	800b      	strh	r3, [r1, #0]
1000f3d8:	78c3      	ldrb	r3, [r0, #3]
1000f3da:	7882      	ldrb	r2, [r0, #2]
1000f3dc:	021b      	lsls	r3, r3, #8
1000f3de:	4313      	orrs	r3, r2
1000f3e0:	804b      	strh	r3, [r1, #2]
1000f3e2:	4770      	bx	lr

1000f3e4 <gapc_lecb_connect_req_ind>:
1000f3e4:	7843      	ldrb	r3, [r0, #1]
1000f3e6:	7802      	ldrb	r2, [r0, #0]
1000f3e8:	021b      	lsls	r3, r3, #8
1000f3ea:	4313      	orrs	r3, r2
1000f3ec:	800b      	strh	r3, [r1, #0]
1000f3ee:	78c3      	ldrb	r3, [r0, #3]
1000f3f0:	7882      	ldrb	r2, [r0, #2]
1000f3f2:	021b      	lsls	r3, r3, #8
1000f3f4:	4313      	orrs	r3, r2
1000f3f6:	804b      	strh	r3, [r1, #2]
1000f3f8:	7943      	ldrb	r3, [r0, #5]
1000f3fa:	7902      	ldrb	r2, [r0, #4]
1000f3fc:	021b      	lsls	r3, r3, #8
1000f3fe:	4313      	orrs	r3, r2
1000f400:	808b      	strh	r3, [r1, #4]
1000f402:	79c3      	ldrb	r3, [r0, #7]
1000f404:	7982      	ldrb	r2, [r0, #6]
1000f406:	021b      	lsls	r3, r3, #8
1000f408:	4313      	orrs	r3, r2
1000f40a:	80cb      	strh	r3, [r1, #6]
1000f40c:	4770      	bx	lr

1000f40e <gapc_lecb_add_credit_resp_handler>:
1000f40e:	7843      	ldrb	r3, [r0, #1]
1000f410:	7802      	ldrb	r2, [r0, #0]
1000f412:	021b      	lsls	r3, r3, #8
1000f414:	4313      	orrs	r3, r2
1000f416:	800b      	strh	r3, [r1, #0]
1000f418:	78c3      	ldrb	r3, [r0, #3]
1000f41a:	7882      	ldrb	r2, [r0, #2]
1000f41c:	021b      	lsls	r3, r3, #8
1000f41e:	4313      	orrs	r3, r2
1000f420:	804b      	strh	r3, [r1, #2]
1000f422:	7943      	ldrb	r3, [r0, #5]
1000f424:	7902      	ldrb	r2, [r0, #4]
1000f426:	021b      	lsls	r3, r3, #8
1000f428:	4313      	orrs	r3, r2
1000f42a:	808b      	strh	r3, [r1, #4]
1000f42c:	4770      	bx	lr
	...

1000f430 <gapm_reset_req_handler>:
1000f430:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f432:	466b      	mov	r3, sp
1000f434:	4915      	ldr	r1, [pc, #84]	; (1000f48c <gapm_reset_req_handler+0x5c>)
1000f436:	4816      	ldr	r0, [pc, #88]	; (1000f490 <gapm_reset_req_handler+0x60>)
1000f438:	880c      	ldrh	r4, [r1, #0]
1000f43a:	8809      	ldrh	r1, [r1, #0]
1000f43c:	1ddd      	adds	r5, r3, #7
1000f43e:	0a09      	lsrs	r1, r1, #8
1000f440:	2300      	movs	r3, #0
1000f442:	2202      	movs	r2, #2
1000f444:	7141      	strb	r1, [r0, #5]
1000f446:	26d0      	movs	r6, #208	; 0xd0
1000f448:	2101      	movs	r1, #1
1000f44a:	7104      	strb	r4, [r0, #4]
1000f44c:	4c11      	ldr	r4, [pc, #68]	; (1000f494 <gapm_reset_req_handler+0x64>)
1000f44e:	702b      	strb	r3, [r5, #0]
1000f450:	7002      	strb	r2, [r0, #0]
1000f452:	70c3      	strb	r3, [r0, #3]
1000f454:	320b      	adds	r2, #11
1000f456:	7201      	strb	r1, [r0, #8]
1000f458:	7181      	strb	r1, [r0, #6]
1000f45a:	71c3      	strb	r3, [r0, #7]
1000f45c:	3108      	adds	r1, #8
1000f45e:	4b0e      	ldr	r3, [pc, #56]	; (1000f498 <gapm_reset_req_handler+0x68>)
1000f460:	0136      	lsls	r6, r6, #4
1000f462:	7042      	strb	r2, [r0, #1]
1000f464:	7082      	strb	r2, [r0, #2]
1000f466:	80a2      	strh	r2, [r4, #4]
1000f468:	8026      	strh	r6, [r4, #0]
1000f46a:	4798      	blx	r3
1000f46c:	1c28      	adds	r0, r5, #0
1000f46e:	4b0b      	ldr	r3, [pc, #44]	; (1000f49c <gapm_reset_req_handler+0x6c>)
1000f470:	4798      	blx	r3
1000f472:	782b      	ldrb	r3, [r5, #0]
1000f474:	20e2      	movs	r0, #226	; 0xe2
1000f476:	2b00      	cmp	r3, #0
1000f478:	d106      	bne.n	1000f488 <gapm_reset_req_handler+0x58>
1000f47a:	68a3      	ldr	r3, [r4, #8]
1000f47c:	20e2      	movs	r0, #226	; 0xe2
1000f47e:	781a      	ldrb	r2, [r3, #0]
1000f480:	785b      	ldrb	r3, [r3, #1]
1000f482:	2a01      	cmp	r2, #1
1000f484:	d100      	bne.n	1000f488 <gapm_reset_req_handler+0x58>
1000f486:	1c18      	adds	r0, r3, #0
1000f488:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f48a:	46c0      	nop			; (mov r8, r8)
1000f48c:	10016ddc 	.word	0x10016ddc
1000f490:	1001714c 	.word	0x1001714c
1000f494:	10016dd0 	.word	0x10016dd0
1000f498:	1000e859 	.word	0x1000e859
1000f49c:	1000e8bd 	.word	0x1000e8bd

1000f4a0 <gapm_set_dev_config_cmd_handler>:
1000f4a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f4a2:	b089      	sub	sp, #36	; 0x24
1000f4a4:	9303      	str	r3, [sp, #12]
1000f4a6:	ab0e      	add	r3, sp, #56	; 0x38
1000f4a8:	781b      	ldrb	r3, [r3, #0]
1000f4aa:	4c37      	ldr	r4, [pc, #220]	; (1000f588 <gapm_set_dev_config_cmd_handler+0xe8>)
1000f4ac:	9304      	str	r3, [sp, #16]
1000f4ae:	ab0f      	add	r3, sp, #60	; 0x3c
1000f4b0:	781b      	ldrb	r3, [r3, #0]
1000f4b2:	270d      	movs	r7, #13
1000f4b4:	9305      	str	r3, [sp, #20]
1000f4b6:	ab10      	add	r3, sp, #64	; 0x40
1000f4b8:	881b      	ldrh	r3, [r3, #0]
1000f4ba:	72a1      	strb	r1, [r4, #10]
1000f4bc:	9300      	str	r3, [sp, #0]
1000f4be:	ab11      	add	r3, sp, #68	; 0x44
1000f4c0:	881b      	ldrh	r3, [r3, #0]
1000f4c2:	0a09      	lsrs	r1, r1, #8
1000f4c4:	9301      	str	r3, [sp, #4]
1000f4c6:	ab12      	add	r3, sp, #72	; 0x48
1000f4c8:	881b      	ldrh	r3, [r3, #0]
1000f4ca:	7260      	strb	r0, [r4, #9]
1000f4cc:	9302      	str	r3, [sp, #8]
1000f4ce:	ab06      	add	r3, sp, #24
1000f4d0:	1dde      	adds	r6, r3, #7
1000f4d2:	2300      	movs	r3, #0
1000f4d4:	7033      	strb	r3, [r6, #0]
1000f4d6:	2304      	movs	r3, #4
1000f4d8:	7023      	strb	r3, [r4, #0]
1000f4da:	2300      	movs	r3, #0
1000f4dc:	70e3      	strb	r3, [r4, #3]
1000f4de:	4b2b      	ldr	r3, [pc, #172]	; (1000f58c <gapm_set_dev_config_cmd_handler+0xec>)
1000f4e0:	72e1      	strb	r1, [r4, #11]
1000f4e2:	881d      	ldrh	r5, [r3, #0]
1000f4e4:	881b      	ldrh	r3, [r3, #0]
1000f4e6:	1c11      	adds	r1, r2, #0
1000f4e8:	0a1b      	lsrs	r3, r3, #8
1000f4ea:	7163      	strb	r3, [r4, #5]
1000f4ec:	2303      	movs	r3, #3
1000f4ee:	7125      	strb	r5, [r4, #4]
1000f4f0:	2206      	movs	r2, #6
1000f4f2:	4d27      	ldr	r5, [pc, #156]	; (1000f590 <gapm_set_dev_config_cmd_handler+0xf0>)
1000f4f4:	4827      	ldr	r0, [pc, #156]	; (1000f594 <gapm_set_dev_config_cmd_handler+0xf4>)
1000f4f6:	7223      	strb	r3, [r4, #8]
1000f4f8:	7067      	strb	r7, [r4, #1]
1000f4fa:	70a7      	strb	r7, [r4, #2]
1000f4fc:	47a8      	blx	r5
1000f4fe:	9903      	ldr	r1, [sp, #12]
1000f500:	2210      	movs	r2, #16
1000f502:	4825      	ldr	r0, [pc, #148]	; (1000f598 <gapm_set_dev_config_cmd_handler+0xf8>)
1000f504:	47a8      	blx	r5
1000f506:	466a      	mov	r2, sp
1000f508:	7c12      	ldrb	r2, [r2, #16]
1000f50a:	1ce3      	adds	r3, r4, #3
1000f50c:	77da      	strb	r2, [r3, #31]
1000f50e:	466a      	mov	r2, sp
1000f510:	7d12      	ldrb	r2, [r2, #20]
1000f512:	1d23      	adds	r3, r4, #4
1000f514:	77da      	strb	r2, [r3, #31]
1000f516:	466a      	mov	r2, sp
1000f518:	7812      	ldrb	r2, [r2, #0]
1000f51a:	1d63      	adds	r3, r4, #5
1000f51c:	77da      	strb	r2, [r3, #31]
1000f51e:	9b00      	ldr	r3, [sp, #0]
1000f520:	1da2      	adds	r2, r4, #6
1000f522:	0a1b      	lsrs	r3, r3, #8
1000f524:	77d3      	strb	r3, [r2, #31]
1000f526:	466a      	mov	r2, sp
1000f528:	7912      	ldrb	r2, [r2, #4]
1000f52a:	1de3      	adds	r3, r4, #7
1000f52c:	77da      	strb	r2, [r3, #31]
1000f52e:	1c22      	adds	r2, r4, #0
1000f530:	9b01      	ldr	r3, [sp, #4]
1000f532:	3208      	adds	r2, #8
1000f534:	0a1b      	lsrs	r3, r3, #8
1000f536:	77d3      	strb	r3, [r2, #31]
1000f538:	466a      	mov	r2, sp
1000f53a:	1c23      	adds	r3, r4, #0
1000f53c:	7a12      	ldrb	r2, [r2, #8]
1000f53e:	3328      	adds	r3, #40	; 0x28
1000f540:	701a      	strb	r2, [r3, #0]
1000f542:	1c22      	adds	r2, r4, #0
1000f544:	9b02      	ldr	r3, [sp, #8]
1000f546:	3229      	adds	r2, #41	; 0x29
1000f548:	0a1b      	lsrs	r3, r3, #8
1000f54a:	7013      	strb	r3, [r2, #0]
1000f54c:	23d0      	movs	r3, #208	; 0xd0
1000f54e:	4d13      	ldr	r5, [pc, #76]	; (1000f59c <gapm_set_dev_config_cmd_handler+0xfc>)
1000f550:	011b      	lsls	r3, r3, #4
1000f552:	802b      	strh	r3, [r5, #0]
1000f554:	2322      	movs	r3, #34	; 0x22
1000f556:	71a3      	strb	r3, [r4, #6]
1000f558:	2300      	movs	r3, #0
1000f55a:	212a      	movs	r1, #42	; 0x2a
1000f55c:	71e3      	strb	r3, [r4, #7]
1000f55e:	1c20      	adds	r0, r4, #0
1000f560:	4b0f      	ldr	r3, [pc, #60]	; (1000f5a0 <gapm_set_dev_config_cmd_handler+0x100>)
1000f562:	80af      	strh	r7, [r5, #4]
1000f564:	4798      	blx	r3
1000f566:	1c30      	adds	r0, r6, #0
1000f568:	4b0e      	ldr	r3, [pc, #56]	; (1000f5a4 <gapm_set_dev_config_cmd_handler+0x104>)
1000f56a:	4798      	blx	r3
1000f56c:	7833      	ldrb	r3, [r6, #0]
1000f56e:	20e2      	movs	r0, #226	; 0xe2
1000f570:	2b00      	cmp	r3, #0
1000f572:	d106      	bne.n	1000f582 <gapm_set_dev_config_cmd_handler+0xe2>
1000f574:	68ab      	ldr	r3, [r5, #8]
1000f576:	20e2      	movs	r0, #226	; 0xe2
1000f578:	781a      	ldrb	r2, [r3, #0]
1000f57a:	785b      	ldrb	r3, [r3, #1]
1000f57c:	2a03      	cmp	r2, #3
1000f57e:	d100      	bne.n	1000f582 <gapm_set_dev_config_cmd_handler+0xe2>
1000f580:	1c18      	adds	r0, r3, #0
1000f582:	b009      	add	sp, #36	; 0x24
1000f584:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f586:	46c0      	nop			; (mov r8, r8)
1000f588:	1001714c 	.word	0x1001714c
1000f58c:	10016ddc 	.word	0x10016ddc
1000f590:	10011c63 	.word	0x10011c63
1000f594:	10017158 	.word	0x10017158
1000f598:	1001715e 	.word	0x1001715e
1000f59c:	10016dd0 	.word	0x10016dd0
1000f5a0:	1000e859 	.word	0x1000e859
1000f5a4:	1000e8bd 	.word	0x1000e8bd

1000f5a8 <gapm_get_dev_config_cmd_handler>:
1000f5a8:	4684      	mov	ip, r0
1000f5aa:	4663      	mov	r3, ip
1000f5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f5ae:	b085      	sub	sp, #20
1000f5b0:	9100      	str	r1, [sp, #0]
1000f5b2:	20cf      	movs	r0, #207	; 0xcf
1000f5b4:	2b01      	cmp	r3, #1
1000f5b6:	d854      	bhi.n	1000f662 <gapm_get_dev_config_cmd_handler+0xba>
1000f5b8:	2900      	cmp	r1, #0
1000f5ba:	d052      	beq.n	1000f662 <gapm_get_dev_config_cmd_handler+0xba>
1000f5bc:	2200      	movs	r2, #0
1000f5be:	492a      	ldr	r1, [pc, #168]	; (1000f668 <gapm_get_dev_config_cmd_handler+0xc0>)
1000f5c0:	ab02      	add	r3, sp, #8
1000f5c2:	880c      	ldrh	r4, [r1, #0]
1000f5c4:	8809      	ldrh	r1, [r1, #0]
1000f5c6:	1d9f      	adds	r7, r3, #6
1000f5c8:	719a      	strb	r2, [r3, #6]
1000f5ca:	4b28      	ldr	r3, [pc, #160]	; (1000f66c <gapm_get_dev_config_cmd_handler+0xc4>)
1000f5cc:	0a09      	lsrs	r1, r1, #8
1000f5ce:	250d      	movs	r5, #13
1000f5d0:	2606      	movs	r6, #6
1000f5d2:	7159      	strb	r1, [r3, #5]
1000f5d4:	4661      	mov	r1, ip
1000f5d6:	701e      	strb	r6, [r3, #0]
1000f5d8:	705d      	strb	r5, [r3, #1]
1000f5da:	709d      	strb	r5, [r3, #2]
1000f5dc:	70da      	strb	r2, [r3, #3]
1000f5de:	711c      	strb	r4, [r3, #4]
1000f5e0:	2901      	cmp	r1, #1
1000f5e2:	d13e      	bne.n	1000f662 <gapm_get_dev_config_cmd_handler+0xba>
1000f5e4:	21d0      	movs	r1, #208	; 0xd0
1000f5e6:	4c22      	ldr	r4, [pc, #136]	; (1000f670 <gapm_get_dev_config_cmd_handler+0xc8>)
1000f5e8:	0109      	lsls	r1, r1, #4
1000f5ea:	8061      	strh	r1, [r4, #2]
1000f5ec:	4921      	ldr	r1, [pc, #132]	; (1000f674 <gapm_get_dev_config_cmd_handler+0xcc>)
1000f5ee:	71da      	strb	r2, [r3, #7]
1000f5f0:	8021      	strh	r1, [r4, #0]
1000f5f2:	4661      	mov	r1, ip
1000f5f4:	721e      	strb	r6, [r3, #8]
1000f5f6:	7199      	strb	r1, [r3, #6]
1000f5f8:	1c18      	adds	r0, r3, #0
1000f5fa:	2109      	movs	r1, #9
1000f5fc:	4b1e      	ldr	r3, [pc, #120]	; (1000f678 <gapm_get_dev_config_cmd_handler+0xd0>)
1000f5fe:	80a5      	strh	r5, [r4, #4]
1000f600:	4798      	blx	r3
1000f602:	1c38      	adds	r0, r7, #0
1000f604:	4b1d      	ldr	r3, [pc, #116]	; (1000f67c <gapm_get_dev_config_cmd_handler+0xd4>)
1000f606:	4798      	blx	r3
1000f608:	783b      	ldrb	r3, [r7, #0]
1000f60a:	20e2      	movs	r0, #226	; 0xe2
1000f60c:	9301      	str	r3, [sp, #4]
1000f60e:	2b00      	cmp	r3, #0
1000f610:	d127      	bne.n	1000f662 <gapm_get_dev_config_cmd_handler+0xba>
1000f612:	8821      	ldrh	r1, [r4, #0]
1000f614:	4a1a      	ldr	r2, [pc, #104]	; (1000f680 <gapm_get_dev_config_cmd_handler+0xd8>)
1000f616:	68a7      	ldr	r7, [r4, #8]
1000f618:	3b01      	subs	r3, #1
1000f61a:	4291      	cmp	r1, r2
1000f61c:	d001      	beq.n	1000f622 <gapm_get_dev_config_cmd_handler+0x7a>
1000f61e:	8023      	strh	r3, [r4, #0]
1000f620:	e01a      	b.n	1000f658 <gapm_get_dev_config_cmd_handler+0xb0>
1000f622:	8063      	strh	r3, [r4, #2]
1000f624:	9b00      	ldr	r3, [sp, #0]
1000f626:	1c39      	adds	r1, r7, #0
1000f628:	1c58      	adds	r0, r3, #1
1000f62a:	1c32      	adds	r2, r6, #0
1000f62c:	4b15      	ldr	r3, [pc, #84]	; (1000f684 <gapm_get_dev_config_cmd_handler+0xdc>)
1000f62e:	4798      	blx	r3
1000f630:	79bb      	ldrb	r3, [r7, #6]
1000f632:	9a00      	ldr	r2, [sp, #0]
1000f634:	7013      	strb	r3, [r2, #0]
1000f636:	23d0      	movs	r3, #208	; 0xd0
1000f638:	011b      	lsls	r3, r3, #4
1000f63a:	8023      	strh	r3, [r4, #0]
1000f63c:	ab02      	add	r3, sp, #8
1000f63e:	80a5      	strh	r5, [r4, #4]
1000f640:	1ddd      	adds	r5, r3, #7
1000f642:	466b      	mov	r3, sp
1000f644:	791b      	ldrb	r3, [r3, #4]
1000f646:	1c28      	adds	r0, r5, #0
1000f648:	702b      	strb	r3, [r5, #0]
1000f64a:	4b0c      	ldr	r3, [pc, #48]	; (1000f67c <gapm_get_dev_config_cmd_handler+0xd4>)
1000f64c:	4798      	blx	r3
1000f64e:	782b      	ldrb	r3, [r5, #0]
1000f650:	20d0      	movs	r0, #208	; 0xd0
1000f652:	2b00      	cmp	r3, #0
1000f654:	d105      	bne.n	1000f662 <gapm_get_dev_config_cmd_handler+0xba>
1000f656:	68a7      	ldr	r7, [r4, #8]
1000f658:	783b      	ldrb	r3, [r7, #0]
1000f65a:	7878      	ldrb	r0, [r7, #1]
1000f65c:	2b06      	cmp	r3, #6
1000f65e:	d000      	beq.n	1000f662 <gapm_get_dev_config_cmd_handler+0xba>
1000f660:	20e2      	movs	r0, #226	; 0xe2
1000f662:	b005      	add	sp, #20
1000f664:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f666:	46c0      	nop			; (mov r8, r8)
1000f668:	10016ddc 	.word	0x10016ddc
1000f66c:	1001714c 	.word	0x1001714c
1000f670:	10016dd0 	.word	0x10016dd0
1000f674:	00000d08 	.word	0x00000d08
1000f678:	1000e859 	.word	0x1000e859
1000f67c:	1000e8bd 	.word	0x1000e8bd
1000f680:	0000ffff 	.word	0x0000ffff
1000f684:	10011c63 	.word	0x10011c63

1000f688 <gapm_cancel_cmd_handler>:
1000f688:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f68a:	4916      	ldr	r1, [pc, #88]	; (1000f6e4 <gapm_cancel_cmd_handler+0x5c>)
1000f68c:	4816      	ldr	r0, [pc, #88]	; (1000f6e8 <gapm_cancel_cmd_handler+0x60>)
1000f68e:	880c      	ldrh	r4, [r1, #0]
1000f690:	8809      	ldrh	r1, [r1, #0]
1000f692:	466b      	mov	r3, sp
1000f694:	0a09      	lsrs	r1, r1, #8
1000f696:	7141      	strb	r1, [r0, #5]
1000f698:	2102      	movs	r1, #2
1000f69a:	2203      	movs	r2, #3
1000f69c:	7201      	strb	r1, [r0, #8]
1000f69e:	21d0      	movs	r1, #208	; 0xd0
1000f6a0:	1ddd      	adds	r5, r3, #7
1000f6a2:	2300      	movs	r3, #0
1000f6a4:	7104      	strb	r4, [r0, #4]
1000f6a6:	4c11      	ldr	r4, [pc, #68]	; (1000f6ec <gapm_cancel_cmd_handler+0x64>)
1000f6a8:	7002      	strb	r2, [r0, #0]
1000f6aa:	0109      	lsls	r1, r1, #4
1000f6ac:	320a      	adds	r2, #10
1000f6ae:	702b      	strb	r3, [r5, #0]
1000f6b0:	7042      	strb	r2, [r0, #1]
1000f6b2:	7082      	strb	r2, [r0, #2]
1000f6b4:	70c3      	strb	r3, [r0, #3]
1000f6b6:	8021      	strh	r1, [r4, #0]
1000f6b8:	80a2      	strh	r2, [r4, #4]
1000f6ba:	71c3      	strb	r3, [r0, #7]
1000f6bc:	3a0c      	subs	r2, #12
1000f6be:	2109      	movs	r1, #9
1000f6c0:	4b0b      	ldr	r3, [pc, #44]	; (1000f6f0 <gapm_cancel_cmd_handler+0x68>)
1000f6c2:	7182      	strb	r2, [r0, #6]
1000f6c4:	4798      	blx	r3
1000f6c6:	1c28      	adds	r0, r5, #0
1000f6c8:	4b0a      	ldr	r3, [pc, #40]	; (1000f6f4 <gapm_cancel_cmd_handler+0x6c>)
1000f6ca:	4798      	blx	r3
1000f6cc:	7828      	ldrb	r0, [r5, #0]
1000f6ce:	2800      	cmp	r0, #0
1000f6d0:	d001      	beq.n	1000f6d6 <gapm_cancel_cmd_handler+0x4e>
1000f6d2:	20e2      	movs	r0, #226	; 0xe2
1000f6d4:	e004      	b.n	1000f6e0 <gapm_cancel_cmd_handler+0x58>
1000f6d6:	68a3      	ldr	r3, [r4, #8]
1000f6d8:	785b      	ldrb	r3, [r3, #1]
1000f6da:	2b44      	cmp	r3, #68	; 0x44
1000f6dc:	d000      	beq.n	1000f6e0 <gapm_cancel_cmd_handler+0x58>
1000f6de:	1c18      	adds	r0, r3, #0
1000f6e0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f6e2:	46c0      	nop			; (mov r8, r8)
1000f6e4:	10016ddc 	.word	0x10016ddc
1000f6e8:	1001714c 	.word	0x1001714c
1000f6ec:	10016dd0 	.word	0x10016dd0
1000f6f0:	1000e859 	.word	0x1000e859
1000f6f4:	1000e8bd 	.word	0x1000e8bd

1000f6f8 <gapm_dev_bdaddr_ind_handler>:
1000f6f8:	b538      	push	{r3, r4, r5, lr}
1000f6fa:	1c05      	adds	r5, r0, #0
1000f6fc:	1c0c      	adds	r4, r1, #0
1000f6fe:	1c48      	adds	r0, r1, #1
1000f700:	2206      	movs	r2, #6
1000f702:	1c29      	adds	r1, r5, #0
1000f704:	4b02      	ldr	r3, [pc, #8]	; (1000f710 <gapm_dev_bdaddr_ind_handler+0x18>)
1000f706:	4798      	blx	r3
1000f708:	79ab      	ldrb	r3, [r5, #6]
1000f70a:	2000      	movs	r0, #0
1000f70c:	7023      	strb	r3, [r4, #0]
1000f70e:	bd38      	pop	{r3, r4, r5, pc}
1000f710:	10011c63 	.word	0x10011c63

1000f714 <gapm_cmp_evt>:
1000f714:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f716:	7803      	ldrb	r3, [r0, #0]
1000f718:	7845      	ldrb	r5, [r0, #1]
1000f71a:	3b0c      	subs	r3, #12
1000f71c:	1e18      	subs	r0, r3, #0
1000f71e:	280b      	cmp	r0, #11
1000f720:	d900      	bls.n	1000f724 <gapm_cmp_evt+0x10>
1000f722:	e08d      	b.n	1000f840 <gapm_cmp_evt+0x12c>
1000f724:	1c0c      	adds	r4, r1, #0
1000f726:	f000 fe4f 	bl	100103c8 <__gnu_thumb1_case_uqi>
1000f72a:	1952      	.short	0x1952
1000f72c:	068b1919 	.word	0x068b1919
1000f730:	8b595906 	.word	0x8b595906
1000f734:	0d8b      	.short	0x0d8b
1000f736:	2300      	movs	r3, #0
1000f738:	2d45      	cmp	r5, #69	; 0x45
1000f73a:	d000      	beq.n	1000f73e <gapm_cmp_evt+0x2a>
1000f73c:	1c2b      	adds	r3, r5, #0
1000f73e:	7023      	strb	r3, [r4, #0]
1000f740:	2002      	movs	r0, #2
1000f742:	e07e      	b.n	1000f842 <gapm_cmp_evt+0x12e>
1000f744:	203b      	movs	r0, #59	; 0x3b
1000f746:	2d00      	cmp	r5, #0
1000f748:	d100      	bne.n	1000f74c <gapm_cmp_evt+0x38>
1000f74a:	e07a      	b.n	1000f842 <gapm_cmp_evt+0x12e>
1000f74c:	700d      	strb	r5, [r1, #0]
1000f74e:	1c48      	adds	r0, r1, #1
1000f750:	2210      	movs	r2, #16
1000f752:	2100      	movs	r1, #0
1000f754:	4b3b      	ldr	r3, [pc, #236]	; (1000f844 <gapm_cmp_evt+0x130>)
1000f756:	4798      	blx	r3
1000f758:	200f      	movs	r0, #15
1000f75a:	e072      	b.n	1000f842 <gapm_cmp_evt+0x12e>
1000f75c:	2d00      	cmp	r5, #0
1000f75e:	d134      	bne.n	1000f7ca <gapm_cmp_evt+0xb6>
1000f760:	4b39      	ldr	r3, [pc, #228]	; (1000f848 <gapm_cmp_evt+0x134>)
1000f762:	4798      	blx	r3
1000f764:	1e43      	subs	r3, r0, #1
1000f766:	b2db      	uxtb	r3, r3
1000f768:	1c28      	adds	r0, r5, #0
1000f76a:	2b06      	cmp	r3, #6
1000f76c:	d869      	bhi.n	1000f842 <gapm_cmp_evt+0x12e>
1000f76e:	466b      	mov	r3, sp
1000f770:	4e36      	ldr	r6, [pc, #216]	; (1000f84c <gapm_cmp_evt+0x138>)
1000f772:	1dd9      	adds	r1, r3, #7
1000f774:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f776:	4b36      	ldr	r3, [pc, #216]	; (1000f850 <gapm_cmp_evt+0x13c>)
1000f778:	4798      	blx	r3
1000f77a:	2312      	movs	r3, #18
1000f77c:	4358      	muls	r0, r3
1000f77e:	4935      	ldr	r1, [pc, #212]	; (1000f854 <gapm_cmp_evt+0x140>)
1000f780:	1809      	adds	r1, r1, r0
1000f782:	1c0b      	adds	r3, r1, #0
1000f784:	894a      	ldrh	r2, [r1, #10]
1000f786:	3308      	adds	r3, #8
1000f788:	8122      	strh	r2, [r4, #8]
1000f78a:	784f      	ldrb	r7, [r1, #1]
1000f78c:	72a5      	strb	r5, [r4, #10]
1000f78e:	7027      	strb	r7, [r4, #0]
1000f790:	898a      	ldrh	r2, [r1, #12]
1000f792:	1c60      	adds	r0, r4, #1
1000f794:	81a2      	strh	r2, [r4, #12]
1000f796:	88db      	ldrh	r3, [r3, #6]
1000f798:	3102      	adds	r1, #2
1000f79a:	81e3      	strh	r3, [r4, #14]
1000f79c:	89cb      	ldrh	r3, [r1, #14]
1000f79e:	2206      	movs	r2, #6
1000f7a0:	8223      	strh	r3, [r4, #16]
1000f7a2:	4b2d      	ldr	r3, [pc, #180]	; (1000f858 <gapm_cmp_evt+0x144>)
1000f7a4:	4798      	blx	r3
1000f7a6:	2f00      	cmp	r7, #0
1000f7a8:	d00a      	beq.n	1000f7c0 <gapm_cmp_evt+0xac>
1000f7aa:	79a3      	ldrb	r3, [r4, #6]
1000f7ac:	223f      	movs	r2, #63	; 0x3f
1000f7ae:	1c19      	adds	r1, r3, #0
1000f7b0:	3501      	adds	r5, #1
1000f7b2:	4391      	bics	r1, r2
1000f7b4:	29c0      	cmp	r1, #192	; 0xc0
1000f7b6:	d003      	beq.n	1000f7c0 <gapm_cmp_evt+0xac>
1000f7b8:	065b      	lsls	r3, r3, #25
1000f7ba:	0fdb      	lsrs	r3, r3, #31
1000f7bc:	3502      	adds	r5, #2
1000f7be:	1aed      	subs	r5, r5, r3
1000f7c0:	2301      	movs	r3, #1
1000f7c2:	425b      	negs	r3, r3
1000f7c4:	7025      	strb	r5, [r4, #0]
1000f7c6:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f7c8:	e038      	b.n	1000f83c <gapm_cmp_evt+0x128>
1000f7ca:	700d      	strb	r5, [r1, #0]
1000f7cc:	e004      	b.n	1000f7d8 <gapm_cmp_evt+0xc4>
1000f7ce:	2300      	movs	r3, #0
1000f7d0:	2d45      	cmp	r5, #69	; 0x45
1000f7d2:	d000      	beq.n	1000f7d6 <gapm_cmp_evt+0xc2>
1000f7d4:	1c2b      	adds	r3, r5, #0
1000f7d6:	7023      	strb	r3, [r4, #0]
1000f7d8:	2003      	movs	r0, #3
1000f7da:	e032      	b.n	1000f842 <gapm_cmp_evt+0x12e>
1000f7dc:	4e1b      	ldr	r6, [pc, #108]	; (1000f84c <gapm_cmp_evt+0x138>)
1000f7de:	2100      	movs	r1, #0
1000f7e0:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000f7e2:	4b1b      	ldr	r3, [pc, #108]	; (1000f850 <gapm_cmp_evt+0x13c>)
1000f7e4:	4798      	blx	r3
1000f7e6:	2807      	cmp	r0, #7
1000f7e8:	d818      	bhi.n	1000f81c <gapm_cmp_evt+0x108>
1000f7ea:	2301      	movs	r3, #1
1000f7ec:	425b      	negs	r3, r3
1000f7ee:	85b3      	strh	r3, [r6, #44]	; 0x2c
1000f7f0:	3313      	adds	r3, #19
1000f7f2:	4358      	muls	r0, r3
1000f7f4:	4917      	ldr	r1, [pc, #92]	; (1000f854 <gapm_cmp_evt+0x140>)
1000f7f6:	1809      	adds	r1, r1, r0
1000f7f8:	1c0b      	adds	r3, r1, #0
1000f7fa:	894a      	ldrh	r2, [r1, #10]
1000f7fc:	3308      	adds	r3, #8
1000f7fe:	8122      	strh	r2, [r4, #8]
1000f800:	784a      	ldrb	r2, [r1, #1]
1000f802:	72a5      	strb	r5, [r4, #10]
1000f804:	7022      	strb	r2, [r4, #0]
1000f806:	898a      	ldrh	r2, [r1, #12]
1000f808:	1c60      	adds	r0, r4, #1
1000f80a:	81a2      	strh	r2, [r4, #12]
1000f80c:	88db      	ldrh	r3, [r3, #6]
1000f80e:	3102      	adds	r1, #2
1000f810:	81e3      	strh	r3, [r4, #14]
1000f812:	89cb      	ldrh	r3, [r1, #14]
1000f814:	2206      	movs	r2, #6
1000f816:	8223      	strh	r3, [r4, #16]
1000f818:	4b0f      	ldr	r3, [pc, #60]	; (1000f858 <gapm_cmp_evt+0x144>)
1000f81a:	4798      	blx	r3
1000f81c:	2200      	movs	r2, #0
1000f81e:	7823      	ldrb	r3, [r4, #0]
1000f820:	4293      	cmp	r3, r2
1000f822:	d00a      	beq.n	1000f83a <gapm_cmp_evt+0x126>
1000f824:	79a3      	ldrb	r3, [r4, #6]
1000f826:	323f      	adds	r2, #63	; 0x3f
1000f828:	1c19      	adds	r1, r3, #0
1000f82a:	4391      	bics	r1, r2
1000f82c:	3a3e      	subs	r2, #62	; 0x3e
1000f82e:	29c0      	cmp	r1, #192	; 0xc0
1000f830:	d003      	beq.n	1000f83a <gapm_cmp_evt+0x126>
1000f832:	065b      	lsls	r3, r3, #25
1000f834:	0fdb      	lsrs	r3, r3, #31
1000f836:	3202      	adds	r2, #2
1000f838:	1ad2      	subs	r2, r2, r3
1000f83a:	7022      	strb	r2, [r4, #0]
1000f83c:	2005      	movs	r0, #5
1000f83e:	e000      	b.n	1000f842 <gapm_cmp_evt+0x12e>
1000f840:	2000      	movs	r0, #0
1000f842:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f844:	10011c75 	.word	0x10011c75
1000f848:	1000ea65 	.word	0x1000ea65
1000f84c:	10016e6e 	.word	0x10016e6e
1000f850:	1000ea29 	.word	0x1000ea29
1000f854:	10016dde 	.word	0x10016dde
1000f858:	10011c63 	.word	0x10011c63

1000f85c <gapm_start_adv_cmd_handler>:
1000f85c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f85e:	b089      	sub	sp, #36	; 0x24
1000f860:	9303      	str	r3, [sp, #12]
1000f862:	ab0e      	add	r3, sp, #56	; 0x38
1000f864:	9102      	str	r1, [sp, #8]
1000f866:	cb02      	ldmia	r3!, {r1}
1000f868:	aa08      	add	r2, sp, #32
1000f86a:	881b      	ldrh	r3, [r3, #0]
1000f86c:	4e3c      	ldr	r6, [pc, #240]	; (1000f960 <gapm_start_adv_cmd_handler+0x104>)
1000f86e:	9300      	str	r3, [sp, #0]
1000f870:	ab10      	add	r3, sp, #64	; 0x40
1000f872:	881b      	ldrh	r3, [r3, #0]
1000f874:	240d      	movs	r4, #13
1000f876:	469c      	mov	ip, r3
1000f878:	ab11      	add	r3, sp, #68	; 0x44
1000f87a:	781b      	ldrb	r3, [r3, #0]
1000f87c:	9304      	str	r3, [sp, #16]
1000f87e:	ab12      	add	r3, sp, #72	; 0x48
1000f880:	781b      	ldrb	r3, [r3, #0]
1000f882:	9305      	str	r3, [sp, #20]
1000f884:	ab13      	add	r3, sp, #76	; 0x4c
1000f886:	781b      	ldrb	r3, [r3, #0]
1000f888:	9306      	str	r3, [sp, #24]
1000f88a:	ab14      	add	r3, sp, #80	; 0x50
1000f88c:	781b      	ldrb	r3, [r3, #0]
1000f88e:	9301      	str	r3, [sp, #4]
1000f890:	2319      	movs	r3, #25
1000f892:	189b      	adds	r3, r3, r2
1000f894:	7fdd      	ldrb	r5, [r3, #31]
1000f896:	ab18      	add	r3, sp, #96	; 0x60
1000f898:	881f      	ldrh	r7, [r3, #0]
1000f89a:	ab19      	add	r3, sp, #100	; 0x64
1000f89c:	781b      	ldrb	r3, [r3, #0]
1000f89e:	8832      	ldrh	r2, [r6, #0]
1000f8a0:	9307      	str	r3, [sp, #28]
1000f8a2:	4b30      	ldr	r3, [pc, #192]	; (1000f964 <gapm_start_adv_cmd_handler+0x108>)
1000f8a4:	8836      	ldrh	r6, [r6, #0]
1000f8a6:	711a      	strb	r2, [r3, #4]
1000f8a8:	466a      	mov	r2, sp
1000f8aa:	7a12      	ldrb	r2, [r2, #8]
1000f8ac:	701c      	strb	r4, [r3, #0]
1000f8ae:	705c      	strb	r4, [r3, #1]
1000f8b0:	709c      	strb	r4, [r3, #2]
1000f8b2:	725a      	strb	r2, [r3, #9]
1000f8b4:	2400      	movs	r4, #0
1000f8b6:	466a      	mov	r2, sp
1000f8b8:	0a36      	lsrs	r6, r6, #8
1000f8ba:	70dc      	strb	r4, [r3, #3]
1000f8bc:	7218      	strb	r0, [r3, #8]
1000f8be:	729c      	strb	r4, [r3, #10]
1000f8c0:	715e      	strb	r6, [r3, #5]
1000f8c2:	72dc      	strb	r4, [r3, #11]
1000f8c4:	7812      	ldrb	r2, [r2, #0]
1000f8c6:	380e      	subs	r0, #14
1000f8c8:	731a      	strb	r2, [r3, #12]
1000f8ca:	9a00      	ldr	r2, [sp, #0]
1000f8cc:	0a14      	lsrs	r4, r2, #8
1000f8ce:	4662      	mov	r2, ip
1000f8d0:	739a      	strb	r2, [r3, #14]
1000f8d2:	4662      	mov	r2, ip
1000f8d4:	735c      	strb	r4, [r3, #13]
1000f8d6:	0a14      	lsrs	r4, r2, #8
1000f8d8:	466a      	mov	r2, sp
1000f8da:	7c12      	ldrb	r2, [r2, #16]
1000f8dc:	73dc      	strb	r4, [r3, #15]
1000f8de:	741a      	strb	r2, [r3, #16]
1000f8e0:	1c1c      	adds	r4, r3, #0
1000f8e2:	2801      	cmp	r0, #1
1000f8e4:	d809      	bhi.n	1000f8fa <gapm_start_adv_cmd_handler+0x9e>
1000f8e6:	2900      	cmp	r1, #0
1000f8e8:	d003      	beq.n	1000f8f2 <gapm_start_adv_cmd_handler+0x96>
1000f8ea:	481f      	ldr	r0, [pc, #124]	; (1000f968 <gapm_start_adv_cmd_handler+0x10c>)
1000f8ec:	2206      	movs	r2, #6
1000f8ee:	4b1f      	ldr	r3, [pc, #124]	; (1000f96c <gapm_start_adv_cmd_handler+0x110>)
1000f8f0:	4798      	blx	r3
1000f8f2:	466b      	mov	r3, sp
1000f8f4:	7b1b      	ldrb	r3, [r3, #12]
1000f8f6:	75e3      	strb	r3, [r4, #23]
1000f8f8:	e014      	b.n	1000f924 <gapm_start_adv_cmd_handler+0xc8>
1000f8fa:	466b      	mov	r3, sp
1000f8fc:	7d1b      	ldrb	r3, [r3, #20]
1000f8fe:	9915      	ldr	r1, [sp, #84]	; 0x54
1000f900:	7463      	strb	r3, [r4, #17]
1000f902:	466b      	mov	r3, sp
1000f904:	7e1b      	ldrb	r3, [r3, #24]
1000f906:	9a01      	ldr	r2, [sp, #4]
1000f908:	74a3      	strb	r3, [r4, #18]
1000f90a:	466b      	mov	r3, sp
1000f90c:	791b      	ldrb	r3, [r3, #4]
1000f90e:	4818      	ldr	r0, [pc, #96]	; (1000f970 <gapm_start_adv_cmd_handler+0x114>)
1000f910:	4e16      	ldr	r6, [pc, #88]	; (1000f96c <gapm_start_adv_cmd_handler+0x110>)
1000f912:	74e3      	strb	r3, [r4, #19]
1000f914:	47b0      	blx	r6
1000f916:	1c23      	adds	r3, r4, #0
1000f918:	4816      	ldr	r0, [pc, #88]	; (1000f974 <gapm_start_adv_cmd_handler+0x118>)
1000f91a:	3330      	adds	r3, #48	; 0x30
1000f91c:	9917      	ldr	r1, [sp, #92]	; 0x5c
1000f91e:	1c2a      	adds	r2, r5, #0
1000f920:	701d      	strb	r5, [r3, #0]
1000f922:	47b0      	blx	r6
1000f924:	1c22      	adds	r2, r4, #0
1000f926:	23a5      	movs	r3, #165	; 0xa5
1000f928:	3250      	adds	r2, #80	; 0x50
1000f92a:	7013      	strb	r3, [r2, #0]
1000f92c:	1c22      	adds	r2, r4, #0
1000f92e:	3251      	adds	r2, #81	; 0x51
1000f930:	7013      	strb	r3, [r2, #0]
1000f932:	1c23      	adds	r3, r4, #0
1000f934:	1c22      	adds	r2, r4, #0
1000f936:	3352      	adds	r3, #82	; 0x52
1000f938:	701f      	strb	r7, [r3, #0]
1000f93a:	3253      	adds	r2, #83	; 0x53
1000f93c:	0a3b      	lsrs	r3, r7, #8
1000f93e:	7013      	strb	r3, [r2, #0]
1000f940:	466a      	mov	r2, sp
1000f942:	1c23      	adds	r3, r4, #0
1000f944:	7f12      	ldrb	r2, [r2, #28]
1000f946:	3354      	adds	r3, #84	; 0x54
1000f948:	701a      	strb	r2, [r3, #0]
1000f94a:	234d      	movs	r3, #77	; 0x4d
1000f94c:	2500      	movs	r5, #0
1000f94e:	71a3      	strb	r3, [r4, #6]
1000f950:	1c20      	adds	r0, r4, #0
1000f952:	2155      	movs	r1, #85	; 0x55
1000f954:	4b08      	ldr	r3, [pc, #32]	; (1000f978 <gapm_start_adv_cmd_handler+0x11c>)
1000f956:	71e5      	strb	r5, [r4, #7]
1000f958:	4798      	blx	r3
1000f95a:	1c28      	adds	r0, r5, #0
1000f95c:	b009      	add	sp, #36	; 0x24
1000f95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f960:	10016ddc 	.word	0x10016ddc
1000f964:	1001714c 	.word	0x1001714c
1000f968:	1001715d 	.word	0x1001715d
1000f96c:	10011c63 	.word	0x10011c63
1000f970:	10017160 	.word	0x10017160
1000f974:	1001717d 	.word	0x1001717d
1000f978:	1000e859 	.word	0x1000e859

1000f97c <get_gap_local_addr_type>:
1000f97c:	4b04      	ldr	r3, [pc, #16]	; (1000f990 <get_gap_local_addr_type+0x14>)
1000f97e:	2001      	movs	r0, #1
1000f980:	791b      	ldrb	r3, [r3, #4]
1000f982:	2b02      	cmp	r3, #2
1000f984:	d003      	beq.n	1000f98e <get_gap_local_addr_type+0x12>
1000f986:	3b03      	subs	r3, #3
1000f988:	4258      	negs	r0, r3
1000f98a:	4158      	adcs	r0, r3
1000f98c:	0040      	lsls	r0, r0, #1
1000f98e:	4770      	bx	lr
1000f990:	10016e6e 	.word	0x10016e6e

1000f994 <gapm_adv_report_evt_handler>:
1000f994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f996:	7843      	ldrb	r3, [r0, #1]
1000f998:	1c05      	adds	r5, r0, #0
1000f99a:	9301      	str	r3, [sp, #4]
1000f99c:	466b      	mov	r3, sp
1000f99e:	1c0c      	adds	r4, r1, #0
1000f9a0:	791b      	ldrb	r3, [r3, #4]
1000f9a2:	7806      	ldrb	r6, [r0, #0]
1000f9a4:	2206      	movs	r2, #6
1000f9a6:	704b      	strb	r3, [r1, #1]
1000f9a8:	1c88      	adds	r0, r1, #2
1000f9aa:	4f1b      	ldr	r7, [pc, #108]	; (1000fa18 <gapm_adv_report_evt_handler+0x84>)
1000f9ac:	1ca9      	adds	r1, r5, #2
1000f9ae:	47b8      	blx	r7
1000f9b0:	1c20      	adds	r0, r4, #0
1000f9b2:	1c29      	adds	r1, r5, #0
1000f9b4:	7a2a      	ldrb	r2, [r5, #8]
1000f9b6:	3008      	adds	r0, #8
1000f9b8:	77c2      	strb	r2, [r0, #31]
1000f9ba:	3109      	adds	r1, #9
1000f9bc:	3528      	adds	r5, #40	; 0x28
1000f9be:	47b8      	blx	r7
1000f9c0:	782b      	ldrb	r3, [r5, #0]
1000f9c2:	b25a      	sxtb	r2, r3
1000f9c4:	2a00      	cmp	r2, #0
1000f9c6:	da01      	bge.n	1000f9cc <gapm_adv_report_evt_handler+0x38>
1000f9c8:	3301      	adds	r3, #1
1000f9ca:	b2db      	uxtb	r3, r3
1000f9cc:	1c22      	adds	r2, r4, #0
1000f9ce:	3228      	adds	r2, #40	; 0x28
1000f9d0:	7013      	strb	r3, [r2, #0]
1000f9d2:	2200      	movs	r2, #0
1000f9d4:	9b01      	ldr	r3, [sp, #4]
1000f9d6:	4293      	cmp	r3, r2
1000f9d8:	d00a      	beq.n	1000f9f0 <gapm_adv_report_evt_handler+0x5c>
1000f9da:	79e3      	ldrb	r3, [r4, #7]
1000f9dc:	323f      	adds	r2, #63	; 0x3f
1000f9de:	1c19      	adds	r1, r3, #0
1000f9e0:	4391      	bics	r1, r2
1000f9e2:	3a3e      	subs	r2, #62	; 0x3e
1000f9e4:	29c0      	cmp	r1, #192	; 0xc0
1000f9e6:	d003      	beq.n	1000f9f0 <gapm_adv_report_evt_handler+0x5c>
1000f9e8:	065b      	lsls	r3, r3, #25
1000f9ea:	0fdb      	lsrs	r3, r3, #31
1000f9ec:	3202      	adds	r2, #2
1000f9ee:	1ad2      	subs	r2, r2, r3
1000f9f0:	7062      	strb	r2, [r4, #1]
1000f9f2:	2e04      	cmp	r6, #4
1000f9f4:	d80f      	bhi.n	1000fa16 <gapm_adv_report_evt_handler+0x82>
1000f9f6:	1c30      	adds	r0, r6, #0
1000f9f8:	f000 fce6 	bl	100103c8 <__gnu_thumb1_case_uqi>
1000f9fc:	09070503 	.word	0x09070503
1000fa00:	0b          	.byte	0x0b
1000fa01:	00          	.byte	0x00
1000fa02:	2300      	movs	r3, #0
1000fa04:	e006      	b.n	1000fa14 <gapm_adv_report_evt_handler+0x80>
1000fa06:	2301      	movs	r3, #1
1000fa08:	e004      	b.n	1000fa14 <gapm_adv_report_evt_handler+0x80>
1000fa0a:	2302      	movs	r3, #2
1000fa0c:	e002      	b.n	1000fa14 <gapm_adv_report_evt_handler+0x80>
1000fa0e:	2303      	movs	r3, #3
1000fa10:	e000      	b.n	1000fa14 <gapm_adv_report_evt_handler+0x80>
1000fa12:	2305      	movs	r3, #5
1000fa14:	7023      	strb	r3, [r4, #0]
1000fa16:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fa18:	10011c63 	.word	0x10011c63

1000fa1c <gapm_resolv_addr_cmd_handler>:
1000fa1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa1e:	2314      	movs	r3, #20
1000fa20:	4c12      	ldr	r4, [pc, #72]	; (1000fa6c <gapm_resolv_addr_cmd_handler+0x50>)
1000fa22:	1c17      	adds	r7, r2, #0
1000fa24:	7023      	strb	r3, [r4, #0]
1000fa26:	3b07      	subs	r3, #7
1000fa28:	7063      	strb	r3, [r4, #1]
1000fa2a:	70a3      	strb	r3, [r4, #2]
1000fa2c:	2300      	movs	r3, #0
1000fa2e:	70e3      	strb	r3, [r4, #3]
1000fa30:	4b0f      	ldr	r3, [pc, #60]	; (1000fa70 <gapm_resolv_addr_cmd_handler+0x54>)
1000fa32:	1c05      	adds	r5, r0, #0
1000fa34:	881a      	ldrh	r2, [r3, #0]
1000fa36:	881b      	ldrh	r3, [r3, #0]
1000fa38:	4e0e      	ldr	r6, [pc, #56]	; (1000fa74 <gapm_resolv_addr_cmd_handler+0x58>)
1000fa3a:	0a1b      	lsrs	r3, r3, #8
1000fa3c:	7163      	strb	r3, [r4, #5]
1000fa3e:	2317      	movs	r3, #23
1000fa40:	012d      	lsls	r5, r5, #4
1000fa42:	7122      	strb	r2, [r4, #4]
1000fa44:	7260      	strb	r0, [r4, #9]
1000fa46:	2206      	movs	r2, #6
1000fa48:	480b      	ldr	r0, [pc, #44]	; (1000fa78 <gapm_resolv_addr_cmd_handler+0x5c>)
1000fa4a:	7223      	strb	r3, [r4, #8]
1000fa4c:	47b0      	blx	r6
1000fa4e:	1c39      	adds	r1, r7, #0
1000fa50:	1c2a      	adds	r2, r5, #0
1000fa52:	480a      	ldr	r0, [pc, #40]	; (1000fa7c <gapm_resolv_addr_cmd_handler+0x60>)
1000fa54:	47b0      	blx	r6
1000fa56:	1c29      	adds	r1, r5, #0
1000fa58:	3110      	adds	r1, #16
1000fa5a:	1c0b      	adds	r3, r1, #0
1000fa5c:	3b08      	subs	r3, #8
1000fa5e:	71a3      	strb	r3, [r4, #6]
1000fa60:	121b      	asrs	r3, r3, #8
1000fa62:	71e3      	strb	r3, [r4, #7]
1000fa64:	1c20      	adds	r0, r4, #0
1000fa66:	4b06      	ldr	r3, [pc, #24]	; (1000fa80 <gapm_resolv_addr_cmd_handler+0x64>)
1000fa68:	4798      	blx	r3
1000fa6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fa6c:	1001714c 	.word	0x1001714c
1000fa70:	10016ddc 	.word	0x10016ddc
1000fa74:	10011c63 	.word	0x10011c63
1000fa78:	10017156 	.word	0x10017156
1000fa7c:	1001715c 	.word	0x1001715c
1000fa80:	1000e859 	.word	0x1000e859

1000fa84 <gapm_addr_solved_ind_handler>:
1000fa84:	b570      	push	{r4, r5, r6, lr}
1000fa86:	1c04      	adds	r4, r0, #0
1000fa88:	1c08      	adds	r0, r1, #0
1000fa8a:	1c0d      	adds	r5, r1, #0
1000fa8c:	4e05      	ldr	r6, [pc, #20]	; (1000faa4 <gapm_addr_solved_ind_handler+0x20>)
1000fa8e:	1c21      	adds	r1, r4, #0
1000fa90:	2206      	movs	r2, #6
1000fa92:	3011      	adds	r0, #17
1000fa94:	47b0      	blx	r6
1000fa96:	1c68      	adds	r0, r5, #1
1000fa98:	1da1      	adds	r1, r4, #6
1000fa9a:	2210      	movs	r2, #16
1000fa9c:	47b0      	blx	r6
1000fa9e:	2300      	movs	r3, #0
1000faa0:	702b      	strb	r3, [r5, #0]
1000faa2:	bd70      	pop	{r4, r5, r6, pc}
1000faa4:	10011c63 	.word	0x10011c63

1000faa8 <gapm_profile_task_add_cmd_handler>:
1000faa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000faaa:	4684      	mov	ip, r0
1000faac:	a808      	add	r0, sp, #32
1000faae:	c810      	ldmia	r0!, {r4}
1000fab0:	2500      	movs	r5, #0
1000fab2:	8807      	ldrh	r7, [r0, #0]
1000fab4:	4668      	mov	r0, sp
1000fab6:	1d86      	adds	r6, r0, #6
1000fab8:	7185      	strb	r5, [r0, #6]
1000faba:	201b      	movs	r0, #27
1000fabc:	4c2b      	ldr	r4, [pc, #172]	; (1000fb6c <gapm_profile_task_add_cmd_handler+0xc4>)
1000fabe:	7020      	strb	r0, [r4, #0]
1000fac0:	200d      	movs	r0, #13
1000fac2:	7060      	strb	r0, [r4, #1]
1000fac4:	200d      	movs	r0, #13
1000fac6:	70e5      	strb	r5, [r4, #3]
1000fac8:	4d29      	ldr	r5, [pc, #164]	; (1000fb70 <gapm_profile_task_add_cmd_handler+0xc8>)
1000faca:	70a0      	strb	r0, [r4, #2]
1000facc:	8828      	ldrh	r0, [r5, #0]
1000face:	882d      	ldrh	r5, [r5, #0]
1000fad0:	7120      	strb	r0, [r4, #4]
1000fad2:	201b      	movs	r0, #27
1000fad4:	7220      	strb	r0, [r4, #8]
1000fad6:	4660      	mov	r0, ip
1000fad8:	72a1      	strb	r1, [r4, #10]
1000fada:	7322      	strb	r2, [r4, #12]
1000fadc:	73a3      	strb	r3, [r4, #14]
1000fade:	0a09      	lsrs	r1, r1, #8
1000fae0:	0a12      	lsrs	r2, r2, #8
1000fae2:	0a1b      	lsrs	r3, r3, #8
1000fae4:	7260      	strb	r0, [r4, #9]
1000fae6:	72e1      	strb	r1, [r4, #11]
1000fae8:	7362      	strb	r2, [r4, #13]
1000faea:	73e3      	strb	r3, [r4, #15]
1000faec:	1c3a      	adds	r2, r7, #0
1000faee:	0a2d      	lsrs	r5, r5, #8
1000faf0:	9908      	ldr	r1, [sp, #32]
1000faf2:	4b20      	ldr	r3, [pc, #128]	; (1000fb74 <gapm_profile_task_add_cmd_handler+0xcc>)
1000faf4:	4820      	ldr	r0, [pc, #128]	; (1000fb78 <gapm_profile_task_add_cmd_handler+0xd0>)
1000faf6:	7165      	strb	r5, [r4, #5]
1000faf8:	4798      	blx	r3
1000fafa:	4d20      	ldr	r5, [pc, #128]	; (1000fb7c <gapm_profile_task_add_cmd_handler+0xd4>)
1000fafc:	1c39      	adds	r1, r7, #0
1000fafe:	4b20      	ldr	r3, [pc, #128]	; (1000fb80 <gapm_profile_task_add_cmd_handler+0xd8>)
1000fb00:	3110      	adds	r1, #16
1000fb02:	802b      	strh	r3, [r5, #0]
1000fb04:	230d      	movs	r3, #13
1000fb06:	b289      	uxth	r1, r1
1000fb08:	80ab      	strh	r3, [r5, #4]
1000fb0a:	1c0b      	adds	r3, r1, #0
1000fb0c:	27d0      	movs	r7, #208	; 0xd0
1000fb0e:	3b08      	subs	r3, #8
1000fb10:	71a3      	strb	r3, [r4, #6]
1000fb12:	121b      	asrs	r3, r3, #8
1000fb14:	71e3      	strb	r3, [r4, #7]
1000fb16:	1c20      	adds	r0, r4, #0
1000fb18:	4b1a      	ldr	r3, [pc, #104]	; (1000fb84 <gapm_profile_task_add_cmd_handler+0xdc>)
1000fb1a:	013f      	lsls	r7, r7, #4
1000fb1c:	806f      	strh	r7, [r5, #2]
1000fb1e:	4798      	blx	r3
1000fb20:	1c30      	adds	r0, r6, #0
1000fb22:	4c19      	ldr	r4, [pc, #100]	; (1000fb88 <gapm_profile_task_add_cmd_handler+0xe0>)
1000fb24:	47a0      	blx	r4
1000fb26:	7831      	ldrb	r1, [r6, #0]
1000fb28:	20e2      	movs	r0, #226	; 0xe2
1000fb2a:	2900      	cmp	r1, #0
1000fb2c:	d11d      	bne.n	1000fb6a <gapm_profile_task_add_cmd_handler+0xc2>
1000fb2e:	2301      	movs	r3, #1
1000fb30:	882e      	ldrh	r6, [r5, #0]
1000fb32:	4816      	ldr	r0, [pc, #88]	; (1000fb8c <gapm_profile_task_add_cmd_handler+0xe4>)
1000fb34:	68aa      	ldr	r2, [r5, #8]
1000fb36:	425b      	negs	r3, r3
1000fb38:	4286      	cmp	r6, r0
1000fb3a:	d001      	beq.n	1000fb40 <gapm_profile_task_add_cmd_handler+0x98>
1000fb3c:	802b      	strh	r3, [r5, #0]
1000fb3e:	e013      	b.n	1000fb68 <gapm_profile_task_add_cmd_handler+0xc0>
1000fb40:	806b      	strh	r3, [r5, #2]
1000fb42:	7953      	ldrb	r3, [r2, #5]
1000fb44:	7912      	ldrb	r2, [r2, #4]
1000fb46:	021b      	lsls	r3, r3, #8
1000fb48:	4313      	orrs	r3, r2
1000fb4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000fb4c:	8013      	strh	r3, [r2, #0]
1000fb4e:	230d      	movs	r3, #13
1000fb50:	80ab      	strh	r3, [r5, #4]
1000fb52:	466b      	mov	r3, sp
1000fb54:	1dde      	adds	r6, r3, #7
1000fb56:	1c30      	adds	r0, r6, #0
1000fb58:	71d9      	strb	r1, [r3, #7]
1000fb5a:	802f      	strh	r7, [r5, #0]
1000fb5c:	47a0      	blx	r4
1000fb5e:	7833      	ldrb	r3, [r6, #0]
1000fb60:	20d0      	movs	r0, #208	; 0xd0
1000fb62:	2b00      	cmp	r3, #0
1000fb64:	d101      	bne.n	1000fb6a <gapm_profile_task_add_cmd_handler+0xc2>
1000fb66:	68aa      	ldr	r2, [r5, #8]
1000fb68:	7850      	ldrb	r0, [r2, #1]
1000fb6a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fb6c:	1001714c 	.word	0x1001714c
1000fb70:	10016ddc 	.word	0x10016ddc
1000fb74:	10011c63 	.word	0x10011c63
1000fb78:	1001715c 	.word	0x1001715c
1000fb7c:	10016dd0 	.word	0x10016dd0
1000fb80:	00000d1c 	.word	0x00000d1c
1000fb84:	1000e859 	.word	0x1000e859
1000fb88:	1000e8bd 	.word	0x1000e8bd
1000fb8c:	0000ffff 	.word	0x0000ffff

1000fb90 <gapm_profile_added_ind_handler>:
1000fb90:	b510      	push	{r4, lr}
1000fb92:	7843      	ldrb	r3, [r0, #1]
1000fb94:	7902      	ldrb	r2, [r0, #4]
1000fb96:	7944      	ldrb	r4, [r0, #5]
1000fb98:	7800      	ldrb	r0, [r0, #0]
1000fb9a:	021b      	lsls	r3, r3, #8
1000fb9c:	4303      	orrs	r3, r0
1000fb9e:	2b1b      	cmp	r3, #27
1000fba0:	d104      	bne.n	1000fbac <gapm_profile_added_ind_handler+0x1c>
1000fba2:	2300      	movs	r3, #0
1000fba4:	700b      	strb	r3, [r1, #0]
1000fba6:	0223      	lsls	r3, r4, #8
1000fba8:	4313      	orrs	r3, r2
1000fbaa:	804b      	strh	r3, [r1, #2]
1000fbac:	203b      	movs	r0, #59	; 0x3b
1000fbae:	bd10      	pop	{r4, pc}

1000fbb0 <gattc_read_req_ind_parser>:
1000fbb0:	7843      	ldrb	r3, [r0, #1]
1000fbb2:	7802      	ldrb	r2, [r0, #0]
1000fbb4:	021b      	lsls	r3, r3, #8
1000fbb6:	4313      	orrs	r3, r2
1000fbb8:	804b      	strh	r3, [r1, #2]
1000fbba:	4770      	bx	lr

1000fbbc <gattc_write_req_ind_parser>:
1000fbbc:	b508      	push	{r3, lr}
1000fbbe:	1c13      	adds	r3, r2, #0
1000fbc0:	0a00      	lsrs	r0, r0, #8
1000fbc2:	8010      	strh	r0, [r2, #0]
1000fbc4:	784a      	ldrb	r2, [r1, #1]
1000fbc6:	7808      	ldrb	r0, [r1, #0]
1000fbc8:	0212      	lsls	r2, r2, #8
1000fbca:	4302      	orrs	r2, r0
1000fbcc:	805a      	strh	r2, [r3, #2]
1000fbce:	78ca      	ldrb	r2, [r1, #3]
1000fbd0:	7888      	ldrb	r0, [r1, #2]
1000fbd2:	0212      	lsls	r2, r2, #8
1000fbd4:	4302      	orrs	r2, r0
1000fbd6:	809a      	strh	r2, [r3, #4]
1000fbd8:	794a      	ldrb	r2, [r1, #5]
1000fbda:	7908      	ldrb	r0, [r1, #4]
1000fbdc:	0212      	lsls	r2, r2, #8
1000fbde:	4302      	orrs	r2, r0
1000fbe0:	80da      	strh	r2, [r3, #6]
1000fbe2:	3308      	adds	r3, #8
1000fbe4:	1c18      	adds	r0, r3, #0
1000fbe6:	3106      	adds	r1, #6
1000fbe8:	4b01      	ldr	r3, [pc, #4]	; (1000fbf0 <gattc_write_req_ind_parser+0x34>)
1000fbea:	4798      	blx	r3
1000fbec:	bd08      	pop	{r3, pc}
1000fbee:	46c0      	nop			; (mov r8, r8)
1000fbf0:	10011c63 	.word	0x10011c63

1000fbf4 <gattc_att_info_req_parser>:
1000fbf4:	7843      	ldrb	r3, [r0, #1]
1000fbf6:	7802      	ldrb	r2, [r0, #0]
1000fbf8:	021b      	lsls	r3, r3, #8
1000fbfa:	4313      	orrs	r3, r2
1000fbfc:	800b      	strh	r3, [r1, #0]
1000fbfe:	4770      	bx	lr

1000fc00 <gattc_read_cfm>:
1000fc00:	b538      	push	{r3, r4, r5, lr}
1000fc02:	2514      	movs	r5, #20
1000fc04:	1c1c      	adds	r4, r3, #0
1000fc06:	4b14      	ldr	r3, [pc, #80]	; (1000fc58 <gattc_read_cfm+0x58>)
1000fc08:	70d9      	strb	r1, [r3, #3]
1000fc0a:	4914      	ldr	r1, [pc, #80]	; (1000fc5c <gattc_read_cfm+0x5c>)
1000fc0c:	701d      	strb	r5, [r3, #0]
1000fc0e:	3d08      	subs	r5, #8
1000fc10:	705d      	strb	r5, [r3, #1]
1000fc12:	709d      	strb	r5, [r3, #2]
1000fc14:	880d      	ldrh	r5, [r1, #0]
1000fc16:	8809      	ldrh	r1, [r1, #0]
1000fc18:	7218      	strb	r0, [r3, #8]
1000fc1a:	0a09      	lsrs	r1, r1, #8
1000fc1c:	7159      	strb	r1, [r3, #5]
1000fc1e:	0a00      	lsrs	r0, r0, #8
1000fc20:	0a21      	lsrs	r1, r4, #8
1000fc22:	711d      	strb	r5, [r3, #4]
1000fc24:	7258      	strb	r0, [r3, #9]
1000fc26:	729c      	strb	r4, [r3, #10]
1000fc28:	72d9      	strb	r1, [r3, #11]
1000fc2a:	731a      	strb	r2, [r3, #12]
1000fc2c:	1c1d      	adds	r5, r3, #0
1000fc2e:	2c00      	cmp	r4, #0
1000fc30:	d007      	beq.n	1000fc42 <gattc_read_cfm+0x42>
1000fc32:	9904      	ldr	r1, [sp, #16]
1000fc34:	1c22      	adds	r2, r4, #0
1000fc36:	480a      	ldr	r0, [pc, #40]	; (1000fc60 <gattc_read_cfm+0x60>)
1000fc38:	4b0a      	ldr	r3, [pc, #40]	; (1000fc64 <gattc_read_cfm+0x64>)
1000fc3a:	340d      	adds	r4, #13
1000fc3c:	4798      	blx	r3
1000fc3e:	b2a1      	uxth	r1, r4
1000fc40:	e001      	b.n	1000fc46 <gattc_read_cfm+0x46>
1000fc42:	210e      	movs	r1, #14
1000fc44:	735c      	strb	r4, [r3, #13]
1000fc46:	1c0b      	adds	r3, r1, #0
1000fc48:	3b08      	subs	r3, #8
1000fc4a:	71ab      	strb	r3, [r5, #6]
1000fc4c:	121b      	asrs	r3, r3, #8
1000fc4e:	71eb      	strb	r3, [r5, #7]
1000fc50:	1c28      	adds	r0, r5, #0
1000fc52:	4b05      	ldr	r3, [pc, #20]	; (1000fc68 <gattc_read_cfm+0x68>)
1000fc54:	4798      	blx	r3
1000fc56:	bd38      	pop	{r3, r4, r5, pc}
1000fc58:	1001714c 	.word	0x1001714c
1000fc5c:	10016ddc 	.word	0x10016ddc
1000fc60:	10017159 	.word	0x10017159
1000fc64:	10011c63 	.word	0x10011c63
1000fc68:	1000e859 	.word	0x1000e859

1000fc6c <gattc_write_cfm>:
1000fc6c:	4b0d      	ldr	r3, [pc, #52]	; (1000fca4 <gattc_write_cfm+0x38>)
1000fc6e:	b510      	push	{r4, lr}
1000fc70:	729a      	strb	r2, [r3, #10]
1000fc72:	2203      	movs	r2, #3
1000fc74:	2416      	movs	r4, #22
1000fc76:	719a      	strb	r2, [r3, #6]
1000fc78:	2200      	movs	r2, #0
1000fc7a:	70d9      	strb	r1, [r3, #3]
1000fc7c:	490a      	ldr	r1, [pc, #40]	; (1000fca8 <gattc_write_cfm+0x3c>)
1000fc7e:	701c      	strb	r4, [r3, #0]
1000fc80:	3c0a      	subs	r4, #10
1000fc82:	705c      	strb	r4, [r3, #1]
1000fc84:	709c      	strb	r4, [r3, #2]
1000fc86:	880c      	ldrh	r4, [r1, #0]
1000fc88:	8809      	ldrh	r1, [r1, #0]
1000fc8a:	7218      	strb	r0, [r3, #8]
1000fc8c:	0a09      	lsrs	r1, r1, #8
1000fc8e:	0a00      	lsrs	r0, r0, #8
1000fc90:	711c      	strb	r4, [r3, #4]
1000fc92:	7159      	strb	r1, [r3, #5]
1000fc94:	7258      	strb	r0, [r3, #9]
1000fc96:	71da      	strb	r2, [r3, #7]
1000fc98:	1c18      	adds	r0, r3, #0
1000fc9a:	210b      	movs	r1, #11
1000fc9c:	4b03      	ldr	r3, [pc, #12]	; (1000fcac <gattc_write_cfm+0x40>)
1000fc9e:	4798      	blx	r3
1000fca0:	bd10      	pop	{r4, pc}
1000fca2:	46c0      	nop			; (mov r8, r8)
1000fca4:	1001714c 	.word	0x1001714c
1000fca8:	10016ddc 	.word	0x10016ddc
1000fcac:	1000e859 	.word	0x1000e859

1000fcb0 <gattc_att_info_cfm>:
1000fcb0:	b538      	push	{r3, r4, r5, lr}
1000fcb2:	4c0e      	ldr	r4, [pc, #56]	; (1000fcec <gattc_att_info_cfm+0x3c>)
1000fcb4:	2518      	movs	r5, #24
1000fcb6:	7323      	strb	r3, [r4, #12]
1000fcb8:	2305      	movs	r3, #5
1000fcba:	71a3      	strb	r3, [r4, #6]
1000fcbc:	2300      	movs	r3, #0
1000fcbe:	70e1      	strb	r1, [r4, #3]
1000fcc0:	490b      	ldr	r1, [pc, #44]	; (1000fcf0 <gattc_att_info_cfm+0x40>)
1000fcc2:	7025      	strb	r5, [r4, #0]
1000fcc4:	3d0c      	subs	r5, #12
1000fcc6:	7065      	strb	r5, [r4, #1]
1000fcc8:	70a5      	strb	r5, [r4, #2]
1000fcca:	880d      	ldrh	r5, [r1, #0]
1000fccc:	8809      	ldrh	r1, [r1, #0]
1000fcce:	7220      	strb	r0, [r4, #8]
1000fcd0:	0a09      	lsrs	r1, r1, #8
1000fcd2:	0a00      	lsrs	r0, r0, #8
1000fcd4:	7161      	strb	r1, [r4, #5]
1000fcd6:	7260      	strb	r0, [r4, #9]
1000fcd8:	72a2      	strb	r2, [r4, #10]
1000fcda:	71e3      	strb	r3, [r4, #7]
1000fcdc:	0a12      	lsrs	r2, r2, #8
1000fcde:	1c20      	adds	r0, r4, #0
1000fce0:	210d      	movs	r1, #13
1000fce2:	4b04      	ldr	r3, [pc, #16]	; (1000fcf4 <gattc_att_info_cfm+0x44>)
1000fce4:	7125      	strb	r5, [r4, #4]
1000fce6:	72e2      	strb	r2, [r4, #11]
1000fce8:	4798      	blx	r3
1000fcea:	bd38      	pop	{r3, r4, r5, pc}
1000fcec:	1001714c 	.word	0x1001714c
1000fcf0:	10016ddc 	.word	0x10016ddc
1000fcf4:	1000e859 	.word	0x1000e859

1000fcf8 <gattc_send_evt_cmd_handler>:
1000fcf8:	b570      	push	{r4, r5, r6, lr}
1000fcfa:	2610      	movs	r6, #16
1000fcfc:	ac04      	add	r4, sp, #16
1000fcfe:	8825      	ldrh	r5, [r4, #0]
1000fd00:	4c15      	ldr	r4, [pc, #84]	; (1000fd58 <gattc_send_evt_cmd_handler+0x60>)
1000fd02:	70e2      	strb	r2, [r4, #3]
1000fd04:	4a15      	ldr	r2, [pc, #84]	; (1000fd5c <gattc_send_evt_cmd_handler+0x64>)
1000fd06:	7026      	strb	r6, [r4, #0]
1000fd08:	3e04      	subs	r6, #4
1000fd0a:	7066      	strb	r6, [r4, #1]
1000fd0c:	70a6      	strb	r6, [r4, #2]
1000fd0e:	8816      	ldrh	r6, [r2, #0]
1000fd10:	8812      	ldrh	r2, [r2, #0]
1000fd12:	7220      	strb	r0, [r4, #8]
1000fd14:	0a12      	lsrs	r2, r2, #8
1000fd16:	7162      	strb	r2, [r4, #5]
1000fd18:	4a11      	ldr	r2, [pc, #68]	; (1000fd60 <gattc_send_evt_cmd_handler+0x68>)
1000fd1a:	7321      	strb	r1, [r4, #12]
1000fd1c:	8812      	ldrh	r2, [r2, #0]
1000fd1e:	73a5      	strb	r5, [r4, #14]
1000fd20:	3201      	adds	r2, #1
1000fd22:	7262      	strb	r2, [r4, #9]
1000fd24:	1212      	asrs	r2, r2, #8
1000fd26:	72a2      	strb	r2, [r4, #10]
1000fd28:	2200      	movs	r2, #0
1000fd2a:	72e2      	strb	r2, [r4, #11]
1000fd2c:	0a0a      	lsrs	r2, r1, #8
1000fd2e:	7362      	strb	r2, [r4, #13]
1000fd30:	0a2a      	lsrs	r2, r5, #8
1000fd32:	73e2      	strb	r2, [r4, #15]
1000fd34:	1c19      	adds	r1, r3, #0
1000fd36:	1c2a      	adds	r2, r5, #0
1000fd38:	4b0a      	ldr	r3, [pc, #40]	; (1000fd64 <gattc_send_evt_cmd_handler+0x6c>)
1000fd3a:	3510      	adds	r5, #16
1000fd3c:	480a      	ldr	r0, [pc, #40]	; (1000fd68 <gattc_send_evt_cmd_handler+0x70>)
1000fd3e:	7126      	strb	r6, [r4, #4]
1000fd40:	4798      	blx	r3
1000fd42:	b2a9      	uxth	r1, r5
1000fd44:	1c0b      	adds	r3, r1, #0
1000fd46:	3b08      	subs	r3, #8
1000fd48:	71a3      	strb	r3, [r4, #6]
1000fd4a:	121b      	asrs	r3, r3, #8
1000fd4c:	71e3      	strb	r3, [r4, #7]
1000fd4e:	1c20      	adds	r0, r4, #0
1000fd50:	4b06      	ldr	r3, [pc, #24]	; (1000fd6c <gattc_send_evt_cmd_handler+0x74>)
1000fd52:	4798      	blx	r3
1000fd54:	bd70      	pop	{r4, r5, r6, pc}
1000fd56:	46c0      	nop			; (mov r8, r8)
1000fd58:	1001714c 	.word	0x1001714c
1000fd5c:	10016ddc 	.word	0x10016ddc
1000fd60:	10015d04 	.word	0x10015d04
1000fd64:	10011c63 	.word	0x10011c63
1000fd68:	1001715c 	.word	0x1001715c
1000fd6c:	1000e859 	.word	0x1000e859

1000fd70 <gattc_event_cfm_handler>:
1000fd70:	220e      	movs	r2, #14
1000fd72:	b508      	push	{r3, lr}
1000fd74:	4b0b      	ldr	r3, [pc, #44]	; (1000fda4 <gattc_event_cfm_handler+0x34>)
1000fd76:	701a      	strb	r2, [r3, #0]
1000fd78:	3a02      	subs	r2, #2
1000fd7a:	705a      	strb	r2, [r3, #1]
1000fd7c:	709a      	strb	r2, [r3, #2]
1000fd7e:	4a0a      	ldr	r2, [pc, #40]	; (1000fda8 <gattc_event_cfm_handler+0x38>)
1000fd80:	70d8      	strb	r0, [r3, #3]
1000fd82:	8810      	ldrh	r0, [r2, #0]
1000fd84:	8812      	ldrh	r2, [r2, #0]
1000fd86:	7219      	strb	r1, [r3, #8]
1000fd88:	0a12      	lsrs	r2, r2, #8
1000fd8a:	715a      	strb	r2, [r3, #5]
1000fd8c:	2202      	movs	r2, #2
1000fd8e:	719a      	strb	r2, [r3, #6]
1000fd90:	2200      	movs	r2, #0
1000fd92:	0a09      	lsrs	r1, r1, #8
1000fd94:	7118      	strb	r0, [r3, #4]
1000fd96:	7259      	strb	r1, [r3, #9]
1000fd98:	71da      	strb	r2, [r3, #7]
1000fd9a:	1c18      	adds	r0, r3, #0
1000fd9c:	210a      	movs	r1, #10
1000fd9e:	4b03      	ldr	r3, [pc, #12]	; (1000fdac <gattc_event_cfm_handler+0x3c>)
1000fda0:	4798      	blx	r3
1000fda2:	bd08      	pop	{r3, pc}
1000fda4:	1001714c 	.word	0x1001714c
1000fda8:	10016ddc 	.word	0x10016ddc
1000fdac:	1000e859 	.word	0x1000e859

1000fdb0 <gattc_disc_svc_ind_parser>:
1000fdb0:	b570      	push	{r4, r5, r6, lr}
1000fdb2:	1c15      	adds	r5, r2, #0
1000fdb4:	0a00      	lsrs	r0, r0, #8
1000fdb6:	8010      	strh	r0, [r2, #0]
1000fdb8:	784b      	ldrb	r3, [r1, #1]
1000fdba:	780a      	ldrb	r2, [r1, #0]
1000fdbc:	021b      	lsls	r3, r3, #8
1000fdbe:	4313      	orrs	r3, r2
1000fdc0:	806b      	strh	r3, [r5, #2]
1000fdc2:	78cb      	ldrb	r3, [r1, #3]
1000fdc4:	788a      	ldrb	r2, [r1, #2]
1000fdc6:	021b      	lsls	r3, r3, #8
1000fdc8:	4313      	orrs	r3, r2
1000fdca:	80ab      	strh	r3, [r5, #4]
1000fdcc:	790e      	ldrb	r6, [r1, #4]
1000fdce:	4b05      	ldr	r3, [pc, #20]	; (1000fde4 <gattc_disc_svc_ind_parser+0x34>)
1000fdd0:	1c30      	adds	r0, r6, #0
1000fdd2:	1c0c      	adds	r4, r1, #0
1000fdd4:	4798      	blx	r3
1000fdd6:	1c32      	adds	r2, r6, #0
1000fdd8:	71a8      	strb	r0, [r5, #6]
1000fdda:	1d61      	adds	r1, r4, #5
1000fddc:	1de8      	adds	r0, r5, #7
1000fdde:	4b02      	ldr	r3, [pc, #8]	; (1000fde8 <gattc_disc_svc_ind_parser+0x38>)
1000fde0:	4798      	blx	r3
1000fde2:	bd70      	pop	{r4, r5, r6, pc}
1000fde4:	1000db51 	.word	0x1000db51
1000fde8:	10011c63 	.word	0x10011c63

1000fdec <gattc_disc_svc_incl_ind_parser>:
1000fdec:	b570      	push	{r4, r5, r6, lr}
1000fdee:	1c15      	adds	r5, r2, #0
1000fdf0:	0a00      	lsrs	r0, r0, #8
1000fdf2:	8010      	strh	r0, [r2, #0]
1000fdf4:	784b      	ldrb	r3, [r1, #1]
1000fdf6:	780a      	ldrb	r2, [r1, #0]
1000fdf8:	021b      	lsls	r3, r3, #8
1000fdfa:	4313      	orrs	r3, r2
1000fdfc:	806b      	strh	r3, [r5, #2]
1000fdfe:	78cb      	ldrb	r3, [r1, #3]
1000fe00:	788a      	ldrb	r2, [r1, #2]
1000fe02:	021b      	lsls	r3, r3, #8
1000fe04:	4313      	orrs	r3, r2
1000fe06:	80ab      	strh	r3, [r5, #4]
1000fe08:	794b      	ldrb	r3, [r1, #5]
1000fe0a:	790a      	ldrb	r2, [r1, #4]
1000fe0c:	021b      	lsls	r3, r3, #8
1000fe0e:	4313      	orrs	r3, r2
1000fe10:	80eb      	strh	r3, [r5, #6]
1000fe12:	798e      	ldrb	r6, [r1, #6]
1000fe14:	4b05      	ldr	r3, [pc, #20]	; (1000fe2c <gattc_disc_svc_incl_ind_parser+0x40>)
1000fe16:	1c30      	adds	r0, r6, #0
1000fe18:	1c0c      	adds	r4, r1, #0
1000fe1a:	4798      	blx	r3
1000fe1c:	7228      	strb	r0, [r5, #8]
1000fe1e:	1c28      	adds	r0, r5, #0
1000fe20:	1c32      	adds	r2, r6, #0
1000fe22:	1de1      	adds	r1, r4, #7
1000fe24:	4b02      	ldr	r3, [pc, #8]	; (1000fe30 <gattc_disc_svc_incl_ind_parser+0x44>)
1000fe26:	3009      	adds	r0, #9
1000fe28:	4798      	blx	r3
1000fe2a:	bd70      	pop	{r4, r5, r6, pc}
1000fe2c:	1000db51 	.word	0x1000db51
1000fe30:	10011c63 	.word	0x10011c63

1000fe34 <gattc_disc_char_ind_parser>:
1000fe34:	b570      	push	{r4, r5, r6, lr}
1000fe36:	1c15      	adds	r5, r2, #0
1000fe38:	0a00      	lsrs	r0, r0, #8
1000fe3a:	8010      	strh	r0, [r2, #0]
1000fe3c:	784b      	ldrb	r3, [r1, #1]
1000fe3e:	780a      	ldrb	r2, [r1, #0]
1000fe40:	021b      	lsls	r3, r3, #8
1000fe42:	4313      	orrs	r3, r2
1000fe44:	806b      	strh	r3, [r5, #2]
1000fe46:	78cb      	ldrb	r3, [r1, #3]
1000fe48:	788a      	ldrb	r2, [r1, #2]
1000fe4a:	021b      	lsls	r3, r3, #8
1000fe4c:	4313      	orrs	r3, r2
1000fe4e:	80ab      	strh	r3, [r5, #4]
1000fe50:	790b      	ldrb	r3, [r1, #4]
1000fe52:	1c0c      	adds	r4, r1, #0
1000fe54:	71ab      	strb	r3, [r5, #6]
1000fe56:	794e      	ldrb	r6, [r1, #5]
1000fe58:	4b05      	ldr	r3, [pc, #20]	; (1000fe70 <gattc_disc_char_ind_parser+0x3c>)
1000fe5a:	1c30      	adds	r0, r6, #0
1000fe5c:	4798      	blx	r3
1000fe5e:	71e8      	strb	r0, [r5, #7]
1000fe60:	1c28      	adds	r0, r5, #0
1000fe62:	1c32      	adds	r2, r6, #0
1000fe64:	1da1      	adds	r1, r4, #6
1000fe66:	4b03      	ldr	r3, [pc, #12]	; (1000fe74 <gattc_disc_char_ind_parser+0x40>)
1000fe68:	3008      	adds	r0, #8
1000fe6a:	4798      	blx	r3
1000fe6c:	bd70      	pop	{r4, r5, r6, pc}
1000fe6e:	46c0      	nop			; (mov r8, r8)
1000fe70:	1000db51 	.word	0x1000db51
1000fe74:	10011c63 	.word	0x10011c63

1000fe78 <gattc_disc_char_desc_ind_parser>:
1000fe78:	b570      	push	{r4, r5, r6, lr}
1000fe7a:	1c15      	adds	r5, r2, #0
1000fe7c:	0a00      	lsrs	r0, r0, #8
1000fe7e:	8010      	strh	r0, [r2, #0]
1000fe80:	784b      	ldrb	r3, [r1, #1]
1000fe82:	780a      	ldrb	r2, [r1, #0]
1000fe84:	021b      	lsls	r3, r3, #8
1000fe86:	4313      	orrs	r3, r2
1000fe88:	806b      	strh	r3, [r5, #2]
1000fe8a:	788e      	ldrb	r6, [r1, #2]
1000fe8c:	4b05      	ldr	r3, [pc, #20]	; (1000fea4 <gattc_disc_char_desc_ind_parser+0x2c>)
1000fe8e:	1c30      	adds	r0, r6, #0
1000fe90:	1c0c      	adds	r4, r1, #0
1000fe92:	4798      	blx	r3
1000fe94:	1c32      	adds	r2, r6, #0
1000fe96:	7128      	strb	r0, [r5, #4]
1000fe98:	1ce1      	adds	r1, r4, #3
1000fe9a:	1d68      	adds	r0, r5, #5
1000fe9c:	4b02      	ldr	r3, [pc, #8]	; (1000fea8 <gattc_disc_char_desc_ind_parser+0x30>)
1000fe9e:	4798      	blx	r3
1000fea0:	bd70      	pop	{r4, r5, r6, pc}
1000fea2:	46c0      	nop			; (mov r8, r8)
1000fea4:	1000db51 	.word	0x1000db51
1000fea8:	10011c63 	.word	0x10011c63

1000feac <gattc_event_ind_and_notification_parser>:
1000feac:	b510      	push	{r4, lr}
1000feae:	780c      	ldrb	r4, [r1, #0]
1000feb0:	1c13      	adds	r3, r2, #0
1000feb2:	2c12      	cmp	r4, #18
1000feb4:	d10e      	bne.n	1000fed4 <gattc_event_ind_and_notification_parser+0x28>
1000feb6:	0a00      	lsrs	r0, r0, #8
1000feb8:	8010      	strh	r0, [r2, #0]
1000feba:	788a      	ldrb	r2, [r1, #2]
1000febc:	709a      	strb	r2, [r3, #2]
1000febe:	7948      	ldrb	r0, [r1, #5]
1000fec0:	790c      	ldrb	r4, [r1, #4]
1000fec2:	0200      	lsls	r0, r0, #8
1000fec4:	4320      	orrs	r0, r4
1000fec6:	8098      	strh	r0, [r3, #4]
1000fec8:	3106      	adds	r1, #6
1000feca:	1d98      	adds	r0, r3, #6
1000fecc:	4b0b      	ldr	r3, [pc, #44]	; (1000fefc <gattc_event_ind_and_notification_parser+0x50>)
1000fece:	4798      	blx	r3
1000fed0:	221b      	movs	r2, #27
1000fed2:	e010      	b.n	1000fef6 <gattc_event_ind_and_notification_parser+0x4a>
1000fed4:	2200      	movs	r2, #0
1000fed6:	2c13      	cmp	r4, #19
1000fed8:	d10d      	bne.n	1000fef6 <gattc_event_ind_and_notification_parser+0x4a>
1000feda:	0a00      	lsrs	r0, r0, #8
1000fedc:	8018      	strh	r0, [r3, #0]
1000fede:	788a      	ldrb	r2, [r1, #2]
1000fee0:	709a      	strb	r2, [r3, #2]
1000fee2:	7908      	ldrb	r0, [r1, #4]
1000fee4:	78cc      	ldrb	r4, [r1, #3]
1000fee6:	0200      	lsls	r0, r0, #8
1000fee8:	4320      	orrs	r0, r4
1000feea:	8098      	strh	r0, [r3, #4]
1000feec:	3106      	adds	r1, #6
1000feee:	1d98      	adds	r0, r3, #6
1000fef0:	4b02      	ldr	r3, [pc, #8]	; (1000fefc <gattc_event_ind_and_notification_parser+0x50>)
1000fef2:	4798      	blx	r3
1000fef4:	221c      	movs	r2, #28
1000fef6:	1c10      	adds	r0, r2, #0
1000fef8:	bd10      	pop	{r4, pc}
1000fefa:	46c0      	nop			; (mov r8, r8)
1000fefc:	10011c63 	.word	0x10011c63

1000ff00 <gattc_complete_evt_handler>:
1000ff00:	b500      	push	{lr}
1000ff02:	0a00      	lsrs	r0, r0, #8
1000ff04:	8010      	strh	r0, [r2, #0]
1000ff06:	7808      	ldrb	r0, [r1, #0]
1000ff08:	7090      	strb	r0, [r2, #2]
1000ff0a:	784b      	ldrb	r3, [r1, #1]
1000ff0c:	3801      	subs	r0, #1
1000ff0e:	70d3      	strb	r3, [r2, #3]
1000ff10:	2813      	cmp	r0, #19
1000ff12:	d82c      	bhi.n	1000ff6e <gattc_complete_evt_handler+0x6e>
1000ff14:	f000 fa58 	bl	100103c8 <__gnu_thumb1_case_uqi>
1000ff18:	0a0a0a0c 	.word	0x0a0a0a0c
1000ff1c:	210a0a0a 	.word	0x210a0a0a
1000ff20:	111f2121 	.word	0x111f2121
1000ff24:	2b111111 	.word	0x2b111111
1000ff28:	2919132b 	.word	0x2919132b
1000ff2c:	2017      	movs	r0, #23
1000ff2e:	e01f      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff30:	2024      	movs	r0, #36	; 0x24
1000ff32:	2b00      	cmp	r3, #0
1000ff34:	d11c      	bne.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff36:	3017      	adds	r0, #23
1000ff38:	e01a      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff3a:	2025      	movs	r0, #37	; 0x25
1000ff3c:	e018      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff3e:	4a0d      	ldr	r2, [pc, #52]	; (1000ff74 <gattc_complete_evt_handler+0x74>)
1000ff40:	201d      	movs	r0, #29
1000ff42:	6813      	ldr	r3, [r2, #0]
1000ff44:	3b01      	subs	r3, #1
1000ff46:	6013      	str	r3, [r2, #0]
1000ff48:	e012      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff4a:	4a0a      	ldr	r2, [pc, #40]	; (1000ff74 <gattc_complete_evt_handler+0x74>)
1000ff4c:	201e      	movs	r0, #30
1000ff4e:	6813      	ldr	r3, [r2, #0]
1000ff50:	3b01      	subs	r3, #1
1000ff52:	6013      	str	r3, [r2, #0]
1000ff54:	e00c      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff56:	2019      	movs	r0, #25
1000ff58:	e00a      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff5a:	203b      	movs	r0, #59	; 0x3b
1000ff5c:	2b00      	cmp	r3, #0
1000ff5e:	d007      	beq.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff60:	2182      	movs	r1, #130	; 0x82
1000ff62:	0089      	lsls	r1, r1, #2
1000ff64:	5453      	strb	r3, [r2, r1]
1000ff66:	3823      	subs	r0, #35	; 0x23
1000ff68:	e002      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff6a:	2021      	movs	r0, #33	; 0x21
1000ff6c:	e000      	b.n	1000ff70 <gattc_complete_evt_handler+0x70>
1000ff6e:	2000      	movs	r0, #0
1000ff70:	bd00      	pop	{pc}
1000ff72:	46c0      	nop			; (mov r8, r8)
1000ff74:	10015d08 	.word	0x10015d08

1000ff78 <gattc_event_mtu_changed_ind_parser>:
1000ff78:	0a00      	lsrs	r0, r0, #8
1000ff7a:	8010      	strh	r0, [r2, #0]
1000ff7c:	784b      	ldrb	r3, [r1, #1]
1000ff7e:	7809      	ldrb	r1, [r1, #0]
1000ff80:	021b      	lsls	r3, r3, #8
1000ff82:	430b      	orrs	r3, r1
1000ff84:	8053      	strh	r3, [r2, #2]
1000ff86:	4770      	bx	lr

1000ff88 <gattc_read_ind_parser>:
1000ff88:	0a00      	lsrs	r0, r0, #8
1000ff8a:	b508      	push	{r3, lr}
1000ff8c:	8010      	strh	r0, [r2, #0]
1000ff8e:	1c13      	adds	r3, r2, #0
1000ff90:	2282      	movs	r2, #130	; 0x82
1000ff92:	2000      	movs	r0, #0
1000ff94:	0092      	lsls	r2, r2, #2
1000ff96:	5498      	strb	r0, [r3, r2]
1000ff98:	784a      	ldrb	r2, [r1, #1]
1000ff9a:	7808      	ldrb	r0, [r1, #0]
1000ff9c:	0212      	lsls	r2, r2, #8
1000ff9e:	4302      	orrs	r2, r0
1000ffa0:	805a      	strh	r2, [r3, #2]
1000ffa2:	78ca      	ldrb	r2, [r1, #3]
1000ffa4:	7888      	ldrb	r0, [r1, #2]
1000ffa6:	0212      	lsls	r2, r2, #8
1000ffa8:	4302      	orrs	r2, r0
1000ffaa:	80da      	strh	r2, [r3, #6]
1000ffac:	794a      	ldrb	r2, [r1, #5]
1000ffae:	7908      	ldrb	r0, [r1, #4]
1000ffb0:	0212      	lsls	r2, r2, #8
1000ffb2:	4302      	orrs	r2, r0
1000ffb4:	809a      	strh	r2, [r3, #4]
1000ffb6:	3308      	adds	r3, #8
1000ffb8:	1c18      	adds	r0, r3, #0
1000ffba:	3106      	adds	r1, #6
1000ffbc:	4b01      	ldr	r3, [pc, #4]	; (1000ffc4 <gattc_read_ind_parser+0x3c>)
1000ffbe:	4798      	blx	r3
1000ffc0:	bd08      	pop	{r3, pc}
1000ffc2:	46c0      	nop			; (mov r8, r8)
1000ffc4:	10011c63 	.word	0x10011c63

1000ffc8 <gattc_svc_changed_cfg_ind_parser>:
1000ffc8:	0a00      	lsrs	r0, r0, #8
1000ffca:	8010      	strh	r0, [r2, #0]
1000ffcc:	784b      	ldrb	r3, [r1, #1]
1000ffce:	7809      	ldrb	r1, [r1, #0]
1000ffd0:	021b      	lsls	r3, r3, #8
1000ffd2:	430b      	orrs	r3, r1
1000ffd4:	8053      	strh	r3, [r2, #2]
1000ffd6:	4770      	bx	lr

1000ffd8 <init_gattc_task_module>:
1000ffd8:	2300      	movs	r3, #0
1000ffda:	4a02      	ldr	r2, [pc, #8]	; (1000ffe4 <init_gattc_task_module+0xc>)
1000ffdc:	8013      	strh	r3, [r2, #0]
1000ffde:	4a02      	ldr	r2, [pc, #8]	; (1000ffe8 <init_gattc_task_module+0x10>)
1000ffe0:	8013      	strh	r3, [r2, #0]
1000ffe2:	4770      	bx	lr
1000ffe4:	10015d02 	.word	0x10015d02
1000ffe8:	10015d04 	.word	0x10015d04

1000ffec <gattm_add_svc_req_handler>:
1000ffec:	2200      	movs	r2, #0
1000ffee:	210b      	movs	r1, #11
1000fff0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fff2:	1c04      	adds	r4, r0, #0
1000fff4:	7943      	ldrb	r3, [r0, #5]
1000fff6:	b085      	sub	sp, #20
1000fff8:	9301      	str	r3, [sp, #4]
1000fffa:	ab02      	add	r3, sp, #8
1000fffc:	71da      	strb	r2, [r3, #7]
1000fffe:	4b37      	ldr	r3, [pc, #220]	; (100100dc <gattm_add_svc_req_handler+0xf0>)
10010000:	7059      	strb	r1, [r3, #1]
10010002:	7099      	strb	r1, [r3, #2]
10010004:	4936      	ldr	r1, [pc, #216]	; (100100e0 <gattm_add_svc_req_handler+0xf4>)
10010006:	701a      	strb	r2, [r3, #0]
10010008:	8808      	ldrh	r0, [r1, #0]
1001000a:	8809      	ldrh	r1, [r1, #0]
1001000c:	70da      	strb	r2, [r3, #3]
1001000e:	0a09      	lsrs	r1, r1, #8
10010010:	7118      	strb	r0, [r3, #4]
10010012:	7159      	strb	r1, [r3, #5]
10010014:	8821      	ldrh	r1, [r4, #0]
10010016:	7219      	strb	r1, [r3, #8]
10010018:	8821      	ldrh	r1, [r4, #0]
1001001a:	0a09      	lsrs	r1, r1, #8
1001001c:	7259      	strb	r1, [r3, #9]
1001001e:	8861      	ldrh	r1, [r4, #2]
10010020:	7299      	strb	r1, [r3, #10]
10010022:	8861      	ldrh	r1, [r4, #2]
10010024:	0a09      	lsrs	r1, r1, #8
10010026:	72d9      	strb	r1, [r3, #11]
10010028:	7921      	ldrb	r1, [r4, #4]
1001002a:	7319      	strb	r1, [r3, #12]
1001002c:	4669      	mov	r1, sp
1001002e:	7909      	ldrb	r1, [r1, #4]
10010030:	7359      	strb	r1, [r3, #13]
10010032:	18a1      	adds	r1, r4, r2
10010034:	7988      	ldrb	r0, [r1, #6]
10010036:	1899      	adds	r1, r3, r2
10010038:	3201      	adds	r2, #1
1001003a:	7388      	strb	r0, [r1, #14]
1001003c:	2a10      	cmp	r2, #16
1001003e:	d1f8      	bne.n	10010032 <gattm_add_svc_req_handler+0x46>
10010040:	1c27      	adds	r7, r4, #0
10010042:	2300      	movs	r3, #0
10010044:	251e      	movs	r5, #30
10010046:	3716      	adds	r7, #22
10010048:	9300      	str	r3, [sp, #0]
1001004a:	9b00      	ldr	r3, [sp, #0]
1001004c:	9a01      	ldr	r2, [sp, #4]
1001004e:	4e23      	ldr	r6, [pc, #140]	; (100100dc <gattm_add_svc_req_handler+0xf0>)
10010050:	4293      	cmp	r3, r2
10010052:	da21      	bge.n	10010098 <gattm_add_svc_req_handler+0xac>
10010054:	1c39      	adds	r1, r7, #0
10010056:	1970      	adds	r0, r6, r5
10010058:	2210      	movs	r2, #16
1001005a:	4b22      	ldr	r3, [pc, #136]	; (100100e4 <gattm_add_svc_req_handler+0xf8>)
1001005c:	4798      	blx	r3
1001005e:	1c2b      	adds	r3, r5, #0
10010060:	8a3a      	ldrh	r2, [r7, #16]
10010062:	3310      	adds	r3, #16
10010064:	b29b      	uxth	r3, r3
10010066:	54f2      	strb	r2, [r6, r3]
10010068:	1c2b      	adds	r3, r5, #0
1001006a:	8a3a      	ldrh	r2, [r7, #16]
1001006c:	3311      	adds	r3, #17
1001006e:	b29b      	uxth	r3, r3
10010070:	0a12      	lsrs	r2, r2, #8
10010072:	54f2      	strb	r2, [r6, r3]
10010074:	1c2a      	adds	r2, r5, #0
10010076:	1c2b      	adds	r3, r5, #0
10010078:	8a79      	ldrh	r1, [r7, #18]
1001007a:	3212      	adds	r2, #18
1001007c:	b292      	uxth	r2, r2
1001007e:	54b1      	strb	r1, [r6, r2]
10010080:	8a7a      	ldrh	r2, [r7, #18]
10010082:	3313      	adds	r3, #19
10010084:	b29b      	uxth	r3, r3
10010086:	0a12      	lsrs	r2, r2, #8
10010088:	54f2      	strb	r2, [r6, r3]
1001008a:	9b00      	ldr	r3, [sp, #0]
1001008c:	3514      	adds	r5, #20
1001008e:	3301      	adds	r3, #1
10010090:	b2ad      	uxth	r5, r5
10010092:	9300      	str	r3, [sp, #0]
10010094:	3714      	adds	r7, #20
10010096:	e7d8      	b.n	1001004a <gattm_add_svc_req_handler+0x5e>
10010098:	2114      	movs	r1, #20
1001009a:	4d13      	ldr	r5, [pc, #76]	; (100100e8 <gattm_add_svc_req_handler+0xfc>)
1001009c:	4b13      	ldr	r3, [pc, #76]	; (100100ec <gattm_add_svc_req_handler+0x100>)
1001009e:	4351      	muls	r1, r2
100100a0:	802b      	strh	r3, [r5, #0]
100100a2:	230b      	movs	r3, #11
100100a4:	311e      	adds	r1, #30
100100a6:	80ab      	strh	r3, [r5, #4]
100100a8:	1c0b      	adds	r3, r1, #0
100100aa:	3b08      	subs	r3, #8
100100ac:	71b3      	strb	r3, [r6, #6]
100100ae:	121b      	asrs	r3, r3, #8
100100b0:	71f3      	strb	r3, [r6, #7]
100100b2:	1c30      	adds	r0, r6, #0
100100b4:	4b0e      	ldr	r3, [pc, #56]	; (100100f0 <gattm_add_svc_req_handler+0x104>)
100100b6:	4798      	blx	r3
100100b8:	ab02      	add	r3, sp, #8
100100ba:	1dde      	adds	r6, r3, #7
100100bc:	1c30      	adds	r0, r6, #0
100100be:	4b0d      	ldr	r3, [pc, #52]	; (100100f4 <gattm_add_svc_req_handler+0x108>)
100100c0:	4798      	blx	r3
100100c2:	7833      	ldrb	r3, [r6, #0]
100100c4:	20e2      	movs	r0, #226	; 0xe2
100100c6:	2b00      	cmp	r3, #0
100100c8:	d106      	bne.n	100100d8 <gattm_add_svc_req_handler+0xec>
100100ca:	68aa      	ldr	r2, [r5, #8]
100100cc:	7853      	ldrb	r3, [r2, #1]
100100ce:	7811      	ldrb	r1, [r2, #0]
100100d0:	021b      	lsls	r3, r3, #8
100100d2:	430b      	orrs	r3, r1
100100d4:	8023      	strh	r3, [r4, #0]
100100d6:	7890      	ldrb	r0, [r2, #2]
100100d8:	b005      	add	sp, #20
100100da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100100dc:	1001714c 	.word	0x1001714c
100100e0:	10016ddc 	.word	0x10016ddc
100100e4:	10011c63 	.word	0x10011c63
100100e8:	10016dd0 	.word	0x10016dd0
100100ec:	00000b01 	.word	0x00000b01
100100f0:	1000e859 	.word	0x1000e859
100100f4:	1000e8bd 	.word	0x1000e8bd

100100f8 <gattm_add_attribute_req_handler>:
100100f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100100fa:	1c1f      	adds	r7, r3, #0
100100fc:	4b16      	ldr	r3, [pc, #88]	; (10010158 <gattm_add_attribute_req_handler+0x60>)
100100fe:	9100      	str	r1, [sp, #0]
10010100:	9201      	str	r2, [sp, #4]
10010102:	1c05      	adds	r5, r0, #0
10010104:	7946      	ldrb	r6, [r0, #5]
10010106:	6818      	ldr	r0, [r3, #0]
10010108:	2114      	movs	r1, #20
1001010a:	4b14      	ldr	r3, [pc, #80]	; (1001015c <gattm_add_attribute_req_handler+0x64>)
1001010c:	382a      	subs	r0, #42	; 0x2a
1001010e:	4798      	blx	r3
10010110:	2311      	movs	r3, #17
10010112:	4286      	cmp	r6, r0
10010114:	d21e      	bcs.n	10010154 <gattm_add_attribute_req_handler+0x5c>
10010116:	2414      	movs	r4, #20
10010118:	4366      	muls	r6, r4
1001011a:	19a8      	adds	r0, r5, r6
1001011c:	2100      	movs	r1, #0
1001011e:	2210      	movs	r2, #16
10010120:	4b0f      	ldr	r3, [pc, #60]	; (10010160 <gattm_add_attribute_req_handler+0x68>)
10010122:	3016      	adds	r0, #22
10010124:	4798      	blx	r3
10010126:	7968      	ldrb	r0, [r5, #5]
10010128:	1c3a      	adds	r2, r7, #0
1001012a:	4360      	muls	r0, r4
1001012c:	1828      	adds	r0, r5, r0
1001012e:	4b0d      	ldr	r3, [pc, #52]	; (10010164 <gattm_add_attribute_req_handler+0x6c>)
10010130:	3016      	adds	r0, #22
10010132:	9908      	ldr	r1, [sp, #32]
10010134:	4798      	blx	r3
10010136:	466a      	mov	r2, sp
10010138:	796b      	ldrb	r3, [r5, #5]
1001013a:	8812      	ldrh	r2, [r2, #0]
1001013c:	435c      	muls	r4, r3
1001013e:	192c      	adds	r4, r5, r4
10010140:	8522      	strh	r2, [r4, #40]	; 0x28
10010142:	466a      	mov	r2, sp
10010144:	8892      	ldrh	r2, [r2, #4]
10010146:	84e2      	strh	r2, [r4, #38]	; 0x26
10010148:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001014a:	8013      	strh	r3, [r2, #0]
1001014c:	796b      	ldrb	r3, [r5, #5]
1001014e:	3301      	adds	r3, #1
10010150:	716b      	strb	r3, [r5, #5]
10010152:	2300      	movs	r3, #0
10010154:	1c18      	adds	r0, r3, #0
10010156:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010158:	10015c78 	.word	0x10015c78
1001015c:	100103dd 	.word	0x100103dd
10010160:	10011c75 	.word	0x10011c75
10010164:	10011c63 	.word	0x10011c63

10010168 <gattm_att_set_value_req_handler>:
10010168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001016a:	466b      	mov	r3, sp
1001016c:	1dde      	adds	r6, r3, #7
1001016e:	2300      	movs	r3, #0
10010170:	1c0d      	adds	r5, r1, #0
10010172:	210c      	movs	r1, #12
10010174:	270b      	movs	r7, #11
10010176:	4c17      	ldr	r4, [pc, #92]	; (100101d4 <gattm_att_set_value_req_handler+0x6c>)
10010178:	7033      	strb	r3, [r6, #0]
1001017a:	70e3      	strb	r3, [r4, #3]
1001017c:	4b16      	ldr	r3, [pc, #88]	; (100101d8 <gattm_att_set_value_req_handler+0x70>)
1001017e:	7021      	strb	r1, [r4, #0]
10010180:	8819      	ldrh	r1, [r3, #0]
10010182:	881b      	ldrh	r3, [r3, #0]
10010184:	7220      	strb	r0, [r4, #8]
10010186:	0a1b      	lsrs	r3, r3, #8
10010188:	7163      	strb	r3, [r4, #5]
1001018a:	0a00      	lsrs	r0, r0, #8
1001018c:	0a2b      	lsrs	r3, r5, #8
1001018e:	7121      	strb	r1, [r4, #4]
10010190:	7260      	strb	r0, [r4, #9]
10010192:	1c11      	adds	r1, r2, #0
10010194:	72a5      	strb	r5, [r4, #10]
10010196:	1c2a      	adds	r2, r5, #0
10010198:	72e3      	strb	r3, [r4, #11]
1001019a:	350c      	adds	r5, #12
1001019c:	4b0f      	ldr	r3, [pc, #60]	; (100101dc <gattm_att_set_value_req_handler+0x74>)
1001019e:	4810      	ldr	r0, [pc, #64]	; (100101e0 <gattm_att_set_value_req_handler+0x78>)
100101a0:	7067      	strb	r7, [r4, #1]
100101a2:	70a7      	strb	r7, [r4, #2]
100101a4:	4798      	blx	r3
100101a6:	b2a9      	uxth	r1, r5
100101a8:	4b0e      	ldr	r3, [pc, #56]	; (100101e4 <gattm_att_set_value_req_handler+0x7c>)
100101aa:	4d0f      	ldr	r5, [pc, #60]	; (100101e8 <gattm_att_set_value_req_handler+0x80>)
100101ac:	1c20      	adds	r0, r4, #0
100101ae:	802b      	strh	r3, [r5, #0]
100101b0:	1c0b      	adds	r3, r1, #0
100101b2:	3b08      	subs	r3, #8
100101b4:	71a3      	strb	r3, [r4, #6]
100101b6:	121b      	asrs	r3, r3, #8
100101b8:	71e3      	strb	r3, [r4, #7]
100101ba:	4b0c      	ldr	r3, [pc, #48]	; (100101ec <gattm_att_set_value_req_handler+0x84>)
100101bc:	80af      	strh	r7, [r5, #4]
100101be:	4798      	blx	r3
100101c0:	1c30      	adds	r0, r6, #0
100101c2:	4b0b      	ldr	r3, [pc, #44]	; (100101f0 <gattm_att_set_value_req_handler+0x88>)
100101c4:	4798      	blx	r3
100101c6:	7833      	ldrb	r3, [r6, #0]
100101c8:	20e2      	movs	r0, #226	; 0xe2
100101ca:	2b00      	cmp	r3, #0
100101cc:	d101      	bne.n	100101d2 <gattm_att_set_value_req_handler+0x6a>
100101ce:	68ab      	ldr	r3, [r5, #8]
100101d0:	7898      	ldrb	r0, [r3, #2]
100101d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100101d4:	1001714c 	.word	0x1001714c
100101d8:	10016ddc 	.word	0x10016ddc
100101dc:	10011c63 	.word	0x10011c63
100101e0:	10017158 	.word	0x10017158
100101e4:	00000b0d 	.word	0x00000b0d
100101e8:	10016dd0 	.word	0x10016dd0
100101ec:	1000e859 	.word	0x1000e859
100101f0:	1000e8bd 	.word	0x1000e8bd

100101f4 <gattm_att_get_value_req_handler>:
100101f4:	b5f0      	push	{r4, r5, r6, r7, lr}
100101f6:	b085      	sub	sp, #20
100101f8:	9201      	str	r2, [sp, #4]
100101fa:	220a      	movs	r2, #10
100101fc:	1c04      	adds	r4, r0, #0
100101fe:	481d      	ldr	r0, [pc, #116]	; (10010274 <gattm_att_get_value_req_handler+0x80>)
10010200:	ab02      	add	r3, sp, #8
10010202:	1dde      	adds	r6, r3, #7
10010204:	7002      	strb	r2, [r0, #0]
10010206:	2300      	movs	r3, #0
10010208:	220b      	movs	r2, #11
1001020a:	4d1b      	ldr	r5, [pc, #108]	; (10010278 <gattm_att_get_value_req_handler+0x84>)
1001020c:	1c0f      	adds	r7, r1, #0
1001020e:	8829      	ldrh	r1, [r5, #0]
10010210:	882d      	ldrh	r5, [r5, #0]
10010212:	7101      	strb	r1, [r0, #4]
10010214:	0a2d      	lsrs	r5, r5, #8
10010216:	7145      	strb	r5, [r0, #5]
10010218:	0a25      	lsrs	r5, r4, #8
1001021a:	7245      	strb	r5, [r0, #9]
1001021c:	4917      	ldr	r1, [pc, #92]	; (1001027c <gattm_att_get_value_req_handler+0x88>)
1001021e:	4d18      	ldr	r5, [pc, #96]	; (10010280 <gattm_att_get_value_req_handler+0x8c>)
10010220:	7033      	strb	r3, [r6, #0]
10010222:	7042      	strb	r2, [r0, #1]
10010224:	7082      	strb	r2, [r0, #2]
10010226:	70c3      	strb	r3, [r0, #3]
10010228:	8029      	strh	r1, [r5, #0]
1001022a:	80aa      	strh	r2, [r5, #4]
1001022c:	71c3      	strb	r3, [r0, #7]
1001022e:	3a09      	subs	r2, #9
10010230:	210a      	movs	r1, #10
10010232:	4b14      	ldr	r3, [pc, #80]	; (10010284 <gattm_att_get_value_req_handler+0x90>)
10010234:	7182      	strb	r2, [r0, #6]
10010236:	7204      	strb	r4, [r0, #8]
10010238:	4798      	blx	r3
1001023a:	1c30      	adds	r0, r6, #0
1001023c:	4b12      	ldr	r3, [pc, #72]	; (10010288 <gattm_att_get_value_req_handler+0x94>)
1001023e:	4798      	blx	r3
10010240:	7833      	ldrb	r3, [r6, #0]
10010242:	20e2      	movs	r0, #226	; 0xe2
10010244:	2b00      	cmp	r3, #0
10010246:	d112      	bne.n	1001026e <gattm_att_get_value_req_handler+0x7a>
10010248:	68a9      	ldr	r1, [r5, #8]
1001024a:	9801      	ldr	r0, [sp, #4]
1001024c:	784d      	ldrb	r5, [r1, #1]
1001024e:	780b      	ldrb	r3, [r1, #0]
10010250:	78ca      	ldrb	r2, [r1, #3]
10010252:	022d      	lsls	r5, r5, #8
10010254:	431d      	orrs	r5, r3
10010256:	788b      	ldrb	r3, [r1, #2]
10010258:	0212      	lsls	r2, r2, #8
1001025a:	431a      	orrs	r2, r3
1001025c:	803a      	strh	r2, [r7, #0]
1001025e:	790e      	ldrb	r6, [r1, #4]
10010260:	4b0a      	ldr	r3, [pc, #40]	; (1001028c <gattm_att_get_value_req_handler+0x98>)
10010262:	3105      	adds	r1, #5
10010264:	4798      	blx	r3
10010266:	20e2      	movs	r0, #226	; 0xe2
10010268:	42ac      	cmp	r4, r5
1001026a:	d100      	bne.n	1001026e <gattm_att_get_value_req_handler+0x7a>
1001026c:	1c30      	adds	r0, r6, #0
1001026e:	b005      	add	sp, #20
10010270:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010272:	46c0      	nop			; (mov r8, r8)
10010274:	1001714c 	.word	0x1001714c
10010278:	10016ddc 	.word	0x10016ddc
1001027c:	00000b0b 	.word	0x00000b0b
10010280:	10016dd0 	.word	0x10016dd0
10010284:	1000e859 	.word	0x1000e859
10010288:	1000e8bd 	.word	0x1000e8bd
1001028c:	10011c63 	.word	0x10011c63

10010290 <htpt_create_db_req_handler>:
10010290:	b570      	push	{r4, r5, r6, lr}
10010292:	b086      	sub	sp, #24
10010294:	ac04      	add	r4, sp, #16
10010296:	80a3      	strh	r3, [r4, #4]
10010298:	4b0b      	ldr	r3, [pc, #44]	; (100102c8 <htpt_create_db_req_handler+0x38>)
1001029a:	8062      	strh	r2, [r4, #2]
1001029c:	1c06      	adds	r6, r0, #0
1001029e:	881a      	ldrh	r2, [r3, #0]
100102a0:	2308      	movs	r3, #8
100102a2:	a80a      	add	r0, sp, #40	; 0x28
100102a4:	8805      	ldrh	r5, [r0, #0]
100102a6:	a80b      	add	r0, sp, #44	; 0x2c
100102a8:	7026      	strb	r6, [r4, #0]
100102aa:	7061      	strb	r1, [r4, #1]
100102ac:	80e5      	strh	r5, [r4, #6]
100102ae:	7800      	ldrb	r0, [r0, #0]
100102b0:	9301      	str	r3, [sp, #4]
100102b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
100102b4:	9400      	str	r4, [sp, #0]
100102b6:	9302      	str	r3, [sp, #8]
100102b8:	b292      	uxth	r2, r2
100102ba:	211b      	movs	r1, #27
100102bc:	2300      	movs	r3, #0
100102be:	4c03      	ldr	r4, [pc, #12]	; (100102cc <htpt_create_db_req_handler+0x3c>)
100102c0:	47a0      	blx	r4
100102c2:	b006      	add	sp, #24
100102c4:	bd70      	pop	{r4, r5, r6, pc}
100102c6:	46c0      	nop			; (mov r8, r8)
100102c8:	10016ddc 	.word	0x10016ddc
100102cc:	1000faa9 	.word	0x1000faa9

100102d0 <htpt_enable_req_handler>:
100102d0:	221b      	movs	r2, #27
100102d2:	b538      	push	{r3, r4, r5, lr}
100102d4:	4b0b      	ldr	r3, [pc, #44]	; (10010304 <htpt_enable_req_handler+0x34>)
100102d6:	2400      	movs	r4, #0
100102d8:	705a      	strb	r2, [r3, #1]
100102da:	709a      	strb	r2, [r3, #2]
100102dc:	4a0a      	ldr	r2, [pc, #40]	; (10010308 <htpt_enable_req_handler+0x38>)
100102de:	701c      	strb	r4, [r3, #0]
100102e0:	8815      	ldrh	r5, [r2, #0]
100102e2:	8812      	ldrh	r2, [r2, #0]
100102e4:	711d      	strb	r5, [r3, #4]
100102e6:	0a12      	lsrs	r2, r2, #8
100102e8:	715a      	strb	r2, [r3, #5]
100102ea:	2202      	movs	r2, #2
100102ec:	70dc      	strb	r4, [r3, #3]
100102ee:	7218      	strb	r0, [r3, #8]
100102f0:	7259      	strb	r1, [r3, #9]
100102f2:	719a      	strb	r2, [r3, #6]
100102f4:	71dc      	strb	r4, [r3, #7]
100102f6:	1c18      	adds	r0, r3, #0
100102f8:	210a      	movs	r1, #10
100102fa:	4b04      	ldr	r3, [pc, #16]	; (1001030c <htpt_enable_req_handler+0x3c>)
100102fc:	4798      	blx	r3
100102fe:	1c20      	adds	r0, r4, #0
10010300:	bd38      	pop	{r3, r4, r5, pc}
10010302:	46c0      	nop			; (mov r8, r8)
10010304:	1001714c 	.word	0x1001714c
10010308:	10016ddc 	.word	0x10016ddc
1001030c:	1000e859 	.word	0x1000e859

10010310 <htpt_temp_send_req_handler>:
10010310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010312:	2502      	movs	r5, #2
10010314:	ac08      	add	r4, sp, #32
10010316:	7826      	ldrb	r6, [r4, #0]
10010318:	4c18      	ldr	r4, [pc, #96]	; (1001037c <htpt_temp_send_req_handler+0x6c>)
1001031a:	4f19      	ldr	r7, [pc, #100]	; (10010380 <htpt_temp_send_req_handler+0x70>)
1001031c:	7025      	strb	r5, [r4, #0]
1001031e:	3519      	adds	r5, #25
10010320:	7065      	strb	r5, [r4, #1]
10010322:	70a5      	strb	r5, [r4, #2]
10010324:	2500      	movs	r5, #0
10010326:	9301      	str	r3, [sp, #4]
10010328:	883b      	ldrh	r3, [r7, #0]
1001032a:	883f      	ldrh	r7, [r7, #0]
1001032c:	7123      	strb	r3, [r4, #4]
1001032e:	466b      	mov	r3, sp
10010330:	0a3f      	lsrs	r7, r7, #8
10010332:	7167      	strb	r7, [r4, #5]
10010334:	0a07      	lsrs	r7, r0, #8
10010336:	7220      	strb	r0, [r4, #8]
10010338:	7267      	strb	r7, [r4, #9]
1001033a:	0c07      	lsrs	r7, r0, #16
1001033c:	0e00      	lsrs	r0, r0, #24
1001033e:	70e5      	strb	r5, [r4, #3]
10010340:	72a7      	strb	r7, [r4, #10]
10010342:	72e0      	strb	r0, [r4, #11]
10010344:	8808      	ldrh	r0, [r1, #0]
10010346:	791b      	ldrb	r3, [r3, #4]
10010348:	7320      	strb	r0, [r4, #12]
1001034a:	8808      	ldrh	r0, [r1, #0]
1001034c:	0a00      	lsrs	r0, r0, #8
1001034e:	7360      	strb	r0, [r4, #13]
10010350:	7888      	ldrb	r0, [r1, #2]
10010352:	73a0      	strb	r0, [r4, #14]
10010354:	78c8      	ldrb	r0, [r1, #3]
10010356:	73e0      	strb	r0, [r4, #15]
10010358:	7908      	ldrb	r0, [r1, #4]
1001035a:	7420      	strb	r0, [r4, #16]
1001035c:	7948      	ldrb	r0, [r1, #5]
1001035e:	7460      	strb	r0, [r4, #17]
10010360:	7989      	ldrb	r1, [r1, #6]
10010362:	7522      	strb	r2, [r4, #20]
10010364:	74a1      	strb	r1, [r4, #18]
10010366:	7563      	strb	r3, [r4, #21]
10010368:	2314      	movs	r3, #20
1001036a:	1c20      	adds	r0, r4, #0
1001036c:	71a3      	strb	r3, [r4, #6]
1001036e:	211c      	movs	r1, #28
10010370:	4b04      	ldr	r3, [pc, #16]	; (10010384 <htpt_temp_send_req_handler+0x74>)
10010372:	7626      	strb	r6, [r4, #24]
10010374:	71e5      	strb	r5, [r4, #7]
10010376:	4798      	blx	r3
10010378:	1c28      	adds	r0, r5, #0
1001037a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001037c:	1001714c 	.word	0x1001714c
10010380:	10016ddc 	.word	0x10016ddc
10010384:	1000e859 	.word	0x1000e859

10010388 <htpt_enable_rsp_handler>:
10010388:	780b      	ldrb	r3, [r1, #0]
1001038a:	7013      	strb	r3, [r2, #0]
1001038c:	784b      	ldrb	r3, [r1, #1]
1001038e:	7053      	strb	r3, [r2, #1]
10010390:	4770      	bx	lr

10010392 <htpt_temp_send_rsp_handler>:
10010392:	780b      	ldrb	r3, [r1, #0]
10010394:	7013      	strb	r3, [r2, #0]
10010396:	4770      	bx	lr

10010398 <htpt_meas_intv_upd_rsp_handler>:
10010398:	780b      	ldrb	r3, [r1, #0]
1001039a:	7013      	strb	r3, [r2, #0]
1001039c:	4770      	bx	lr

1001039e <htpt_meas_intv_chg_req_ind_handler>:
1001039e:	78cb      	ldrb	r3, [r1, #3]
100103a0:	7889      	ldrb	r1, [r1, #2]
100103a2:	021b      	lsls	r3, r3, #8
100103a4:	430b      	orrs	r3, r1
100103a6:	8013      	strh	r3, [r2, #0]
100103a8:	4770      	bx	lr

100103aa <htpt_cfg_indntf_ind_handler>:
100103aa:	780b      	ldrb	r3, [r1, #0]
100103ac:	7013      	strb	r3, [r2, #0]
100103ae:	784b      	ldrb	r3, [r1, #1]
100103b0:	7053      	strb	r3, [r2, #1]
100103b2:	4770      	bx	lr

100103b4 <__gnu_thumb1_case_sqi>:
100103b4:	b402      	push	{r1}
100103b6:	4671      	mov	r1, lr
100103b8:	0849      	lsrs	r1, r1, #1
100103ba:	0049      	lsls	r1, r1, #1
100103bc:	5609      	ldrsb	r1, [r1, r0]
100103be:	0049      	lsls	r1, r1, #1
100103c0:	448e      	add	lr, r1
100103c2:	bc02      	pop	{r1}
100103c4:	4770      	bx	lr
100103c6:	46c0      	nop			; (mov r8, r8)

100103c8 <__gnu_thumb1_case_uqi>:
100103c8:	b402      	push	{r1}
100103ca:	4671      	mov	r1, lr
100103cc:	0849      	lsrs	r1, r1, #1
100103ce:	0049      	lsls	r1, r1, #1
100103d0:	5c09      	ldrb	r1, [r1, r0]
100103d2:	0049      	lsls	r1, r1, #1
100103d4:	448e      	add	lr, r1
100103d6:	bc02      	pop	{r1}
100103d8:	4770      	bx	lr
100103da:	46c0      	nop			; (mov r8, r8)

100103dc <__aeabi_uidiv>:
100103dc:	2200      	movs	r2, #0
100103de:	0843      	lsrs	r3, r0, #1
100103e0:	428b      	cmp	r3, r1
100103e2:	d374      	bcc.n	100104ce <__aeabi_uidiv+0xf2>
100103e4:	0903      	lsrs	r3, r0, #4
100103e6:	428b      	cmp	r3, r1
100103e8:	d35f      	bcc.n	100104aa <__aeabi_uidiv+0xce>
100103ea:	0a03      	lsrs	r3, r0, #8
100103ec:	428b      	cmp	r3, r1
100103ee:	d344      	bcc.n	1001047a <__aeabi_uidiv+0x9e>
100103f0:	0b03      	lsrs	r3, r0, #12
100103f2:	428b      	cmp	r3, r1
100103f4:	d328      	bcc.n	10010448 <__aeabi_uidiv+0x6c>
100103f6:	0c03      	lsrs	r3, r0, #16
100103f8:	428b      	cmp	r3, r1
100103fa:	d30d      	bcc.n	10010418 <__aeabi_uidiv+0x3c>
100103fc:	22ff      	movs	r2, #255	; 0xff
100103fe:	0209      	lsls	r1, r1, #8
10010400:	ba12      	rev	r2, r2
10010402:	0c03      	lsrs	r3, r0, #16
10010404:	428b      	cmp	r3, r1
10010406:	d302      	bcc.n	1001040e <__aeabi_uidiv+0x32>
10010408:	1212      	asrs	r2, r2, #8
1001040a:	0209      	lsls	r1, r1, #8
1001040c:	d065      	beq.n	100104da <__aeabi_uidiv+0xfe>
1001040e:	0b03      	lsrs	r3, r0, #12
10010410:	428b      	cmp	r3, r1
10010412:	d319      	bcc.n	10010448 <__aeabi_uidiv+0x6c>
10010414:	e000      	b.n	10010418 <__aeabi_uidiv+0x3c>
10010416:	0a09      	lsrs	r1, r1, #8
10010418:	0bc3      	lsrs	r3, r0, #15
1001041a:	428b      	cmp	r3, r1
1001041c:	d301      	bcc.n	10010422 <__aeabi_uidiv+0x46>
1001041e:	03cb      	lsls	r3, r1, #15
10010420:	1ac0      	subs	r0, r0, r3
10010422:	4152      	adcs	r2, r2
10010424:	0b83      	lsrs	r3, r0, #14
10010426:	428b      	cmp	r3, r1
10010428:	d301      	bcc.n	1001042e <__aeabi_uidiv+0x52>
1001042a:	038b      	lsls	r3, r1, #14
1001042c:	1ac0      	subs	r0, r0, r3
1001042e:	4152      	adcs	r2, r2
10010430:	0b43      	lsrs	r3, r0, #13
10010432:	428b      	cmp	r3, r1
10010434:	d301      	bcc.n	1001043a <__aeabi_uidiv+0x5e>
10010436:	034b      	lsls	r3, r1, #13
10010438:	1ac0      	subs	r0, r0, r3
1001043a:	4152      	adcs	r2, r2
1001043c:	0b03      	lsrs	r3, r0, #12
1001043e:	428b      	cmp	r3, r1
10010440:	d301      	bcc.n	10010446 <__aeabi_uidiv+0x6a>
10010442:	030b      	lsls	r3, r1, #12
10010444:	1ac0      	subs	r0, r0, r3
10010446:	4152      	adcs	r2, r2
10010448:	0ac3      	lsrs	r3, r0, #11
1001044a:	428b      	cmp	r3, r1
1001044c:	d301      	bcc.n	10010452 <__aeabi_uidiv+0x76>
1001044e:	02cb      	lsls	r3, r1, #11
10010450:	1ac0      	subs	r0, r0, r3
10010452:	4152      	adcs	r2, r2
10010454:	0a83      	lsrs	r3, r0, #10
10010456:	428b      	cmp	r3, r1
10010458:	d301      	bcc.n	1001045e <__aeabi_uidiv+0x82>
1001045a:	028b      	lsls	r3, r1, #10
1001045c:	1ac0      	subs	r0, r0, r3
1001045e:	4152      	adcs	r2, r2
10010460:	0a43      	lsrs	r3, r0, #9
10010462:	428b      	cmp	r3, r1
10010464:	d301      	bcc.n	1001046a <__aeabi_uidiv+0x8e>
10010466:	024b      	lsls	r3, r1, #9
10010468:	1ac0      	subs	r0, r0, r3
1001046a:	4152      	adcs	r2, r2
1001046c:	0a03      	lsrs	r3, r0, #8
1001046e:	428b      	cmp	r3, r1
10010470:	d301      	bcc.n	10010476 <__aeabi_uidiv+0x9a>
10010472:	020b      	lsls	r3, r1, #8
10010474:	1ac0      	subs	r0, r0, r3
10010476:	4152      	adcs	r2, r2
10010478:	d2cd      	bcs.n	10010416 <__aeabi_uidiv+0x3a>
1001047a:	09c3      	lsrs	r3, r0, #7
1001047c:	428b      	cmp	r3, r1
1001047e:	d301      	bcc.n	10010484 <__aeabi_uidiv+0xa8>
10010480:	01cb      	lsls	r3, r1, #7
10010482:	1ac0      	subs	r0, r0, r3
10010484:	4152      	adcs	r2, r2
10010486:	0983      	lsrs	r3, r0, #6
10010488:	428b      	cmp	r3, r1
1001048a:	d301      	bcc.n	10010490 <__aeabi_uidiv+0xb4>
1001048c:	018b      	lsls	r3, r1, #6
1001048e:	1ac0      	subs	r0, r0, r3
10010490:	4152      	adcs	r2, r2
10010492:	0943      	lsrs	r3, r0, #5
10010494:	428b      	cmp	r3, r1
10010496:	d301      	bcc.n	1001049c <__aeabi_uidiv+0xc0>
10010498:	014b      	lsls	r3, r1, #5
1001049a:	1ac0      	subs	r0, r0, r3
1001049c:	4152      	adcs	r2, r2
1001049e:	0903      	lsrs	r3, r0, #4
100104a0:	428b      	cmp	r3, r1
100104a2:	d301      	bcc.n	100104a8 <__aeabi_uidiv+0xcc>
100104a4:	010b      	lsls	r3, r1, #4
100104a6:	1ac0      	subs	r0, r0, r3
100104a8:	4152      	adcs	r2, r2
100104aa:	08c3      	lsrs	r3, r0, #3
100104ac:	428b      	cmp	r3, r1
100104ae:	d301      	bcc.n	100104b4 <__aeabi_uidiv+0xd8>
100104b0:	00cb      	lsls	r3, r1, #3
100104b2:	1ac0      	subs	r0, r0, r3
100104b4:	4152      	adcs	r2, r2
100104b6:	0883      	lsrs	r3, r0, #2
100104b8:	428b      	cmp	r3, r1
100104ba:	d301      	bcc.n	100104c0 <__aeabi_uidiv+0xe4>
100104bc:	008b      	lsls	r3, r1, #2
100104be:	1ac0      	subs	r0, r0, r3
100104c0:	4152      	adcs	r2, r2
100104c2:	0843      	lsrs	r3, r0, #1
100104c4:	428b      	cmp	r3, r1
100104c6:	d301      	bcc.n	100104cc <__aeabi_uidiv+0xf0>
100104c8:	004b      	lsls	r3, r1, #1
100104ca:	1ac0      	subs	r0, r0, r3
100104cc:	4152      	adcs	r2, r2
100104ce:	1a41      	subs	r1, r0, r1
100104d0:	d200      	bcs.n	100104d4 <__aeabi_uidiv+0xf8>
100104d2:	4601      	mov	r1, r0
100104d4:	4152      	adcs	r2, r2
100104d6:	4610      	mov	r0, r2
100104d8:	4770      	bx	lr
100104da:	e7ff      	b.n	100104dc <__aeabi_uidiv+0x100>
100104dc:	b501      	push	{r0, lr}
100104de:	2000      	movs	r0, #0
100104e0:	f000 f806 	bl	100104f0 <__aeabi_idiv0>
100104e4:	bd02      	pop	{r1, pc}
100104e6:	46c0      	nop			; (mov r8, r8)

100104e8 <__aeabi_uidivmod>:
100104e8:	2900      	cmp	r1, #0
100104ea:	d0f7      	beq.n	100104dc <__aeabi_uidiv+0x100>
100104ec:	e776      	b.n	100103dc <__aeabi_uidiv>
100104ee:	4770      	bx	lr

100104f0 <__aeabi_idiv0>:
100104f0:	4770      	bx	lr
100104f2:	46c0      	nop			; (mov r8, r8)

100104f4 <__aeabi_f2uiz>:
100104f4:	219e      	movs	r1, #158	; 0x9e
100104f6:	b510      	push	{r4, lr}
100104f8:	05c9      	lsls	r1, r1, #23
100104fa:	1c04      	adds	r4, r0, #0
100104fc:	f001 f996 	bl	1001182c <__aeabi_fcmpge>
10010500:	2800      	cmp	r0, #0
10010502:	d103      	bne.n	1001050c <__aeabi_f2uiz+0x18>
10010504:	1c20      	adds	r0, r4, #0
10010506:	f000 fac5 	bl	10010a94 <__aeabi_f2iz>
1001050a:	bd10      	pop	{r4, pc}
1001050c:	219e      	movs	r1, #158	; 0x9e
1001050e:	1c20      	adds	r0, r4, #0
10010510:	05c9      	lsls	r1, r1, #23
10010512:	f000 f939 	bl	10010788 <__aeabi_fsub>
10010516:	f000 fabd 	bl	10010a94 <__aeabi_f2iz>
1001051a:	2380      	movs	r3, #128	; 0x80
1001051c:	061b      	lsls	r3, r3, #24
1001051e:	469c      	mov	ip, r3
10010520:	4460      	add	r0, ip
10010522:	e7f2      	b.n	1001050a <__aeabi_f2uiz+0x16>

10010524 <__aeabi_d2uiz>:
10010524:	b570      	push	{r4, r5, r6, lr}
10010526:	2200      	movs	r2, #0
10010528:	4b0c      	ldr	r3, [pc, #48]	; (1001055c <__aeabi_d2uiz+0x38>)
1001052a:	0004      	movs	r4, r0
1001052c:	000d      	movs	r5, r1
1001052e:	f001 f943 	bl	100117b8 <__aeabi_dcmpge>
10010532:	2800      	cmp	r0, #0
10010534:	d104      	bne.n	10010540 <__aeabi_d2uiz+0x1c>
10010536:	0020      	movs	r0, r4
10010538:	0029      	movs	r1, r5
1001053a:	f001 f89b 	bl	10011674 <__aeabi_d2iz>
1001053e:	bd70      	pop	{r4, r5, r6, pc}
10010540:	4b06      	ldr	r3, [pc, #24]	; (1001055c <__aeabi_d2uiz+0x38>)
10010542:	2200      	movs	r2, #0
10010544:	0020      	movs	r0, r4
10010546:	0029      	movs	r1, r5
10010548:	f000 fd40 	bl	10010fcc <__aeabi_dsub>
1001054c:	f001 f892 	bl	10011674 <__aeabi_d2iz>
10010550:	2380      	movs	r3, #128	; 0x80
10010552:	061b      	lsls	r3, r3, #24
10010554:	469c      	mov	ip, r3
10010556:	4460      	add	r0, ip
10010558:	e7f1      	b.n	1001053e <__aeabi_d2uiz+0x1a>
1001055a:	46c0      	nop			; (mov r8, r8)
1001055c:	41e00000 	.word	0x41e00000

10010560 <__aeabi_fmul>:
10010560:	b5f0      	push	{r4, r5, r6, r7, lr}
10010562:	4657      	mov	r7, sl
10010564:	464e      	mov	r6, r9
10010566:	4645      	mov	r5, r8
10010568:	0043      	lsls	r3, r0, #1
1001056a:	b4e0      	push	{r5, r6, r7}
1001056c:	0246      	lsls	r6, r0, #9
1001056e:	4688      	mov	r8, r1
10010570:	0a76      	lsrs	r6, r6, #9
10010572:	0e1f      	lsrs	r7, r3, #24
10010574:	0fc4      	lsrs	r4, r0, #31
10010576:	2f00      	cmp	r7, #0
10010578:	d047      	beq.n	1001060a <__aeabi_fmul+0xaa>
1001057a:	2fff      	cmp	r7, #255	; 0xff
1001057c:	d025      	beq.n	100105ca <__aeabi_fmul+0x6a>
1001057e:	2300      	movs	r3, #0
10010580:	2580      	movs	r5, #128	; 0x80
10010582:	469a      	mov	sl, r3
10010584:	4699      	mov	r9, r3
10010586:	00f6      	lsls	r6, r6, #3
10010588:	04ed      	lsls	r5, r5, #19
1001058a:	432e      	orrs	r6, r5
1001058c:	3f7f      	subs	r7, #127	; 0x7f
1001058e:	4643      	mov	r3, r8
10010590:	4642      	mov	r2, r8
10010592:	025d      	lsls	r5, r3, #9
10010594:	0fd2      	lsrs	r2, r2, #31
10010596:	005b      	lsls	r3, r3, #1
10010598:	0a6d      	lsrs	r5, r5, #9
1001059a:	0e1b      	lsrs	r3, r3, #24
1001059c:	4690      	mov	r8, r2
1001059e:	d040      	beq.n	10010622 <__aeabi_fmul+0xc2>
100105a0:	2bff      	cmp	r3, #255	; 0xff
100105a2:	d039      	beq.n	10010618 <__aeabi_fmul+0xb8>
100105a4:	2280      	movs	r2, #128	; 0x80
100105a6:	2000      	movs	r0, #0
100105a8:	00ed      	lsls	r5, r5, #3
100105aa:	04d2      	lsls	r2, r2, #19
100105ac:	4315      	orrs	r5, r2
100105ae:	3b7f      	subs	r3, #127	; 0x7f
100105b0:	18fb      	adds	r3, r7, r3
100105b2:	4642      	mov	r2, r8
100105b4:	4657      	mov	r7, sl
100105b6:	1c59      	adds	r1, r3, #1
100105b8:	4062      	eors	r2, r4
100105ba:	468c      	mov	ip, r1
100105bc:	4307      	orrs	r7, r0
100105be:	2f0f      	cmp	r7, #15
100105c0:	d85c      	bhi.n	1001067c <__aeabi_fmul+0x11c>
100105c2:	496f      	ldr	r1, [pc, #444]	; (10010780 <__aeabi_fmul+0x220>)
100105c4:	00bf      	lsls	r7, r7, #2
100105c6:	59c9      	ldr	r1, [r1, r7]
100105c8:	468f      	mov	pc, r1
100105ca:	2e00      	cmp	r6, #0
100105cc:	d145      	bne.n	1001065a <__aeabi_fmul+0xfa>
100105ce:	2308      	movs	r3, #8
100105d0:	469a      	mov	sl, r3
100105d2:	3b06      	subs	r3, #6
100105d4:	4699      	mov	r9, r3
100105d6:	e7da      	b.n	1001058e <__aeabi_fmul+0x2e>
100105d8:	4642      	mov	r2, r8
100105da:	2802      	cmp	r0, #2
100105dc:	d02d      	beq.n	1001063a <__aeabi_fmul+0xda>
100105de:	2803      	cmp	r0, #3
100105e0:	d100      	bne.n	100105e4 <__aeabi_fmul+0x84>
100105e2:	e0c3      	b.n	1001076c <__aeabi_fmul+0x20c>
100105e4:	2801      	cmp	r0, #1
100105e6:	d000      	beq.n	100105ea <__aeabi_fmul+0x8a>
100105e8:	e0a2      	b.n	10010730 <__aeabi_fmul+0x1d0>
100105ea:	2500      	movs	r5, #0
100105ec:	2600      	movs	r6, #0
100105ee:	4002      	ands	r2, r0
100105f0:	b2d4      	uxtb	r4, r2
100105f2:	0276      	lsls	r6, r6, #9
100105f4:	05ed      	lsls	r5, r5, #23
100105f6:	0a76      	lsrs	r6, r6, #9
100105f8:	432e      	orrs	r6, r5
100105fa:	07e4      	lsls	r4, r4, #31
100105fc:	4326      	orrs	r6, r4
100105fe:	0030      	movs	r0, r6
10010600:	bc1c      	pop	{r2, r3, r4}
10010602:	4690      	mov	r8, r2
10010604:	4699      	mov	r9, r3
10010606:	46a2      	mov	sl, r4
10010608:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001060a:	2e00      	cmp	r6, #0
1001060c:	d11a      	bne.n	10010644 <__aeabi_fmul+0xe4>
1001060e:	2304      	movs	r3, #4
10010610:	469a      	mov	sl, r3
10010612:	3b03      	subs	r3, #3
10010614:	4699      	mov	r9, r3
10010616:	e7ba      	b.n	1001058e <__aeabi_fmul+0x2e>
10010618:	002a      	movs	r2, r5
1001061a:	1e51      	subs	r1, r2, #1
1001061c:	418a      	sbcs	r2, r1
1001061e:	1c90      	adds	r0, r2, #2
10010620:	e7c6      	b.n	100105b0 <__aeabi_fmul+0x50>
10010622:	2001      	movs	r0, #1
10010624:	2d00      	cmp	r5, #0
10010626:	d0c3      	beq.n	100105b0 <__aeabi_fmul+0x50>
10010628:	0028      	movs	r0, r5
1001062a:	f001 f909 	bl	10011840 <__clzsi2>
1001062e:	1f43      	subs	r3, r0, #5
10010630:	3076      	adds	r0, #118	; 0x76
10010632:	409d      	lsls	r5, r3
10010634:	4243      	negs	r3, r0
10010636:	2000      	movs	r0, #0
10010638:	e7ba      	b.n	100105b0 <__aeabi_fmul+0x50>
1001063a:	2401      	movs	r4, #1
1001063c:	25ff      	movs	r5, #255	; 0xff
1001063e:	4014      	ands	r4, r2
10010640:	2600      	movs	r6, #0
10010642:	e7d6      	b.n	100105f2 <__aeabi_fmul+0x92>
10010644:	0030      	movs	r0, r6
10010646:	f001 f8fb 	bl	10011840 <__clzsi2>
1001064a:	1f43      	subs	r3, r0, #5
1001064c:	409e      	lsls	r6, r3
1001064e:	2300      	movs	r3, #0
10010650:	3076      	adds	r0, #118	; 0x76
10010652:	4247      	negs	r7, r0
10010654:	469a      	mov	sl, r3
10010656:	4699      	mov	r9, r3
10010658:	e799      	b.n	1001058e <__aeabi_fmul+0x2e>
1001065a:	230c      	movs	r3, #12
1001065c:	469a      	mov	sl, r3
1001065e:	3b09      	subs	r3, #9
10010660:	4699      	mov	r9, r3
10010662:	e794      	b.n	1001058e <__aeabi_fmul+0x2e>
10010664:	2680      	movs	r6, #128	; 0x80
10010666:	2400      	movs	r4, #0
10010668:	03f6      	lsls	r6, r6, #15
1001066a:	25ff      	movs	r5, #255	; 0xff
1001066c:	e7c1      	b.n	100105f2 <__aeabi_fmul+0x92>
1001066e:	0035      	movs	r5, r6
10010670:	4648      	mov	r0, r9
10010672:	e7b2      	b.n	100105da <__aeabi_fmul+0x7a>
10010674:	0035      	movs	r5, r6
10010676:	0022      	movs	r2, r4
10010678:	4648      	mov	r0, r9
1001067a:	e7ae      	b.n	100105da <__aeabi_fmul+0x7a>
1001067c:	0429      	lsls	r1, r5, #16
1001067e:	0c09      	lsrs	r1, r1, #16
10010680:	0008      	movs	r0, r1
10010682:	0c37      	lsrs	r7, r6, #16
10010684:	0436      	lsls	r6, r6, #16
10010686:	0c36      	lsrs	r6, r6, #16
10010688:	0c2c      	lsrs	r4, r5, #16
1001068a:	4379      	muls	r1, r7
1001068c:	4370      	muls	r0, r6
1001068e:	4367      	muls	r7, r4
10010690:	4374      	muls	r4, r6
10010692:	0c06      	lsrs	r6, r0, #16
10010694:	1864      	adds	r4, r4, r1
10010696:	1936      	adds	r6, r6, r4
10010698:	42b1      	cmp	r1, r6
1001069a:	d903      	bls.n	100106a4 <__aeabi_fmul+0x144>
1001069c:	2180      	movs	r1, #128	; 0x80
1001069e:	0249      	lsls	r1, r1, #9
100106a0:	4688      	mov	r8, r1
100106a2:	4447      	add	r7, r8
100106a4:	0400      	lsls	r0, r0, #16
100106a6:	0c00      	lsrs	r0, r0, #16
100106a8:	0431      	lsls	r1, r6, #16
100106aa:	1809      	adds	r1, r1, r0
100106ac:	018d      	lsls	r5, r1, #6
100106ae:	1e68      	subs	r0, r5, #1
100106b0:	4185      	sbcs	r5, r0
100106b2:	0e89      	lsrs	r1, r1, #26
100106b4:	4329      	orrs	r1, r5
100106b6:	0c35      	lsrs	r5, r6, #16
100106b8:	19ed      	adds	r5, r5, r7
100106ba:	01ad      	lsls	r5, r5, #6
100106bc:	430d      	orrs	r5, r1
100106be:	0129      	lsls	r1, r5, #4
100106c0:	d504      	bpl.n	100106cc <__aeabi_fmul+0x16c>
100106c2:	2301      	movs	r3, #1
100106c4:	0869      	lsrs	r1, r5, #1
100106c6:	401d      	ands	r5, r3
100106c8:	4663      	mov	r3, ip
100106ca:	430d      	orrs	r5, r1
100106cc:	0019      	movs	r1, r3
100106ce:	317f      	adds	r1, #127	; 0x7f
100106d0:	2900      	cmp	r1, #0
100106d2:	dd25      	ble.n	10010720 <__aeabi_fmul+0x1c0>
100106d4:	0768      	lsls	r0, r5, #29
100106d6:	d004      	beq.n	100106e2 <__aeabi_fmul+0x182>
100106d8:	200f      	movs	r0, #15
100106da:	4028      	ands	r0, r5
100106dc:	2804      	cmp	r0, #4
100106de:	d000      	beq.n	100106e2 <__aeabi_fmul+0x182>
100106e0:	3504      	adds	r5, #4
100106e2:	0128      	lsls	r0, r5, #4
100106e4:	d503      	bpl.n	100106ee <__aeabi_fmul+0x18e>
100106e6:	4927      	ldr	r1, [pc, #156]	; (10010784 <__aeabi_fmul+0x224>)
100106e8:	3380      	adds	r3, #128	; 0x80
100106ea:	400d      	ands	r5, r1
100106ec:	0019      	movs	r1, r3
100106ee:	29fe      	cmp	r1, #254	; 0xfe
100106f0:	dca3      	bgt.n	1001063a <__aeabi_fmul+0xda>
100106f2:	2401      	movs	r4, #1
100106f4:	01ad      	lsls	r5, r5, #6
100106f6:	0a6e      	lsrs	r6, r5, #9
100106f8:	4014      	ands	r4, r2
100106fa:	b2cd      	uxtb	r5, r1
100106fc:	e779      	b.n	100105f2 <__aeabi_fmul+0x92>
100106fe:	2080      	movs	r0, #128	; 0x80
10010700:	03c0      	lsls	r0, r0, #15
10010702:	4206      	tst	r6, r0
10010704:	d007      	beq.n	10010716 <__aeabi_fmul+0x1b6>
10010706:	4205      	tst	r5, r0
10010708:	d105      	bne.n	10010716 <__aeabi_fmul+0x1b6>
1001070a:	4328      	orrs	r0, r5
1001070c:	0246      	lsls	r6, r0, #9
1001070e:	0a76      	lsrs	r6, r6, #9
10010710:	4644      	mov	r4, r8
10010712:	25ff      	movs	r5, #255	; 0xff
10010714:	e76d      	b.n	100105f2 <__aeabi_fmul+0x92>
10010716:	4306      	orrs	r6, r0
10010718:	0276      	lsls	r6, r6, #9
1001071a:	0a76      	lsrs	r6, r6, #9
1001071c:	25ff      	movs	r5, #255	; 0xff
1001071e:	e768      	b.n	100105f2 <__aeabi_fmul+0x92>
10010720:	2401      	movs	r4, #1
10010722:	1a61      	subs	r1, r4, r1
10010724:	291b      	cmp	r1, #27
10010726:	dd05      	ble.n	10010734 <__aeabi_fmul+0x1d4>
10010728:	4014      	ands	r4, r2
1001072a:	2500      	movs	r5, #0
1001072c:	2600      	movs	r6, #0
1001072e:	e760      	b.n	100105f2 <__aeabi_fmul+0x92>
10010730:	4663      	mov	r3, ip
10010732:	e7cb      	b.n	100106cc <__aeabi_fmul+0x16c>
10010734:	002e      	movs	r6, r5
10010736:	2320      	movs	r3, #32
10010738:	40ce      	lsrs	r6, r1
1001073a:	1a59      	subs	r1, r3, r1
1001073c:	408d      	lsls	r5, r1
1001073e:	1e6b      	subs	r3, r5, #1
10010740:	419d      	sbcs	r5, r3
10010742:	432e      	orrs	r6, r5
10010744:	0773      	lsls	r3, r6, #29
10010746:	d004      	beq.n	10010752 <__aeabi_fmul+0x1f2>
10010748:	230f      	movs	r3, #15
1001074a:	4033      	ands	r3, r6
1001074c:	2b04      	cmp	r3, #4
1001074e:	d000      	beq.n	10010752 <__aeabi_fmul+0x1f2>
10010750:	3604      	adds	r6, #4
10010752:	0173      	lsls	r3, r6, #5
10010754:	d504      	bpl.n	10010760 <__aeabi_fmul+0x200>
10010756:	2401      	movs	r4, #1
10010758:	2501      	movs	r5, #1
1001075a:	4014      	ands	r4, r2
1001075c:	2600      	movs	r6, #0
1001075e:	e748      	b.n	100105f2 <__aeabi_fmul+0x92>
10010760:	2401      	movs	r4, #1
10010762:	01b6      	lsls	r6, r6, #6
10010764:	0a76      	lsrs	r6, r6, #9
10010766:	4014      	ands	r4, r2
10010768:	2500      	movs	r5, #0
1001076a:	e742      	b.n	100105f2 <__aeabi_fmul+0x92>
1001076c:	2680      	movs	r6, #128	; 0x80
1001076e:	2401      	movs	r4, #1
10010770:	03f6      	lsls	r6, r6, #15
10010772:	432e      	orrs	r6, r5
10010774:	0276      	lsls	r6, r6, #9
10010776:	0a76      	lsrs	r6, r6, #9
10010778:	4014      	ands	r4, r2
1001077a:	25ff      	movs	r5, #255	; 0xff
1001077c:	e739      	b.n	100105f2 <__aeabi_fmul+0x92>
1001077e:	46c0      	nop			; (mov r8, r8)
10010780:	10014060 	.word	0x10014060
10010784:	f7ffffff 	.word	0xf7ffffff

10010788 <__aeabi_fsub>:
10010788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001078a:	024a      	lsls	r2, r1, #9
1001078c:	004e      	lsls	r6, r1, #1
1001078e:	0243      	lsls	r3, r0, #9
10010790:	0044      	lsls	r4, r0, #1
10010792:	0e24      	lsrs	r4, r4, #24
10010794:	0fc5      	lsrs	r5, r0, #31
10010796:	099b      	lsrs	r3, r3, #6
10010798:	0e36      	lsrs	r6, r6, #24
1001079a:	0fc9      	lsrs	r1, r1, #31
1001079c:	0992      	lsrs	r2, r2, #6
1001079e:	2eff      	cmp	r6, #255	; 0xff
100107a0:	d100      	bne.n	100107a4 <__aeabi_fsub+0x1c>
100107a2:	e083      	b.n	100108ac <__aeabi_fsub+0x124>
100107a4:	2001      	movs	r0, #1
100107a6:	4041      	eors	r1, r0
100107a8:	1ba0      	subs	r0, r4, r6
100107aa:	42a9      	cmp	r1, r5
100107ac:	d05c      	beq.n	10010868 <__aeabi_fsub+0xe0>
100107ae:	2800      	cmp	r0, #0
100107b0:	dc00      	bgt.n	100107b4 <__aeabi_fsub+0x2c>
100107b2:	e095      	b.n	100108e0 <__aeabi_fsub+0x158>
100107b4:	2e00      	cmp	r6, #0
100107b6:	d11c      	bne.n	100107f2 <__aeabi_fsub+0x6a>
100107b8:	2a00      	cmp	r2, #0
100107ba:	d000      	beq.n	100107be <__aeabi_fsub+0x36>
100107bc:	e081      	b.n	100108c2 <__aeabi_fsub+0x13a>
100107be:	075a      	lsls	r2, r3, #29
100107c0:	d004      	beq.n	100107cc <__aeabi_fsub+0x44>
100107c2:	220f      	movs	r2, #15
100107c4:	401a      	ands	r2, r3
100107c6:	2a04      	cmp	r2, #4
100107c8:	d000      	beq.n	100107cc <__aeabi_fsub+0x44>
100107ca:	3304      	adds	r3, #4
100107cc:	015a      	lsls	r2, r3, #5
100107ce:	d53b      	bpl.n	10010848 <__aeabi_fsub+0xc0>
100107d0:	3401      	adds	r4, #1
100107d2:	2cff      	cmp	r4, #255	; 0xff
100107d4:	d100      	bne.n	100107d8 <__aeabi_fsub+0x50>
100107d6:	e091      	b.n	100108fc <__aeabi_fsub+0x174>
100107d8:	2001      	movs	r0, #1
100107da:	019b      	lsls	r3, r3, #6
100107dc:	0a5b      	lsrs	r3, r3, #9
100107de:	b2e4      	uxtb	r4, r4
100107e0:	4005      	ands	r5, r0
100107e2:	025b      	lsls	r3, r3, #9
100107e4:	05e4      	lsls	r4, r4, #23
100107e6:	0a5b      	lsrs	r3, r3, #9
100107e8:	07ed      	lsls	r5, r5, #31
100107ea:	4323      	orrs	r3, r4
100107ec:	432b      	orrs	r3, r5
100107ee:	0018      	movs	r0, r3
100107f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100107f2:	2cff      	cmp	r4, #255	; 0xff
100107f4:	d0e3      	beq.n	100107be <__aeabi_fsub+0x36>
100107f6:	2180      	movs	r1, #128	; 0x80
100107f8:	04c9      	lsls	r1, r1, #19
100107fa:	430a      	orrs	r2, r1
100107fc:	281b      	cmp	r0, #27
100107fe:	dd00      	ble.n	10010802 <__aeabi_fsub+0x7a>
10010800:	e090      	b.n	10010924 <__aeabi_fsub+0x19c>
10010802:	0016      	movs	r6, r2
10010804:	2120      	movs	r1, #32
10010806:	40c6      	lsrs	r6, r0
10010808:	1a08      	subs	r0, r1, r0
1001080a:	4082      	lsls	r2, r0
1001080c:	1e51      	subs	r1, r2, #1
1001080e:	418a      	sbcs	r2, r1
10010810:	4332      	orrs	r2, r6
10010812:	1a9b      	subs	r3, r3, r2
10010814:	015a      	lsls	r2, r3, #5
10010816:	d515      	bpl.n	10010844 <__aeabi_fsub+0xbc>
10010818:	019b      	lsls	r3, r3, #6
1001081a:	099e      	lsrs	r6, r3, #6
1001081c:	0030      	movs	r0, r6
1001081e:	f001 f80f 	bl	10011840 <__clzsi2>
10010822:	3805      	subs	r0, #5
10010824:	4086      	lsls	r6, r0
10010826:	4284      	cmp	r4, r0
10010828:	dc6c      	bgt.n	10010904 <__aeabi_fsub+0x17c>
1001082a:	1b04      	subs	r4, r0, r4
1001082c:	0033      	movs	r3, r6
1001082e:	2020      	movs	r0, #32
10010830:	3401      	adds	r4, #1
10010832:	40e3      	lsrs	r3, r4
10010834:	1b04      	subs	r4, r0, r4
10010836:	40a6      	lsls	r6, r4
10010838:	1e72      	subs	r2, r6, #1
1001083a:	4196      	sbcs	r6, r2
1001083c:	2400      	movs	r4, #0
1001083e:	4333      	orrs	r3, r6
10010840:	e7bd      	b.n	100107be <__aeabi_fsub+0x36>
10010842:	000d      	movs	r5, r1
10010844:	075a      	lsls	r2, r3, #29
10010846:	d1bc      	bne.n	100107c2 <__aeabi_fsub+0x3a>
10010848:	08df      	lsrs	r7, r3, #3
1001084a:	2301      	movs	r3, #1
1001084c:	401d      	ands	r5, r3
1001084e:	2cff      	cmp	r4, #255	; 0xff
10010850:	d133      	bne.n	100108ba <__aeabi_fsub+0x132>
10010852:	2f00      	cmp	r7, #0
10010854:	d100      	bne.n	10010858 <__aeabi_fsub+0xd0>
10010856:	e090      	b.n	1001097a <__aeabi_fsub+0x1f2>
10010858:	2280      	movs	r2, #128	; 0x80
1001085a:	03d2      	lsls	r2, r2, #15
1001085c:	0013      	movs	r3, r2
1001085e:	433b      	orrs	r3, r7
10010860:	025b      	lsls	r3, r3, #9
10010862:	0a5b      	lsrs	r3, r3, #9
10010864:	24ff      	movs	r4, #255	; 0xff
10010866:	e7bc      	b.n	100107e2 <__aeabi_fsub+0x5a>
10010868:	2800      	cmp	r0, #0
1001086a:	dd4f      	ble.n	1001090c <__aeabi_fsub+0x184>
1001086c:	2e00      	cmp	r6, #0
1001086e:	d02e      	beq.n	100108ce <__aeabi_fsub+0x146>
10010870:	2cff      	cmp	r4, #255	; 0xff
10010872:	d0a4      	beq.n	100107be <__aeabi_fsub+0x36>
10010874:	2580      	movs	r5, #128	; 0x80
10010876:	04ed      	lsls	r5, r5, #19
10010878:	432a      	orrs	r2, r5
1001087a:	281b      	cmp	r0, #27
1001087c:	dd00      	ble.n	10010880 <__aeabi_fsub+0xf8>
1001087e:	e097      	b.n	100109b0 <__aeabi_fsub+0x228>
10010880:	0016      	movs	r6, r2
10010882:	2520      	movs	r5, #32
10010884:	40c6      	lsrs	r6, r0
10010886:	1a28      	subs	r0, r5, r0
10010888:	4082      	lsls	r2, r0
1001088a:	1e50      	subs	r0, r2, #1
1001088c:	4182      	sbcs	r2, r0
1001088e:	4332      	orrs	r2, r6
10010890:	189b      	adds	r3, r3, r2
10010892:	015a      	lsls	r2, r3, #5
10010894:	d5d5      	bpl.n	10010842 <__aeabi_fsub+0xba>
10010896:	3401      	adds	r4, #1
10010898:	2cff      	cmp	r4, #255	; 0xff
1001089a:	d06d      	beq.n	10010978 <__aeabi_fsub+0x1f0>
1001089c:	2201      	movs	r2, #1
1001089e:	487b      	ldr	r0, [pc, #492]	; (10010a8c <__aeabi_fsub+0x304>)
100108a0:	401a      	ands	r2, r3
100108a2:	085b      	lsrs	r3, r3, #1
100108a4:	4003      	ands	r3, r0
100108a6:	4313      	orrs	r3, r2
100108a8:	000d      	movs	r5, r1
100108aa:	e788      	b.n	100107be <__aeabi_fsub+0x36>
100108ac:	2a00      	cmp	r2, #0
100108ae:	d000      	beq.n	100108b2 <__aeabi_fsub+0x12a>
100108b0:	e77a      	b.n	100107a8 <__aeabi_fsub+0x20>
100108b2:	e777      	b.n	100107a4 <__aeabi_fsub+0x1c>
100108b4:	1e03      	subs	r3, r0, #0
100108b6:	d1c5      	bne.n	10010844 <__aeabi_fsub+0xbc>
100108b8:	2500      	movs	r5, #0
100108ba:	027b      	lsls	r3, r7, #9
100108bc:	0a5b      	lsrs	r3, r3, #9
100108be:	b2e4      	uxtb	r4, r4
100108c0:	e78f      	b.n	100107e2 <__aeabi_fsub+0x5a>
100108c2:	3801      	subs	r0, #1
100108c4:	2800      	cmp	r0, #0
100108c6:	d0a4      	beq.n	10010812 <__aeabi_fsub+0x8a>
100108c8:	2cff      	cmp	r4, #255	; 0xff
100108ca:	d197      	bne.n	100107fc <__aeabi_fsub+0x74>
100108cc:	e777      	b.n	100107be <__aeabi_fsub+0x36>
100108ce:	2a00      	cmp	r2, #0
100108d0:	d100      	bne.n	100108d4 <__aeabi_fsub+0x14c>
100108d2:	e774      	b.n	100107be <__aeabi_fsub+0x36>
100108d4:	3801      	subs	r0, #1
100108d6:	2800      	cmp	r0, #0
100108d8:	d0da      	beq.n	10010890 <__aeabi_fsub+0x108>
100108da:	2cff      	cmp	r4, #255	; 0xff
100108dc:	d1cd      	bne.n	1001087a <__aeabi_fsub+0xf2>
100108de:	e76e      	b.n	100107be <__aeabi_fsub+0x36>
100108e0:	2800      	cmp	r0, #0
100108e2:	d121      	bne.n	10010928 <__aeabi_fsub+0x1a0>
100108e4:	1c60      	adds	r0, r4, #1
100108e6:	b2c0      	uxtb	r0, r0
100108e8:	2801      	cmp	r0, #1
100108ea:	dd58      	ble.n	1001099e <__aeabi_fsub+0x216>
100108ec:	2780      	movs	r7, #128	; 0x80
100108ee:	1a9e      	subs	r6, r3, r2
100108f0:	04ff      	lsls	r7, r7, #19
100108f2:	4037      	ands	r7, r6
100108f4:	d02f      	beq.n	10010956 <__aeabi_fsub+0x1ce>
100108f6:	1ad6      	subs	r6, r2, r3
100108f8:	000d      	movs	r5, r1
100108fa:	e78f      	b.n	1001081c <__aeabi_fsub+0x94>
100108fc:	2301      	movs	r3, #1
100108fe:	401d      	ands	r5, r3
10010900:	2300      	movs	r3, #0
10010902:	e76e      	b.n	100107e2 <__aeabi_fsub+0x5a>
10010904:	4b62      	ldr	r3, [pc, #392]	; (10010a90 <__aeabi_fsub+0x308>)
10010906:	1a24      	subs	r4, r4, r0
10010908:	4033      	ands	r3, r6
1001090a:	e758      	b.n	100107be <__aeabi_fsub+0x36>
1001090c:	2800      	cmp	r0, #0
1001090e:	d151      	bne.n	100109b4 <__aeabi_fsub+0x22c>
10010910:	1c60      	adds	r0, r4, #1
10010912:	b2c6      	uxtb	r6, r0
10010914:	2e01      	cmp	r6, #1
10010916:	dd33      	ble.n	10010980 <__aeabi_fsub+0x1f8>
10010918:	28ff      	cmp	r0, #255	; 0xff
1001091a:	d02d      	beq.n	10010978 <__aeabi_fsub+0x1f0>
1001091c:	189b      	adds	r3, r3, r2
1001091e:	085b      	lsrs	r3, r3, #1
10010920:	0004      	movs	r4, r0
10010922:	e74c      	b.n	100107be <__aeabi_fsub+0x36>
10010924:	2201      	movs	r2, #1
10010926:	e774      	b.n	10010812 <__aeabi_fsub+0x8a>
10010928:	2c00      	cmp	r4, #0
1001092a:	d01a      	beq.n	10010962 <__aeabi_fsub+0x1da>
1001092c:	2eff      	cmp	r6, #255	; 0xff
1001092e:	d01f      	beq.n	10010970 <__aeabi_fsub+0x1e8>
10010930:	2480      	movs	r4, #128	; 0x80
10010932:	04e4      	lsls	r4, r4, #19
10010934:	4240      	negs	r0, r0
10010936:	4323      	orrs	r3, r4
10010938:	281b      	cmp	r0, #27
1001093a:	dd00      	ble.n	1001093e <__aeabi_fsub+0x1b6>
1001093c:	e096      	b.n	10010a6c <__aeabi_fsub+0x2e4>
1001093e:	001d      	movs	r5, r3
10010940:	2420      	movs	r4, #32
10010942:	40c5      	lsrs	r5, r0
10010944:	1a20      	subs	r0, r4, r0
10010946:	4083      	lsls	r3, r0
10010948:	1e58      	subs	r0, r3, #1
1001094a:	4183      	sbcs	r3, r0
1001094c:	432b      	orrs	r3, r5
1001094e:	1ad3      	subs	r3, r2, r3
10010950:	0034      	movs	r4, r6
10010952:	000d      	movs	r5, r1
10010954:	e75e      	b.n	10010814 <__aeabi_fsub+0x8c>
10010956:	2e00      	cmp	r6, #0
10010958:	d000      	beq.n	1001095c <__aeabi_fsub+0x1d4>
1001095a:	e75f      	b.n	1001081c <__aeabi_fsub+0x94>
1001095c:	2500      	movs	r5, #0
1001095e:	2400      	movs	r4, #0
10010960:	e7ab      	b.n	100108ba <__aeabi_fsub+0x132>
10010962:	2b00      	cmp	r3, #0
10010964:	d044      	beq.n	100109f0 <__aeabi_fsub+0x268>
10010966:	43c0      	mvns	r0, r0
10010968:	2800      	cmp	r0, #0
1001096a:	d0f0      	beq.n	1001094e <__aeabi_fsub+0x1c6>
1001096c:	2eff      	cmp	r6, #255	; 0xff
1001096e:	d1e3      	bne.n	10010938 <__aeabi_fsub+0x1b0>
10010970:	0013      	movs	r3, r2
10010972:	24ff      	movs	r4, #255	; 0xff
10010974:	000d      	movs	r5, r1
10010976:	e722      	b.n	100107be <__aeabi_fsub+0x36>
10010978:	000d      	movs	r5, r1
1001097a:	24ff      	movs	r4, #255	; 0xff
1001097c:	2300      	movs	r3, #0
1001097e:	e730      	b.n	100107e2 <__aeabi_fsub+0x5a>
10010980:	2c00      	cmp	r4, #0
10010982:	d15d      	bne.n	10010a40 <__aeabi_fsub+0x2b8>
10010984:	2b00      	cmp	r3, #0
10010986:	d07d      	beq.n	10010a84 <__aeabi_fsub+0x2fc>
10010988:	2a00      	cmp	r2, #0
1001098a:	d100      	bne.n	1001098e <__aeabi_fsub+0x206>
1001098c:	e717      	b.n	100107be <__aeabi_fsub+0x36>
1001098e:	189b      	adds	r3, r3, r2
10010990:	015a      	lsls	r2, r3, #5
10010992:	d400      	bmi.n	10010996 <__aeabi_fsub+0x20e>
10010994:	e756      	b.n	10010844 <__aeabi_fsub+0xbc>
10010996:	4a3e      	ldr	r2, [pc, #248]	; (10010a90 <__aeabi_fsub+0x308>)
10010998:	0004      	movs	r4, r0
1001099a:	4013      	ands	r3, r2
1001099c:	e70f      	b.n	100107be <__aeabi_fsub+0x36>
1001099e:	2c00      	cmp	r4, #0
100109a0:	d11e      	bne.n	100109e0 <__aeabi_fsub+0x258>
100109a2:	2b00      	cmp	r3, #0
100109a4:	d12f      	bne.n	10010a06 <__aeabi_fsub+0x27e>
100109a6:	2a00      	cmp	r2, #0
100109a8:	d065      	beq.n	10010a76 <__aeabi_fsub+0x2ee>
100109aa:	0013      	movs	r3, r2
100109ac:	000d      	movs	r5, r1
100109ae:	e706      	b.n	100107be <__aeabi_fsub+0x36>
100109b0:	2201      	movs	r2, #1
100109b2:	e76d      	b.n	10010890 <__aeabi_fsub+0x108>
100109b4:	2c00      	cmp	r4, #0
100109b6:	d11f      	bne.n	100109f8 <__aeabi_fsub+0x270>
100109b8:	2b00      	cmp	r3, #0
100109ba:	d059      	beq.n	10010a70 <__aeabi_fsub+0x2e8>
100109bc:	43c0      	mvns	r0, r0
100109be:	2800      	cmp	r0, #0
100109c0:	d00b      	beq.n	100109da <__aeabi_fsub+0x252>
100109c2:	2eff      	cmp	r6, #255	; 0xff
100109c4:	d04f      	beq.n	10010a66 <__aeabi_fsub+0x2de>
100109c6:	281b      	cmp	r0, #27
100109c8:	dc5e      	bgt.n	10010a88 <__aeabi_fsub+0x300>
100109ca:	001d      	movs	r5, r3
100109cc:	2420      	movs	r4, #32
100109ce:	40c5      	lsrs	r5, r0
100109d0:	1a20      	subs	r0, r4, r0
100109d2:	4083      	lsls	r3, r0
100109d4:	1e58      	subs	r0, r3, #1
100109d6:	4183      	sbcs	r3, r0
100109d8:	432b      	orrs	r3, r5
100109da:	189b      	adds	r3, r3, r2
100109dc:	0034      	movs	r4, r6
100109de:	e758      	b.n	10010892 <__aeabi_fsub+0x10a>
100109e0:	2b00      	cmp	r3, #0
100109e2:	d11c      	bne.n	10010a1e <__aeabi_fsub+0x296>
100109e4:	2a00      	cmp	r2, #0
100109e6:	d049      	beq.n	10010a7c <__aeabi_fsub+0x2f4>
100109e8:	0013      	movs	r3, r2
100109ea:	000d      	movs	r5, r1
100109ec:	24ff      	movs	r4, #255	; 0xff
100109ee:	e6e6      	b.n	100107be <__aeabi_fsub+0x36>
100109f0:	0013      	movs	r3, r2
100109f2:	0034      	movs	r4, r6
100109f4:	000d      	movs	r5, r1
100109f6:	e6e2      	b.n	100107be <__aeabi_fsub+0x36>
100109f8:	2eff      	cmp	r6, #255	; 0xff
100109fa:	d034      	beq.n	10010a66 <__aeabi_fsub+0x2de>
100109fc:	2480      	movs	r4, #128	; 0x80
100109fe:	04e4      	lsls	r4, r4, #19
10010a00:	4240      	negs	r0, r0
10010a02:	4323      	orrs	r3, r4
10010a04:	e7df      	b.n	100109c6 <__aeabi_fsub+0x23e>
10010a06:	2a00      	cmp	r2, #0
10010a08:	d100      	bne.n	10010a0c <__aeabi_fsub+0x284>
10010a0a:	e6d8      	b.n	100107be <__aeabi_fsub+0x36>
10010a0c:	2780      	movs	r7, #128	; 0x80
10010a0e:	1a98      	subs	r0, r3, r2
10010a10:	04ff      	lsls	r7, r7, #19
10010a12:	4007      	ands	r7, r0
10010a14:	d100      	bne.n	10010a18 <__aeabi_fsub+0x290>
10010a16:	e74d      	b.n	100108b4 <__aeabi_fsub+0x12c>
10010a18:	1ad3      	subs	r3, r2, r3
10010a1a:	000d      	movs	r5, r1
10010a1c:	e6cf      	b.n	100107be <__aeabi_fsub+0x36>
10010a1e:	24ff      	movs	r4, #255	; 0xff
10010a20:	2a00      	cmp	r2, #0
10010a22:	d100      	bne.n	10010a26 <__aeabi_fsub+0x29e>
10010a24:	e6cb      	b.n	100107be <__aeabi_fsub+0x36>
10010a26:	2080      	movs	r0, #128	; 0x80
10010a28:	08db      	lsrs	r3, r3, #3
10010a2a:	03c0      	lsls	r0, r0, #15
10010a2c:	4203      	tst	r3, r0
10010a2e:	d004      	beq.n	10010a3a <__aeabi_fsub+0x2b2>
10010a30:	08d2      	lsrs	r2, r2, #3
10010a32:	4202      	tst	r2, r0
10010a34:	d101      	bne.n	10010a3a <__aeabi_fsub+0x2b2>
10010a36:	0013      	movs	r3, r2
10010a38:	000d      	movs	r5, r1
10010a3a:	00db      	lsls	r3, r3, #3
10010a3c:	24ff      	movs	r4, #255	; 0xff
10010a3e:	e6be      	b.n	100107be <__aeabi_fsub+0x36>
10010a40:	2b00      	cmp	r3, #0
10010a42:	d010      	beq.n	10010a66 <__aeabi_fsub+0x2de>
10010a44:	24ff      	movs	r4, #255	; 0xff
10010a46:	2a00      	cmp	r2, #0
10010a48:	d100      	bne.n	10010a4c <__aeabi_fsub+0x2c4>
10010a4a:	e6b8      	b.n	100107be <__aeabi_fsub+0x36>
10010a4c:	2080      	movs	r0, #128	; 0x80
10010a4e:	08db      	lsrs	r3, r3, #3
10010a50:	03c0      	lsls	r0, r0, #15
10010a52:	4203      	tst	r3, r0
10010a54:	d003      	beq.n	10010a5e <__aeabi_fsub+0x2d6>
10010a56:	08d2      	lsrs	r2, r2, #3
10010a58:	4202      	tst	r2, r0
10010a5a:	d100      	bne.n	10010a5e <__aeabi_fsub+0x2d6>
10010a5c:	0013      	movs	r3, r2
10010a5e:	00db      	lsls	r3, r3, #3
10010a60:	000d      	movs	r5, r1
10010a62:	24ff      	movs	r4, #255	; 0xff
10010a64:	e6ab      	b.n	100107be <__aeabi_fsub+0x36>
10010a66:	0013      	movs	r3, r2
10010a68:	24ff      	movs	r4, #255	; 0xff
10010a6a:	e6a8      	b.n	100107be <__aeabi_fsub+0x36>
10010a6c:	2301      	movs	r3, #1
10010a6e:	e76e      	b.n	1001094e <__aeabi_fsub+0x1c6>
10010a70:	0013      	movs	r3, r2
10010a72:	0034      	movs	r4, r6
10010a74:	e6a3      	b.n	100107be <__aeabi_fsub+0x36>
10010a76:	2700      	movs	r7, #0
10010a78:	2500      	movs	r5, #0
10010a7a:	e71e      	b.n	100108ba <__aeabi_fsub+0x132>
10010a7c:	2780      	movs	r7, #128	; 0x80
10010a7e:	2500      	movs	r5, #0
10010a80:	03ff      	lsls	r7, r7, #15
10010a82:	e6e9      	b.n	10010858 <__aeabi_fsub+0xd0>
10010a84:	0013      	movs	r3, r2
10010a86:	e69a      	b.n	100107be <__aeabi_fsub+0x36>
10010a88:	2301      	movs	r3, #1
10010a8a:	e7a6      	b.n	100109da <__aeabi_fsub+0x252>
10010a8c:	7dffffff 	.word	0x7dffffff
10010a90:	fbffffff 	.word	0xfbffffff

10010a94 <__aeabi_f2iz>:
10010a94:	0243      	lsls	r3, r0, #9
10010a96:	0a59      	lsrs	r1, r3, #9
10010a98:	0043      	lsls	r3, r0, #1
10010a9a:	0fc2      	lsrs	r2, r0, #31
10010a9c:	0e1b      	lsrs	r3, r3, #24
10010a9e:	2000      	movs	r0, #0
10010aa0:	2b7e      	cmp	r3, #126	; 0x7e
10010aa2:	dd0e      	ble.n	10010ac2 <__aeabi_f2iz+0x2e>
10010aa4:	2b9d      	cmp	r3, #157	; 0x9d
10010aa6:	dc0d      	bgt.n	10010ac4 <__aeabi_f2iz+0x30>
10010aa8:	2080      	movs	r0, #128	; 0x80
10010aaa:	0400      	lsls	r0, r0, #16
10010aac:	4301      	orrs	r1, r0
10010aae:	2b95      	cmp	r3, #149	; 0x95
10010ab0:	dc0b      	bgt.n	10010aca <__aeabi_f2iz+0x36>
10010ab2:	2096      	movs	r0, #150	; 0x96
10010ab4:	1ac3      	subs	r3, r0, r3
10010ab6:	40d9      	lsrs	r1, r3
10010ab8:	000b      	movs	r3, r1
10010aba:	4258      	negs	r0, r3
10010abc:	2a00      	cmp	r2, #0
10010abe:	d100      	bne.n	10010ac2 <__aeabi_f2iz+0x2e>
10010ac0:	0018      	movs	r0, r3
10010ac2:	4770      	bx	lr
10010ac4:	4b03      	ldr	r3, [pc, #12]	; (10010ad4 <__aeabi_f2iz+0x40>)
10010ac6:	18d0      	adds	r0, r2, r3
10010ac8:	e7fb      	b.n	10010ac2 <__aeabi_f2iz+0x2e>
10010aca:	3b96      	subs	r3, #150	; 0x96
10010acc:	4099      	lsls	r1, r3
10010ace:	000b      	movs	r3, r1
10010ad0:	e7f3      	b.n	10010aba <__aeabi_f2iz+0x26>
10010ad2:	46c0      	nop			; (mov r8, r8)
10010ad4:	7fffffff 	.word	0x7fffffff

10010ad8 <__aeabi_dmul>:
10010ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ada:	465f      	mov	r7, fp
10010adc:	4656      	mov	r6, sl
10010ade:	464d      	mov	r5, r9
10010ae0:	4644      	mov	r4, r8
10010ae2:	b4f0      	push	{r4, r5, r6, r7}
10010ae4:	030d      	lsls	r5, r1, #12
10010ae6:	4699      	mov	r9, r3
10010ae8:	004e      	lsls	r6, r1, #1
10010aea:	0b2b      	lsrs	r3, r5, #12
10010aec:	b087      	sub	sp, #28
10010aee:	0007      	movs	r7, r0
10010af0:	4692      	mov	sl, r2
10010af2:	4680      	mov	r8, r0
10010af4:	469b      	mov	fp, r3
10010af6:	0d76      	lsrs	r6, r6, #21
10010af8:	0fcc      	lsrs	r4, r1, #31
10010afa:	2e00      	cmp	r6, #0
10010afc:	d069      	beq.n	10010bd2 <__aeabi_dmul+0xfa>
10010afe:	4b6d      	ldr	r3, [pc, #436]	; (10010cb4 <__aeabi_dmul+0x1dc>)
10010b00:	429e      	cmp	r6, r3
10010b02:	d035      	beq.n	10010b70 <__aeabi_dmul+0x98>
10010b04:	465b      	mov	r3, fp
10010b06:	2280      	movs	r2, #128	; 0x80
10010b08:	00dd      	lsls	r5, r3, #3
10010b0a:	0412      	lsls	r2, r2, #16
10010b0c:	0f43      	lsrs	r3, r0, #29
10010b0e:	4313      	orrs	r3, r2
10010b10:	432b      	orrs	r3, r5
10010b12:	469b      	mov	fp, r3
10010b14:	00c3      	lsls	r3, r0, #3
10010b16:	4698      	mov	r8, r3
10010b18:	4b67      	ldr	r3, [pc, #412]	; (10010cb8 <__aeabi_dmul+0x1e0>)
10010b1a:	2700      	movs	r7, #0
10010b1c:	469c      	mov	ip, r3
10010b1e:	2300      	movs	r3, #0
10010b20:	4466      	add	r6, ip
10010b22:	9301      	str	r3, [sp, #4]
10010b24:	464a      	mov	r2, r9
10010b26:	0315      	lsls	r5, r2, #12
10010b28:	0050      	lsls	r0, r2, #1
10010b2a:	0fd2      	lsrs	r2, r2, #31
10010b2c:	4653      	mov	r3, sl
10010b2e:	0b2d      	lsrs	r5, r5, #12
10010b30:	0d40      	lsrs	r0, r0, #21
10010b32:	4691      	mov	r9, r2
10010b34:	d100      	bne.n	10010b38 <__aeabi_dmul+0x60>
10010b36:	e076      	b.n	10010c26 <__aeabi_dmul+0x14e>
10010b38:	4a5e      	ldr	r2, [pc, #376]	; (10010cb4 <__aeabi_dmul+0x1dc>)
10010b3a:	4290      	cmp	r0, r2
10010b3c:	d06c      	beq.n	10010c18 <__aeabi_dmul+0x140>
10010b3e:	2280      	movs	r2, #128	; 0x80
10010b40:	0f5b      	lsrs	r3, r3, #29
10010b42:	0412      	lsls	r2, r2, #16
10010b44:	4313      	orrs	r3, r2
10010b46:	4a5c      	ldr	r2, [pc, #368]	; (10010cb8 <__aeabi_dmul+0x1e0>)
10010b48:	00ed      	lsls	r5, r5, #3
10010b4a:	4694      	mov	ip, r2
10010b4c:	431d      	orrs	r5, r3
10010b4e:	4653      	mov	r3, sl
10010b50:	2200      	movs	r2, #0
10010b52:	00db      	lsls	r3, r3, #3
10010b54:	4460      	add	r0, ip
10010b56:	4649      	mov	r1, r9
10010b58:	1836      	adds	r6, r6, r0
10010b5a:	1c70      	adds	r0, r6, #1
10010b5c:	4061      	eors	r1, r4
10010b5e:	9002      	str	r0, [sp, #8]
10010b60:	4317      	orrs	r7, r2
10010b62:	2f0f      	cmp	r7, #15
10010b64:	d900      	bls.n	10010b68 <__aeabi_dmul+0x90>
10010b66:	e0af      	b.n	10010cc8 <__aeabi_dmul+0x1f0>
10010b68:	4854      	ldr	r0, [pc, #336]	; (10010cbc <__aeabi_dmul+0x1e4>)
10010b6a:	00bf      	lsls	r7, r7, #2
10010b6c:	59c7      	ldr	r7, [r0, r7]
10010b6e:	46bf      	mov	pc, r7
10010b70:	465b      	mov	r3, fp
10010b72:	431f      	orrs	r7, r3
10010b74:	d000      	beq.n	10010b78 <__aeabi_dmul+0xa0>
10010b76:	e088      	b.n	10010c8a <__aeabi_dmul+0x1b2>
10010b78:	2300      	movs	r3, #0
10010b7a:	469b      	mov	fp, r3
10010b7c:	4698      	mov	r8, r3
10010b7e:	3302      	adds	r3, #2
10010b80:	2708      	movs	r7, #8
10010b82:	9301      	str	r3, [sp, #4]
10010b84:	e7ce      	b.n	10010b24 <__aeabi_dmul+0x4c>
10010b86:	4649      	mov	r1, r9
10010b88:	2a02      	cmp	r2, #2
10010b8a:	d06a      	beq.n	10010c62 <__aeabi_dmul+0x18a>
10010b8c:	2a03      	cmp	r2, #3
10010b8e:	d100      	bne.n	10010b92 <__aeabi_dmul+0xba>
10010b90:	e209      	b.n	10010fa6 <__aeabi_dmul+0x4ce>
10010b92:	2a01      	cmp	r2, #1
10010b94:	d000      	beq.n	10010b98 <__aeabi_dmul+0xc0>
10010b96:	e1bb      	b.n	10010f10 <__aeabi_dmul+0x438>
10010b98:	4011      	ands	r1, r2
10010b9a:	2200      	movs	r2, #0
10010b9c:	2300      	movs	r3, #0
10010b9e:	2500      	movs	r5, #0
10010ba0:	4690      	mov	r8, r2
10010ba2:	b2cc      	uxtb	r4, r1
10010ba4:	2100      	movs	r1, #0
10010ba6:	032d      	lsls	r5, r5, #12
10010ba8:	0d0a      	lsrs	r2, r1, #20
10010baa:	0512      	lsls	r2, r2, #20
10010bac:	0b2d      	lsrs	r5, r5, #12
10010bae:	4315      	orrs	r5, r2
10010bb0:	4a43      	ldr	r2, [pc, #268]	; (10010cc0 <__aeabi_dmul+0x1e8>)
10010bb2:	051b      	lsls	r3, r3, #20
10010bb4:	4015      	ands	r5, r2
10010bb6:	431d      	orrs	r5, r3
10010bb8:	006d      	lsls	r5, r5, #1
10010bba:	07e4      	lsls	r4, r4, #31
10010bbc:	086d      	lsrs	r5, r5, #1
10010bbe:	4325      	orrs	r5, r4
10010bc0:	4640      	mov	r0, r8
10010bc2:	0029      	movs	r1, r5
10010bc4:	b007      	add	sp, #28
10010bc6:	bc3c      	pop	{r2, r3, r4, r5}
10010bc8:	4690      	mov	r8, r2
10010bca:	4699      	mov	r9, r3
10010bcc:	46a2      	mov	sl, r4
10010bce:	46ab      	mov	fp, r5
10010bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010bd2:	4303      	orrs	r3, r0
10010bd4:	d052      	beq.n	10010c7c <__aeabi_dmul+0x1a4>
10010bd6:	465b      	mov	r3, fp
10010bd8:	2b00      	cmp	r3, #0
10010bda:	d100      	bne.n	10010bde <__aeabi_dmul+0x106>
10010bdc:	e18a      	b.n	10010ef4 <__aeabi_dmul+0x41c>
10010bde:	4658      	mov	r0, fp
10010be0:	f000 fe2e 	bl	10011840 <__clzsi2>
10010be4:	0003      	movs	r3, r0
10010be6:	3b0b      	subs	r3, #11
10010be8:	2b1c      	cmp	r3, #28
10010bea:	dd00      	ble.n	10010bee <__aeabi_dmul+0x116>
10010bec:	e17b      	b.n	10010ee6 <__aeabi_dmul+0x40e>
10010bee:	221d      	movs	r2, #29
10010bf0:	1ad3      	subs	r3, r2, r3
10010bf2:	003a      	movs	r2, r7
10010bf4:	0001      	movs	r1, r0
10010bf6:	465d      	mov	r5, fp
10010bf8:	40da      	lsrs	r2, r3
10010bfa:	3908      	subs	r1, #8
10010bfc:	408d      	lsls	r5, r1
10010bfe:	0013      	movs	r3, r2
10010c00:	408f      	lsls	r7, r1
10010c02:	432b      	orrs	r3, r5
10010c04:	469b      	mov	fp, r3
10010c06:	46b8      	mov	r8, r7
10010c08:	4b2e      	ldr	r3, [pc, #184]	; (10010cc4 <__aeabi_dmul+0x1ec>)
10010c0a:	2700      	movs	r7, #0
10010c0c:	469c      	mov	ip, r3
10010c0e:	2300      	movs	r3, #0
10010c10:	4460      	add	r0, ip
10010c12:	4246      	negs	r6, r0
10010c14:	9301      	str	r3, [sp, #4]
10010c16:	e785      	b.n	10010b24 <__aeabi_dmul+0x4c>
10010c18:	4652      	mov	r2, sl
10010c1a:	432a      	orrs	r2, r5
10010c1c:	d12c      	bne.n	10010c78 <__aeabi_dmul+0x1a0>
10010c1e:	2500      	movs	r5, #0
10010c20:	2300      	movs	r3, #0
10010c22:	2202      	movs	r2, #2
10010c24:	e797      	b.n	10010b56 <__aeabi_dmul+0x7e>
10010c26:	4652      	mov	r2, sl
10010c28:	432a      	orrs	r2, r5
10010c2a:	d021      	beq.n	10010c70 <__aeabi_dmul+0x198>
10010c2c:	2d00      	cmp	r5, #0
10010c2e:	d100      	bne.n	10010c32 <__aeabi_dmul+0x15a>
10010c30:	e154      	b.n	10010edc <__aeabi_dmul+0x404>
10010c32:	0028      	movs	r0, r5
10010c34:	f000 fe04 	bl	10011840 <__clzsi2>
10010c38:	0003      	movs	r3, r0
10010c3a:	3b0b      	subs	r3, #11
10010c3c:	2b1c      	cmp	r3, #28
10010c3e:	dd00      	ble.n	10010c42 <__aeabi_dmul+0x16a>
10010c40:	e146      	b.n	10010ed0 <__aeabi_dmul+0x3f8>
10010c42:	211d      	movs	r1, #29
10010c44:	1acb      	subs	r3, r1, r3
10010c46:	4651      	mov	r1, sl
10010c48:	0002      	movs	r2, r0
10010c4a:	40d9      	lsrs	r1, r3
10010c4c:	4653      	mov	r3, sl
10010c4e:	3a08      	subs	r2, #8
10010c50:	4095      	lsls	r5, r2
10010c52:	4093      	lsls	r3, r2
10010c54:	430d      	orrs	r5, r1
10010c56:	4a1b      	ldr	r2, [pc, #108]	; (10010cc4 <__aeabi_dmul+0x1ec>)
10010c58:	4694      	mov	ip, r2
10010c5a:	4460      	add	r0, ip
10010c5c:	4240      	negs	r0, r0
10010c5e:	2200      	movs	r2, #0
10010c60:	e779      	b.n	10010b56 <__aeabi_dmul+0x7e>
10010c62:	2401      	movs	r4, #1
10010c64:	2200      	movs	r2, #0
10010c66:	400c      	ands	r4, r1
10010c68:	4b12      	ldr	r3, [pc, #72]	; (10010cb4 <__aeabi_dmul+0x1dc>)
10010c6a:	2500      	movs	r5, #0
10010c6c:	4690      	mov	r8, r2
10010c6e:	e799      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010c70:	2500      	movs	r5, #0
10010c72:	2300      	movs	r3, #0
10010c74:	2201      	movs	r2, #1
10010c76:	e76e      	b.n	10010b56 <__aeabi_dmul+0x7e>
10010c78:	2203      	movs	r2, #3
10010c7a:	e76c      	b.n	10010b56 <__aeabi_dmul+0x7e>
10010c7c:	2300      	movs	r3, #0
10010c7e:	469b      	mov	fp, r3
10010c80:	4698      	mov	r8, r3
10010c82:	3301      	adds	r3, #1
10010c84:	2704      	movs	r7, #4
10010c86:	9301      	str	r3, [sp, #4]
10010c88:	e74c      	b.n	10010b24 <__aeabi_dmul+0x4c>
10010c8a:	2303      	movs	r3, #3
10010c8c:	270c      	movs	r7, #12
10010c8e:	9301      	str	r3, [sp, #4]
10010c90:	e748      	b.n	10010b24 <__aeabi_dmul+0x4c>
10010c92:	2300      	movs	r3, #0
10010c94:	2580      	movs	r5, #128	; 0x80
10010c96:	4698      	mov	r8, r3
10010c98:	2400      	movs	r4, #0
10010c9a:	032d      	lsls	r5, r5, #12
10010c9c:	4b05      	ldr	r3, [pc, #20]	; (10010cb4 <__aeabi_dmul+0x1dc>)
10010c9e:	e781      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010ca0:	465d      	mov	r5, fp
10010ca2:	4643      	mov	r3, r8
10010ca4:	9a01      	ldr	r2, [sp, #4]
10010ca6:	e76f      	b.n	10010b88 <__aeabi_dmul+0xb0>
10010ca8:	465d      	mov	r5, fp
10010caa:	4643      	mov	r3, r8
10010cac:	0021      	movs	r1, r4
10010cae:	9a01      	ldr	r2, [sp, #4]
10010cb0:	e76a      	b.n	10010b88 <__aeabi_dmul+0xb0>
10010cb2:	46c0      	nop			; (mov r8, r8)
10010cb4:	000007ff 	.word	0x000007ff
10010cb8:	fffffc01 	.word	0xfffffc01
10010cbc:	100140a0 	.word	0x100140a0
10010cc0:	800fffff 	.word	0x800fffff
10010cc4:	000003f3 	.word	0x000003f3
10010cc8:	4642      	mov	r2, r8
10010cca:	0c12      	lsrs	r2, r2, #16
10010ccc:	4691      	mov	r9, r2
10010cce:	0c1a      	lsrs	r2, r3, #16
10010cd0:	4694      	mov	ip, r2
10010cd2:	4642      	mov	r2, r8
10010cd4:	0417      	lsls	r7, r2, #16
10010cd6:	464a      	mov	r2, r9
10010cd8:	041b      	lsls	r3, r3, #16
10010cda:	0c1b      	lsrs	r3, r3, #16
10010cdc:	435a      	muls	r2, r3
10010cde:	4660      	mov	r0, ip
10010ce0:	4690      	mov	r8, r2
10010ce2:	464a      	mov	r2, r9
10010ce4:	4342      	muls	r2, r0
10010ce6:	0010      	movs	r0, r2
10010ce8:	9203      	str	r2, [sp, #12]
10010cea:	4662      	mov	r2, ip
10010cec:	001c      	movs	r4, r3
10010cee:	0c3f      	lsrs	r7, r7, #16
10010cf0:	437a      	muls	r2, r7
10010cf2:	437c      	muls	r4, r7
10010cf4:	4442      	add	r2, r8
10010cf6:	9201      	str	r2, [sp, #4]
10010cf8:	0c22      	lsrs	r2, r4, #16
10010cfa:	4692      	mov	sl, r2
10010cfc:	9a01      	ldr	r2, [sp, #4]
10010cfe:	4452      	add	r2, sl
10010d00:	4590      	cmp	r8, r2
10010d02:	d906      	bls.n	10010d12 <__aeabi_dmul+0x23a>
10010d04:	4682      	mov	sl, r0
10010d06:	2080      	movs	r0, #128	; 0x80
10010d08:	0240      	lsls	r0, r0, #9
10010d0a:	4680      	mov	r8, r0
10010d0c:	44c2      	add	sl, r8
10010d0e:	4650      	mov	r0, sl
10010d10:	9003      	str	r0, [sp, #12]
10010d12:	0c10      	lsrs	r0, r2, #16
10010d14:	9004      	str	r0, [sp, #16]
10010d16:	4648      	mov	r0, r9
10010d18:	0424      	lsls	r4, r4, #16
10010d1a:	0c24      	lsrs	r4, r4, #16
10010d1c:	0412      	lsls	r2, r2, #16
10010d1e:	1912      	adds	r2, r2, r4
10010d20:	9205      	str	r2, [sp, #20]
10010d22:	0c2a      	lsrs	r2, r5, #16
10010d24:	042d      	lsls	r5, r5, #16
10010d26:	0c2d      	lsrs	r5, r5, #16
10010d28:	4368      	muls	r0, r5
10010d2a:	002c      	movs	r4, r5
10010d2c:	4682      	mov	sl, r0
10010d2e:	4648      	mov	r0, r9
10010d30:	437c      	muls	r4, r7
10010d32:	4350      	muls	r0, r2
10010d34:	4681      	mov	r9, r0
10010d36:	0c20      	lsrs	r0, r4, #16
10010d38:	4680      	mov	r8, r0
10010d3a:	4357      	muls	r7, r2
10010d3c:	4457      	add	r7, sl
10010d3e:	4447      	add	r7, r8
10010d40:	45ba      	cmp	sl, r7
10010d42:	d903      	bls.n	10010d4c <__aeabi_dmul+0x274>
10010d44:	2080      	movs	r0, #128	; 0x80
10010d46:	0240      	lsls	r0, r0, #9
10010d48:	4680      	mov	r8, r0
10010d4a:	44c1      	add	r9, r8
10010d4c:	0c38      	lsrs	r0, r7, #16
10010d4e:	043f      	lsls	r7, r7, #16
10010d50:	46b8      	mov	r8, r7
10010d52:	4448      	add	r0, r9
10010d54:	0424      	lsls	r4, r4, #16
10010d56:	0c24      	lsrs	r4, r4, #16
10010d58:	9001      	str	r0, [sp, #4]
10010d5a:	9804      	ldr	r0, [sp, #16]
10010d5c:	44a0      	add	r8, r4
10010d5e:	4440      	add	r0, r8
10010d60:	9004      	str	r0, [sp, #16]
10010d62:	4658      	mov	r0, fp
10010d64:	0c00      	lsrs	r0, r0, #16
10010d66:	4681      	mov	r9, r0
10010d68:	4658      	mov	r0, fp
10010d6a:	0404      	lsls	r4, r0, #16
10010d6c:	0c20      	lsrs	r0, r4, #16
10010d6e:	4682      	mov	sl, r0
10010d70:	0007      	movs	r7, r0
10010d72:	4648      	mov	r0, r9
10010d74:	435f      	muls	r7, r3
10010d76:	464c      	mov	r4, r9
10010d78:	4343      	muls	r3, r0
10010d7a:	4660      	mov	r0, ip
10010d7c:	4360      	muls	r0, r4
10010d7e:	4664      	mov	r4, ip
10010d80:	4683      	mov	fp, r0
10010d82:	4650      	mov	r0, sl
10010d84:	4344      	muls	r4, r0
10010d86:	0c38      	lsrs	r0, r7, #16
10010d88:	4684      	mov	ip, r0
10010d8a:	18e4      	adds	r4, r4, r3
10010d8c:	4464      	add	r4, ip
10010d8e:	42a3      	cmp	r3, r4
10010d90:	d903      	bls.n	10010d9a <__aeabi_dmul+0x2c2>
10010d92:	2380      	movs	r3, #128	; 0x80
10010d94:	025b      	lsls	r3, r3, #9
10010d96:	469c      	mov	ip, r3
10010d98:	44e3      	add	fp, ip
10010d9a:	4648      	mov	r0, r9
10010d9c:	043f      	lsls	r7, r7, #16
10010d9e:	0c23      	lsrs	r3, r4, #16
10010da0:	0c3f      	lsrs	r7, r7, #16
10010da2:	0424      	lsls	r4, r4, #16
10010da4:	19e4      	adds	r4, r4, r7
10010da6:	4657      	mov	r7, sl
10010da8:	4368      	muls	r0, r5
10010daa:	436f      	muls	r7, r5
10010dac:	4684      	mov	ip, r0
10010dae:	464d      	mov	r5, r9
10010db0:	4650      	mov	r0, sl
10010db2:	4355      	muls	r5, r2
10010db4:	4342      	muls	r2, r0
10010db6:	0c38      	lsrs	r0, r7, #16
10010db8:	4681      	mov	r9, r0
10010dba:	4462      	add	r2, ip
10010dbc:	444a      	add	r2, r9
10010dbe:	445b      	add	r3, fp
10010dc0:	4594      	cmp	ip, r2
10010dc2:	d903      	bls.n	10010dcc <__aeabi_dmul+0x2f4>
10010dc4:	2080      	movs	r0, #128	; 0x80
10010dc6:	0240      	lsls	r0, r0, #9
10010dc8:	4684      	mov	ip, r0
10010dca:	4465      	add	r5, ip
10010dcc:	9803      	ldr	r0, [sp, #12]
10010dce:	043f      	lsls	r7, r7, #16
10010dd0:	4683      	mov	fp, r0
10010dd2:	9804      	ldr	r0, [sp, #16]
10010dd4:	0c3f      	lsrs	r7, r7, #16
10010dd6:	4684      	mov	ip, r0
10010dd8:	44e3      	add	fp, ip
10010dda:	45c3      	cmp	fp, r8
10010ddc:	4180      	sbcs	r0, r0
10010dde:	4240      	negs	r0, r0
10010de0:	4682      	mov	sl, r0
10010de2:	0410      	lsls	r0, r2, #16
10010de4:	4684      	mov	ip, r0
10010de6:	9801      	ldr	r0, [sp, #4]
10010de8:	4467      	add	r7, ip
10010dea:	4684      	mov	ip, r0
10010dec:	4467      	add	r7, ip
10010dee:	44a3      	add	fp, r4
10010df0:	46bc      	mov	ip, r7
10010df2:	45a3      	cmp	fp, r4
10010df4:	41a4      	sbcs	r4, r4
10010df6:	4699      	mov	r9, r3
10010df8:	44d4      	add	ip, sl
10010dfa:	4264      	negs	r4, r4
10010dfc:	4287      	cmp	r7, r0
10010dfe:	41bf      	sbcs	r7, r7
10010e00:	45d4      	cmp	ip, sl
10010e02:	4180      	sbcs	r0, r0
10010e04:	44e1      	add	r9, ip
10010e06:	46a0      	mov	r8, r4
10010e08:	4599      	cmp	r9, r3
10010e0a:	419b      	sbcs	r3, r3
10010e0c:	427f      	negs	r7, r7
10010e0e:	4240      	negs	r0, r0
10010e10:	44c8      	add	r8, r9
10010e12:	4307      	orrs	r7, r0
10010e14:	0c12      	lsrs	r2, r2, #16
10010e16:	18ba      	adds	r2, r7, r2
10010e18:	45a0      	cmp	r8, r4
10010e1a:	41a4      	sbcs	r4, r4
10010e1c:	425f      	negs	r7, r3
10010e1e:	003b      	movs	r3, r7
10010e20:	4264      	negs	r4, r4
10010e22:	4323      	orrs	r3, r4
10010e24:	18d7      	adds	r7, r2, r3
10010e26:	4643      	mov	r3, r8
10010e28:	197d      	adds	r5, r7, r5
10010e2a:	0ddb      	lsrs	r3, r3, #23
10010e2c:	026d      	lsls	r5, r5, #9
10010e2e:	431d      	orrs	r5, r3
10010e30:	465b      	mov	r3, fp
10010e32:	025a      	lsls	r2, r3, #9
10010e34:	9b05      	ldr	r3, [sp, #20]
10010e36:	431a      	orrs	r2, r3
10010e38:	1e53      	subs	r3, r2, #1
10010e3a:	419a      	sbcs	r2, r3
10010e3c:	465b      	mov	r3, fp
10010e3e:	0ddb      	lsrs	r3, r3, #23
10010e40:	431a      	orrs	r2, r3
10010e42:	4643      	mov	r3, r8
10010e44:	025b      	lsls	r3, r3, #9
10010e46:	4313      	orrs	r3, r2
10010e48:	01ea      	lsls	r2, r5, #7
10010e4a:	d507      	bpl.n	10010e5c <__aeabi_dmul+0x384>
10010e4c:	2201      	movs	r2, #1
10010e4e:	085c      	lsrs	r4, r3, #1
10010e50:	4013      	ands	r3, r2
10010e52:	4323      	orrs	r3, r4
10010e54:	07ea      	lsls	r2, r5, #31
10010e56:	9e02      	ldr	r6, [sp, #8]
10010e58:	4313      	orrs	r3, r2
10010e5a:	086d      	lsrs	r5, r5, #1
10010e5c:	4a57      	ldr	r2, [pc, #348]	; (10010fbc <__aeabi_dmul+0x4e4>)
10010e5e:	18b2      	adds	r2, r6, r2
10010e60:	2a00      	cmp	r2, #0
10010e62:	dd4b      	ble.n	10010efc <__aeabi_dmul+0x424>
10010e64:	0758      	lsls	r0, r3, #29
10010e66:	d009      	beq.n	10010e7c <__aeabi_dmul+0x3a4>
10010e68:	200f      	movs	r0, #15
10010e6a:	4018      	ands	r0, r3
10010e6c:	2804      	cmp	r0, #4
10010e6e:	d005      	beq.n	10010e7c <__aeabi_dmul+0x3a4>
10010e70:	1d18      	adds	r0, r3, #4
10010e72:	4298      	cmp	r0, r3
10010e74:	419b      	sbcs	r3, r3
10010e76:	425b      	negs	r3, r3
10010e78:	18ed      	adds	r5, r5, r3
10010e7a:	0003      	movs	r3, r0
10010e7c:	01e8      	lsls	r0, r5, #7
10010e7e:	d504      	bpl.n	10010e8a <__aeabi_dmul+0x3b2>
10010e80:	4a4f      	ldr	r2, [pc, #316]	; (10010fc0 <__aeabi_dmul+0x4e8>)
10010e82:	4015      	ands	r5, r2
10010e84:	2280      	movs	r2, #128	; 0x80
10010e86:	00d2      	lsls	r2, r2, #3
10010e88:	18b2      	adds	r2, r6, r2
10010e8a:	484e      	ldr	r0, [pc, #312]	; (10010fc4 <__aeabi_dmul+0x4ec>)
10010e8c:	4282      	cmp	r2, r0
10010e8e:	dd00      	ble.n	10010e92 <__aeabi_dmul+0x3ba>
10010e90:	e6e7      	b.n	10010c62 <__aeabi_dmul+0x18a>
10010e92:	2401      	movs	r4, #1
10010e94:	08db      	lsrs	r3, r3, #3
10010e96:	0768      	lsls	r0, r5, #29
10010e98:	4318      	orrs	r0, r3
10010e9a:	026d      	lsls	r5, r5, #9
10010e9c:	0553      	lsls	r3, r2, #21
10010e9e:	4680      	mov	r8, r0
10010ea0:	0b2d      	lsrs	r5, r5, #12
10010ea2:	0d5b      	lsrs	r3, r3, #21
10010ea4:	400c      	ands	r4, r1
10010ea6:	e67d      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010ea8:	2280      	movs	r2, #128	; 0x80
10010eaa:	4659      	mov	r1, fp
10010eac:	0312      	lsls	r2, r2, #12
10010eae:	4211      	tst	r1, r2
10010eb0:	d008      	beq.n	10010ec4 <__aeabi_dmul+0x3ec>
10010eb2:	4215      	tst	r5, r2
10010eb4:	d106      	bne.n	10010ec4 <__aeabi_dmul+0x3ec>
10010eb6:	4315      	orrs	r5, r2
10010eb8:	032d      	lsls	r5, r5, #12
10010eba:	4698      	mov	r8, r3
10010ebc:	0b2d      	lsrs	r5, r5, #12
10010ebe:	464c      	mov	r4, r9
10010ec0:	4b41      	ldr	r3, [pc, #260]	; (10010fc8 <__aeabi_dmul+0x4f0>)
10010ec2:	e66f      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010ec4:	465d      	mov	r5, fp
10010ec6:	4315      	orrs	r5, r2
10010ec8:	032d      	lsls	r5, r5, #12
10010eca:	0b2d      	lsrs	r5, r5, #12
10010ecc:	4b3e      	ldr	r3, [pc, #248]	; (10010fc8 <__aeabi_dmul+0x4f0>)
10010ece:	e669      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010ed0:	0003      	movs	r3, r0
10010ed2:	4655      	mov	r5, sl
10010ed4:	3b28      	subs	r3, #40	; 0x28
10010ed6:	409d      	lsls	r5, r3
10010ed8:	2300      	movs	r3, #0
10010eda:	e6bc      	b.n	10010c56 <__aeabi_dmul+0x17e>
10010edc:	4650      	mov	r0, sl
10010ede:	f000 fcaf 	bl	10011840 <__clzsi2>
10010ee2:	3020      	adds	r0, #32
10010ee4:	e6a8      	b.n	10010c38 <__aeabi_dmul+0x160>
10010ee6:	0003      	movs	r3, r0
10010ee8:	3b28      	subs	r3, #40	; 0x28
10010eea:	409f      	lsls	r7, r3
10010eec:	2300      	movs	r3, #0
10010eee:	46bb      	mov	fp, r7
10010ef0:	4698      	mov	r8, r3
10010ef2:	e689      	b.n	10010c08 <__aeabi_dmul+0x130>
10010ef4:	f000 fca4 	bl	10011840 <__clzsi2>
10010ef8:	3020      	adds	r0, #32
10010efa:	e673      	b.n	10010be4 <__aeabi_dmul+0x10c>
10010efc:	2401      	movs	r4, #1
10010efe:	1aa6      	subs	r6, r4, r2
10010f00:	2e38      	cmp	r6, #56	; 0x38
10010f02:	dd07      	ble.n	10010f14 <__aeabi_dmul+0x43c>
10010f04:	2200      	movs	r2, #0
10010f06:	400c      	ands	r4, r1
10010f08:	2300      	movs	r3, #0
10010f0a:	2500      	movs	r5, #0
10010f0c:	4690      	mov	r8, r2
10010f0e:	e649      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010f10:	9e02      	ldr	r6, [sp, #8]
10010f12:	e7a3      	b.n	10010e5c <__aeabi_dmul+0x384>
10010f14:	2e1f      	cmp	r6, #31
10010f16:	dc20      	bgt.n	10010f5a <__aeabi_dmul+0x482>
10010f18:	2220      	movs	r2, #32
10010f1a:	002c      	movs	r4, r5
10010f1c:	0018      	movs	r0, r3
10010f1e:	1b92      	subs	r2, r2, r6
10010f20:	40f0      	lsrs	r0, r6
10010f22:	4094      	lsls	r4, r2
10010f24:	4093      	lsls	r3, r2
10010f26:	4304      	orrs	r4, r0
10010f28:	1e58      	subs	r0, r3, #1
10010f2a:	4183      	sbcs	r3, r0
10010f2c:	431c      	orrs	r4, r3
10010f2e:	40f5      	lsrs	r5, r6
10010f30:	0763      	lsls	r3, r4, #29
10010f32:	d009      	beq.n	10010f48 <__aeabi_dmul+0x470>
10010f34:	230f      	movs	r3, #15
10010f36:	4023      	ands	r3, r4
10010f38:	2b04      	cmp	r3, #4
10010f3a:	d005      	beq.n	10010f48 <__aeabi_dmul+0x470>
10010f3c:	0023      	movs	r3, r4
10010f3e:	1d1c      	adds	r4, r3, #4
10010f40:	429c      	cmp	r4, r3
10010f42:	4192      	sbcs	r2, r2
10010f44:	4252      	negs	r2, r2
10010f46:	18ad      	adds	r5, r5, r2
10010f48:	022b      	lsls	r3, r5, #8
10010f4a:	d51f      	bpl.n	10010f8c <__aeabi_dmul+0x4b4>
10010f4c:	2401      	movs	r4, #1
10010f4e:	2200      	movs	r2, #0
10010f50:	400c      	ands	r4, r1
10010f52:	2301      	movs	r3, #1
10010f54:	2500      	movs	r5, #0
10010f56:	4690      	mov	r8, r2
10010f58:	e624      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010f5a:	201f      	movs	r0, #31
10010f5c:	002c      	movs	r4, r5
10010f5e:	4240      	negs	r0, r0
10010f60:	1a82      	subs	r2, r0, r2
10010f62:	40d4      	lsrs	r4, r2
10010f64:	2e20      	cmp	r6, #32
10010f66:	d01c      	beq.n	10010fa2 <__aeabi_dmul+0x4ca>
10010f68:	2240      	movs	r2, #64	; 0x40
10010f6a:	1b96      	subs	r6, r2, r6
10010f6c:	40b5      	lsls	r5, r6
10010f6e:	432b      	orrs	r3, r5
10010f70:	1e58      	subs	r0, r3, #1
10010f72:	4183      	sbcs	r3, r0
10010f74:	2007      	movs	r0, #7
10010f76:	4323      	orrs	r3, r4
10010f78:	4018      	ands	r0, r3
10010f7a:	2500      	movs	r5, #0
10010f7c:	2800      	cmp	r0, #0
10010f7e:	d009      	beq.n	10010f94 <__aeabi_dmul+0x4bc>
10010f80:	220f      	movs	r2, #15
10010f82:	2500      	movs	r5, #0
10010f84:	401a      	ands	r2, r3
10010f86:	001c      	movs	r4, r3
10010f88:	2a04      	cmp	r2, #4
10010f8a:	d1d8      	bne.n	10010f3e <__aeabi_dmul+0x466>
10010f8c:	0023      	movs	r3, r4
10010f8e:	0768      	lsls	r0, r5, #29
10010f90:	026d      	lsls	r5, r5, #9
10010f92:	0b2d      	lsrs	r5, r5, #12
10010f94:	2401      	movs	r4, #1
10010f96:	08db      	lsrs	r3, r3, #3
10010f98:	4303      	orrs	r3, r0
10010f9a:	4698      	mov	r8, r3
10010f9c:	400c      	ands	r4, r1
10010f9e:	2300      	movs	r3, #0
10010fa0:	e600      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010fa2:	2500      	movs	r5, #0
10010fa4:	e7e3      	b.n	10010f6e <__aeabi_dmul+0x496>
10010fa6:	2280      	movs	r2, #128	; 0x80
10010fa8:	2401      	movs	r4, #1
10010faa:	0312      	lsls	r2, r2, #12
10010fac:	4315      	orrs	r5, r2
10010fae:	032d      	lsls	r5, r5, #12
10010fb0:	4698      	mov	r8, r3
10010fb2:	0b2d      	lsrs	r5, r5, #12
10010fb4:	400c      	ands	r4, r1
10010fb6:	4b04      	ldr	r3, [pc, #16]	; (10010fc8 <__aeabi_dmul+0x4f0>)
10010fb8:	e5f4      	b.n	10010ba4 <__aeabi_dmul+0xcc>
10010fba:	46c0      	nop			; (mov r8, r8)
10010fbc:	000003ff 	.word	0x000003ff
10010fc0:	feffffff 	.word	0xfeffffff
10010fc4:	000007fe 	.word	0x000007fe
10010fc8:	000007ff 	.word	0x000007ff

10010fcc <__aeabi_dsub>:
10010fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
10010fce:	4657      	mov	r7, sl
10010fd0:	464e      	mov	r6, r9
10010fd2:	4645      	mov	r5, r8
10010fd4:	b4e0      	push	{r5, r6, r7}
10010fd6:	000e      	movs	r6, r1
10010fd8:	0011      	movs	r1, r2
10010fda:	0ff2      	lsrs	r2, r6, #31
10010fdc:	4692      	mov	sl, r2
10010fde:	00c5      	lsls	r5, r0, #3
10010fe0:	0f42      	lsrs	r2, r0, #29
10010fe2:	0318      	lsls	r0, r3, #12
10010fe4:	0337      	lsls	r7, r6, #12
10010fe6:	0074      	lsls	r4, r6, #1
10010fe8:	0a40      	lsrs	r0, r0, #9
10010fea:	0f4e      	lsrs	r6, r1, #29
10010fec:	0a7f      	lsrs	r7, r7, #9
10010fee:	4330      	orrs	r0, r6
10010ff0:	4ecf      	ldr	r6, [pc, #828]	; (10011330 <__aeabi_dsub+0x364>)
10010ff2:	4317      	orrs	r7, r2
10010ff4:	005a      	lsls	r2, r3, #1
10010ff6:	0d64      	lsrs	r4, r4, #21
10010ff8:	0d52      	lsrs	r2, r2, #21
10010ffa:	0fdb      	lsrs	r3, r3, #31
10010ffc:	00c9      	lsls	r1, r1, #3
10010ffe:	42b2      	cmp	r2, r6
10011000:	d100      	bne.n	10011004 <__aeabi_dsub+0x38>
10011002:	e0e5      	b.n	100111d0 <__aeabi_dsub+0x204>
10011004:	2601      	movs	r6, #1
10011006:	4073      	eors	r3, r6
10011008:	1aa6      	subs	r6, r4, r2
1001100a:	46b4      	mov	ip, r6
1001100c:	4553      	cmp	r3, sl
1001100e:	d100      	bne.n	10011012 <__aeabi_dsub+0x46>
10011010:	e0af      	b.n	10011172 <__aeabi_dsub+0x1a6>
10011012:	2e00      	cmp	r6, #0
10011014:	dc00      	bgt.n	10011018 <__aeabi_dsub+0x4c>
10011016:	e10d      	b.n	10011234 <__aeabi_dsub+0x268>
10011018:	2a00      	cmp	r2, #0
1001101a:	d13a      	bne.n	10011092 <__aeabi_dsub+0xc6>
1001101c:	0003      	movs	r3, r0
1001101e:	430b      	orrs	r3, r1
10011020:	d000      	beq.n	10011024 <__aeabi_dsub+0x58>
10011022:	e0e4      	b.n	100111ee <__aeabi_dsub+0x222>
10011024:	076b      	lsls	r3, r5, #29
10011026:	d009      	beq.n	1001103c <__aeabi_dsub+0x70>
10011028:	230f      	movs	r3, #15
1001102a:	402b      	ands	r3, r5
1001102c:	2b04      	cmp	r3, #4
1001102e:	d005      	beq.n	1001103c <__aeabi_dsub+0x70>
10011030:	1d2b      	adds	r3, r5, #4
10011032:	42ab      	cmp	r3, r5
10011034:	41ad      	sbcs	r5, r5
10011036:	426d      	negs	r5, r5
10011038:	197f      	adds	r7, r7, r5
1001103a:	001d      	movs	r5, r3
1001103c:	023b      	lsls	r3, r7, #8
1001103e:	d400      	bmi.n	10011042 <__aeabi_dsub+0x76>
10011040:	e088      	b.n	10011154 <__aeabi_dsub+0x188>
10011042:	4bbb      	ldr	r3, [pc, #748]	; (10011330 <__aeabi_dsub+0x364>)
10011044:	3401      	adds	r4, #1
10011046:	429c      	cmp	r4, r3
10011048:	d100      	bne.n	1001104c <__aeabi_dsub+0x80>
1001104a:	e110      	b.n	1001126e <__aeabi_dsub+0x2a2>
1001104c:	003a      	movs	r2, r7
1001104e:	4bb9      	ldr	r3, [pc, #740]	; (10011334 <__aeabi_dsub+0x368>)
10011050:	4651      	mov	r1, sl
10011052:	401a      	ands	r2, r3
10011054:	2301      	movs	r3, #1
10011056:	0750      	lsls	r0, r2, #29
10011058:	08ed      	lsrs	r5, r5, #3
1001105a:	0252      	lsls	r2, r2, #9
1001105c:	0564      	lsls	r4, r4, #21
1001105e:	4305      	orrs	r5, r0
10011060:	0b12      	lsrs	r2, r2, #12
10011062:	0d64      	lsrs	r4, r4, #21
10011064:	400b      	ands	r3, r1
10011066:	2100      	movs	r1, #0
10011068:	0028      	movs	r0, r5
1001106a:	0312      	lsls	r2, r2, #12
1001106c:	0d0d      	lsrs	r5, r1, #20
1001106e:	0b12      	lsrs	r2, r2, #12
10011070:	0564      	lsls	r4, r4, #21
10011072:	052d      	lsls	r5, r5, #20
10011074:	4315      	orrs	r5, r2
10011076:	0862      	lsrs	r2, r4, #1
10011078:	4caf      	ldr	r4, [pc, #700]	; (10011338 <__aeabi_dsub+0x36c>)
1001107a:	07db      	lsls	r3, r3, #31
1001107c:	402c      	ands	r4, r5
1001107e:	4314      	orrs	r4, r2
10011080:	0064      	lsls	r4, r4, #1
10011082:	0864      	lsrs	r4, r4, #1
10011084:	431c      	orrs	r4, r3
10011086:	0021      	movs	r1, r4
10011088:	bc1c      	pop	{r2, r3, r4}
1001108a:	4690      	mov	r8, r2
1001108c:	4699      	mov	r9, r3
1001108e:	46a2      	mov	sl, r4
10011090:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011092:	4ba7      	ldr	r3, [pc, #668]	; (10011330 <__aeabi_dsub+0x364>)
10011094:	429c      	cmp	r4, r3
10011096:	d0c5      	beq.n	10011024 <__aeabi_dsub+0x58>
10011098:	2380      	movs	r3, #128	; 0x80
1001109a:	041b      	lsls	r3, r3, #16
1001109c:	4318      	orrs	r0, r3
1001109e:	4663      	mov	r3, ip
100110a0:	2b38      	cmp	r3, #56	; 0x38
100110a2:	dd00      	ble.n	100110a6 <__aeabi_dsub+0xda>
100110a4:	e0fd      	b.n	100112a2 <__aeabi_dsub+0x2d6>
100110a6:	2b1f      	cmp	r3, #31
100110a8:	dd00      	ble.n	100110ac <__aeabi_dsub+0xe0>
100110aa:	e130      	b.n	1001130e <__aeabi_dsub+0x342>
100110ac:	4662      	mov	r2, ip
100110ae:	2320      	movs	r3, #32
100110b0:	1a9b      	subs	r3, r3, r2
100110b2:	0002      	movs	r2, r0
100110b4:	409a      	lsls	r2, r3
100110b6:	4666      	mov	r6, ip
100110b8:	4690      	mov	r8, r2
100110ba:	000a      	movs	r2, r1
100110bc:	4099      	lsls	r1, r3
100110be:	40f2      	lsrs	r2, r6
100110c0:	4646      	mov	r6, r8
100110c2:	1e4b      	subs	r3, r1, #1
100110c4:	4199      	sbcs	r1, r3
100110c6:	4332      	orrs	r2, r6
100110c8:	4311      	orrs	r1, r2
100110ca:	4663      	mov	r3, ip
100110cc:	0002      	movs	r2, r0
100110ce:	40da      	lsrs	r2, r3
100110d0:	1a69      	subs	r1, r5, r1
100110d2:	428d      	cmp	r5, r1
100110d4:	419b      	sbcs	r3, r3
100110d6:	000d      	movs	r5, r1
100110d8:	1aba      	subs	r2, r7, r2
100110da:	425b      	negs	r3, r3
100110dc:	1ad7      	subs	r7, r2, r3
100110de:	023b      	lsls	r3, r7, #8
100110e0:	d535      	bpl.n	1001114e <__aeabi_dsub+0x182>
100110e2:	027a      	lsls	r2, r7, #9
100110e4:	0a53      	lsrs	r3, r2, #9
100110e6:	4698      	mov	r8, r3
100110e8:	4643      	mov	r3, r8
100110ea:	2b00      	cmp	r3, #0
100110ec:	d100      	bne.n	100110f0 <__aeabi_dsub+0x124>
100110ee:	e0c4      	b.n	1001127a <__aeabi_dsub+0x2ae>
100110f0:	4640      	mov	r0, r8
100110f2:	f000 fba5 	bl	10011840 <__clzsi2>
100110f6:	0003      	movs	r3, r0
100110f8:	3b08      	subs	r3, #8
100110fa:	2b1f      	cmp	r3, #31
100110fc:	dd00      	ble.n	10011100 <__aeabi_dsub+0x134>
100110fe:	e0c5      	b.n	1001128c <__aeabi_dsub+0x2c0>
10011100:	2220      	movs	r2, #32
10011102:	0029      	movs	r1, r5
10011104:	1ad2      	subs	r2, r2, r3
10011106:	4647      	mov	r7, r8
10011108:	40d1      	lsrs	r1, r2
1001110a:	409f      	lsls	r7, r3
1001110c:	000a      	movs	r2, r1
1001110e:	409d      	lsls	r5, r3
10011110:	433a      	orrs	r2, r7
10011112:	429c      	cmp	r4, r3
10011114:	dd00      	ble.n	10011118 <__aeabi_dsub+0x14c>
10011116:	e0c0      	b.n	1001129a <__aeabi_dsub+0x2ce>
10011118:	1b1c      	subs	r4, r3, r4
1001111a:	1c63      	adds	r3, r4, #1
1001111c:	2b1f      	cmp	r3, #31
1001111e:	dd00      	ble.n	10011122 <__aeabi_dsub+0x156>
10011120:	e0e4      	b.n	100112ec <__aeabi_dsub+0x320>
10011122:	2120      	movs	r1, #32
10011124:	0014      	movs	r4, r2
10011126:	0028      	movs	r0, r5
10011128:	1ac9      	subs	r1, r1, r3
1001112a:	40d8      	lsrs	r0, r3
1001112c:	408c      	lsls	r4, r1
1001112e:	408d      	lsls	r5, r1
10011130:	4304      	orrs	r4, r0
10011132:	40da      	lsrs	r2, r3
10011134:	1e68      	subs	r0, r5, #1
10011136:	4185      	sbcs	r5, r0
10011138:	0017      	movs	r7, r2
1001113a:	4325      	orrs	r5, r4
1001113c:	2400      	movs	r4, #0
1001113e:	e771      	b.n	10011024 <__aeabi_dsub+0x58>
10011140:	4642      	mov	r2, r8
10011142:	4663      	mov	r3, ip
10011144:	431a      	orrs	r2, r3
10011146:	d100      	bne.n	1001114a <__aeabi_dsub+0x17e>
10011148:	e24c      	b.n	100115e4 <__aeabi_dsub+0x618>
1001114a:	4667      	mov	r7, ip
1001114c:	4645      	mov	r5, r8
1001114e:	076b      	lsls	r3, r5, #29
10011150:	d000      	beq.n	10011154 <__aeabi_dsub+0x188>
10011152:	e769      	b.n	10011028 <__aeabi_dsub+0x5c>
10011154:	2301      	movs	r3, #1
10011156:	4651      	mov	r1, sl
10011158:	0778      	lsls	r0, r7, #29
1001115a:	08ed      	lsrs	r5, r5, #3
1001115c:	08fa      	lsrs	r2, r7, #3
1001115e:	400b      	ands	r3, r1
10011160:	4305      	orrs	r5, r0
10011162:	4973      	ldr	r1, [pc, #460]	; (10011330 <__aeabi_dsub+0x364>)
10011164:	428c      	cmp	r4, r1
10011166:	d038      	beq.n	100111da <__aeabi_dsub+0x20e>
10011168:	0312      	lsls	r2, r2, #12
1001116a:	0564      	lsls	r4, r4, #21
1001116c:	0b12      	lsrs	r2, r2, #12
1001116e:	0d64      	lsrs	r4, r4, #21
10011170:	e779      	b.n	10011066 <__aeabi_dsub+0x9a>
10011172:	2e00      	cmp	r6, #0
10011174:	dc00      	bgt.n	10011178 <__aeabi_dsub+0x1ac>
10011176:	e09a      	b.n	100112ae <__aeabi_dsub+0x2e2>
10011178:	2a00      	cmp	r2, #0
1001117a:	d047      	beq.n	1001120c <__aeabi_dsub+0x240>
1001117c:	4a6c      	ldr	r2, [pc, #432]	; (10011330 <__aeabi_dsub+0x364>)
1001117e:	4294      	cmp	r4, r2
10011180:	d100      	bne.n	10011184 <__aeabi_dsub+0x1b8>
10011182:	e74f      	b.n	10011024 <__aeabi_dsub+0x58>
10011184:	2280      	movs	r2, #128	; 0x80
10011186:	0412      	lsls	r2, r2, #16
10011188:	4310      	orrs	r0, r2
1001118a:	4662      	mov	r2, ip
1001118c:	2a38      	cmp	r2, #56	; 0x38
1001118e:	dc00      	bgt.n	10011192 <__aeabi_dsub+0x1c6>
10011190:	e108      	b.n	100113a4 <__aeabi_dsub+0x3d8>
10011192:	4301      	orrs	r1, r0
10011194:	1e48      	subs	r0, r1, #1
10011196:	4181      	sbcs	r1, r0
10011198:	2200      	movs	r2, #0
1001119a:	b2c9      	uxtb	r1, r1
1001119c:	1949      	adds	r1, r1, r5
1001119e:	19d2      	adds	r2, r2, r7
100111a0:	42a9      	cmp	r1, r5
100111a2:	41bf      	sbcs	r7, r7
100111a4:	000d      	movs	r5, r1
100111a6:	427f      	negs	r7, r7
100111a8:	18bf      	adds	r7, r7, r2
100111aa:	023a      	lsls	r2, r7, #8
100111ac:	d400      	bmi.n	100111b0 <__aeabi_dsub+0x1e4>
100111ae:	e142      	b.n	10011436 <__aeabi_dsub+0x46a>
100111b0:	4a5f      	ldr	r2, [pc, #380]	; (10011330 <__aeabi_dsub+0x364>)
100111b2:	3401      	adds	r4, #1
100111b4:	4294      	cmp	r4, r2
100111b6:	d100      	bne.n	100111ba <__aeabi_dsub+0x1ee>
100111b8:	e14e      	b.n	10011458 <__aeabi_dsub+0x48c>
100111ba:	2001      	movs	r0, #1
100111bc:	4a5d      	ldr	r2, [pc, #372]	; (10011334 <__aeabi_dsub+0x368>)
100111be:	0869      	lsrs	r1, r5, #1
100111c0:	403a      	ands	r2, r7
100111c2:	4028      	ands	r0, r5
100111c4:	4308      	orrs	r0, r1
100111c6:	07d5      	lsls	r5, r2, #31
100111c8:	4305      	orrs	r5, r0
100111ca:	0857      	lsrs	r7, r2, #1
100111cc:	469a      	mov	sl, r3
100111ce:	e729      	b.n	10011024 <__aeabi_dsub+0x58>
100111d0:	0006      	movs	r6, r0
100111d2:	430e      	orrs	r6, r1
100111d4:	d000      	beq.n	100111d8 <__aeabi_dsub+0x20c>
100111d6:	e717      	b.n	10011008 <__aeabi_dsub+0x3c>
100111d8:	e714      	b.n	10011004 <__aeabi_dsub+0x38>
100111da:	0029      	movs	r1, r5
100111dc:	4311      	orrs	r1, r2
100111de:	d100      	bne.n	100111e2 <__aeabi_dsub+0x216>
100111e0:	e1f9      	b.n	100115d6 <__aeabi_dsub+0x60a>
100111e2:	2180      	movs	r1, #128	; 0x80
100111e4:	0309      	lsls	r1, r1, #12
100111e6:	430a      	orrs	r2, r1
100111e8:	0312      	lsls	r2, r2, #12
100111ea:	0b12      	lsrs	r2, r2, #12
100111ec:	e73b      	b.n	10011066 <__aeabi_dsub+0x9a>
100111ee:	2301      	movs	r3, #1
100111f0:	425b      	negs	r3, r3
100111f2:	4698      	mov	r8, r3
100111f4:	44c4      	add	ip, r8
100111f6:	4663      	mov	r3, ip
100111f8:	2b00      	cmp	r3, #0
100111fa:	d172      	bne.n	100112e2 <__aeabi_dsub+0x316>
100111fc:	1a69      	subs	r1, r5, r1
100111fe:	428d      	cmp	r5, r1
10011200:	419b      	sbcs	r3, r3
10011202:	1a3f      	subs	r7, r7, r0
10011204:	425b      	negs	r3, r3
10011206:	1aff      	subs	r7, r7, r3
10011208:	000d      	movs	r5, r1
1001120a:	e768      	b.n	100110de <__aeabi_dsub+0x112>
1001120c:	0002      	movs	r2, r0
1001120e:	430a      	orrs	r2, r1
10011210:	d100      	bne.n	10011214 <__aeabi_dsub+0x248>
10011212:	e707      	b.n	10011024 <__aeabi_dsub+0x58>
10011214:	2201      	movs	r2, #1
10011216:	4252      	negs	r2, r2
10011218:	4690      	mov	r8, r2
1001121a:	44c4      	add	ip, r8
1001121c:	4662      	mov	r2, ip
1001121e:	2a00      	cmp	r2, #0
10011220:	d000      	beq.n	10011224 <__aeabi_dsub+0x258>
10011222:	e0e6      	b.n	100113f2 <__aeabi_dsub+0x426>
10011224:	1869      	adds	r1, r5, r1
10011226:	42a9      	cmp	r1, r5
10011228:	41b6      	sbcs	r6, r6
1001122a:	183f      	adds	r7, r7, r0
1001122c:	4276      	negs	r6, r6
1001122e:	19f7      	adds	r7, r6, r7
10011230:	000d      	movs	r5, r1
10011232:	e7ba      	b.n	100111aa <__aeabi_dsub+0x1de>
10011234:	2e00      	cmp	r6, #0
10011236:	d000      	beq.n	1001123a <__aeabi_dsub+0x26e>
10011238:	e080      	b.n	1001133c <__aeabi_dsub+0x370>
1001123a:	1c62      	adds	r2, r4, #1
1001123c:	0552      	lsls	r2, r2, #21
1001123e:	0d52      	lsrs	r2, r2, #21
10011240:	2a01      	cmp	r2, #1
10011242:	dc00      	bgt.n	10011246 <__aeabi_dsub+0x27a>
10011244:	e0f9      	b.n	1001143a <__aeabi_dsub+0x46e>
10011246:	1a6a      	subs	r2, r5, r1
10011248:	4691      	mov	r9, r2
1001124a:	454d      	cmp	r5, r9
1001124c:	41b6      	sbcs	r6, r6
1001124e:	1a3a      	subs	r2, r7, r0
10011250:	4276      	negs	r6, r6
10011252:	1b92      	subs	r2, r2, r6
10011254:	4690      	mov	r8, r2
10011256:	0212      	lsls	r2, r2, #8
10011258:	d400      	bmi.n	1001125c <__aeabi_dsub+0x290>
1001125a:	e099      	b.n	10011390 <__aeabi_dsub+0x3c4>
1001125c:	1b4d      	subs	r5, r1, r5
1001125e:	42a9      	cmp	r1, r5
10011260:	4189      	sbcs	r1, r1
10011262:	1bc7      	subs	r7, r0, r7
10011264:	4249      	negs	r1, r1
10011266:	1a7a      	subs	r2, r7, r1
10011268:	4690      	mov	r8, r2
1001126a:	469a      	mov	sl, r3
1001126c:	e73c      	b.n	100110e8 <__aeabi_dsub+0x11c>
1001126e:	4652      	mov	r2, sl
10011270:	2301      	movs	r3, #1
10011272:	2500      	movs	r5, #0
10011274:	4013      	ands	r3, r2
10011276:	2200      	movs	r2, #0
10011278:	e6f5      	b.n	10011066 <__aeabi_dsub+0x9a>
1001127a:	0028      	movs	r0, r5
1001127c:	f000 fae0 	bl	10011840 <__clzsi2>
10011280:	3020      	adds	r0, #32
10011282:	0003      	movs	r3, r0
10011284:	3b08      	subs	r3, #8
10011286:	2b1f      	cmp	r3, #31
10011288:	dc00      	bgt.n	1001128c <__aeabi_dsub+0x2c0>
1001128a:	e739      	b.n	10011100 <__aeabi_dsub+0x134>
1001128c:	002a      	movs	r2, r5
1001128e:	3828      	subs	r0, #40	; 0x28
10011290:	4082      	lsls	r2, r0
10011292:	2500      	movs	r5, #0
10011294:	429c      	cmp	r4, r3
10011296:	dc00      	bgt.n	1001129a <__aeabi_dsub+0x2ce>
10011298:	e73e      	b.n	10011118 <__aeabi_dsub+0x14c>
1001129a:	4f26      	ldr	r7, [pc, #152]	; (10011334 <__aeabi_dsub+0x368>)
1001129c:	1ae4      	subs	r4, r4, r3
1001129e:	4017      	ands	r7, r2
100112a0:	e6c0      	b.n	10011024 <__aeabi_dsub+0x58>
100112a2:	4301      	orrs	r1, r0
100112a4:	1e48      	subs	r0, r1, #1
100112a6:	4181      	sbcs	r1, r0
100112a8:	2200      	movs	r2, #0
100112aa:	b2c9      	uxtb	r1, r1
100112ac:	e710      	b.n	100110d0 <__aeabi_dsub+0x104>
100112ae:	2e00      	cmp	r6, #0
100112b0:	d000      	beq.n	100112b4 <__aeabi_dsub+0x2e8>
100112b2:	e0f1      	b.n	10011498 <__aeabi_dsub+0x4cc>
100112b4:	1c62      	adds	r2, r4, #1
100112b6:	4694      	mov	ip, r2
100112b8:	0552      	lsls	r2, r2, #21
100112ba:	0d52      	lsrs	r2, r2, #21
100112bc:	2a01      	cmp	r2, #1
100112be:	dc00      	bgt.n	100112c2 <__aeabi_dsub+0x2f6>
100112c0:	e0a0      	b.n	10011404 <__aeabi_dsub+0x438>
100112c2:	4a1b      	ldr	r2, [pc, #108]	; (10011330 <__aeabi_dsub+0x364>)
100112c4:	4594      	cmp	ip, r2
100112c6:	d100      	bne.n	100112ca <__aeabi_dsub+0x2fe>
100112c8:	e0c5      	b.n	10011456 <__aeabi_dsub+0x48a>
100112ca:	1869      	adds	r1, r5, r1
100112cc:	42a9      	cmp	r1, r5
100112ce:	4192      	sbcs	r2, r2
100112d0:	183f      	adds	r7, r7, r0
100112d2:	4252      	negs	r2, r2
100112d4:	19d2      	adds	r2, r2, r7
100112d6:	0849      	lsrs	r1, r1, #1
100112d8:	07d5      	lsls	r5, r2, #31
100112da:	430d      	orrs	r5, r1
100112dc:	0857      	lsrs	r7, r2, #1
100112de:	4664      	mov	r4, ip
100112e0:	e6a0      	b.n	10011024 <__aeabi_dsub+0x58>
100112e2:	4b13      	ldr	r3, [pc, #76]	; (10011330 <__aeabi_dsub+0x364>)
100112e4:	429c      	cmp	r4, r3
100112e6:	d000      	beq.n	100112ea <__aeabi_dsub+0x31e>
100112e8:	e6d9      	b.n	1001109e <__aeabi_dsub+0xd2>
100112ea:	e69b      	b.n	10011024 <__aeabi_dsub+0x58>
100112ec:	0011      	movs	r1, r2
100112ee:	3c1f      	subs	r4, #31
100112f0:	40e1      	lsrs	r1, r4
100112f2:	000c      	movs	r4, r1
100112f4:	2b20      	cmp	r3, #32
100112f6:	d100      	bne.n	100112fa <__aeabi_dsub+0x32e>
100112f8:	e080      	b.n	100113fc <__aeabi_dsub+0x430>
100112fa:	2140      	movs	r1, #64	; 0x40
100112fc:	1acb      	subs	r3, r1, r3
100112fe:	409a      	lsls	r2, r3
10011300:	4315      	orrs	r5, r2
10011302:	1e6a      	subs	r2, r5, #1
10011304:	4195      	sbcs	r5, r2
10011306:	2700      	movs	r7, #0
10011308:	4325      	orrs	r5, r4
1001130a:	2400      	movs	r4, #0
1001130c:	e71f      	b.n	1001114e <__aeabi_dsub+0x182>
1001130e:	4663      	mov	r3, ip
10011310:	0002      	movs	r2, r0
10011312:	3b20      	subs	r3, #32
10011314:	40da      	lsrs	r2, r3
10011316:	4663      	mov	r3, ip
10011318:	2b20      	cmp	r3, #32
1001131a:	d071      	beq.n	10011400 <__aeabi_dsub+0x434>
1001131c:	2340      	movs	r3, #64	; 0x40
1001131e:	4666      	mov	r6, ip
10011320:	1b9b      	subs	r3, r3, r6
10011322:	4098      	lsls	r0, r3
10011324:	4301      	orrs	r1, r0
10011326:	1e48      	subs	r0, r1, #1
10011328:	4181      	sbcs	r1, r0
1001132a:	4311      	orrs	r1, r2
1001132c:	2200      	movs	r2, #0
1001132e:	e6cf      	b.n	100110d0 <__aeabi_dsub+0x104>
10011330:	000007ff 	.word	0x000007ff
10011334:	ff7fffff 	.word	0xff7fffff
10011338:	800fffff 	.word	0x800fffff
1001133c:	2c00      	cmp	r4, #0
1001133e:	d048      	beq.n	100113d2 <__aeabi_dsub+0x406>
10011340:	4cca      	ldr	r4, [pc, #808]	; (1001166c <__aeabi_dsub+0x6a0>)
10011342:	42a2      	cmp	r2, r4
10011344:	d100      	bne.n	10011348 <__aeabi_dsub+0x37c>
10011346:	e0a2      	b.n	1001148e <__aeabi_dsub+0x4c2>
10011348:	4274      	negs	r4, r6
1001134a:	46a1      	mov	r9, r4
1001134c:	2480      	movs	r4, #128	; 0x80
1001134e:	0424      	lsls	r4, r4, #16
10011350:	4327      	orrs	r7, r4
10011352:	464c      	mov	r4, r9
10011354:	2c38      	cmp	r4, #56	; 0x38
10011356:	dd00      	ble.n	1001135a <__aeabi_dsub+0x38e>
10011358:	e0db      	b.n	10011512 <__aeabi_dsub+0x546>
1001135a:	2c1f      	cmp	r4, #31
1001135c:	dd00      	ble.n	10011360 <__aeabi_dsub+0x394>
1001135e:	e144      	b.n	100115ea <__aeabi_dsub+0x61e>
10011360:	464e      	mov	r6, r9
10011362:	2420      	movs	r4, #32
10011364:	1ba4      	subs	r4, r4, r6
10011366:	003e      	movs	r6, r7
10011368:	40a6      	lsls	r6, r4
1001136a:	46a2      	mov	sl, r4
1001136c:	46b0      	mov	r8, r6
1001136e:	464c      	mov	r4, r9
10011370:	002e      	movs	r6, r5
10011372:	40e6      	lsrs	r6, r4
10011374:	46b4      	mov	ip, r6
10011376:	4646      	mov	r6, r8
10011378:	4664      	mov	r4, ip
1001137a:	4326      	orrs	r6, r4
1001137c:	4654      	mov	r4, sl
1001137e:	40a5      	lsls	r5, r4
10011380:	1e6c      	subs	r4, r5, #1
10011382:	41a5      	sbcs	r5, r4
10011384:	0034      	movs	r4, r6
10011386:	432c      	orrs	r4, r5
10011388:	464d      	mov	r5, r9
1001138a:	40ef      	lsrs	r7, r5
1001138c:	1b0d      	subs	r5, r1, r4
1001138e:	e028      	b.n	100113e2 <__aeabi_dsub+0x416>
10011390:	464a      	mov	r2, r9
10011392:	4643      	mov	r3, r8
10011394:	464d      	mov	r5, r9
10011396:	431a      	orrs	r2, r3
10011398:	d000      	beq.n	1001139c <__aeabi_dsub+0x3d0>
1001139a:	e6a5      	b.n	100110e8 <__aeabi_dsub+0x11c>
1001139c:	2300      	movs	r3, #0
1001139e:	2400      	movs	r4, #0
100113a0:	2500      	movs	r5, #0
100113a2:	e6de      	b.n	10011162 <__aeabi_dsub+0x196>
100113a4:	2a1f      	cmp	r2, #31
100113a6:	dc5a      	bgt.n	1001145e <__aeabi_dsub+0x492>
100113a8:	4666      	mov	r6, ip
100113aa:	2220      	movs	r2, #32
100113ac:	1b92      	subs	r2, r2, r6
100113ae:	0006      	movs	r6, r0
100113b0:	4096      	lsls	r6, r2
100113b2:	4691      	mov	r9, r2
100113b4:	46b0      	mov	r8, r6
100113b6:	4662      	mov	r2, ip
100113b8:	000e      	movs	r6, r1
100113ba:	40d6      	lsrs	r6, r2
100113bc:	4642      	mov	r2, r8
100113be:	4316      	orrs	r6, r2
100113c0:	464a      	mov	r2, r9
100113c2:	4091      	lsls	r1, r2
100113c4:	1e4a      	subs	r2, r1, #1
100113c6:	4191      	sbcs	r1, r2
100113c8:	0002      	movs	r2, r0
100113ca:	4660      	mov	r0, ip
100113cc:	4331      	orrs	r1, r6
100113ce:	40c2      	lsrs	r2, r0
100113d0:	e6e4      	b.n	1001119c <__aeabi_dsub+0x1d0>
100113d2:	003c      	movs	r4, r7
100113d4:	432c      	orrs	r4, r5
100113d6:	d05a      	beq.n	1001148e <__aeabi_dsub+0x4c2>
100113d8:	43f4      	mvns	r4, r6
100113da:	46a1      	mov	r9, r4
100113dc:	2c00      	cmp	r4, #0
100113de:	d152      	bne.n	10011486 <__aeabi_dsub+0x4ba>
100113e0:	1b4d      	subs	r5, r1, r5
100113e2:	42a9      	cmp	r1, r5
100113e4:	4189      	sbcs	r1, r1
100113e6:	1bc7      	subs	r7, r0, r7
100113e8:	4249      	negs	r1, r1
100113ea:	1a7f      	subs	r7, r7, r1
100113ec:	0014      	movs	r4, r2
100113ee:	469a      	mov	sl, r3
100113f0:	e675      	b.n	100110de <__aeabi_dsub+0x112>
100113f2:	4a9e      	ldr	r2, [pc, #632]	; (1001166c <__aeabi_dsub+0x6a0>)
100113f4:	4294      	cmp	r4, r2
100113f6:	d000      	beq.n	100113fa <__aeabi_dsub+0x42e>
100113f8:	e6c7      	b.n	1001118a <__aeabi_dsub+0x1be>
100113fa:	e613      	b.n	10011024 <__aeabi_dsub+0x58>
100113fc:	2200      	movs	r2, #0
100113fe:	e77f      	b.n	10011300 <__aeabi_dsub+0x334>
10011400:	2000      	movs	r0, #0
10011402:	e78f      	b.n	10011324 <__aeabi_dsub+0x358>
10011404:	2c00      	cmp	r4, #0
10011406:	d000      	beq.n	1001140a <__aeabi_dsub+0x43e>
10011408:	e0c8      	b.n	1001159c <__aeabi_dsub+0x5d0>
1001140a:	003b      	movs	r3, r7
1001140c:	432b      	orrs	r3, r5
1001140e:	d100      	bne.n	10011412 <__aeabi_dsub+0x446>
10011410:	e10f      	b.n	10011632 <__aeabi_dsub+0x666>
10011412:	0003      	movs	r3, r0
10011414:	430b      	orrs	r3, r1
10011416:	d100      	bne.n	1001141a <__aeabi_dsub+0x44e>
10011418:	e604      	b.n	10011024 <__aeabi_dsub+0x58>
1001141a:	1869      	adds	r1, r5, r1
1001141c:	42a9      	cmp	r1, r5
1001141e:	419b      	sbcs	r3, r3
10011420:	183f      	adds	r7, r7, r0
10011422:	425b      	negs	r3, r3
10011424:	19df      	adds	r7, r3, r7
10011426:	023b      	lsls	r3, r7, #8
10011428:	d400      	bmi.n	1001142c <__aeabi_dsub+0x460>
1001142a:	e11a      	b.n	10011662 <__aeabi_dsub+0x696>
1001142c:	4b90      	ldr	r3, [pc, #576]	; (10011670 <__aeabi_dsub+0x6a4>)
1001142e:	000d      	movs	r5, r1
10011430:	401f      	ands	r7, r3
10011432:	4664      	mov	r4, ip
10011434:	e5f6      	b.n	10011024 <__aeabi_dsub+0x58>
10011436:	469a      	mov	sl, r3
10011438:	e689      	b.n	1001114e <__aeabi_dsub+0x182>
1001143a:	003a      	movs	r2, r7
1001143c:	432a      	orrs	r2, r5
1001143e:	2c00      	cmp	r4, #0
10011440:	d15c      	bne.n	100114fc <__aeabi_dsub+0x530>
10011442:	2a00      	cmp	r2, #0
10011444:	d175      	bne.n	10011532 <__aeabi_dsub+0x566>
10011446:	0002      	movs	r2, r0
10011448:	430a      	orrs	r2, r1
1001144a:	d100      	bne.n	1001144e <__aeabi_dsub+0x482>
1001144c:	e0ca      	b.n	100115e4 <__aeabi_dsub+0x618>
1001144e:	0007      	movs	r7, r0
10011450:	000d      	movs	r5, r1
10011452:	469a      	mov	sl, r3
10011454:	e5e6      	b.n	10011024 <__aeabi_dsub+0x58>
10011456:	4664      	mov	r4, ip
10011458:	2200      	movs	r2, #0
1001145a:	2500      	movs	r5, #0
1001145c:	e681      	b.n	10011162 <__aeabi_dsub+0x196>
1001145e:	4662      	mov	r2, ip
10011460:	0006      	movs	r6, r0
10011462:	3a20      	subs	r2, #32
10011464:	40d6      	lsrs	r6, r2
10011466:	4662      	mov	r2, ip
10011468:	46b0      	mov	r8, r6
1001146a:	2a20      	cmp	r2, #32
1001146c:	d100      	bne.n	10011470 <__aeabi_dsub+0x4a4>
1001146e:	e0b7      	b.n	100115e0 <__aeabi_dsub+0x614>
10011470:	2240      	movs	r2, #64	; 0x40
10011472:	4666      	mov	r6, ip
10011474:	1b92      	subs	r2, r2, r6
10011476:	4090      	lsls	r0, r2
10011478:	4301      	orrs	r1, r0
1001147a:	4642      	mov	r2, r8
1001147c:	1e48      	subs	r0, r1, #1
1001147e:	4181      	sbcs	r1, r0
10011480:	4311      	orrs	r1, r2
10011482:	2200      	movs	r2, #0
10011484:	e68a      	b.n	1001119c <__aeabi_dsub+0x1d0>
10011486:	4c79      	ldr	r4, [pc, #484]	; (1001166c <__aeabi_dsub+0x6a0>)
10011488:	42a2      	cmp	r2, r4
1001148a:	d000      	beq.n	1001148e <__aeabi_dsub+0x4c2>
1001148c:	e761      	b.n	10011352 <__aeabi_dsub+0x386>
1001148e:	0007      	movs	r7, r0
10011490:	000d      	movs	r5, r1
10011492:	0014      	movs	r4, r2
10011494:	469a      	mov	sl, r3
10011496:	e5c5      	b.n	10011024 <__aeabi_dsub+0x58>
10011498:	2c00      	cmp	r4, #0
1001149a:	d141      	bne.n	10011520 <__aeabi_dsub+0x554>
1001149c:	003c      	movs	r4, r7
1001149e:	432c      	orrs	r4, r5
100114a0:	d078      	beq.n	10011594 <__aeabi_dsub+0x5c8>
100114a2:	43f4      	mvns	r4, r6
100114a4:	46a1      	mov	r9, r4
100114a6:	2c00      	cmp	r4, #0
100114a8:	d020      	beq.n	100114ec <__aeabi_dsub+0x520>
100114aa:	4c70      	ldr	r4, [pc, #448]	; (1001166c <__aeabi_dsub+0x6a0>)
100114ac:	42a2      	cmp	r2, r4
100114ae:	d071      	beq.n	10011594 <__aeabi_dsub+0x5c8>
100114b0:	464c      	mov	r4, r9
100114b2:	2c38      	cmp	r4, #56	; 0x38
100114b4:	dd00      	ble.n	100114b8 <__aeabi_dsub+0x4ec>
100114b6:	e0b2      	b.n	1001161e <__aeabi_dsub+0x652>
100114b8:	2c1f      	cmp	r4, #31
100114ba:	dd00      	ble.n	100114be <__aeabi_dsub+0x4f2>
100114bc:	e0bc      	b.n	10011638 <__aeabi_dsub+0x66c>
100114be:	2620      	movs	r6, #32
100114c0:	1b34      	subs	r4, r6, r4
100114c2:	46a2      	mov	sl, r4
100114c4:	003c      	movs	r4, r7
100114c6:	4656      	mov	r6, sl
100114c8:	40b4      	lsls	r4, r6
100114ca:	464e      	mov	r6, r9
100114cc:	46a0      	mov	r8, r4
100114ce:	002c      	movs	r4, r5
100114d0:	40f4      	lsrs	r4, r6
100114d2:	46a4      	mov	ip, r4
100114d4:	4644      	mov	r4, r8
100114d6:	4666      	mov	r6, ip
100114d8:	4334      	orrs	r4, r6
100114da:	46a4      	mov	ip, r4
100114dc:	4654      	mov	r4, sl
100114de:	40a5      	lsls	r5, r4
100114e0:	4664      	mov	r4, ip
100114e2:	1e6e      	subs	r6, r5, #1
100114e4:	41b5      	sbcs	r5, r6
100114e6:	4325      	orrs	r5, r4
100114e8:	464c      	mov	r4, r9
100114ea:	40e7      	lsrs	r7, r4
100114ec:	186d      	adds	r5, r5, r1
100114ee:	428d      	cmp	r5, r1
100114f0:	4189      	sbcs	r1, r1
100114f2:	183f      	adds	r7, r7, r0
100114f4:	4249      	negs	r1, r1
100114f6:	19cf      	adds	r7, r1, r7
100114f8:	0014      	movs	r4, r2
100114fa:	e656      	b.n	100111aa <__aeabi_dsub+0x1de>
100114fc:	2a00      	cmp	r2, #0
100114fe:	d12f      	bne.n	10011560 <__aeabi_dsub+0x594>
10011500:	0002      	movs	r2, r0
10011502:	430a      	orrs	r2, r1
10011504:	d100      	bne.n	10011508 <__aeabi_dsub+0x53c>
10011506:	e084      	b.n	10011612 <__aeabi_dsub+0x646>
10011508:	0007      	movs	r7, r0
1001150a:	000d      	movs	r5, r1
1001150c:	469a      	mov	sl, r3
1001150e:	4c57      	ldr	r4, [pc, #348]	; (1001166c <__aeabi_dsub+0x6a0>)
10011510:	e588      	b.n	10011024 <__aeabi_dsub+0x58>
10011512:	433d      	orrs	r5, r7
10011514:	1e6f      	subs	r7, r5, #1
10011516:	41bd      	sbcs	r5, r7
10011518:	b2ec      	uxtb	r4, r5
1001151a:	2700      	movs	r7, #0
1001151c:	1b0d      	subs	r5, r1, r4
1001151e:	e760      	b.n	100113e2 <__aeabi_dsub+0x416>
10011520:	4c52      	ldr	r4, [pc, #328]	; (1001166c <__aeabi_dsub+0x6a0>)
10011522:	42a2      	cmp	r2, r4
10011524:	d036      	beq.n	10011594 <__aeabi_dsub+0x5c8>
10011526:	4274      	negs	r4, r6
10011528:	2680      	movs	r6, #128	; 0x80
1001152a:	0436      	lsls	r6, r6, #16
1001152c:	46a1      	mov	r9, r4
1001152e:	4337      	orrs	r7, r6
10011530:	e7be      	b.n	100114b0 <__aeabi_dsub+0x4e4>
10011532:	0002      	movs	r2, r0
10011534:	430a      	orrs	r2, r1
10011536:	d100      	bne.n	1001153a <__aeabi_dsub+0x56e>
10011538:	e574      	b.n	10011024 <__aeabi_dsub+0x58>
1001153a:	1a6a      	subs	r2, r5, r1
1001153c:	4690      	mov	r8, r2
1001153e:	4545      	cmp	r5, r8
10011540:	41b6      	sbcs	r6, r6
10011542:	1a3a      	subs	r2, r7, r0
10011544:	4276      	negs	r6, r6
10011546:	1b92      	subs	r2, r2, r6
10011548:	4694      	mov	ip, r2
1001154a:	0212      	lsls	r2, r2, #8
1001154c:	d400      	bmi.n	10011550 <__aeabi_dsub+0x584>
1001154e:	e5f7      	b.n	10011140 <__aeabi_dsub+0x174>
10011550:	1b4d      	subs	r5, r1, r5
10011552:	42a9      	cmp	r1, r5
10011554:	4189      	sbcs	r1, r1
10011556:	1bc7      	subs	r7, r0, r7
10011558:	4249      	negs	r1, r1
1001155a:	1a7f      	subs	r7, r7, r1
1001155c:	469a      	mov	sl, r3
1001155e:	e561      	b.n	10011024 <__aeabi_dsub+0x58>
10011560:	0002      	movs	r2, r0
10011562:	430a      	orrs	r2, r1
10011564:	d03a      	beq.n	100115dc <__aeabi_dsub+0x610>
10011566:	08ed      	lsrs	r5, r5, #3
10011568:	077c      	lsls	r4, r7, #29
1001156a:	432c      	orrs	r4, r5
1001156c:	2580      	movs	r5, #128	; 0x80
1001156e:	08fa      	lsrs	r2, r7, #3
10011570:	032d      	lsls	r5, r5, #12
10011572:	422a      	tst	r2, r5
10011574:	d008      	beq.n	10011588 <__aeabi_dsub+0x5bc>
10011576:	08c7      	lsrs	r7, r0, #3
10011578:	422f      	tst	r7, r5
1001157a:	d105      	bne.n	10011588 <__aeabi_dsub+0x5bc>
1001157c:	0745      	lsls	r5, r0, #29
1001157e:	002c      	movs	r4, r5
10011580:	003a      	movs	r2, r7
10011582:	469a      	mov	sl, r3
10011584:	08c9      	lsrs	r1, r1, #3
10011586:	430c      	orrs	r4, r1
10011588:	0f67      	lsrs	r7, r4, #29
1001158a:	00d2      	lsls	r2, r2, #3
1001158c:	00e5      	lsls	r5, r4, #3
1001158e:	4317      	orrs	r7, r2
10011590:	4c36      	ldr	r4, [pc, #216]	; (1001166c <__aeabi_dsub+0x6a0>)
10011592:	e547      	b.n	10011024 <__aeabi_dsub+0x58>
10011594:	0007      	movs	r7, r0
10011596:	000d      	movs	r5, r1
10011598:	0014      	movs	r4, r2
1001159a:	e543      	b.n	10011024 <__aeabi_dsub+0x58>
1001159c:	003a      	movs	r2, r7
1001159e:	432a      	orrs	r2, r5
100115a0:	d043      	beq.n	1001162a <__aeabi_dsub+0x65e>
100115a2:	0002      	movs	r2, r0
100115a4:	430a      	orrs	r2, r1
100115a6:	d019      	beq.n	100115dc <__aeabi_dsub+0x610>
100115a8:	08ed      	lsrs	r5, r5, #3
100115aa:	077c      	lsls	r4, r7, #29
100115ac:	432c      	orrs	r4, r5
100115ae:	2580      	movs	r5, #128	; 0x80
100115b0:	08fa      	lsrs	r2, r7, #3
100115b2:	032d      	lsls	r5, r5, #12
100115b4:	422a      	tst	r2, r5
100115b6:	d007      	beq.n	100115c8 <__aeabi_dsub+0x5fc>
100115b8:	08c6      	lsrs	r6, r0, #3
100115ba:	422e      	tst	r6, r5
100115bc:	d104      	bne.n	100115c8 <__aeabi_dsub+0x5fc>
100115be:	0747      	lsls	r7, r0, #29
100115c0:	003c      	movs	r4, r7
100115c2:	0032      	movs	r2, r6
100115c4:	08c9      	lsrs	r1, r1, #3
100115c6:	430c      	orrs	r4, r1
100115c8:	00d7      	lsls	r7, r2, #3
100115ca:	0f62      	lsrs	r2, r4, #29
100115cc:	00e5      	lsls	r5, r4, #3
100115ce:	4317      	orrs	r7, r2
100115d0:	469a      	mov	sl, r3
100115d2:	4c26      	ldr	r4, [pc, #152]	; (1001166c <__aeabi_dsub+0x6a0>)
100115d4:	e526      	b.n	10011024 <__aeabi_dsub+0x58>
100115d6:	2200      	movs	r2, #0
100115d8:	2500      	movs	r5, #0
100115da:	e544      	b.n	10011066 <__aeabi_dsub+0x9a>
100115dc:	4c23      	ldr	r4, [pc, #140]	; (1001166c <__aeabi_dsub+0x6a0>)
100115de:	e521      	b.n	10011024 <__aeabi_dsub+0x58>
100115e0:	2000      	movs	r0, #0
100115e2:	e749      	b.n	10011478 <__aeabi_dsub+0x4ac>
100115e4:	2300      	movs	r3, #0
100115e6:	2500      	movs	r5, #0
100115e8:	e5bb      	b.n	10011162 <__aeabi_dsub+0x196>
100115ea:	464c      	mov	r4, r9
100115ec:	003e      	movs	r6, r7
100115ee:	3c20      	subs	r4, #32
100115f0:	40e6      	lsrs	r6, r4
100115f2:	464c      	mov	r4, r9
100115f4:	46b4      	mov	ip, r6
100115f6:	2c20      	cmp	r4, #32
100115f8:	d031      	beq.n	1001165e <__aeabi_dsub+0x692>
100115fa:	2440      	movs	r4, #64	; 0x40
100115fc:	464e      	mov	r6, r9
100115fe:	1ba6      	subs	r6, r4, r6
10011600:	40b7      	lsls	r7, r6
10011602:	433d      	orrs	r5, r7
10011604:	1e6c      	subs	r4, r5, #1
10011606:	41a5      	sbcs	r5, r4
10011608:	4664      	mov	r4, ip
1001160a:	432c      	orrs	r4, r5
1001160c:	2700      	movs	r7, #0
1001160e:	1b0d      	subs	r5, r1, r4
10011610:	e6e7      	b.n	100113e2 <__aeabi_dsub+0x416>
10011612:	2280      	movs	r2, #128	; 0x80
10011614:	2300      	movs	r3, #0
10011616:	0312      	lsls	r2, r2, #12
10011618:	4c14      	ldr	r4, [pc, #80]	; (1001166c <__aeabi_dsub+0x6a0>)
1001161a:	2500      	movs	r5, #0
1001161c:	e5a1      	b.n	10011162 <__aeabi_dsub+0x196>
1001161e:	433d      	orrs	r5, r7
10011620:	1e6f      	subs	r7, r5, #1
10011622:	41bd      	sbcs	r5, r7
10011624:	2700      	movs	r7, #0
10011626:	b2ed      	uxtb	r5, r5
10011628:	e760      	b.n	100114ec <__aeabi_dsub+0x520>
1001162a:	0007      	movs	r7, r0
1001162c:	000d      	movs	r5, r1
1001162e:	4c0f      	ldr	r4, [pc, #60]	; (1001166c <__aeabi_dsub+0x6a0>)
10011630:	e4f8      	b.n	10011024 <__aeabi_dsub+0x58>
10011632:	0007      	movs	r7, r0
10011634:	000d      	movs	r5, r1
10011636:	e4f5      	b.n	10011024 <__aeabi_dsub+0x58>
10011638:	464e      	mov	r6, r9
1001163a:	003c      	movs	r4, r7
1001163c:	3e20      	subs	r6, #32
1001163e:	40f4      	lsrs	r4, r6
10011640:	46a0      	mov	r8, r4
10011642:	464c      	mov	r4, r9
10011644:	2c20      	cmp	r4, #32
10011646:	d00e      	beq.n	10011666 <__aeabi_dsub+0x69a>
10011648:	2440      	movs	r4, #64	; 0x40
1001164a:	464e      	mov	r6, r9
1001164c:	1ba4      	subs	r4, r4, r6
1001164e:	40a7      	lsls	r7, r4
10011650:	433d      	orrs	r5, r7
10011652:	1e6f      	subs	r7, r5, #1
10011654:	41bd      	sbcs	r5, r7
10011656:	4644      	mov	r4, r8
10011658:	2700      	movs	r7, #0
1001165a:	4325      	orrs	r5, r4
1001165c:	e746      	b.n	100114ec <__aeabi_dsub+0x520>
1001165e:	2700      	movs	r7, #0
10011660:	e7cf      	b.n	10011602 <__aeabi_dsub+0x636>
10011662:	000d      	movs	r5, r1
10011664:	e573      	b.n	1001114e <__aeabi_dsub+0x182>
10011666:	2700      	movs	r7, #0
10011668:	e7f2      	b.n	10011650 <__aeabi_dsub+0x684>
1001166a:	46c0      	nop			; (mov r8, r8)
1001166c:	000007ff 	.word	0x000007ff
10011670:	ff7fffff 	.word	0xff7fffff

10011674 <__aeabi_d2iz>:
10011674:	030b      	lsls	r3, r1, #12
10011676:	b530      	push	{r4, r5, lr}
10011678:	4d13      	ldr	r5, [pc, #76]	; (100116c8 <__aeabi_d2iz+0x54>)
1001167a:	0b1a      	lsrs	r2, r3, #12
1001167c:	004b      	lsls	r3, r1, #1
1001167e:	0d5b      	lsrs	r3, r3, #21
10011680:	0fc9      	lsrs	r1, r1, #31
10011682:	2400      	movs	r4, #0
10011684:	42ab      	cmp	r3, r5
10011686:	dd11      	ble.n	100116ac <__aeabi_d2iz+0x38>
10011688:	4c10      	ldr	r4, [pc, #64]	; (100116cc <__aeabi_d2iz+0x58>)
1001168a:	42a3      	cmp	r3, r4
1001168c:	dc10      	bgt.n	100116b0 <__aeabi_d2iz+0x3c>
1001168e:	2480      	movs	r4, #128	; 0x80
10011690:	0364      	lsls	r4, r4, #13
10011692:	4322      	orrs	r2, r4
10011694:	4c0e      	ldr	r4, [pc, #56]	; (100116d0 <__aeabi_d2iz+0x5c>)
10011696:	1ae4      	subs	r4, r4, r3
10011698:	2c1f      	cmp	r4, #31
1001169a:	dd0c      	ble.n	100116b6 <__aeabi_d2iz+0x42>
1001169c:	480d      	ldr	r0, [pc, #52]	; (100116d4 <__aeabi_d2iz+0x60>)
1001169e:	1ac3      	subs	r3, r0, r3
100116a0:	40da      	lsrs	r2, r3
100116a2:	0013      	movs	r3, r2
100116a4:	425c      	negs	r4, r3
100116a6:	2900      	cmp	r1, #0
100116a8:	d100      	bne.n	100116ac <__aeabi_d2iz+0x38>
100116aa:	001c      	movs	r4, r3
100116ac:	0020      	movs	r0, r4
100116ae:	bd30      	pop	{r4, r5, pc}
100116b0:	4b09      	ldr	r3, [pc, #36]	; (100116d8 <__aeabi_d2iz+0x64>)
100116b2:	18cc      	adds	r4, r1, r3
100116b4:	e7fa      	b.n	100116ac <__aeabi_d2iz+0x38>
100116b6:	40e0      	lsrs	r0, r4
100116b8:	4c08      	ldr	r4, [pc, #32]	; (100116dc <__aeabi_d2iz+0x68>)
100116ba:	46a4      	mov	ip, r4
100116bc:	4463      	add	r3, ip
100116be:	409a      	lsls	r2, r3
100116c0:	0013      	movs	r3, r2
100116c2:	4303      	orrs	r3, r0
100116c4:	e7ee      	b.n	100116a4 <__aeabi_d2iz+0x30>
100116c6:	46c0      	nop			; (mov r8, r8)
100116c8:	000003fe 	.word	0x000003fe
100116cc:	0000041d 	.word	0x0000041d
100116d0:	00000433 	.word	0x00000433
100116d4:	00000413 	.word	0x00000413
100116d8:	7fffffff 	.word	0x7fffffff
100116dc:	fffffbed 	.word	0xfffffbed

100116e0 <__aeabi_ui2d>:
100116e0:	b570      	push	{r4, r5, r6, lr}
100116e2:	1e05      	subs	r5, r0, #0
100116e4:	d028      	beq.n	10011738 <__aeabi_ui2d+0x58>
100116e6:	f000 f8ab 	bl	10011840 <__clzsi2>
100116ea:	4b15      	ldr	r3, [pc, #84]	; (10011740 <__aeabi_ui2d+0x60>)
100116ec:	4a15      	ldr	r2, [pc, #84]	; (10011744 <__aeabi_ui2d+0x64>)
100116ee:	1a1b      	subs	r3, r3, r0
100116f0:	1ad2      	subs	r2, r2, r3
100116f2:	2a1f      	cmp	r2, #31
100116f4:	dd16      	ble.n	10011724 <__aeabi_ui2d+0x44>
100116f6:	002c      	movs	r4, r5
100116f8:	4a13      	ldr	r2, [pc, #76]	; (10011748 <__aeabi_ui2d+0x68>)
100116fa:	2500      	movs	r5, #0
100116fc:	1ad2      	subs	r2, r2, r3
100116fe:	4094      	lsls	r4, r2
10011700:	055a      	lsls	r2, r3, #21
10011702:	0324      	lsls	r4, r4, #12
10011704:	0b24      	lsrs	r4, r4, #12
10011706:	0d52      	lsrs	r2, r2, #21
10011708:	2100      	movs	r1, #0
1001170a:	0324      	lsls	r4, r4, #12
1001170c:	0d0b      	lsrs	r3, r1, #20
1001170e:	0b24      	lsrs	r4, r4, #12
10011710:	051b      	lsls	r3, r3, #20
10011712:	4323      	orrs	r3, r4
10011714:	4c0d      	ldr	r4, [pc, #52]	; (1001174c <__aeabi_ui2d+0x6c>)
10011716:	0512      	lsls	r2, r2, #20
10011718:	4023      	ands	r3, r4
1001171a:	4313      	orrs	r3, r2
1001171c:	005b      	lsls	r3, r3, #1
1001171e:	0028      	movs	r0, r5
10011720:	0859      	lsrs	r1, r3, #1
10011722:	bd70      	pop	{r4, r5, r6, pc}
10011724:	210b      	movs	r1, #11
10011726:	002c      	movs	r4, r5
10011728:	1a08      	subs	r0, r1, r0
1001172a:	40c4      	lsrs	r4, r0
1001172c:	4095      	lsls	r5, r2
1001172e:	0324      	lsls	r4, r4, #12
10011730:	055a      	lsls	r2, r3, #21
10011732:	0b24      	lsrs	r4, r4, #12
10011734:	0d52      	lsrs	r2, r2, #21
10011736:	e7e7      	b.n	10011708 <__aeabi_ui2d+0x28>
10011738:	2200      	movs	r2, #0
1001173a:	2400      	movs	r4, #0
1001173c:	e7e4      	b.n	10011708 <__aeabi_ui2d+0x28>
1001173e:	46c0      	nop			; (mov r8, r8)
10011740:	0000041e 	.word	0x0000041e
10011744:	00000433 	.word	0x00000433
10011748:	00000413 	.word	0x00000413
1001174c:	800fffff 	.word	0x800fffff

10011750 <__aeabi_cdrcmple>:
10011750:	4684      	mov	ip, r0
10011752:	1c10      	adds	r0, r2, #0
10011754:	4662      	mov	r2, ip
10011756:	468c      	mov	ip, r1
10011758:	1c19      	adds	r1, r3, #0
1001175a:	4663      	mov	r3, ip
1001175c:	e000      	b.n	10011760 <__aeabi_cdcmpeq>
1001175e:	46c0      	nop			; (mov r8, r8)

10011760 <__aeabi_cdcmpeq>:
10011760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011762:	f000 f9df 	bl	10011b24 <__ledf2>
10011766:	2800      	cmp	r0, #0
10011768:	d401      	bmi.n	1001176e <__aeabi_cdcmpeq+0xe>
1001176a:	2100      	movs	r1, #0
1001176c:	42c8      	cmn	r0, r1
1001176e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011770 <__aeabi_dcmpeq>:
10011770:	b510      	push	{r4, lr}
10011772:	f000 f933 	bl	100119dc <__eqdf2>
10011776:	4240      	negs	r0, r0
10011778:	3001      	adds	r0, #1
1001177a:	bd10      	pop	{r4, pc}

1001177c <__aeabi_dcmplt>:
1001177c:	b510      	push	{r4, lr}
1001177e:	f000 f9d1 	bl	10011b24 <__ledf2>
10011782:	2800      	cmp	r0, #0
10011784:	db01      	blt.n	1001178a <__aeabi_dcmplt+0xe>
10011786:	2000      	movs	r0, #0
10011788:	bd10      	pop	{r4, pc}
1001178a:	2001      	movs	r0, #1
1001178c:	bd10      	pop	{r4, pc}
1001178e:	46c0      	nop			; (mov r8, r8)

10011790 <__aeabi_dcmple>:
10011790:	b510      	push	{r4, lr}
10011792:	f000 f9c7 	bl	10011b24 <__ledf2>
10011796:	2800      	cmp	r0, #0
10011798:	dd01      	ble.n	1001179e <__aeabi_dcmple+0xe>
1001179a:	2000      	movs	r0, #0
1001179c:	bd10      	pop	{r4, pc}
1001179e:	2001      	movs	r0, #1
100117a0:	bd10      	pop	{r4, pc}
100117a2:	46c0      	nop			; (mov r8, r8)

100117a4 <__aeabi_dcmpgt>:
100117a4:	b510      	push	{r4, lr}
100117a6:	f000 f959 	bl	10011a5c <__gedf2>
100117aa:	2800      	cmp	r0, #0
100117ac:	dc01      	bgt.n	100117b2 <__aeabi_dcmpgt+0xe>
100117ae:	2000      	movs	r0, #0
100117b0:	bd10      	pop	{r4, pc}
100117b2:	2001      	movs	r0, #1
100117b4:	bd10      	pop	{r4, pc}
100117b6:	46c0      	nop			; (mov r8, r8)

100117b8 <__aeabi_dcmpge>:
100117b8:	b510      	push	{r4, lr}
100117ba:	f000 f94f 	bl	10011a5c <__gedf2>
100117be:	2800      	cmp	r0, #0
100117c0:	da01      	bge.n	100117c6 <__aeabi_dcmpge+0xe>
100117c2:	2000      	movs	r0, #0
100117c4:	bd10      	pop	{r4, pc}
100117c6:	2001      	movs	r0, #1
100117c8:	bd10      	pop	{r4, pc}
100117ca:	46c0      	nop			; (mov r8, r8)

100117cc <__aeabi_cfrcmple>:
100117cc:	4684      	mov	ip, r0
100117ce:	1c08      	adds	r0, r1, #0
100117d0:	4661      	mov	r1, ip
100117d2:	e7ff      	b.n	100117d4 <__aeabi_cfcmpeq>

100117d4 <__aeabi_cfcmpeq>:
100117d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100117d6:	f000 f8bd 	bl	10011954 <__lesf2>
100117da:	2800      	cmp	r0, #0
100117dc:	d401      	bmi.n	100117e2 <__aeabi_cfcmpeq+0xe>
100117de:	2100      	movs	r1, #0
100117e0:	42c8      	cmn	r0, r1
100117e2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100117e4 <__aeabi_fcmpeq>:
100117e4:	b510      	push	{r4, lr}
100117e6:	f000 f849 	bl	1001187c <__eqsf2>
100117ea:	4240      	negs	r0, r0
100117ec:	3001      	adds	r0, #1
100117ee:	bd10      	pop	{r4, pc}

100117f0 <__aeabi_fcmplt>:
100117f0:	b510      	push	{r4, lr}
100117f2:	f000 f8af 	bl	10011954 <__lesf2>
100117f6:	2800      	cmp	r0, #0
100117f8:	db01      	blt.n	100117fe <__aeabi_fcmplt+0xe>
100117fa:	2000      	movs	r0, #0
100117fc:	bd10      	pop	{r4, pc}
100117fe:	2001      	movs	r0, #1
10011800:	bd10      	pop	{r4, pc}
10011802:	46c0      	nop			; (mov r8, r8)

10011804 <__aeabi_fcmple>:
10011804:	b510      	push	{r4, lr}
10011806:	f000 f8a5 	bl	10011954 <__lesf2>
1001180a:	2800      	cmp	r0, #0
1001180c:	dd01      	ble.n	10011812 <__aeabi_fcmple+0xe>
1001180e:	2000      	movs	r0, #0
10011810:	bd10      	pop	{r4, pc}
10011812:	2001      	movs	r0, #1
10011814:	bd10      	pop	{r4, pc}
10011816:	46c0      	nop			; (mov r8, r8)

10011818 <__aeabi_fcmpgt>:
10011818:	b510      	push	{r4, lr}
1001181a:	f000 f857 	bl	100118cc <__gesf2>
1001181e:	2800      	cmp	r0, #0
10011820:	dc01      	bgt.n	10011826 <__aeabi_fcmpgt+0xe>
10011822:	2000      	movs	r0, #0
10011824:	bd10      	pop	{r4, pc}
10011826:	2001      	movs	r0, #1
10011828:	bd10      	pop	{r4, pc}
1001182a:	46c0      	nop			; (mov r8, r8)

1001182c <__aeabi_fcmpge>:
1001182c:	b510      	push	{r4, lr}
1001182e:	f000 f84d 	bl	100118cc <__gesf2>
10011832:	2800      	cmp	r0, #0
10011834:	da01      	bge.n	1001183a <__aeabi_fcmpge+0xe>
10011836:	2000      	movs	r0, #0
10011838:	bd10      	pop	{r4, pc}
1001183a:	2001      	movs	r0, #1
1001183c:	bd10      	pop	{r4, pc}
1001183e:	46c0      	nop			; (mov r8, r8)

10011840 <__clzsi2>:
10011840:	211c      	movs	r1, #28
10011842:	2301      	movs	r3, #1
10011844:	041b      	lsls	r3, r3, #16
10011846:	4298      	cmp	r0, r3
10011848:	d301      	bcc.n	1001184e <__clzsi2+0xe>
1001184a:	0c00      	lsrs	r0, r0, #16
1001184c:	3910      	subs	r1, #16
1001184e:	0a1b      	lsrs	r3, r3, #8
10011850:	4298      	cmp	r0, r3
10011852:	d301      	bcc.n	10011858 <__clzsi2+0x18>
10011854:	0a00      	lsrs	r0, r0, #8
10011856:	3908      	subs	r1, #8
10011858:	091b      	lsrs	r3, r3, #4
1001185a:	4298      	cmp	r0, r3
1001185c:	d301      	bcc.n	10011862 <__clzsi2+0x22>
1001185e:	0900      	lsrs	r0, r0, #4
10011860:	3904      	subs	r1, #4
10011862:	a202      	add	r2, pc, #8	; (adr r2, 1001186c <__clzsi2+0x2c>)
10011864:	5c10      	ldrb	r0, [r2, r0]
10011866:	1840      	adds	r0, r0, r1
10011868:	4770      	bx	lr
1001186a:	46c0      	nop			; (mov r8, r8)
1001186c:	02020304 	.word	0x02020304
10011870:	01010101 	.word	0x01010101
	...

1001187c <__eqsf2>:
1001187c:	0243      	lsls	r3, r0, #9
1001187e:	b570      	push	{r4, r5, r6, lr}
10011880:	0042      	lsls	r2, r0, #1
10011882:	004c      	lsls	r4, r1, #1
10011884:	0a5d      	lsrs	r5, r3, #9
10011886:	0fc3      	lsrs	r3, r0, #31
10011888:	0248      	lsls	r0, r1, #9
1001188a:	0e12      	lsrs	r2, r2, #24
1001188c:	0a46      	lsrs	r6, r0, #9
1001188e:	0e24      	lsrs	r4, r4, #24
10011890:	0fc9      	lsrs	r1, r1, #31
10011892:	2aff      	cmp	r2, #255	; 0xff
10011894:	d00f      	beq.n	100118b6 <__eqsf2+0x3a>
10011896:	2cff      	cmp	r4, #255	; 0xff
10011898:	d011      	beq.n	100118be <__eqsf2+0x42>
1001189a:	2001      	movs	r0, #1
1001189c:	42a2      	cmp	r2, r4
1001189e:	d000      	beq.n	100118a2 <__eqsf2+0x26>
100118a0:	bd70      	pop	{r4, r5, r6, pc}
100118a2:	42b5      	cmp	r5, r6
100118a4:	d1fc      	bne.n	100118a0 <__eqsf2+0x24>
100118a6:	428b      	cmp	r3, r1
100118a8:	d00d      	beq.n	100118c6 <__eqsf2+0x4a>
100118aa:	2a00      	cmp	r2, #0
100118ac:	d1f8      	bne.n	100118a0 <__eqsf2+0x24>
100118ae:	0028      	movs	r0, r5
100118b0:	1e43      	subs	r3, r0, #1
100118b2:	4198      	sbcs	r0, r3
100118b4:	e7f4      	b.n	100118a0 <__eqsf2+0x24>
100118b6:	2001      	movs	r0, #1
100118b8:	2d00      	cmp	r5, #0
100118ba:	d1f1      	bne.n	100118a0 <__eqsf2+0x24>
100118bc:	e7eb      	b.n	10011896 <__eqsf2+0x1a>
100118be:	2001      	movs	r0, #1
100118c0:	2e00      	cmp	r6, #0
100118c2:	d1ed      	bne.n	100118a0 <__eqsf2+0x24>
100118c4:	e7e9      	b.n	1001189a <__eqsf2+0x1e>
100118c6:	2000      	movs	r0, #0
100118c8:	e7ea      	b.n	100118a0 <__eqsf2+0x24>
100118ca:	46c0      	nop			; (mov r8, r8)

100118cc <__gesf2>:
100118cc:	0243      	lsls	r3, r0, #9
100118ce:	b5f0      	push	{r4, r5, r6, r7, lr}
100118d0:	0042      	lsls	r2, r0, #1
100118d2:	0a5d      	lsrs	r5, r3, #9
100118d4:	0fc3      	lsrs	r3, r0, #31
100118d6:	0248      	lsls	r0, r1, #9
100118d8:	0a44      	lsrs	r4, r0, #9
100118da:	0048      	lsls	r0, r1, #1
100118dc:	0e12      	lsrs	r2, r2, #24
100118de:	0e00      	lsrs	r0, r0, #24
100118e0:	0fc9      	lsrs	r1, r1, #31
100118e2:	2aff      	cmp	r2, #255	; 0xff
100118e4:	d01f      	beq.n	10011926 <__gesf2+0x5a>
100118e6:	28ff      	cmp	r0, #255	; 0xff
100118e8:	d022      	beq.n	10011930 <__gesf2+0x64>
100118ea:	2a00      	cmp	r2, #0
100118ec:	d109      	bne.n	10011902 <__gesf2+0x36>
100118ee:	426e      	negs	r6, r5
100118f0:	416e      	adcs	r6, r5
100118f2:	2800      	cmp	r0, #0
100118f4:	d10f      	bne.n	10011916 <__gesf2+0x4a>
100118f6:	2c00      	cmp	r4, #0
100118f8:	d10d      	bne.n	10011916 <__gesf2+0x4a>
100118fa:	2000      	movs	r0, #0
100118fc:	2d00      	cmp	r5, #0
100118fe:	d009      	beq.n	10011914 <__gesf2+0x48>
10011900:	e005      	b.n	1001190e <__gesf2+0x42>
10011902:	2800      	cmp	r0, #0
10011904:	d101      	bne.n	1001190a <__gesf2+0x3e>
10011906:	2c00      	cmp	r4, #0
10011908:	d001      	beq.n	1001190e <__gesf2+0x42>
1001190a:	428b      	cmp	r3, r1
1001190c:	d013      	beq.n	10011936 <__gesf2+0x6a>
1001190e:	4258      	negs	r0, r3
10011910:	2301      	movs	r3, #1
10011912:	4318      	orrs	r0, r3
10011914:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011916:	2e00      	cmp	r6, #0
10011918:	d0f7      	beq.n	1001190a <__gesf2+0x3e>
1001191a:	4248      	negs	r0, r1
1001191c:	4141      	adcs	r1, r0
1001191e:	2001      	movs	r0, #1
10011920:	4249      	negs	r1, r1
10011922:	4308      	orrs	r0, r1
10011924:	e7f6      	b.n	10011914 <__gesf2+0x48>
10011926:	2d00      	cmp	r5, #0
10011928:	d0dd      	beq.n	100118e6 <__gesf2+0x1a>
1001192a:	2002      	movs	r0, #2
1001192c:	4240      	negs	r0, r0
1001192e:	e7f1      	b.n	10011914 <__gesf2+0x48>
10011930:	2c00      	cmp	r4, #0
10011932:	d0da      	beq.n	100118ea <__gesf2+0x1e>
10011934:	e7f9      	b.n	1001192a <__gesf2+0x5e>
10011936:	4282      	cmp	r2, r0
10011938:	dce9      	bgt.n	1001190e <__gesf2+0x42>
1001193a:	db04      	blt.n	10011946 <__gesf2+0x7a>
1001193c:	42a5      	cmp	r5, r4
1001193e:	d8e6      	bhi.n	1001190e <__gesf2+0x42>
10011940:	2000      	movs	r0, #0
10011942:	42a5      	cmp	r5, r4
10011944:	d2e6      	bcs.n	10011914 <__gesf2+0x48>
10011946:	4258      	negs	r0, r3
10011948:	4143      	adcs	r3, r0
1001194a:	2001      	movs	r0, #1
1001194c:	425b      	negs	r3, r3
1001194e:	4318      	orrs	r0, r3
10011950:	e7e0      	b.n	10011914 <__gesf2+0x48>
10011952:	46c0      	nop			; (mov r8, r8)

10011954 <__lesf2>:
10011954:	0243      	lsls	r3, r0, #9
10011956:	b5f0      	push	{r4, r5, r6, r7, lr}
10011958:	0042      	lsls	r2, r0, #1
1001195a:	004c      	lsls	r4, r1, #1
1001195c:	0a5e      	lsrs	r6, r3, #9
1001195e:	0fc3      	lsrs	r3, r0, #31
10011960:	0248      	lsls	r0, r1, #9
10011962:	0e12      	lsrs	r2, r2, #24
10011964:	0a45      	lsrs	r5, r0, #9
10011966:	0e24      	lsrs	r4, r4, #24
10011968:	0fc9      	lsrs	r1, r1, #31
1001196a:	2aff      	cmp	r2, #255	; 0xff
1001196c:	d017      	beq.n	1001199e <__lesf2+0x4a>
1001196e:	2cff      	cmp	r4, #255	; 0xff
10011970:	d019      	beq.n	100119a6 <__lesf2+0x52>
10011972:	2a00      	cmp	r2, #0
10011974:	d10b      	bne.n	1001198e <__lesf2+0x3a>
10011976:	4270      	negs	r0, r6
10011978:	4170      	adcs	r0, r6
1001197a:	2c00      	cmp	r4, #0
1001197c:	d017      	beq.n	100119ae <__lesf2+0x5a>
1001197e:	2800      	cmp	r0, #0
10011980:	d007      	beq.n	10011992 <__lesf2+0x3e>
10011982:	4248      	negs	r0, r1
10011984:	4141      	adcs	r1, r0
10011986:	2001      	movs	r0, #1
10011988:	4249      	negs	r1, r1
1001198a:	4308      	orrs	r0, r1
1001198c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001198e:	2c00      	cmp	r4, #0
10011990:	d013      	beq.n	100119ba <__lesf2+0x66>
10011992:	428b      	cmp	r3, r1
10011994:	d014      	beq.n	100119c0 <__lesf2+0x6c>
10011996:	4258      	negs	r0, r3
10011998:	2301      	movs	r3, #1
1001199a:	4318      	orrs	r0, r3
1001199c:	e7f6      	b.n	1001198c <__lesf2+0x38>
1001199e:	2002      	movs	r0, #2
100119a0:	2e00      	cmp	r6, #0
100119a2:	d1f3      	bne.n	1001198c <__lesf2+0x38>
100119a4:	e7e3      	b.n	1001196e <__lesf2+0x1a>
100119a6:	2002      	movs	r0, #2
100119a8:	2d00      	cmp	r5, #0
100119aa:	d1ef      	bne.n	1001198c <__lesf2+0x38>
100119ac:	e7e1      	b.n	10011972 <__lesf2+0x1e>
100119ae:	2d00      	cmp	r5, #0
100119b0:	d1e5      	bne.n	1001197e <__lesf2+0x2a>
100119b2:	2000      	movs	r0, #0
100119b4:	2e00      	cmp	r6, #0
100119b6:	d0e9      	beq.n	1001198c <__lesf2+0x38>
100119b8:	e7ed      	b.n	10011996 <__lesf2+0x42>
100119ba:	2d00      	cmp	r5, #0
100119bc:	d1e9      	bne.n	10011992 <__lesf2+0x3e>
100119be:	e7ea      	b.n	10011996 <__lesf2+0x42>
100119c0:	42a2      	cmp	r2, r4
100119c2:	dce8      	bgt.n	10011996 <__lesf2+0x42>
100119c4:	db04      	blt.n	100119d0 <__lesf2+0x7c>
100119c6:	42ae      	cmp	r6, r5
100119c8:	d8e5      	bhi.n	10011996 <__lesf2+0x42>
100119ca:	2000      	movs	r0, #0
100119cc:	42ae      	cmp	r6, r5
100119ce:	d2dd      	bcs.n	1001198c <__lesf2+0x38>
100119d0:	4258      	negs	r0, r3
100119d2:	4143      	adcs	r3, r0
100119d4:	2001      	movs	r0, #1
100119d6:	425b      	negs	r3, r3
100119d8:	4318      	orrs	r0, r3
100119da:	e7d7      	b.n	1001198c <__lesf2+0x38>

100119dc <__eqdf2>:
100119dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100119de:	465f      	mov	r7, fp
100119e0:	4656      	mov	r6, sl
100119e2:	464d      	mov	r5, r9
100119e4:	4644      	mov	r4, r8
100119e6:	b4f0      	push	{r4, r5, r6, r7}
100119e8:	031f      	lsls	r7, r3, #12
100119ea:	005c      	lsls	r4, r3, #1
100119ec:	0fdb      	lsrs	r3, r3, #31
100119ee:	469a      	mov	sl, r3
100119f0:	4b19      	ldr	r3, [pc, #100]	; (10011a58 <__eqdf2+0x7c>)
100119f2:	030e      	lsls	r6, r1, #12
100119f4:	004d      	lsls	r5, r1, #1
100119f6:	0fc9      	lsrs	r1, r1, #31
100119f8:	4680      	mov	r8, r0
100119fa:	0b36      	lsrs	r6, r6, #12
100119fc:	0d6d      	lsrs	r5, r5, #21
100119fe:	468b      	mov	fp, r1
10011a00:	4691      	mov	r9, r2
10011a02:	0b3f      	lsrs	r7, r7, #12
10011a04:	0d64      	lsrs	r4, r4, #21
10011a06:	429d      	cmp	r5, r3
10011a08:	d019      	beq.n	10011a3e <__eqdf2+0x62>
10011a0a:	4b13      	ldr	r3, [pc, #76]	; (10011a58 <__eqdf2+0x7c>)
10011a0c:	429c      	cmp	r4, r3
10011a0e:	d01b      	beq.n	10011a48 <__eqdf2+0x6c>
10011a10:	2301      	movs	r3, #1
10011a12:	42a5      	cmp	r5, r4
10011a14:	d006      	beq.n	10011a24 <__eqdf2+0x48>
10011a16:	0018      	movs	r0, r3
10011a18:	bc3c      	pop	{r2, r3, r4, r5}
10011a1a:	4690      	mov	r8, r2
10011a1c:	4699      	mov	r9, r3
10011a1e:	46a2      	mov	sl, r4
10011a20:	46ab      	mov	fp, r5
10011a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a24:	42be      	cmp	r6, r7
10011a26:	d1f6      	bne.n	10011a16 <__eqdf2+0x3a>
10011a28:	45c8      	cmp	r8, r9
10011a2a:	d1f4      	bne.n	10011a16 <__eqdf2+0x3a>
10011a2c:	45d3      	cmp	fp, sl
10011a2e:	d010      	beq.n	10011a52 <__eqdf2+0x76>
10011a30:	2d00      	cmp	r5, #0
10011a32:	d1f0      	bne.n	10011a16 <__eqdf2+0x3a>
10011a34:	4330      	orrs	r0, r6
10011a36:	0003      	movs	r3, r0
10011a38:	1e5a      	subs	r2, r3, #1
10011a3a:	4193      	sbcs	r3, r2
10011a3c:	e7eb      	b.n	10011a16 <__eqdf2+0x3a>
10011a3e:	0031      	movs	r1, r6
10011a40:	2301      	movs	r3, #1
10011a42:	4301      	orrs	r1, r0
10011a44:	d1e7      	bne.n	10011a16 <__eqdf2+0x3a>
10011a46:	e7e0      	b.n	10011a0a <__eqdf2+0x2e>
10011a48:	433a      	orrs	r2, r7
10011a4a:	2301      	movs	r3, #1
10011a4c:	2a00      	cmp	r2, #0
10011a4e:	d1e2      	bne.n	10011a16 <__eqdf2+0x3a>
10011a50:	e7de      	b.n	10011a10 <__eqdf2+0x34>
10011a52:	2300      	movs	r3, #0
10011a54:	e7df      	b.n	10011a16 <__eqdf2+0x3a>
10011a56:	46c0      	nop			; (mov r8, r8)
10011a58:	000007ff 	.word	0x000007ff

10011a5c <__gedf2>:
10011a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011a5e:	465f      	mov	r7, fp
10011a60:	4644      	mov	r4, r8
10011a62:	4656      	mov	r6, sl
10011a64:	464d      	mov	r5, r9
10011a66:	b4f0      	push	{r4, r5, r6, r7}
10011a68:	031f      	lsls	r7, r3, #12
10011a6a:	0b3c      	lsrs	r4, r7, #12
10011a6c:	4f2c      	ldr	r7, [pc, #176]	; (10011b20 <__gedf2+0xc4>)
10011a6e:	030e      	lsls	r6, r1, #12
10011a70:	004d      	lsls	r5, r1, #1
10011a72:	46a3      	mov	fp, r4
10011a74:	005c      	lsls	r4, r3, #1
10011a76:	4684      	mov	ip, r0
10011a78:	0b36      	lsrs	r6, r6, #12
10011a7a:	0d6d      	lsrs	r5, r5, #21
10011a7c:	0fc9      	lsrs	r1, r1, #31
10011a7e:	4690      	mov	r8, r2
10011a80:	0d64      	lsrs	r4, r4, #21
10011a82:	0fdb      	lsrs	r3, r3, #31
10011a84:	42bd      	cmp	r5, r7
10011a86:	d02b      	beq.n	10011ae0 <__gedf2+0x84>
10011a88:	4f25      	ldr	r7, [pc, #148]	; (10011b20 <__gedf2+0xc4>)
10011a8a:	42bc      	cmp	r4, r7
10011a8c:	d02e      	beq.n	10011aec <__gedf2+0x90>
10011a8e:	2d00      	cmp	r5, #0
10011a90:	d10e      	bne.n	10011ab0 <__gedf2+0x54>
10011a92:	4330      	orrs	r0, r6
10011a94:	0007      	movs	r7, r0
10011a96:	4681      	mov	r9, r0
10011a98:	4278      	negs	r0, r7
10011a9a:	4178      	adcs	r0, r7
10011a9c:	2c00      	cmp	r4, #0
10011a9e:	d117      	bne.n	10011ad0 <__gedf2+0x74>
10011aa0:	465f      	mov	r7, fp
10011aa2:	433a      	orrs	r2, r7
10011aa4:	d114      	bne.n	10011ad0 <__gedf2+0x74>
10011aa6:	464b      	mov	r3, r9
10011aa8:	2000      	movs	r0, #0
10011aaa:	2b00      	cmp	r3, #0
10011aac:	d00a      	beq.n	10011ac4 <__gedf2+0x68>
10011aae:	e006      	b.n	10011abe <__gedf2+0x62>
10011ab0:	2c00      	cmp	r4, #0
10011ab2:	d102      	bne.n	10011aba <__gedf2+0x5e>
10011ab4:	4658      	mov	r0, fp
10011ab6:	4302      	orrs	r2, r0
10011ab8:	d001      	beq.n	10011abe <__gedf2+0x62>
10011aba:	4299      	cmp	r1, r3
10011abc:	d01a      	beq.n	10011af4 <__gedf2+0x98>
10011abe:	2301      	movs	r3, #1
10011ac0:	4248      	negs	r0, r1
10011ac2:	4318      	orrs	r0, r3
10011ac4:	bc3c      	pop	{r2, r3, r4, r5}
10011ac6:	4690      	mov	r8, r2
10011ac8:	4699      	mov	r9, r3
10011aca:	46a2      	mov	sl, r4
10011acc:	46ab      	mov	fp, r5
10011ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011ad0:	2800      	cmp	r0, #0
10011ad2:	d0f2      	beq.n	10011aba <__gedf2+0x5e>
10011ad4:	4258      	negs	r0, r3
10011ad6:	4158      	adcs	r0, r3
10011ad8:	2201      	movs	r2, #1
10011ada:	4240      	negs	r0, r0
10011adc:	4310      	orrs	r0, r2
10011ade:	e7f1      	b.n	10011ac4 <__gedf2+0x68>
10011ae0:	0037      	movs	r7, r6
10011ae2:	4307      	orrs	r7, r0
10011ae4:	d0d0      	beq.n	10011a88 <__gedf2+0x2c>
10011ae6:	2002      	movs	r0, #2
10011ae8:	4240      	negs	r0, r0
10011aea:	e7eb      	b.n	10011ac4 <__gedf2+0x68>
10011aec:	465f      	mov	r7, fp
10011aee:	4317      	orrs	r7, r2
10011af0:	d0cd      	beq.n	10011a8e <__gedf2+0x32>
10011af2:	e7f8      	b.n	10011ae6 <__gedf2+0x8a>
10011af4:	42a5      	cmp	r5, r4
10011af6:	dce2      	bgt.n	10011abe <__gedf2+0x62>
10011af8:	db05      	blt.n	10011b06 <__gedf2+0xaa>
10011afa:	455e      	cmp	r6, fp
10011afc:	d8df      	bhi.n	10011abe <__gedf2+0x62>
10011afe:	d008      	beq.n	10011b12 <__gedf2+0xb6>
10011b00:	2000      	movs	r0, #0
10011b02:	455e      	cmp	r6, fp
10011b04:	d2de      	bcs.n	10011ac4 <__gedf2+0x68>
10011b06:	4248      	negs	r0, r1
10011b08:	4148      	adcs	r0, r1
10011b0a:	2301      	movs	r3, #1
10011b0c:	4240      	negs	r0, r0
10011b0e:	4318      	orrs	r0, r3
10011b10:	e7d8      	b.n	10011ac4 <__gedf2+0x68>
10011b12:	45c4      	cmp	ip, r8
10011b14:	d8d3      	bhi.n	10011abe <__gedf2+0x62>
10011b16:	2000      	movs	r0, #0
10011b18:	45c4      	cmp	ip, r8
10011b1a:	d3f4      	bcc.n	10011b06 <__gedf2+0xaa>
10011b1c:	e7d2      	b.n	10011ac4 <__gedf2+0x68>
10011b1e:	46c0      	nop			; (mov r8, r8)
10011b20:	000007ff 	.word	0x000007ff

10011b24 <__ledf2>:
10011b24:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b26:	465f      	mov	r7, fp
10011b28:	464d      	mov	r5, r9
10011b2a:	4644      	mov	r4, r8
10011b2c:	4656      	mov	r6, sl
10011b2e:	b4f0      	push	{r4, r5, r6, r7}
10011b30:	031c      	lsls	r4, r3, #12
10011b32:	0b24      	lsrs	r4, r4, #12
10011b34:	46a4      	mov	ip, r4
10011b36:	4c2f      	ldr	r4, [pc, #188]	; (10011bf4 <__ledf2+0xd0>)
10011b38:	030f      	lsls	r7, r1, #12
10011b3a:	004d      	lsls	r5, r1, #1
10011b3c:	005e      	lsls	r6, r3, #1
10011b3e:	0fc9      	lsrs	r1, r1, #31
10011b40:	4680      	mov	r8, r0
10011b42:	0b3f      	lsrs	r7, r7, #12
10011b44:	0d6d      	lsrs	r5, r5, #21
10011b46:	468b      	mov	fp, r1
10011b48:	4691      	mov	r9, r2
10011b4a:	0d76      	lsrs	r6, r6, #21
10011b4c:	0fdb      	lsrs	r3, r3, #31
10011b4e:	42a5      	cmp	r5, r4
10011b50:	d020      	beq.n	10011b94 <__ledf2+0x70>
10011b52:	4c28      	ldr	r4, [pc, #160]	; (10011bf4 <__ledf2+0xd0>)
10011b54:	42a6      	cmp	r6, r4
10011b56:	d022      	beq.n	10011b9e <__ledf2+0x7a>
10011b58:	2d00      	cmp	r5, #0
10011b5a:	d112      	bne.n	10011b82 <__ledf2+0x5e>
10011b5c:	4338      	orrs	r0, r7
10011b5e:	4244      	negs	r4, r0
10011b60:	4144      	adcs	r4, r0
10011b62:	2e00      	cmp	r6, #0
10011b64:	d020      	beq.n	10011ba8 <__ledf2+0x84>
10011b66:	2c00      	cmp	r4, #0
10011b68:	d00d      	beq.n	10011b86 <__ledf2+0x62>
10011b6a:	425c      	negs	r4, r3
10011b6c:	4163      	adcs	r3, r4
10011b6e:	2401      	movs	r4, #1
10011b70:	425b      	negs	r3, r3
10011b72:	431c      	orrs	r4, r3
10011b74:	0020      	movs	r0, r4
10011b76:	bc3c      	pop	{r2, r3, r4, r5}
10011b78:	4690      	mov	r8, r2
10011b7a:	4699      	mov	r9, r3
10011b7c:	46a2      	mov	sl, r4
10011b7e:	46ab      	mov	fp, r5
10011b80:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011b82:	2e00      	cmp	r6, #0
10011b84:	d017      	beq.n	10011bb6 <__ledf2+0x92>
10011b86:	455b      	cmp	r3, fp
10011b88:	d019      	beq.n	10011bbe <__ledf2+0x9a>
10011b8a:	465b      	mov	r3, fp
10011b8c:	425c      	negs	r4, r3
10011b8e:	2301      	movs	r3, #1
10011b90:	431c      	orrs	r4, r3
10011b92:	e7ef      	b.n	10011b74 <__ledf2+0x50>
10011b94:	0039      	movs	r1, r7
10011b96:	2402      	movs	r4, #2
10011b98:	4301      	orrs	r1, r0
10011b9a:	d1eb      	bne.n	10011b74 <__ledf2+0x50>
10011b9c:	e7d9      	b.n	10011b52 <__ledf2+0x2e>
10011b9e:	4661      	mov	r1, ip
10011ba0:	2402      	movs	r4, #2
10011ba2:	4311      	orrs	r1, r2
10011ba4:	d1e6      	bne.n	10011b74 <__ledf2+0x50>
10011ba6:	e7d7      	b.n	10011b58 <__ledf2+0x34>
10011ba8:	4661      	mov	r1, ip
10011baa:	430a      	orrs	r2, r1
10011bac:	d1db      	bne.n	10011b66 <__ledf2+0x42>
10011bae:	2400      	movs	r4, #0
10011bb0:	2800      	cmp	r0, #0
10011bb2:	d0df      	beq.n	10011b74 <__ledf2+0x50>
10011bb4:	e7e9      	b.n	10011b8a <__ledf2+0x66>
10011bb6:	4661      	mov	r1, ip
10011bb8:	430a      	orrs	r2, r1
10011bba:	d1e4      	bne.n	10011b86 <__ledf2+0x62>
10011bbc:	e7e5      	b.n	10011b8a <__ledf2+0x66>
10011bbe:	42b5      	cmp	r5, r6
10011bc0:	dd03      	ble.n	10011bca <__ledf2+0xa6>
10011bc2:	2201      	movs	r2, #1
10011bc4:	425c      	negs	r4, r3
10011bc6:	4314      	orrs	r4, r2
10011bc8:	e7d4      	b.n	10011b74 <__ledf2+0x50>
10011bca:	42b5      	cmp	r5, r6
10011bcc:	dbcd      	blt.n	10011b6a <__ledf2+0x46>
10011bce:	4567      	cmp	r7, ip
10011bd0:	d8db      	bhi.n	10011b8a <__ledf2+0x66>
10011bd2:	d009      	beq.n	10011be8 <__ledf2+0xc4>
10011bd4:	2400      	movs	r4, #0
10011bd6:	4567      	cmp	r7, ip
10011bd8:	d2cc      	bcs.n	10011b74 <__ledf2+0x50>
10011bda:	4659      	mov	r1, fp
10011bdc:	424c      	negs	r4, r1
10011bde:	4161      	adcs	r1, r4
10011be0:	2401      	movs	r4, #1
10011be2:	4249      	negs	r1, r1
10011be4:	430c      	orrs	r4, r1
10011be6:	e7c5      	b.n	10011b74 <__ledf2+0x50>
10011be8:	45c8      	cmp	r8, r9
10011bea:	d8ce      	bhi.n	10011b8a <__ledf2+0x66>
10011bec:	2400      	movs	r4, #0
10011bee:	45c8      	cmp	r8, r9
10011bf0:	d3f3      	bcc.n	10011bda <__ledf2+0xb6>
10011bf2:	e7bf      	b.n	10011b74 <__ledf2+0x50>
10011bf4:	000007ff 	.word	0x000007ff

10011bf8 <__libc_init_array>:
10011bf8:	4b0e      	ldr	r3, [pc, #56]	; (10011c34 <__libc_init_array+0x3c>)
10011bfa:	b570      	push	{r4, r5, r6, lr}
10011bfc:	2500      	movs	r5, #0
10011bfe:	001e      	movs	r6, r3
10011c00:	4c0d      	ldr	r4, [pc, #52]	; (10011c38 <__libc_init_array+0x40>)
10011c02:	1ae4      	subs	r4, r4, r3
10011c04:	10a4      	asrs	r4, r4, #2
10011c06:	42a5      	cmp	r5, r4
10011c08:	d004      	beq.n	10011c14 <__libc_init_array+0x1c>
10011c0a:	00ab      	lsls	r3, r5, #2
10011c0c:	58f3      	ldr	r3, [r6, r3]
10011c0e:	4798      	blx	r3
10011c10:	3501      	adds	r5, #1
10011c12:	e7f8      	b.n	10011c06 <__libc_init_array+0xe>
10011c14:	f002 fab2 	bl	1001417c <_init>
10011c18:	4b08      	ldr	r3, [pc, #32]	; (10011c3c <__libc_init_array+0x44>)
10011c1a:	2500      	movs	r5, #0
10011c1c:	001e      	movs	r6, r3
10011c1e:	4c08      	ldr	r4, [pc, #32]	; (10011c40 <__libc_init_array+0x48>)
10011c20:	1ae4      	subs	r4, r4, r3
10011c22:	10a4      	asrs	r4, r4, #2
10011c24:	42a5      	cmp	r5, r4
10011c26:	d004      	beq.n	10011c32 <__libc_init_array+0x3a>
10011c28:	00ab      	lsls	r3, r5, #2
10011c2a:	58f3      	ldr	r3, [r6, r3]
10011c2c:	4798      	blx	r3
10011c2e:	3501      	adds	r5, #1
10011c30:	e7f8      	b.n	10011c24 <__libc_init_array+0x2c>
10011c32:	bd70      	pop	{r4, r5, r6, pc}
10011c34:	10014188 	.word	0x10014188
10011c38:	10014188 	.word	0x10014188
10011c3c:	10014188 	.word	0x10014188
10011c40:	1001418c 	.word	0x1001418c

10011c44 <memcmp>:
10011c44:	b530      	push	{r4, r5, lr}
10011c46:	2400      	movs	r4, #0
10011c48:	42a2      	cmp	r2, r4
10011c4a:	d008      	beq.n	10011c5e <memcmp+0x1a>
10011c4c:	5d03      	ldrb	r3, [r0, r4]
10011c4e:	1c65      	adds	r5, r4, #1
10011c50:	5d0c      	ldrb	r4, [r1, r4]
10011c52:	42a3      	cmp	r3, r4
10011c54:	d001      	beq.n	10011c5a <memcmp+0x16>
10011c56:	1b18      	subs	r0, r3, r4
10011c58:	e002      	b.n	10011c60 <memcmp+0x1c>
10011c5a:	002c      	movs	r4, r5
10011c5c:	e7f4      	b.n	10011c48 <memcmp+0x4>
10011c5e:	2000      	movs	r0, #0
10011c60:	bd30      	pop	{r4, r5, pc}

10011c62 <memcpy>:
10011c62:	2300      	movs	r3, #0
10011c64:	b510      	push	{r4, lr}
10011c66:	429a      	cmp	r2, r3
10011c68:	d003      	beq.n	10011c72 <memcpy+0x10>
10011c6a:	5ccc      	ldrb	r4, [r1, r3]
10011c6c:	54c4      	strb	r4, [r0, r3]
10011c6e:	3301      	adds	r3, #1
10011c70:	e7f9      	b.n	10011c66 <memcpy+0x4>
10011c72:	bd10      	pop	{r4, pc}

10011c74 <memset>:
10011c74:	0003      	movs	r3, r0
10011c76:	1882      	adds	r2, r0, r2
10011c78:	4293      	cmp	r3, r2
10011c7a:	d002      	beq.n	10011c82 <memset+0xe>
10011c7c:	7019      	strb	r1, [r3, #0]
10011c7e:	3301      	adds	r3, #1
10011c80:	e7fa      	b.n	10011c78 <memset+0x4>
10011c82:	4770      	bx	lr

10011c84 <iprintf>:
10011c84:	b40f      	push	{r0, r1, r2, r3}
10011c86:	4b0b      	ldr	r3, [pc, #44]	; (10011cb4 <iprintf+0x30>)
10011c88:	b513      	push	{r0, r1, r4, lr}
10011c8a:	681c      	ldr	r4, [r3, #0]
10011c8c:	2c00      	cmp	r4, #0
10011c8e:	d005      	beq.n	10011c9c <iprintf+0x18>
10011c90:	69a3      	ldr	r3, [r4, #24]
10011c92:	2b00      	cmp	r3, #0
10011c94:	d102      	bne.n	10011c9c <iprintf+0x18>
10011c96:	0020      	movs	r0, r4
10011c98:	f000 fb46 	bl	10012328 <__sinit>
10011c9c:	ab05      	add	r3, sp, #20
10011c9e:	9a04      	ldr	r2, [sp, #16]
10011ca0:	68a1      	ldr	r1, [r4, #8]
10011ca2:	0020      	movs	r0, r4
10011ca4:	9301      	str	r3, [sp, #4]
10011ca6:	f000 fd05 	bl	100126b4 <_vfiprintf_r>
10011caa:	bc16      	pop	{r1, r2, r4}
10011cac:	bc08      	pop	{r3}
10011cae:	b004      	add	sp, #16
10011cb0:	4718      	bx	r3
10011cb2:	46c0      	nop			; (mov r8, r8)
10011cb4:	1001421c 	.word	0x1001421c

10011cb8 <putchar>:
10011cb8:	4b08      	ldr	r3, [pc, #32]	; (10011cdc <putchar+0x24>)
10011cba:	b570      	push	{r4, r5, r6, lr}
10011cbc:	681c      	ldr	r4, [r3, #0]
10011cbe:	0005      	movs	r5, r0
10011cc0:	2c00      	cmp	r4, #0
10011cc2:	d005      	beq.n	10011cd0 <putchar+0x18>
10011cc4:	69a3      	ldr	r3, [r4, #24]
10011cc6:	2b00      	cmp	r3, #0
10011cc8:	d102      	bne.n	10011cd0 <putchar+0x18>
10011cca:	0020      	movs	r0, r4
10011ccc:	f000 fb2c 	bl	10012328 <__sinit>
10011cd0:	0029      	movs	r1, r5
10011cd2:	68a2      	ldr	r2, [r4, #8]
10011cd4:	0020      	movs	r0, r4
10011cd6:	f000 ff99 	bl	10012c0c <_putc_r>
10011cda:	bd70      	pop	{r4, r5, r6, pc}
10011cdc:	1001421c 	.word	0x1001421c

10011ce0 <_puts_r>:
10011ce0:	b570      	push	{r4, r5, r6, lr}
10011ce2:	0005      	movs	r5, r0
10011ce4:	000e      	movs	r6, r1
10011ce6:	2800      	cmp	r0, #0
10011ce8:	d004      	beq.n	10011cf4 <_puts_r+0x14>
10011cea:	6983      	ldr	r3, [r0, #24]
10011cec:	2b00      	cmp	r3, #0
10011cee:	d101      	bne.n	10011cf4 <_puts_r+0x14>
10011cf0:	f000 fb1a 	bl	10012328 <__sinit>
10011cf4:	69ab      	ldr	r3, [r5, #24]
10011cf6:	68ac      	ldr	r4, [r5, #8]
10011cf8:	2b00      	cmp	r3, #0
10011cfa:	d102      	bne.n	10011d02 <_puts_r+0x22>
10011cfc:	0028      	movs	r0, r5
10011cfe:	f000 fb13 	bl	10012328 <__sinit>
10011d02:	4b25      	ldr	r3, [pc, #148]	; (10011d98 <_puts_r+0xb8>)
10011d04:	429c      	cmp	r4, r3
10011d06:	d101      	bne.n	10011d0c <_puts_r+0x2c>
10011d08:	686c      	ldr	r4, [r5, #4]
10011d0a:	e008      	b.n	10011d1e <_puts_r+0x3e>
10011d0c:	4b23      	ldr	r3, [pc, #140]	; (10011d9c <_puts_r+0xbc>)
10011d0e:	429c      	cmp	r4, r3
10011d10:	d101      	bne.n	10011d16 <_puts_r+0x36>
10011d12:	68ac      	ldr	r4, [r5, #8]
10011d14:	e003      	b.n	10011d1e <_puts_r+0x3e>
10011d16:	4b22      	ldr	r3, [pc, #136]	; (10011da0 <_puts_r+0xc0>)
10011d18:	429c      	cmp	r4, r3
10011d1a:	d100      	bne.n	10011d1e <_puts_r+0x3e>
10011d1c:	68ec      	ldr	r4, [r5, #12]
10011d1e:	89a3      	ldrh	r3, [r4, #12]
10011d20:	071b      	lsls	r3, r3, #28
10011d22:	d502      	bpl.n	10011d2a <_puts_r+0x4a>
10011d24:	6923      	ldr	r3, [r4, #16]
10011d26:	2b00      	cmp	r3, #0
10011d28:	d111      	bne.n	10011d4e <_puts_r+0x6e>
10011d2a:	0021      	movs	r1, r4
10011d2c:	0028      	movs	r0, r5
10011d2e:	f000 f991 	bl	10012054 <__swsetup_r>
10011d32:	2800      	cmp	r0, #0
10011d34:	d00b      	beq.n	10011d4e <_puts_r+0x6e>
10011d36:	2001      	movs	r0, #1
10011d38:	4240      	negs	r0, r0
10011d3a:	e02b      	b.n	10011d94 <_puts_r+0xb4>
10011d3c:	3b01      	subs	r3, #1
10011d3e:	3601      	adds	r6, #1
10011d40:	60a3      	str	r3, [r4, #8]
10011d42:	2b00      	cmp	r3, #0
10011d44:	db08      	blt.n	10011d58 <_puts_r+0x78>
10011d46:	6823      	ldr	r3, [r4, #0]
10011d48:	1c5a      	adds	r2, r3, #1
10011d4a:	6022      	str	r2, [r4, #0]
10011d4c:	7019      	strb	r1, [r3, #0]
10011d4e:	7831      	ldrb	r1, [r6, #0]
10011d50:	68a3      	ldr	r3, [r4, #8]
10011d52:	2900      	cmp	r1, #0
10011d54:	d1f2      	bne.n	10011d3c <_puts_r+0x5c>
10011d56:	e00b      	b.n	10011d70 <_puts_r+0x90>
10011d58:	69a2      	ldr	r2, [r4, #24]
10011d5a:	4293      	cmp	r3, r2
10011d5c:	db01      	blt.n	10011d62 <_puts_r+0x82>
10011d5e:	290a      	cmp	r1, #10
10011d60:	d1f1      	bne.n	10011d46 <_puts_r+0x66>
10011d62:	0022      	movs	r2, r4
10011d64:	0028      	movs	r0, r5
10011d66:	f000 f91d 	bl	10011fa4 <__swbuf_r>
10011d6a:	1c43      	adds	r3, r0, #1
10011d6c:	d1ef      	bne.n	10011d4e <_puts_r+0x6e>
10011d6e:	e7e2      	b.n	10011d36 <_puts_r+0x56>
10011d70:	3b01      	subs	r3, #1
10011d72:	60a3      	str	r3, [r4, #8]
10011d74:	2b00      	cmp	r3, #0
10011d76:	da08      	bge.n	10011d8a <_puts_r+0xaa>
10011d78:	0022      	movs	r2, r4
10011d7a:	310a      	adds	r1, #10
10011d7c:	0028      	movs	r0, r5
10011d7e:	f000 f911 	bl	10011fa4 <__swbuf_r>
10011d82:	1c43      	adds	r3, r0, #1
10011d84:	d0d7      	beq.n	10011d36 <_puts_r+0x56>
10011d86:	200a      	movs	r0, #10
10011d88:	e004      	b.n	10011d94 <_puts_r+0xb4>
10011d8a:	200a      	movs	r0, #10
10011d8c:	6823      	ldr	r3, [r4, #0]
10011d8e:	1c5a      	adds	r2, r3, #1
10011d90:	6022      	str	r2, [r4, #0]
10011d92:	7018      	strb	r0, [r3, #0]
10011d94:	bd70      	pop	{r4, r5, r6, pc}
10011d96:	46c0      	nop			; (mov r8, r8)
10011d98:	100140e8 	.word	0x100140e8
10011d9c:	10014108 	.word	0x10014108
10011da0:	10014128 	.word	0x10014128

10011da4 <puts>:
10011da4:	b510      	push	{r4, lr}
10011da6:	4b03      	ldr	r3, [pc, #12]	; (10011db4 <puts+0x10>)
10011da8:	0001      	movs	r1, r0
10011daa:	6818      	ldr	r0, [r3, #0]
10011dac:	f7ff ff98 	bl	10011ce0 <_puts_r>
10011db0:	bd10      	pop	{r4, pc}
10011db2:	46c0      	nop			; (mov r8, r8)
10011db4:	1001421c 	.word	0x1001421c

10011db8 <rand>:
10011db8:	4b15      	ldr	r3, [pc, #84]	; (10011e10 <rand+0x58>)
10011dba:	b510      	push	{r4, lr}
10011dbc:	681c      	ldr	r4, [r3, #0]
10011dbe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011dc0:	2b00      	cmp	r3, #0
10011dc2:	d115      	bne.n	10011df0 <rand+0x38>
10011dc4:	2018      	movs	r0, #24
10011dc6:	f000 fba7 	bl	10012518 <malloc>
10011dca:	4b12      	ldr	r3, [pc, #72]	; (10011e14 <rand+0x5c>)
10011dcc:	63a0      	str	r0, [r4, #56]	; 0x38
10011dce:	8003      	strh	r3, [r0, #0]
10011dd0:	4b11      	ldr	r3, [pc, #68]	; (10011e18 <rand+0x60>)
10011dd2:	2201      	movs	r2, #1
10011dd4:	8043      	strh	r3, [r0, #2]
10011dd6:	4b11      	ldr	r3, [pc, #68]	; (10011e1c <rand+0x64>)
10011dd8:	8083      	strh	r3, [r0, #4]
10011dda:	4b11      	ldr	r3, [pc, #68]	; (10011e20 <rand+0x68>)
10011ddc:	80c3      	strh	r3, [r0, #6]
10011dde:	4b11      	ldr	r3, [pc, #68]	; (10011e24 <rand+0x6c>)
10011de0:	8103      	strh	r3, [r0, #8]
10011de2:	2305      	movs	r3, #5
10011de4:	8143      	strh	r3, [r0, #10]
10011de6:	3306      	adds	r3, #6
10011de8:	8183      	strh	r3, [r0, #12]
10011dea:	2300      	movs	r3, #0
10011dec:	6102      	str	r2, [r0, #16]
10011dee:	6143      	str	r3, [r0, #20]
10011df0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011df2:	4a0d      	ldr	r2, [pc, #52]	; (10011e28 <rand+0x70>)
10011df4:	6920      	ldr	r0, [r4, #16]
10011df6:	6961      	ldr	r1, [r4, #20]
10011df8:	4b0c      	ldr	r3, [pc, #48]	; (10011e2c <rand+0x74>)
10011dfa:	f001 f819 	bl	10012e30 <__aeabi_lmul>
10011dfe:	2201      	movs	r2, #1
10011e00:	2300      	movs	r3, #0
10011e02:	1880      	adds	r0, r0, r2
10011e04:	4159      	adcs	r1, r3
10011e06:	6120      	str	r0, [r4, #16]
10011e08:	6161      	str	r1, [r4, #20]
10011e0a:	0048      	lsls	r0, r1, #1
10011e0c:	0840      	lsrs	r0, r0, #1
10011e0e:	bd10      	pop	{r4, pc}
10011e10:	1001421c 	.word	0x1001421c
10011e14:	0000330e 	.word	0x0000330e
10011e18:	ffffabcd 	.word	0xffffabcd
10011e1c:	00001234 	.word	0x00001234
10011e20:	ffffe66d 	.word	0xffffe66d
10011e24:	ffffdeec 	.word	0xffffdeec
10011e28:	4c957f2d 	.word	0x4c957f2d
10011e2c:	5851f42d 	.word	0x5851f42d

10011e30 <setbuf>:
10011e30:	424a      	negs	r2, r1
10011e32:	414a      	adcs	r2, r1
10011e34:	2380      	movs	r3, #128	; 0x80
10011e36:	b510      	push	{r4, lr}
10011e38:	0052      	lsls	r2, r2, #1
10011e3a:	00db      	lsls	r3, r3, #3
10011e3c:	f000 f802 	bl	10011e44 <setvbuf>
10011e40:	bd10      	pop	{r4, pc}
	...

10011e44 <setvbuf>:
10011e44:	b5f0      	push	{r4, r5, r6, r7, lr}
10011e46:	001d      	movs	r5, r3
10011e48:	4b51      	ldr	r3, [pc, #324]	; (10011f90 <setvbuf+0x14c>)
10011e4a:	b085      	sub	sp, #20
10011e4c:	681e      	ldr	r6, [r3, #0]
10011e4e:	0004      	movs	r4, r0
10011e50:	000f      	movs	r7, r1
10011e52:	9200      	str	r2, [sp, #0]
10011e54:	2e00      	cmp	r6, #0
10011e56:	d005      	beq.n	10011e64 <setvbuf+0x20>
10011e58:	69b3      	ldr	r3, [r6, #24]
10011e5a:	2b00      	cmp	r3, #0
10011e5c:	d102      	bne.n	10011e64 <setvbuf+0x20>
10011e5e:	0030      	movs	r0, r6
10011e60:	f000 fa62 	bl	10012328 <__sinit>
10011e64:	4b4b      	ldr	r3, [pc, #300]	; (10011f94 <setvbuf+0x150>)
10011e66:	429c      	cmp	r4, r3
10011e68:	d101      	bne.n	10011e6e <setvbuf+0x2a>
10011e6a:	6874      	ldr	r4, [r6, #4]
10011e6c:	e008      	b.n	10011e80 <setvbuf+0x3c>
10011e6e:	4b4a      	ldr	r3, [pc, #296]	; (10011f98 <setvbuf+0x154>)
10011e70:	429c      	cmp	r4, r3
10011e72:	d101      	bne.n	10011e78 <setvbuf+0x34>
10011e74:	68b4      	ldr	r4, [r6, #8]
10011e76:	e003      	b.n	10011e80 <setvbuf+0x3c>
10011e78:	4b48      	ldr	r3, [pc, #288]	; (10011f9c <setvbuf+0x158>)
10011e7a:	429c      	cmp	r4, r3
10011e7c:	d100      	bne.n	10011e80 <setvbuf+0x3c>
10011e7e:	68f4      	ldr	r4, [r6, #12]
10011e80:	9b00      	ldr	r3, [sp, #0]
10011e82:	2b02      	cmp	r3, #2
10011e84:	d005      	beq.n	10011e92 <setvbuf+0x4e>
10011e86:	2b01      	cmp	r3, #1
10011e88:	d900      	bls.n	10011e8c <setvbuf+0x48>
10011e8a:	e07c      	b.n	10011f86 <setvbuf+0x142>
10011e8c:	2d00      	cmp	r5, #0
10011e8e:	da00      	bge.n	10011e92 <setvbuf+0x4e>
10011e90:	e079      	b.n	10011f86 <setvbuf+0x142>
10011e92:	0021      	movs	r1, r4
10011e94:	0030      	movs	r0, r6
10011e96:	f000 f9d9 	bl	1001224c <_fflush_r>
10011e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011e9c:	2900      	cmp	r1, #0
10011e9e:	d008      	beq.n	10011eb2 <setvbuf+0x6e>
10011ea0:	0023      	movs	r3, r4
10011ea2:	3344      	adds	r3, #68	; 0x44
10011ea4:	4299      	cmp	r1, r3
10011ea6:	d002      	beq.n	10011eae <setvbuf+0x6a>
10011ea8:	0030      	movs	r0, r6
10011eaa:	f000 fb3f 	bl	1001252c <_free_r>
10011eae:	2300      	movs	r3, #0
10011eb0:	6363      	str	r3, [r4, #52]	; 0x34
10011eb2:	2300      	movs	r3, #0
10011eb4:	61a3      	str	r3, [r4, #24]
10011eb6:	6063      	str	r3, [r4, #4]
10011eb8:	89a3      	ldrh	r3, [r4, #12]
10011eba:	061b      	lsls	r3, r3, #24
10011ebc:	d503      	bpl.n	10011ec6 <setvbuf+0x82>
10011ebe:	6921      	ldr	r1, [r4, #16]
10011ec0:	0030      	movs	r0, r6
10011ec2:	f000 fb33 	bl	1001252c <_free_r>
10011ec6:	89a2      	ldrh	r2, [r4, #12]
10011ec8:	4b35      	ldr	r3, [pc, #212]	; (10011fa0 <setvbuf+0x15c>)
10011eca:	4013      	ands	r3, r2
10011ecc:	81a3      	strh	r3, [r4, #12]
10011ece:	9b00      	ldr	r3, [sp, #0]
10011ed0:	2b02      	cmp	r3, #2
10011ed2:	d021      	beq.n	10011f18 <setvbuf+0xd4>
10011ed4:	ab03      	add	r3, sp, #12
10011ed6:	aa02      	add	r2, sp, #8
10011ed8:	0021      	movs	r1, r4
10011eda:	0030      	movs	r0, r6
10011edc:	f000 fab8 	bl	10012450 <__swhatbuf_r>
10011ee0:	89a3      	ldrh	r3, [r4, #12]
10011ee2:	4318      	orrs	r0, r3
10011ee4:	81a0      	strh	r0, [r4, #12]
10011ee6:	2d00      	cmp	r5, #0
10011ee8:	d101      	bne.n	10011eee <setvbuf+0xaa>
10011eea:	9d02      	ldr	r5, [sp, #8]
10011eec:	e001      	b.n	10011ef2 <setvbuf+0xae>
10011eee:	2f00      	cmp	r7, #0
10011ef0:	d125      	bne.n	10011f3e <setvbuf+0xfa>
10011ef2:	0028      	movs	r0, r5
10011ef4:	f000 fb10 	bl	10012518 <malloc>
10011ef8:	9501      	str	r5, [sp, #4]
10011efa:	1e07      	subs	r7, r0, #0
10011efc:	d11a      	bne.n	10011f34 <setvbuf+0xf0>
10011efe:	9b02      	ldr	r3, [sp, #8]
10011f00:	9301      	str	r3, [sp, #4]
10011f02:	42ab      	cmp	r3, r5
10011f04:	d102      	bne.n	10011f0c <setvbuf+0xc8>
10011f06:	2001      	movs	r0, #1
10011f08:	4240      	negs	r0, r0
10011f0a:	e006      	b.n	10011f1a <setvbuf+0xd6>
10011f0c:	9801      	ldr	r0, [sp, #4]
10011f0e:	f000 fb03 	bl	10012518 <malloc>
10011f12:	1e07      	subs	r7, r0, #0
10011f14:	d10e      	bne.n	10011f34 <setvbuf+0xf0>
10011f16:	e7f6      	b.n	10011f06 <setvbuf+0xc2>
10011f18:	2000      	movs	r0, #0
10011f1a:	2202      	movs	r2, #2
10011f1c:	89a3      	ldrh	r3, [r4, #12]
10011f1e:	4313      	orrs	r3, r2
10011f20:	81a3      	strh	r3, [r4, #12]
10011f22:	2300      	movs	r3, #0
10011f24:	60a3      	str	r3, [r4, #8]
10011f26:	0023      	movs	r3, r4
10011f28:	3347      	adds	r3, #71	; 0x47
10011f2a:	6023      	str	r3, [r4, #0]
10011f2c:	6123      	str	r3, [r4, #16]
10011f2e:	2301      	movs	r3, #1
10011f30:	6163      	str	r3, [r4, #20]
10011f32:	e02a      	b.n	10011f8a <setvbuf+0x146>
10011f34:	2280      	movs	r2, #128	; 0x80
10011f36:	89a3      	ldrh	r3, [r4, #12]
10011f38:	9d01      	ldr	r5, [sp, #4]
10011f3a:	4313      	orrs	r3, r2
10011f3c:	81a3      	strh	r3, [r4, #12]
10011f3e:	69b3      	ldr	r3, [r6, #24]
10011f40:	2b00      	cmp	r3, #0
10011f42:	d102      	bne.n	10011f4a <setvbuf+0x106>
10011f44:	0030      	movs	r0, r6
10011f46:	f000 f9ef 	bl	10012328 <__sinit>
10011f4a:	9b00      	ldr	r3, [sp, #0]
10011f4c:	2b01      	cmp	r3, #1
10011f4e:	d103      	bne.n	10011f58 <setvbuf+0x114>
10011f50:	89a3      	ldrh	r3, [r4, #12]
10011f52:	9a00      	ldr	r2, [sp, #0]
10011f54:	431a      	orrs	r2, r3
10011f56:	81a2      	strh	r2, [r4, #12]
10011f58:	2308      	movs	r3, #8
10011f5a:	89a2      	ldrh	r2, [r4, #12]
10011f5c:	6027      	str	r7, [r4, #0]
10011f5e:	4013      	ands	r3, r2
10011f60:	6127      	str	r7, [r4, #16]
10011f62:	6165      	str	r5, [r4, #20]
10011f64:	1e18      	subs	r0, r3, #0
10011f66:	d00c      	beq.n	10011f82 <setvbuf+0x13e>
10011f68:	2301      	movs	r3, #1
10011f6a:	401a      	ands	r2, r3
10011f6c:	2300      	movs	r3, #0
10011f6e:	1e10      	subs	r0, r2, #0
10011f70:	4298      	cmp	r0, r3
10011f72:	d004      	beq.n	10011f7e <setvbuf+0x13a>
10011f74:	426d      	negs	r5, r5
10011f76:	60a3      	str	r3, [r4, #8]
10011f78:	61a5      	str	r5, [r4, #24]
10011f7a:	0018      	movs	r0, r3
10011f7c:	e005      	b.n	10011f8a <setvbuf+0x146>
10011f7e:	60a5      	str	r5, [r4, #8]
10011f80:	e003      	b.n	10011f8a <setvbuf+0x146>
10011f82:	60a3      	str	r3, [r4, #8]
10011f84:	e001      	b.n	10011f8a <setvbuf+0x146>
10011f86:	2001      	movs	r0, #1
10011f88:	4240      	negs	r0, r0
10011f8a:	b005      	add	sp, #20
10011f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f8e:	46c0      	nop			; (mov r8, r8)
10011f90:	1001421c 	.word	0x1001421c
10011f94:	100140e8 	.word	0x100140e8
10011f98:	10014108 	.word	0x10014108
10011f9c:	10014128 	.word	0x10014128
10011fa0:	fffff35c 	.word	0xfffff35c

10011fa4 <__swbuf_r>:
10011fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011fa6:	0005      	movs	r5, r0
10011fa8:	000f      	movs	r7, r1
10011faa:	0014      	movs	r4, r2
10011fac:	2800      	cmp	r0, #0
10011fae:	d004      	beq.n	10011fba <__swbuf_r+0x16>
10011fb0:	6983      	ldr	r3, [r0, #24]
10011fb2:	2b00      	cmp	r3, #0
10011fb4:	d101      	bne.n	10011fba <__swbuf_r+0x16>
10011fb6:	f000 f9b7 	bl	10012328 <__sinit>
10011fba:	4b23      	ldr	r3, [pc, #140]	; (10012048 <__swbuf_r+0xa4>)
10011fbc:	429c      	cmp	r4, r3
10011fbe:	d101      	bne.n	10011fc4 <__swbuf_r+0x20>
10011fc0:	686c      	ldr	r4, [r5, #4]
10011fc2:	e008      	b.n	10011fd6 <__swbuf_r+0x32>
10011fc4:	4b21      	ldr	r3, [pc, #132]	; (1001204c <__swbuf_r+0xa8>)
10011fc6:	429c      	cmp	r4, r3
10011fc8:	d101      	bne.n	10011fce <__swbuf_r+0x2a>
10011fca:	68ac      	ldr	r4, [r5, #8]
10011fcc:	e003      	b.n	10011fd6 <__swbuf_r+0x32>
10011fce:	4b20      	ldr	r3, [pc, #128]	; (10012050 <__swbuf_r+0xac>)
10011fd0:	429c      	cmp	r4, r3
10011fd2:	d100      	bne.n	10011fd6 <__swbuf_r+0x32>
10011fd4:	68ec      	ldr	r4, [r5, #12]
10011fd6:	69a3      	ldr	r3, [r4, #24]
10011fd8:	60a3      	str	r3, [r4, #8]
10011fda:	89a3      	ldrh	r3, [r4, #12]
10011fdc:	071b      	lsls	r3, r3, #28
10011fde:	d50a      	bpl.n	10011ff6 <__swbuf_r+0x52>
10011fe0:	6923      	ldr	r3, [r4, #16]
10011fe2:	2b00      	cmp	r3, #0
10011fe4:	d007      	beq.n	10011ff6 <__swbuf_r+0x52>
10011fe6:	6823      	ldr	r3, [r4, #0]
10011fe8:	6922      	ldr	r2, [r4, #16]
10011fea:	b2fe      	uxtb	r6, r7
10011fec:	1a98      	subs	r0, r3, r2
10011fee:	6963      	ldr	r3, [r4, #20]
10011ff0:	4298      	cmp	r0, r3
10011ff2:	db0f      	blt.n	10012014 <__swbuf_r+0x70>
10011ff4:	e008      	b.n	10012008 <__swbuf_r+0x64>
10011ff6:	0021      	movs	r1, r4
10011ff8:	0028      	movs	r0, r5
10011ffa:	f000 f82b 	bl	10012054 <__swsetup_r>
10011ffe:	2800      	cmp	r0, #0
10012000:	d0f1      	beq.n	10011fe6 <__swbuf_r+0x42>
10012002:	2001      	movs	r0, #1
10012004:	4240      	negs	r0, r0
10012006:	e01d      	b.n	10012044 <__swbuf_r+0xa0>
10012008:	0021      	movs	r1, r4
1001200a:	0028      	movs	r0, r5
1001200c:	f000 f91e 	bl	1001224c <_fflush_r>
10012010:	2800      	cmp	r0, #0
10012012:	d1f6      	bne.n	10012002 <__swbuf_r+0x5e>
10012014:	68a3      	ldr	r3, [r4, #8]
10012016:	3001      	adds	r0, #1
10012018:	3b01      	subs	r3, #1
1001201a:	60a3      	str	r3, [r4, #8]
1001201c:	6823      	ldr	r3, [r4, #0]
1001201e:	1c5a      	adds	r2, r3, #1
10012020:	6022      	str	r2, [r4, #0]
10012022:	701f      	strb	r7, [r3, #0]
10012024:	6963      	ldr	r3, [r4, #20]
10012026:	4298      	cmp	r0, r3
10012028:	d005      	beq.n	10012036 <__swbuf_r+0x92>
1001202a:	89a3      	ldrh	r3, [r4, #12]
1001202c:	0030      	movs	r0, r6
1001202e:	07db      	lsls	r3, r3, #31
10012030:	d508      	bpl.n	10012044 <__swbuf_r+0xa0>
10012032:	2e0a      	cmp	r6, #10
10012034:	d106      	bne.n	10012044 <__swbuf_r+0xa0>
10012036:	0021      	movs	r1, r4
10012038:	0028      	movs	r0, r5
1001203a:	f000 f907 	bl	1001224c <_fflush_r>
1001203e:	2800      	cmp	r0, #0
10012040:	d1df      	bne.n	10012002 <__swbuf_r+0x5e>
10012042:	0030      	movs	r0, r6
10012044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012046:	46c0      	nop			; (mov r8, r8)
10012048:	100140e8 	.word	0x100140e8
1001204c:	10014108 	.word	0x10014108
10012050:	10014128 	.word	0x10014128

10012054 <__swsetup_r>:
10012054:	4b36      	ldr	r3, [pc, #216]	; (10012130 <__swsetup_r+0xdc>)
10012056:	b570      	push	{r4, r5, r6, lr}
10012058:	681d      	ldr	r5, [r3, #0]
1001205a:	0006      	movs	r6, r0
1001205c:	000c      	movs	r4, r1
1001205e:	2d00      	cmp	r5, #0
10012060:	d005      	beq.n	1001206e <__swsetup_r+0x1a>
10012062:	69ab      	ldr	r3, [r5, #24]
10012064:	2b00      	cmp	r3, #0
10012066:	d102      	bne.n	1001206e <__swsetup_r+0x1a>
10012068:	0028      	movs	r0, r5
1001206a:	f000 f95d 	bl	10012328 <__sinit>
1001206e:	4b31      	ldr	r3, [pc, #196]	; (10012134 <__swsetup_r+0xe0>)
10012070:	429c      	cmp	r4, r3
10012072:	d101      	bne.n	10012078 <__swsetup_r+0x24>
10012074:	686c      	ldr	r4, [r5, #4]
10012076:	e008      	b.n	1001208a <__swsetup_r+0x36>
10012078:	4b2f      	ldr	r3, [pc, #188]	; (10012138 <__swsetup_r+0xe4>)
1001207a:	429c      	cmp	r4, r3
1001207c:	d101      	bne.n	10012082 <__swsetup_r+0x2e>
1001207e:	68ac      	ldr	r4, [r5, #8]
10012080:	e003      	b.n	1001208a <__swsetup_r+0x36>
10012082:	4b2e      	ldr	r3, [pc, #184]	; (1001213c <__swsetup_r+0xe8>)
10012084:	429c      	cmp	r4, r3
10012086:	d100      	bne.n	1001208a <__swsetup_r+0x36>
10012088:	68ec      	ldr	r4, [r5, #12]
1001208a:	220c      	movs	r2, #12
1001208c:	5ea3      	ldrsh	r3, [r4, r2]
1001208e:	b29a      	uxth	r2, r3
10012090:	0711      	lsls	r1, r2, #28
10012092:	d423      	bmi.n	100120dc <__swsetup_r+0x88>
10012094:	06d1      	lsls	r1, r2, #27
10012096:	d407      	bmi.n	100120a8 <__swsetup_r+0x54>
10012098:	2209      	movs	r2, #9
1001209a:	2001      	movs	r0, #1
1001209c:	6032      	str	r2, [r6, #0]
1001209e:	3237      	adds	r2, #55	; 0x37
100120a0:	4313      	orrs	r3, r2
100120a2:	81a3      	strh	r3, [r4, #12]
100120a4:	4240      	negs	r0, r0
100120a6:	e042      	b.n	1001212e <__swsetup_r+0xda>
100120a8:	0753      	lsls	r3, r2, #29
100120aa:	d513      	bpl.n	100120d4 <__swsetup_r+0x80>
100120ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
100120ae:	2900      	cmp	r1, #0
100120b0:	d008      	beq.n	100120c4 <__swsetup_r+0x70>
100120b2:	0023      	movs	r3, r4
100120b4:	3344      	adds	r3, #68	; 0x44
100120b6:	4299      	cmp	r1, r3
100120b8:	d002      	beq.n	100120c0 <__swsetup_r+0x6c>
100120ba:	0030      	movs	r0, r6
100120bc:	f000 fa36 	bl	1001252c <_free_r>
100120c0:	2300      	movs	r3, #0
100120c2:	6363      	str	r3, [r4, #52]	; 0x34
100120c4:	2224      	movs	r2, #36	; 0x24
100120c6:	89a3      	ldrh	r3, [r4, #12]
100120c8:	4393      	bics	r3, r2
100120ca:	81a3      	strh	r3, [r4, #12]
100120cc:	2300      	movs	r3, #0
100120ce:	6063      	str	r3, [r4, #4]
100120d0:	6923      	ldr	r3, [r4, #16]
100120d2:	6023      	str	r3, [r4, #0]
100120d4:	2208      	movs	r2, #8
100120d6:	89a3      	ldrh	r3, [r4, #12]
100120d8:	4313      	orrs	r3, r2
100120da:	81a3      	strh	r3, [r4, #12]
100120dc:	6923      	ldr	r3, [r4, #16]
100120de:	2b00      	cmp	r3, #0
100120e0:	d10b      	bne.n	100120fa <__swsetup_r+0xa6>
100120e2:	23a0      	movs	r3, #160	; 0xa0
100120e4:	89a2      	ldrh	r2, [r4, #12]
100120e6:	009b      	lsls	r3, r3, #2
100120e8:	4013      	ands	r3, r2
100120ea:	2280      	movs	r2, #128	; 0x80
100120ec:	0092      	lsls	r2, r2, #2
100120ee:	4293      	cmp	r3, r2
100120f0:	d003      	beq.n	100120fa <__swsetup_r+0xa6>
100120f2:	0021      	movs	r1, r4
100120f4:	0030      	movs	r0, r6
100120f6:	f000 f9d1 	bl	1001249c <__smakebuf_r>
100120fa:	2301      	movs	r3, #1
100120fc:	89a2      	ldrh	r2, [r4, #12]
100120fe:	4013      	ands	r3, r2
10012100:	d005      	beq.n	1001210e <__swsetup_r+0xba>
10012102:	2300      	movs	r3, #0
10012104:	60a3      	str	r3, [r4, #8]
10012106:	6963      	ldr	r3, [r4, #20]
10012108:	425b      	negs	r3, r3
1001210a:	61a3      	str	r3, [r4, #24]
1001210c:	e003      	b.n	10012116 <__swsetup_r+0xc2>
1001210e:	0792      	lsls	r2, r2, #30
10012110:	d400      	bmi.n	10012114 <__swsetup_r+0xc0>
10012112:	6963      	ldr	r3, [r4, #20]
10012114:	60a3      	str	r3, [r4, #8]
10012116:	2000      	movs	r0, #0
10012118:	6923      	ldr	r3, [r4, #16]
1001211a:	4283      	cmp	r3, r0
1001211c:	d107      	bne.n	1001212e <__swsetup_r+0xda>
1001211e:	220c      	movs	r2, #12
10012120:	5ea3      	ldrsh	r3, [r4, r2]
10012122:	061a      	lsls	r2, r3, #24
10012124:	d503      	bpl.n	1001212e <__swsetup_r+0xda>
10012126:	2240      	movs	r2, #64	; 0x40
10012128:	4313      	orrs	r3, r2
1001212a:	81a3      	strh	r3, [r4, #12]
1001212c:	3801      	subs	r0, #1
1001212e:	bd70      	pop	{r4, r5, r6, pc}
10012130:	1001421c 	.word	0x1001421c
10012134:	100140e8 	.word	0x100140e8
10012138:	10014108 	.word	0x10014108
1001213c:	10014128 	.word	0x10014128

10012140 <__sflush_r>:
10012140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012142:	898a      	ldrh	r2, [r1, #12]
10012144:	0005      	movs	r5, r0
10012146:	000c      	movs	r4, r1
10012148:	0713      	lsls	r3, r2, #28
1001214a:	d45a      	bmi.n	10012202 <__sflush_r+0xc2>
1001214c:	684b      	ldr	r3, [r1, #4]
1001214e:	2b00      	cmp	r3, #0
10012150:	dc02      	bgt.n	10012158 <__sflush_r+0x18>
10012152:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10012154:	2b00      	cmp	r3, #0
10012156:	dd19      	ble.n	1001218c <__sflush_r+0x4c>
10012158:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001215a:	2f00      	cmp	r7, #0
1001215c:	d016      	beq.n	1001218c <__sflush_r+0x4c>
1001215e:	2300      	movs	r3, #0
10012160:	682e      	ldr	r6, [r5, #0]
10012162:	602b      	str	r3, [r5, #0]
10012164:	2380      	movs	r3, #128	; 0x80
10012166:	015b      	lsls	r3, r3, #5
10012168:	401a      	ands	r2, r3
1001216a:	d001      	beq.n	10012170 <__sflush_r+0x30>
1001216c:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001216e:	e014      	b.n	1001219a <__sflush_r+0x5a>
10012170:	2301      	movs	r3, #1
10012172:	6a21      	ldr	r1, [r4, #32]
10012174:	0028      	movs	r0, r5
10012176:	47b8      	blx	r7
10012178:	1c43      	adds	r3, r0, #1
1001217a:	d10e      	bne.n	1001219a <__sflush_r+0x5a>
1001217c:	682b      	ldr	r3, [r5, #0]
1001217e:	2b00      	cmp	r3, #0
10012180:	d00b      	beq.n	1001219a <__sflush_r+0x5a>
10012182:	2b1d      	cmp	r3, #29
10012184:	d001      	beq.n	1001218a <__sflush_r+0x4a>
10012186:	2b16      	cmp	r3, #22
10012188:	d102      	bne.n	10012190 <__sflush_r+0x50>
1001218a:	602e      	str	r6, [r5, #0]
1001218c:	2000      	movs	r0, #0
1001218e:	e05a      	b.n	10012246 <__sflush_r+0x106>
10012190:	2240      	movs	r2, #64	; 0x40
10012192:	89a3      	ldrh	r3, [r4, #12]
10012194:	4313      	orrs	r3, r2
10012196:	81a3      	strh	r3, [r4, #12]
10012198:	e055      	b.n	10012246 <__sflush_r+0x106>
1001219a:	89a3      	ldrh	r3, [r4, #12]
1001219c:	075b      	lsls	r3, r3, #29
1001219e:	d506      	bpl.n	100121ae <__sflush_r+0x6e>
100121a0:	6863      	ldr	r3, [r4, #4]
100121a2:	1ac0      	subs	r0, r0, r3
100121a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
100121a6:	2b00      	cmp	r3, #0
100121a8:	d001      	beq.n	100121ae <__sflush_r+0x6e>
100121aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
100121ac:	1ac0      	subs	r0, r0, r3
100121ae:	2300      	movs	r3, #0
100121b0:	0002      	movs	r2, r0
100121b2:	6a21      	ldr	r1, [r4, #32]
100121b4:	0028      	movs	r0, r5
100121b6:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100121b8:	47b8      	blx	r7
100121ba:	89a3      	ldrh	r3, [r4, #12]
100121bc:	1c42      	adds	r2, r0, #1
100121be:	d106      	bne.n	100121ce <__sflush_r+0x8e>
100121c0:	6829      	ldr	r1, [r5, #0]
100121c2:	291d      	cmp	r1, #29
100121c4:	d83a      	bhi.n	1001223c <__sflush_r+0xfc>
100121c6:	4a20      	ldr	r2, [pc, #128]	; (10012248 <__sflush_r+0x108>)
100121c8:	40ca      	lsrs	r2, r1
100121ca:	07d2      	lsls	r2, r2, #31
100121cc:	d536      	bpl.n	1001223c <__sflush_r+0xfc>
100121ce:	2200      	movs	r2, #0
100121d0:	6062      	str	r2, [r4, #4]
100121d2:	6922      	ldr	r2, [r4, #16]
100121d4:	6022      	str	r2, [r4, #0]
100121d6:	04db      	lsls	r3, r3, #19
100121d8:	d505      	bpl.n	100121e6 <__sflush_r+0xa6>
100121da:	1c43      	adds	r3, r0, #1
100121dc:	d102      	bne.n	100121e4 <__sflush_r+0xa4>
100121de:	682b      	ldr	r3, [r5, #0]
100121e0:	2b00      	cmp	r3, #0
100121e2:	d100      	bne.n	100121e6 <__sflush_r+0xa6>
100121e4:	6560      	str	r0, [r4, #84]	; 0x54
100121e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
100121e8:	602e      	str	r6, [r5, #0]
100121ea:	2900      	cmp	r1, #0
100121ec:	d0ce      	beq.n	1001218c <__sflush_r+0x4c>
100121ee:	0023      	movs	r3, r4
100121f0:	3344      	adds	r3, #68	; 0x44
100121f2:	4299      	cmp	r1, r3
100121f4:	d002      	beq.n	100121fc <__sflush_r+0xbc>
100121f6:	0028      	movs	r0, r5
100121f8:	f000 f998 	bl	1001252c <_free_r>
100121fc:	2000      	movs	r0, #0
100121fe:	6360      	str	r0, [r4, #52]	; 0x34
10012200:	e021      	b.n	10012246 <__sflush_r+0x106>
10012202:	690f      	ldr	r7, [r1, #16]
10012204:	2f00      	cmp	r7, #0
10012206:	d0c1      	beq.n	1001218c <__sflush_r+0x4c>
10012208:	680b      	ldr	r3, [r1, #0]
1001220a:	600f      	str	r7, [r1, #0]
1001220c:	1bdb      	subs	r3, r3, r7
1001220e:	9301      	str	r3, [sp, #4]
10012210:	2300      	movs	r3, #0
10012212:	0792      	lsls	r2, r2, #30
10012214:	d100      	bne.n	10012218 <__sflush_r+0xd8>
10012216:	694b      	ldr	r3, [r1, #20]
10012218:	60a3      	str	r3, [r4, #8]
1001221a:	e003      	b.n	10012224 <__sflush_r+0xe4>
1001221c:	9b01      	ldr	r3, [sp, #4]
1001221e:	183f      	adds	r7, r7, r0
10012220:	1a1b      	subs	r3, r3, r0
10012222:	9301      	str	r3, [sp, #4]
10012224:	9b01      	ldr	r3, [sp, #4]
10012226:	2b00      	cmp	r3, #0
10012228:	ddb0      	ble.n	1001218c <__sflush_r+0x4c>
1001222a:	9b01      	ldr	r3, [sp, #4]
1001222c:	003a      	movs	r2, r7
1001222e:	6a21      	ldr	r1, [r4, #32]
10012230:	0028      	movs	r0, r5
10012232:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10012234:	47b0      	blx	r6
10012236:	2800      	cmp	r0, #0
10012238:	dcf0      	bgt.n	1001221c <__sflush_r+0xdc>
1001223a:	89a3      	ldrh	r3, [r4, #12]
1001223c:	2240      	movs	r2, #64	; 0x40
1001223e:	2001      	movs	r0, #1
10012240:	4313      	orrs	r3, r2
10012242:	81a3      	strh	r3, [r4, #12]
10012244:	4240      	negs	r0, r0
10012246:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10012248:	20400001 	.word	0x20400001

1001224c <_fflush_r>:
1001224c:	690b      	ldr	r3, [r1, #16]
1001224e:	b570      	push	{r4, r5, r6, lr}
10012250:	0005      	movs	r5, r0
10012252:	000c      	movs	r4, r1
10012254:	2b00      	cmp	r3, #0
10012256:	d101      	bne.n	1001225c <_fflush_r+0x10>
10012258:	2000      	movs	r0, #0
1001225a:	e01c      	b.n	10012296 <_fflush_r+0x4a>
1001225c:	2800      	cmp	r0, #0
1001225e:	d004      	beq.n	1001226a <_fflush_r+0x1e>
10012260:	6983      	ldr	r3, [r0, #24]
10012262:	2b00      	cmp	r3, #0
10012264:	d101      	bne.n	1001226a <_fflush_r+0x1e>
10012266:	f000 f85f 	bl	10012328 <__sinit>
1001226a:	4b0b      	ldr	r3, [pc, #44]	; (10012298 <_fflush_r+0x4c>)
1001226c:	429c      	cmp	r4, r3
1001226e:	d101      	bne.n	10012274 <_fflush_r+0x28>
10012270:	686c      	ldr	r4, [r5, #4]
10012272:	e008      	b.n	10012286 <_fflush_r+0x3a>
10012274:	4b09      	ldr	r3, [pc, #36]	; (1001229c <_fflush_r+0x50>)
10012276:	429c      	cmp	r4, r3
10012278:	d101      	bne.n	1001227e <_fflush_r+0x32>
1001227a:	68ac      	ldr	r4, [r5, #8]
1001227c:	e003      	b.n	10012286 <_fflush_r+0x3a>
1001227e:	4b08      	ldr	r3, [pc, #32]	; (100122a0 <_fflush_r+0x54>)
10012280:	429c      	cmp	r4, r3
10012282:	d100      	bne.n	10012286 <_fflush_r+0x3a>
10012284:	68ec      	ldr	r4, [r5, #12]
10012286:	220c      	movs	r2, #12
10012288:	5ea3      	ldrsh	r3, [r4, r2]
1001228a:	2b00      	cmp	r3, #0
1001228c:	d0e4      	beq.n	10012258 <_fflush_r+0xc>
1001228e:	0021      	movs	r1, r4
10012290:	0028      	movs	r0, r5
10012292:	f7ff ff55 	bl	10012140 <__sflush_r>
10012296:	bd70      	pop	{r4, r5, r6, pc}
10012298:	100140e8 	.word	0x100140e8
1001229c:	10014108 	.word	0x10014108
100122a0:	10014128 	.word	0x10014128

100122a4 <_cleanup_r>:
100122a4:	b510      	push	{r4, lr}
100122a6:	4902      	ldr	r1, [pc, #8]	; (100122b0 <_cleanup_r+0xc>)
100122a8:	f000 f8b0 	bl	1001240c <_fwalk_reent>
100122ac:	bd10      	pop	{r4, pc}
100122ae:	46c0      	nop			; (mov r8, r8)
100122b0:	1001224d 	.word	0x1001224d

100122b4 <std.isra.0>:
100122b4:	2300      	movs	r3, #0
100122b6:	b510      	push	{r4, lr}
100122b8:	0004      	movs	r4, r0
100122ba:	6003      	str	r3, [r0, #0]
100122bc:	6043      	str	r3, [r0, #4]
100122be:	6083      	str	r3, [r0, #8]
100122c0:	8181      	strh	r1, [r0, #12]
100122c2:	6643      	str	r3, [r0, #100]	; 0x64
100122c4:	81c2      	strh	r2, [r0, #14]
100122c6:	6103      	str	r3, [r0, #16]
100122c8:	6143      	str	r3, [r0, #20]
100122ca:	6183      	str	r3, [r0, #24]
100122cc:	0019      	movs	r1, r3
100122ce:	2208      	movs	r2, #8
100122d0:	305c      	adds	r0, #92	; 0x5c
100122d2:	f7ff fccf 	bl	10011c74 <memset>
100122d6:	4b05      	ldr	r3, [pc, #20]	; (100122ec <std.isra.0+0x38>)
100122d8:	6224      	str	r4, [r4, #32]
100122da:	6263      	str	r3, [r4, #36]	; 0x24
100122dc:	4b04      	ldr	r3, [pc, #16]	; (100122f0 <std.isra.0+0x3c>)
100122de:	62a3      	str	r3, [r4, #40]	; 0x28
100122e0:	4b04      	ldr	r3, [pc, #16]	; (100122f4 <std.isra.0+0x40>)
100122e2:	62e3      	str	r3, [r4, #44]	; 0x2c
100122e4:	4b04      	ldr	r3, [pc, #16]	; (100122f8 <std.isra.0+0x44>)
100122e6:	6323      	str	r3, [r4, #48]	; 0x30
100122e8:	bd10      	pop	{r4, pc}
100122ea:	46c0      	nop			; (mov r8, r8)
100122ec:	10012c9d 	.word	0x10012c9d
100122f0:	10012cc5 	.word	0x10012cc5
100122f4:	10012cfd 	.word	0x10012cfd
100122f8:	10012d29 	.word	0x10012d29

100122fc <__sfmoreglue>:
100122fc:	b570      	push	{r4, r5, r6, lr}
100122fe:	2568      	movs	r5, #104	; 0x68
10012300:	1e4b      	subs	r3, r1, #1
10012302:	435d      	muls	r5, r3
10012304:	000e      	movs	r6, r1
10012306:	0029      	movs	r1, r5
10012308:	3174      	adds	r1, #116	; 0x74
1001230a:	f000 f955 	bl	100125b8 <_malloc_r>
1001230e:	1e04      	subs	r4, r0, #0
10012310:	d008      	beq.n	10012324 <__sfmoreglue+0x28>
10012312:	2100      	movs	r1, #0
10012314:	002a      	movs	r2, r5
10012316:	6001      	str	r1, [r0, #0]
10012318:	6046      	str	r6, [r0, #4]
1001231a:	300c      	adds	r0, #12
1001231c:	60a0      	str	r0, [r4, #8]
1001231e:	3268      	adds	r2, #104	; 0x68
10012320:	f7ff fca8 	bl	10011c74 <memset>
10012324:	0020      	movs	r0, r4
10012326:	bd70      	pop	{r4, r5, r6, pc}

10012328 <__sinit>:
10012328:	6983      	ldr	r3, [r0, #24]
1001232a:	b513      	push	{r0, r1, r4, lr}
1001232c:	0004      	movs	r4, r0
1001232e:	2b00      	cmp	r3, #0
10012330:	d128      	bne.n	10012384 <__sinit+0x5c>
10012332:	6483      	str	r3, [r0, #72]	; 0x48
10012334:	64c3      	str	r3, [r0, #76]	; 0x4c
10012336:	6503      	str	r3, [r0, #80]	; 0x50
10012338:	4b13      	ldr	r3, [pc, #76]	; (10012388 <__sinit+0x60>)
1001233a:	4a14      	ldr	r2, [pc, #80]	; (1001238c <__sinit+0x64>)
1001233c:	681b      	ldr	r3, [r3, #0]
1001233e:	6282      	str	r2, [r0, #40]	; 0x28
10012340:	9301      	str	r3, [sp, #4]
10012342:	4298      	cmp	r0, r3
10012344:	d101      	bne.n	1001234a <__sinit+0x22>
10012346:	2301      	movs	r3, #1
10012348:	6183      	str	r3, [r0, #24]
1001234a:	0020      	movs	r0, r4
1001234c:	f000 f820 	bl	10012390 <__sfp>
10012350:	6060      	str	r0, [r4, #4]
10012352:	0020      	movs	r0, r4
10012354:	f000 f81c 	bl	10012390 <__sfp>
10012358:	60a0      	str	r0, [r4, #8]
1001235a:	0020      	movs	r0, r4
1001235c:	f000 f818 	bl	10012390 <__sfp>
10012360:	2200      	movs	r2, #0
10012362:	60e0      	str	r0, [r4, #12]
10012364:	2104      	movs	r1, #4
10012366:	6860      	ldr	r0, [r4, #4]
10012368:	f7ff ffa4 	bl	100122b4 <std.isra.0>
1001236c:	2201      	movs	r2, #1
1001236e:	2109      	movs	r1, #9
10012370:	68a0      	ldr	r0, [r4, #8]
10012372:	f7ff ff9f 	bl	100122b4 <std.isra.0>
10012376:	2202      	movs	r2, #2
10012378:	2112      	movs	r1, #18
1001237a:	68e0      	ldr	r0, [r4, #12]
1001237c:	f7ff ff9a 	bl	100122b4 <std.isra.0>
10012380:	2301      	movs	r3, #1
10012382:	61a3      	str	r3, [r4, #24]
10012384:	bd13      	pop	{r0, r1, r4, pc}
10012386:	46c0      	nop			; (mov r8, r8)
10012388:	100140e4 	.word	0x100140e4
1001238c:	100122a5 	.word	0x100122a5

10012390 <__sfp>:
10012390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012392:	4b1d      	ldr	r3, [pc, #116]	; (10012408 <__sfp+0x78>)
10012394:	0006      	movs	r6, r0
10012396:	681d      	ldr	r5, [r3, #0]
10012398:	69ab      	ldr	r3, [r5, #24]
1001239a:	2b00      	cmp	r3, #0
1001239c:	d102      	bne.n	100123a4 <__sfp+0x14>
1001239e:	0028      	movs	r0, r5
100123a0:	f7ff ffc2 	bl	10012328 <__sinit>
100123a4:	3548      	adds	r5, #72	; 0x48
100123a6:	68ac      	ldr	r4, [r5, #8]
100123a8:	686b      	ldr	r3, [r5, #4]
100123aa:	3b01      	subs	r3, #1
100123ac:	d405      	bmi.n	100123ba <__sfp+0x2a>
100123ae:	220c      	movs	r2, #12
100123b0:	5ea7      	ldrsh	r7, [r4, r2]
100123b2:	2f00      	cmp	r7, #0
100123b4:	d010      	beq.n	100123d8 <__sfp+0x48>
100123b6:	3468      	adds	r4, #104	; 0x68
100123b8:	e7f7      	b.n	100123aa <__sfp+0x1a>
100123ba:	682b      	ldr	r3, [r5, #0]
100123bc:	2b00      	cmp	r3, #0
100123be:	d001      	beq.n	100123c4 <__sfp+0x34>
100123c0:	682d      	ldr	r5, [r5, #0]
100123c2:	e7f0      	b.n	100123a6 <__sfp+0x16>
100123c4:	2104      	movs	r1, #4
100123c6:	0030      	movs	r0, r6
100123c8:	f7ff ff98 	bl	100122fc <__sfmoreglue>
100123cc:	6028      	str	r0, [r5, #0]
100123ce:	2800      	cmp	r0, #0
100123d0:	d1f6      	bne.n	100123c0 <__sfp+0x30>
100123d2:	230c      	movs	r3, #12
100123d4:	6033      	str	r3, [r6, #0]
100123d6:	e016      	b.n	10012406 <__sfp+0x76>
100123d8:	2301      	movs	r3, #1
100123da:	0020      	movs	r0, r4
100123dc:	425b      	negs	r3, r3
100123de:	81e3      	strh	r3, [r4, #14]
100123e0:	3302      	adds	r3, #2
100123e2:	81a3      	strh	r3, [r4, #12]
100123e4:	6667      	str	r7, [r4, #100]	; 0x64
100123e6:	6027      	str	r7, [r4, #0]
100123e8:	60a7      	str	r7, [r4, #8]
100123ea:	6067      	str	r7, [r4, #4]
100123ec:	6127      	str	r7, [r4, #16]
100123ee:	6167      	str	r7, [r4, #20]
100123f0:	61a7      	str	r7, [r4, #24]
100123f2:	305c      	adds	r0, #92	; 0x5c
100123f4:	2208      	movs	r2, #8
100123f6:	0039      	movs	r1, r7
100123f8:	f7ff fc3c 	bl	10011c74 <memset>
100123fc:	0020      	movs	r0, r4
100123fe:	6367      	str	r7, [r4, #52]	; 0x34
10012400:	63a7      	str	r7, [r4, #56]	; 0x38
10012402:	64a7      	str	r7, [r4, #72]	; 0x48
10012404:	64e7      	str	r7, [r4, #76]	; 0x4c
10012406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012408:	100140e4 	.word	0x100140e4

1001240c <_fwalk_reent>:
1001240c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001240e:	0004      	movs	r4, r0
10012410:	0007      	movs	r7, r0
10012412:	2600      	movs	r6, #0
10012414:	9101      	str	r1, [sp, #4]
10012416:	3448      	adds	r4, #72	; 0x48
10012418:	2c00      	cmp	r4, #0
1001241a:	d016      	beq.n	1001244a <_fwalk_reent+0x3e>
1001241c:	6863      	ldr	r3, [r4, #4]
1001241e:	68a5      	ldr	r5, [r4, #8]
10012420:	9300      	str	r3, [sp, #0]
10012422:	9b00      	ldr	r3, [sp, #0]
10012424:	3b01      	subs	r3, #1
10012426:	9300      	str	r3, [sp, #0]
10012428:	d40d      	bmi.n	10012446 <_fwalk_reent+0x3a>
1001242a:	89ab      	ldrh	r3, [r5, #12]
1001242c:	2b01      	cmp	r3, #1
1001242e:	d908      	bls.n	10012442 <_fwalk_reent+0x36>
10012430:	220e      	movs	r2, #14
10012432:	5eab      	ldrsh	r3, [r5, r2]
10012434:	3301      	adds	r3, #1
10012436:	d004      	beq.n	10012442 <_fwalk_reent+0x36>
10012438:	0029      	movs	r1, r5
1001243a:	0038      	movs	r0, r7
1001243c:	9b01      	ldr	r3, [sp, #4]
1001243e:	4798      	blx	r3
10012440:	4306      	orrs	r6, r0
10012442:	3568      	adds	r5, #104	; 0x68
10012444:	e7ed      	b.n	10012422 <_fwalk_reent+0x16>
10012446:	6824      	ldr	r4, [r4, #0]
10012448:	e7e6      	b.n	10012418 <_fwalk_reent+0xc>
1001244a:	0030      	movs	r0, r6
1001244c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10012450 <__swhatbuf_r>:
10012450:	b570      	push	{r4, r5, r6, lr}
10012452:	000e      	movs	r6, r1
10012454:	001d      	movs	r5, r3
10012456:	230e      	movs	r3, #14
10012458:	5ec9      	ldrsh	r1, [r1, r3]
1001245a:	b090      	sub	sp, #64	; 0x40
1001245c:	0014      	movs	r4, r2
1001245e:	2900      	cmp	r1, #0
10012460:	da06      	bge.n	10012470 <__swhatbuf_r+0x20>
10012462:	2300      	movs	r3, #0
10012464:	602b      	str	r3, [r5, #0]
10012466:	89b3      	ldrh	r3, [r6, #12]
10012468:	061b      	lsls	r3, r3, #24
1001246a:	d50f      	bpl.n	1001248c <__swhatbuf_r+0x3c>
1001246c:	2340      	movs	r3, #64	; 0x40
1001246e:	e00f      	b.n	10012490 <__swhatbuf_r+0x40>
10012470:	aa01      	add	r2, sp, #4
10012472:	f000 fc85 	bl	10012d80 <_fstat_r>
10012476:	2800      	cmp	r0, #0
10012478:	dbf3      	blt.n	10012462 <__swhatbuf_r+0x12>
1001247a:	23f0      	movs	r3, #240	; 0xf0
1001247c:	9a02      	ldr	r2, [sp, #8]
1001247e:	021b      	lsls	r3, r3, #8
10012480:	4013      	ands	r3, r2
10012482:	4a05      	ldr	r2, [pc, #20]	; (10012498 <__swhatbuf_r+0x48>)
10012484:	189b      	adds	r3, r3, r2
10012486:	425a      	negs	r2, r3
10012488:	4153      	adcs	r3, r2
1001248a:	602b      	str	r3, [r5, #0]
1001248c:	2380      	movs	r3, #128	; 0x80
1001248e:	00db      	lsls	r3, r3, #3
10012490:	2000      	movs	r0, #0
10012492:	6023      	str	r3, [r4, #0]
10012494:	b010      	add	sp, #64	; 0x40
10012496:	bd70      	pop	{r4, r5, r6, pc}
10012498:	ffffe000 	.word	0xffffe000

1001249c <__smakebuf_r>:
1001249c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001249e:	2602      	movs	r6, #2
100124a0:	898b      	ldrh	r3, [r1, #12]
100124a2:	0005      	movs	r5, r0
100124a4:	000c      	movs	r4, r1
100124a6:	4233      	tst	r3, r6
100124a8:	d110      	bne.n	100124cc <__smakebuf_r+0x30>
100124aa:	ab01      	add	r3, sp, #4
100124ac:	466a      	mov	r2, sp
100124ae:	f7ff ffcf 	bl	10012450 <__swhatbuf_r>
100124b2:	9900      	ldr	r1, [sp, #0]
100124b4:	0007      	movs	r7, r0
100124b6:	0028      	movs	r0, r5
100124b8:	f000 f87e 	bl	100125b8 <_malloc_r>
100124bc:	2800      	cmp	r0, #0
100124be:	d10c      	bne.n	100124da <__smakebuf_r+0x3e>
100124c0:	220c      	movs	r2, #12
100124c2:	5ea3      	ldrsh	r3, [r4, r2]
100124c4:	059a      	lsls	r2, r3, #22
100124c6:	d423      	bmi.n	10012510 <__smakebuf_r+0x74>
100124c8:	4333      	orrs	r3, r6
100124ca:	81a3      	strh	r3, [r4, #12]
100124cc:	0023      	movs	r3, r4
100124ce:	3347      	adds	r3, #71	; 0x47
100124d0:	6023      	str	r3, [r4, #0]
100124d2:	6123      	str	r3, [r4, #16]
100124d4:	2301      	movs	r3, #1
100124d6:	6163      	str	r3, [r4, #20]
100124d8:	e01a      	b.n	10012510 <__smakebuf_r+0x74>
100124da:	2280      	movs	r2, #128	; 0x80
100124dc:	4b0d      	ldr	r3, [pc, #52]	; (10012514 <__smakebuf_r+0x78>)
100124de:	62ab      	str	r3, [r5, #40]	; 0x28
100124e0:	89a3      	ldrh	r3, [r4, #12]
100124e2:	6020      	str	r0, [r4, #0]
100124e4:	4313      	orrs	r3, r2
100124e6:	81a3      	strh	r3, [r4, #12]
100124e8:	9b00      	ldr	r3, [sp, #0]
100124ea:	6120      	str	r0, [r4, #16]
100124ec:	6163      	str	r3, [r4, #20]
100124ee:	9b01      	ldr	r3, [sp, #4]
100124f0:	2b00      	cmp	r3, #0
100124f2:	d00a      	beq.n	1001250a <__smakebuf_r+0x6e>
100124f4:	230e      	movs	r3, #14
100124f6:	5ee1      	ldrsh	r1, [r4, r3]
100124f8:	0028      	movs	r0, r5
100124fa:	f000 fc53 	bl	10012da4 <_isatty_r>
100124fe:	2800      	cmp	r0, #0
10012500:	d003      	beq.n	1001250a <__smakebuf_r+0x6e>
10012502:	2201      	movs	r2, #1
10012504:	89a3      	ldrh	r3, [r4, #12]
10012506:	4313      	orrs	r3, r2
10012508:	81a3      	strh	r3, [r4, #12]
1001250a:	89a3      	ldrh	r3, [r4, #12]
1001250c:	431f      	orrs	r7, r3
1001250e:	81a7      	strh	r7, [r4, #12]
10012510:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012512:	46c0      	nop			; (mov r8, r8)
10012514:	100122a5 	.word	0x100122a5

10012518 <malloc>:
10012518:	b510      	push	{r4, lr}
1001251a:	4b03      	ldr	r3, [pc, #12]	; (10012528 <malloc+0x10>)
1001251c:	0001      	movs	r1, r0
1001251e:	6818      	ldr	r0, [r3, #0]
10012520:	f000 f84a 	bl	100125b8 <_malloc_r>
10012524:	bd10      	pop	{r4, pc}
10012526:	46c0      	nop			; (mov r8, r8)
10012528:	1001421c 	.word	0x1001421c

1001252c <_free_r>:
1001252c:	b530      	push	{r4, r5, lr}
1001252e:	2900      	cmp	r1, #0
10012530:	d03e      	beq.n	100125b0 <_free_r+0x84>
10012532:	3904      	subs	r1, #4
10012534:	680b      	ldr	r3, [r1, #0]
10012536:	2b00      	cmp	r3, #0
10012538:	da00      	bge.n	1001253c <_free_r+0x10>
1001253a:	18c9      	adds	r1, r1, r3
1001253c:	4a1d      	ldr	r2, [pc, #116]	; (100125b4 <_free_r+0x88>)
1001253e:	6813      	ldr	r3, [r2, #0]
10012540:	0014      	movs	r4, r2
10012542:	2b00      	cmp	r3, #0
10012544:	d102      	bne.n	1001254c <_free_r+0x20>
10012546:	604b      	str	r3, [r1, #4]
10012548:	6011      	str	r1, [r2, #0]
1001254a:	e031      	b.n	100125b0 <_free_r+0x84>
1001254c:	428b      	cmp	r3, r1
1001254e:	d90d      	bls.n	1001256c <_free_r+0x40>
10012550:	680a      	ldr	r2, [r1, #0]
10012552:	1888      	adds	r0, r1, r2
10012554:	4283      	cmp	r3, r0
10012556:	d103      	bne.n	10012560 <_free_r+0x34>
10012558:	6818      	ldr	r0, [r3, #0]
1001255a:	685b      	ldr	r3, [r3, #4]
1001255c:	1882      	adds	r2, r0, r2
1001255e:	600a      	str	r2, [r1, #0]
10012560:	604b      	str	r3, [r1, #4]
10012562:	6021      	str	r1, [r4, #0]
10012564:	e024      	b.n	100125b0 <_free_r+0x84>
10012566:	428a      	cmp	r2, r1
10012568:	d803      	bhi.n	10012572 <_free_r+0x46>
1001256a:	0013      	movs	r3, r2
1001256c:	685a      	ldr	r2, [r3, #4]
1001256e:	2a00      	cmp	r2, #0
10012570:	d1f9      	bne.n	10012566 <_free_r+0x3a>
10012572:	681d      	ldr	r5, [r3, #0]
10012574:	195c      	adds	r4, r3, r5
10012576:	428c      	cmp	r4, r1
10012578:	d10b      	bne.n	10012592 <_free_r+0x66>
1001257a:	6809      	ldr	r1, [r1, #0]
1001257c:	1869      	adds	r1, r5, r1
1001257e:	1858      	adds	r0, r3, r1
10012580:	6019      	str	r1, [r3, #0]
10012582:	4282      	cmp	r2, r0
10012584:	d114      	bne.n	100125b0 <_free_r+0x84>
10012586:	6810      	ldr	r0, [r2, #0]
10012588:	6852      	ldr	r2, [r2, #4]
1001258a:	1841      	adds	r1, r0, r1
1001258c:	6019      	str	r1, [r3, #0]
1001258e:	605a      	str	r2, [r3, #4]
10012590:	e00e      	b.n	100125b0 <_free_r+0x84>
10012592:	428c      	cmp	r4, r1
10012594:	d902      	bls.n	1001259c <_free_r+0x70>
10012596:	230c      	movs	r3, #12
10012598:	6003      	str	r3, [r0, #0]
1001259a:	e009      	b.n	100125b0 <_free_r+0x84>
1001259c:	6808      	ldr	r0, [r1, #0]
1001259e:	180c      	adds	r4, r1, r0
100125a0:	42a2      	cmp	r2, r4
100125a2:	d103      	bne.n	100125ac <_free_r+0x80>
100125a4:	6814      	ldr	r4, [r2, #0]
100125a6:	6852      	ldr	r2, [r2, #4]
100125a8:	1820      	adds	r0, r4, r0
100125aa:	6008      	str	r0, [r1, #0]
100125ac:	604a      	str	r2, [r1, #4]
100125ae:	6059      	str	r1, [r3, #4]
100125b0:	bd30      	pop	{r4, r5, pc}
100125b2:	46c0      	nop			; (mov r8, r8)
100125b4:	10015d10 	.word	0x10015d10

100125b8 <_malloc_r>:
100125b8:	2303      	movs	r3, #3
100125ba:	b570      	push	{r4, r5, r6, lr}
100125bc:	1ccd      	adds	r5, r1, #3
100125be:	439d      	bics	r5, r3
100125c0:	3508      	adds	r5, #8
100125c2:	0006      	movs	r6, r0
100125c4:	2d0c      	cmp	r5, #12
100125c6:	d201      	bcs.n	100125cc <_malloc_r+0x14>
100125c8:	250c      	movs	r5, #12
100125ca:	e005      	b.n	100125d8 <_malloc_r+0x20>
100125cc:	2d00      	cmp	r5, #0
100125ce:	da03      	bge.n	100125d8 <_malloc_r+0x20>
100125d0:	230c      	movs	r3, #12
100125d2:	2000      	movs	r0, #0
100125d4:	6033      	str	r3, [r6, #0]
100125d6:	e040      	b.n	1001265a <_malloc_r+0xa2>
100125d8:	42a9      	cmp	r1, r5
100125da:	d8f9      	bhi.n	100125d0 <_malloc_r+0x18>
100125dc:	4b1f      	ldr	r3, [pc, #124]	; (1001265c <_malloc_r+0xa4>)
100125de:	681c      	ldr	r4, [r3, #0]
100125e0:	001a      	movs	r2, r3
100125e2:	0021      	movs	r1, r4
100125e4:	2900      	cmp	r1, #0
100125e6:	d013      	beq.n	10012610 <_malloc_r+0x58>
100125e8:	680b      	ldr	r3, [r1, #0]
100125ea:	1b5b      	subs	r3, r3, r5
100125ec:	d40d      	bmi.n	1001260a <_malloc_r+0x52>
100125ee:	2b0b      	cmp	r3, #11
100125f0:	d902      	bls.n	100125f8 <_malloc_r+0x40>
100125f2:	600b      	str	r3, [r1, #0]
100125f4:	18cc      	adds	r4, r1, r3
100125f6:	e01e      	b.n	10012636 <_malloc_r+0x7e>
100125f8:	428c      	cmp	r4, r1
100125fa:	d102      	bne.n	10012602 <_malloc_r+0x4a>
100125fc:	6863      	ldr	r3, [r4, #4]
100125fe:	6013      	str	r3, [r2, #0]
10012600:	e01a      	b.n	10012638 <_malloc_r+0x80>
10012602:	684b      	ldr	r3, [r1, #4]
10012604:	6063      	str	r3, [r4, #4]
10012606:	000c      	movs	r4, r1
10012608:	e016      	b.n	10012638 <_malloc_r+0x80>
1001260a:	000c      	movs	r4, r1
1001260c:	6849      	ldr	r1, [r1, #4]
1001260e:	e7e9      	b.n	100125e4 <_malloc_r+0x2c>
10012610:	4c13      	ldr	r4, [pc, #76]	; (10012660 <_malloc_r+0xa8>)
10012612:	6823      	ldr	r3, [r4, #0]
10012614:	2b00      	cmp	r3, #0
10012616:	d103      	bne.n	10012620 <_malloc_r+0x68>
10012618:	0030      	movs	r0, r6
1001261a:	f000 fb2d 	bl	10012c78 <_sbrk_r>
1001261e:	6020      	str	r0, [r4, #0]
10012620:	0029      	movs	r1, r5
10012622:	0030      	movs	r0, r6
10012624:	f000 fb28 	bl	10012c78 <_sbrk_r>
10012628:	1c43      	adds	r3, r0, #1
1001262a:	d0d1      	beq.n	100125d0 <_malloc_r+0x18>
1001262c:	2303      	movs	r3, #3
1001262e:	1cc4      	adds	r4, r0, #3
10012630:	439c      	bics	r4, r3
10012632:	42a0      	cmp	r0, r4
10012634:	d10a      	bne.n	1001264c <_malloc_r+0x94>
10012636:	6025      	str	r5, [r4, #0]
10012638:	0020      	movs	r0, r4
1001263a:	2207      	movs	r2, #7
1001263c:	300b      	adds	r0, #11
1001263e:	1d23      	adds	r3, r4, #4
10012640:	4390      	bics	r0, r2
10012642:	1ac3      	subs	r3, r0, r3
10012644:	d009      	beq.n	1001265a <_malloc_r+0xa2>
10012646:	425a      	negs	r2, r3
10012648:	50e2      	str	r2, [r4, r3]
1001264a:	e006      	b.n	1001265a <_malloc_r+0xa2>
1001264c:	1a21      	subs	r1, r4, r0
1001264e:	0030      	movs	r0, r6
10012650:	f000 fb12 	bl	10012c78 <_sbrk_r>
10012654:	1c43      	adds	r3, r0, #1
10012656:	d1ee      	bne.n	10012636 <_malloc_r+0x7e>
10012658:	e7ba      	b.n	100125d0 <_malloc_r+0x18>
1001265a:	bd70      	pop	{r4, r5, r6, pc}
1001265c:	10015d10 	.word	0x10015d10
10012660:	10015d0c 	.word	0x10015d0c

10012664 <__sfputc_r>:
10012664:	6893      	ldr	r3, [r2, #8]
10012666:	b510      	push	{r4, lr}
10012668:	3b01      	subs	r3, #1
1001266a:	6093      	str	r3, [r2, #8]
1001266c:	2b00      	cmp	r3, #0
1001266e:	da05      	bge.n	1001267c <__sfputc_r+0x18>
10012670:	6994      	ldr	r4, [r2, #24]
10012672:	42a3      	cmp	r3, r4
10012674:	db08      	blt.n	10012688 <__sfputc_r+0x24>
10012676:	b2cb      	uxtb	r3, r1
10012678:	2b0a      	cmp	r3, #10
1001267a:	d005      	beq.n	10012688 <__sfputc_r+0x24>
1001267c:	6813      	ldr	r3, [r2, #0]
1001267e:	1c58      	adds	r0, r3, #1
10012680:	6010      	str	r0, [r2, #0]
10012682:	7019      	strb	r1, [r3, #0]
10012684:	b2c8      	uxtb	r0, r1
10012686:	e001      	b.n	1001268c <__sfputc_r+0x28>
10012688:	f7ff fc8c 	bl	10011fa4 <__swbuf_r>
1001268c:	bd10      	pop	{r4, pc}

1001268e <__sfputs_r>:
1001268e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012690:	0006      	movs	r6, r0
10012692:	000f      	movs	r7, r1
10012694:	0014      	movs	r4, r2
10012696:	18d5      	adds	r5, r2, r3
10012698:	42ac      	cmp	r4, r5
1001269a:	d008      	beq.n	100126ae <__sfputs_r+0x20>
1001269c:	7821      	ldrb	r1, [r4, #0]
1001269e:	003a      	movs	r2, r7
100126a0:	0030      	movs	r0, r6
100126a2:	f7ff ffdf 	bl	10012664 <__sfputc_r>
100126a6:	3401      	adds	r4, #1
100126a8:	1c43      	adds	r3, r0, #1
100126aa:	d1f5      	bne.n	10012698 <__sfputs_r+0xa>
100126ac:	e000      	b.n	100126b0 <__sfputs_r+0x22>
100126ae:	2000      	movs	r0, #0
100126b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

100126b4 <_vfiprintf_r>:
100126b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100126b6:	b09f      	sub	sp, #124	; 0x7c
100126b8:	0006      	movs	r6, r0
100126ba:	000f      	movs	r7, r1
100126bc:	9202      	str	r2, [sp, #8]
100126be:	9305      	str	r3, [sp, #20]
100126c0:	2800      	cmp	r0, #0
100126c2:	d004      	beq.n	100126ce <_vfiprintf_r+0x1a>
100126c4:	6983      	ldr	r3, [r0, #24]
100126c6:	2b00      	cmp	r3, #0
100126c8:	d101      	bne.n	100126ce <_vfiprintf_r+0x1a>
100126ca:	f7ff fe2d 	bl	10012328 <__sinit>
100126ce:	4b7f      	ldr	r3, [pc, #508]	; (100128cc <_vfiprintf_r+0x218>)
100126d0:	429f      	cmp	r7, r3
100126d2:	d101      	bne.n	100126d8 <_vfiprintf_r+0x24>
100126d4:	6877      	ldr	r7, [r6, #4]
100126d6:	e008      	b.n	100126ea <_vfiprintf_r+0x36>
100126d8:	4b7d      	ldr	r3, [pc, #500]	; (100128d0 <_vfiprintf_r+0x21c>)
100126da:	429f      	cmp	r7, r3
100126dc:	d101      	bne.n	100126e2 <_vfiprintf_r+0x2e>
100126de:	68b7      	ldr	r7, [r6, #8]
100126e0:	e003      	b.n	100126ea <_vfiprintf_r+0x36>
100126e2:	4b7c      	ldr	r3, [pc, #496]	; (100128d4 <_vfiprintf_r+0x220>)
100126e4:	429f      	cmp	r7, r3
100126e6:	d100      	bne.n	100126ea <_vfiprintf_r+0x36>
100126e8:	68f7      	ldr	r7, [r6, #12]
100126ea:	89bb      	ldrh	r3, [r7, #12]
100126ec:	071b      	lsls	r3, r3, #28
100126ee:	d50a      	bpl.n	10012706 <_vfiprintf_r+0x52>
100126f0:	693b      	ldr	r3, [r7, #16]
100126f2:	2b00      	cmp	r3, #0
100126f4:	d007      	beq.n	10012706 <_vfiprintf_r+0x52>
100126f6:	2300      	movs	r3, #0
100126f8:	ad06      	add	r5, sp, #24
100126fa:	616b      	str	r3, [r5, #20]
100126fc:	3320      	adds	r3, #32
100126fe:	766b      	strb	r3, [r5, #25]
10012700:	3310      	adds	r3, #16
10012702:	76ab      	strb	r3, [r5, #26]
10012704:	e03d      	b.n	10012782 <_vfiprintf_r+0xce>
10012706:	0039      	movs	r1, r7
10012708:	0030      	movs	r0, r6
1001270a:	f7ff fca3 	bl	10012054 <__swsetup_r>
1001270e:	2800      	cmp	r0, #0
10012710:	d0f1      	beq.n	100126f6 <_vfiprintf_r+0x42>
10012712:	2001      	movs	r0, #1
10012714:	4240      	negs	r0, r0
10012716:	e0d6      	b.n	100128c6 <_vfiprintf_r+0x212>
10012718:	9a05      	ldr	r2, [sp, #20]
1001271a:	1d11      	adds	r1, r2, #4
1001271c:	6812      	ldr	r2, [r2, #0]
1001271e:	9105      	str	r1, [sp, #20]
10012720:	2a00      	cmp	r2, #0
10012722:	da00      	bge.n	10012726 <_vfiprintf_r+0x72>
10012724:	e07f      	b.n	10012826 <_vfiprintf_r+0x172>
10012726:	9209      	str	r2, [sp, #36]	; 0x24
10012728:	3401      	adds	r4, #1
1001272a:	7823      	ldrb	r3, [r4, #0]
1001272c:	2b2e      	cmp	r3, #46	; 0x2e
1001272e:	d100      	bne.n	10012732 <_vfiprintf_r+0x7e>
10012730:	e08d      	b.n	1001284e <_vfiprintf_r+0x19a>
10012732:	7821      	ldrb	r1, [r4, #0]
10012734:	2203      	movs	r2, #3
10012736:	4868      	ldr	r0, [pc, #416]	; (100128d8 <_vfiprintf_r+0x224>)
10012738:	f000 fb5a 	bl	10012df0 <memchr>
1001273c:	2800      	cmp	r0, #0
1001273e:	d007      	beq.n	10012750 <_vfiprintf_r+0x9c>
10012740:	4b65      	ldr	r3, [pc, #404]	; (100128d8 <_vfiprintf_r+0x224>)
10012742:	682a      	ldr	r2, [r5, #0]
10012744:	1ac0      	subs	r0, r0, r3
10012746:	2340      	movs	r3, #64	; 0x40
10012748:	4083      	lsls	r3, r0
1001274a:	4313      	orrs	r3, r2
1001274c:	602b      	str	r3, [r5, #0]
1001274e:	3401      	adds	r4, #1
10012750:	7821      	ldrb	r1, [r4, #0]
10012752:	1c63      	adds	r3, r4, #1
10012754:	2206      	movs	r2, #6
10012756:	4861      	ldr	r0, [pc, #388]	; (100128dc <_vfiprintf_r+0x228>)
10012758:	9302      	str	r3, [sp, #8]
1001275a:	7629      	strb	r1, [r5, #24]
1001275c:	f000 fb48 	bl	10012df0 <memchr>
10012760:	2800      	cmp	r0, #0
10012762:	d100      	bne.n	10012766 <_vfiprintf_r+0xb2>
10012764:	e09d      	b.n	100128a2 <_vfiprintf_r+0x1ee>
10012766:	4b5e      	ldr	r3, [pc, #376]	; (100128e0 <_vfiprintf_r+0x22c>)
10012768:	2b00      	cmp	r3, #0
1001276a:	d000      	beq.n	1001276e <_vfiprintf_r+0xba>
1001276c:	e090      	b.n	10012890 <_vfiprintf_r+0x1dc>
1001276e:	2207      	movs	r2, #7
10012770:	9b05      	ldr	r3, [sp, #20]
10012772:	3307      	adds	r3, #7
10012774:	4393      	bics	r3, r2
10012776:	3308      	adds	r3, #8
10012778:	9305      	str	r3, [sp, #20]
1001277a:	696b      	ldr	r3, [r5, #20]
1001277c:	9a03      	ldr	r2, [sp, #12]
1001277e:	189b      	adds	r3, r3, r2
10012780:	616b      	str	r3, [r5, #20]
10012782:	9c02      	ldr	r4, [sp, #8]
10012784:	7823      	ldrb	r3, [r4, #0]
10012786:	2b00      	cmp	r3, #0
10012788:	d104      	bne.n	10012794 <_vfiprintf_r+0xe0>
1001278a:	9b02      	ldr	r3, [sp, #8]
1001278c:	1ae3      	subs	r3, r4, r3
1001278e:	9304      	str	r3, [sp, #16]
10012790:	d012      	beq.n	100127b8 <_vfiprintf_r+0x104>
10012792:	e003      	b.n	1001279c <_vfiprintf_r+0xe8>
10012794:	2b25      	cmp	r3, #37	; 0x25
10012796:	d0f8      	beq.n	1001278a <_vfiprintf_r+0xd6>
10012798:	3401      	adds	r4, #1
1001279a:	e7f3      	b.n	10012784 <_vfiprintf_r+0xd0>
1001279c:	9b04      	ldr	r3, [sp, #16]
1001279e:	9a02      	ldr	r2, [sp, #8]
100127a0:	0039      	movs	r1, r7
100127a2:	0030      	movs	r0, r6
100127a4:	f7ff ff73 	bl	1001268e <__sfputs_r>
100127a8:	1c43      	adds	r3, r0, #1
100127aa:	d100      	bne.n	100127ae <_vfiprintf_r+0xfa>
100127ac:	e086      	b.n	100128bc <_vfiprintf_r+0x208>
100127ae:	696a      	ldr	r2, [r5, #20]
100127b0:	9b04      	ldr	r3, [sp, #16]
100127b2:	4694      	mov	ip, r2
100127b4:	4463      	add	r3, ip
100127b6:	616b      	str	r3, [r5, #20]
100127b8:	7823      	ldrb	r3, [r4, #0]
100127ba:	2b00      	cmp	r3, #0
100127bc:	d07e      	beq.n	100128bc <_vfiprintf_r+0x208>
100127be:	2201      	movs	r2, #1
100127c0:	2300      	movs	r3, #0
100127c2:	4252      	negs	r2, r2
100127c4:	606a      	str	r2, [r5, #4]
100127c6:	a902      	add	r1, sp, #8
100127c8:	3254      	adds	r2, #84	; 0x54
100127ca:	1852      	adds	r2, r2, r1
100127cc:	3401      	adds	r4, #1
100127ce:	602b      	str	r3, [r5, #0]
100127d0:	60eb      	str	r3, [r5, #12]
100127d2:	60ab      	str	r3, [r5, #8]
100127d4:	7013      	strb	r3, [r2, #0]
100127d6:	65ab      	str	r3, [r5, #88]	; 0x58
100127d8:	7821      	ldrb	r1, [r4, #0]
100127da:	2205      	movs	r2, #5
100127dc:	4841      	ldr	r0, [pc, #260]	; (100128e4 <_vfiprintf_r+0x230>)
100127de:	f000 fb07 	bl	10012df0 <memchr>
100127e2:	2800      	cmp	r0, #0
100127e4:	d008      	beq.n	100127f8 <_vfiprintf_r+0x144>
100127e6:	4b3f      	ldr	r3, [pc, #252]	; (100128e4 <_vfiprintf_r+0x230>)
100127e8:	682a      	ldr	r2, [r5, #0]
100127ea:	1ac0      	subs	r0, r0, r3
100127ec:	2301      	movs	r3, #1
100127ee:	4083      	lsls	r3, r0
100127f0:	4313      	orrs	r3, r2
100127f2:	602b      	str	r3, [r5, #0]
100127f4:	3401      	adds	r4, #1
100127f6:	e7ef      	b.n	100127d8 <_vfiprintf_r+0x124>
100127f8:	682b      	ldr	r3, [r5, #0]
100127fa:	06da      	lsls	r2, r3, #27
100127fc:	d504      	bpl.n	10012808 <_vfiprintf_r+0x154>
100127fe:	2253      	movs	r2, #83	; 0x53
10012800:	2120      	movs	r1, #32
10012802:	a802      	add	r0, sp, #8
10012804:	1812      	adds	r2, r2, r0
10012806:	7011      	strb	r1, [r2, #0]
10012808:	071a      	lsls	r2, r3, #28
1001280a:	d504      	bpl.n	10012816 <_vfiprintf_r+0x162>
1001280c:	2253      	movs	r2, #83	; 0x53
1001280e:	212b      	movs	r1, #43	; 0x2b
10012810:	a802      	add	r0, sp, #8
10012812:	1812      	adds	r2, r2, r0
10012814:	7011      	strb	r1, [r2, #0]
10012816:	7822      	ldrb	r2, [r4, #0]
10012818:	2a2a      	cmp	r2, #42	; 0x2a
1001281a:	d100      	bne.n	1001281e <_vfiprintf_r+0x16a>
1001281c:	e77c      	b.n	10012718 <_vfiprintf_r+0x64>
1001281e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012820:	2000      	movs	r0, #0
10012822:	210a      	movs	r1, #10
10012824:	e005      	b.n	10012832 <_vfiprintf_r+0x17e>
10012826:	4252      	negs	r2, r2
10012828:	60ea      	str	r2, [r5, #12]
1001282a:	2202      	movs	r2, #2
1001282c:	4313      	orrs	r3, r2
1001282e:	602b      	str	r3, [r5, #0]
10012830:	e77a      	b.n	10012728 <_vfiprintf_r+0x74>
10012832:	7822      	ldrb	r2, [r4, #0]
10012834:	3a30      	subs	r2, #48	; 0x30
10012836:	2a09      	cmp	r2, #9
10012838:	d804      	bhi.n	10012844 <_vfiprintf_r+0x190>
1001283a:	434b      	muls	r3, r1
1001283c:	3401      	adds	r4, #1
1001283e:	189b      	adds	r3, r3, r2
10012840:	2001      	movs	r0, #1
10012842:	e7f6      	b.n	10012832 <_vfiprintf_r+0x17e>
10012844:	2800      	cmp	r0, #0
10012846:	d100      	bne.n	1001284a <_vfiprintf_r+0x196>
10012848:	e76f      	b.n	1001272a <_vfiprintf_r+0x76>
1001284a:	9309      	str	r3, [sp, #36]	; 0x24
1001284c:	e76d      	b.n	1001272a <_vfiprintf_r+0x76>
1001284e:	7863      	ldrb	r3, [r4, #1]
10012850:	2b2a      	cmp	r3, #42	; 0x2a
10012852:	d10a      	bne.n	1001286a <_vfiprintf_r+0x1b6>
10012854:	9b05      	ldr	r3, [sp, #20]
10012856:	3402      	adds	r4, #2
10012858:	1d1a      	adds	r2, r3, #4
1001285a:	681b      	ldr	r3, [r3, #0]
1001285c:	9205      	str	r2, [sp, #20]
1001285e:	2b00      	cmp	r3, #0
10012860:	da01      	bge.n	10012866 <_vfiprintf_r+0x1b2>
10012862:	2301      	movs	r3, #1
10012864:	425b      	negs	r3, r3
10012866:	9307      	str	r3, [sp, #28]
10012868:	e763      	b.n	10012732 <_vfiprintf_r+0x7e>
1001286a:	2300      	movs	r3, #0
1001286c:	200a      	movs	r0, #10
1001286e:	001a      	movs	r2, r3
10012870:	3401      	adds	r4, #1
10012872:	606b      	str	r3, [r5, #4]
10012874:	7821      	ldrb	r1, [r4, #0]
10012876:	3930      	subs	r1, #48	; 0x30
10012878:	2909      	cmp	r1, #9
1001287a:	d804      	bhi.n	10012886 <_vfiprintf_r+0x1d2>
1001287c:	4342      	muls	r2, r0
1001287e:	3401      	adds	r4, #1
10012880:	1852      	adds	r2, r2, r1
10012882:	2301      	movs	r3, #1
10012884:	e7f6      	b.n	10012874 <_vfiprintf_r+0x1c0>
10012886:	2b00      	cmp	r3, #0
10012888:	d100      	bne.n	1001288c <_vfiprintf_r+0x1d8>
1001288a:	e752      	b.n	10012732 <_vfiprintf_r+0x7e>
1001288c:	9207      	str	r2, [sp, #28]
1001288e:	e750      	b.n	10012732 <_vfiprintf_r+0x7e>
10012890:	ab05      	add	r3, sp, #20
10012892:	9300      	str	r3, [sp, #0]
10012894:	003a      	movs	r2, r7
10012896:	4b14      	ldr	r3, [pc, #80]	; (100128e8 <_vfiprintf_r+0x234>)
10012898:	0029      	movs	r1, r5
1001289a:	0030      	movs	r0, r6
1001289c:	e000      	b.n	100128a0 <_vfiprintf_r+0x1ec>
1001289e:	bf00      	nop
100128a0:	e007      	b.n	100128b2 <_vfiprintf_r+0x1fe>
100128a2:	ab05      	add	r3, sp, #20
100128a4:	9300      	str	r3, [sp, #0]
100128a6:	003a      	movs	r2, r7
100128a8:	4b0f      	ldr	r3, [pc, #60]	; (100128e8 <_vfiprintf_r+0x234>)
100128aa:	0029      	movs	r1, r5
100128ac:	0030      	movs	r0, r6
100128ae:	f000 f88b 	bl	100129c8 <_printf_i>
100128b2:	9003      	str	r0, [sp, #12]
100128b4:	9b03      	ldr	r3, [sp, #12]
100128b6:	3301      	adds	r3, #1
100128b8:	d000      	beq.n	100128bc <_vfiprintf_r+0x208>
100128ba:	e75e      	b.n	1001277a <_vfiprintf_r+0xc6>
100128bc:	89bb      	ldrh	r3, [r7, #12]
100128be:	065b      	lsls	r3, r3, #25
100128c0:	d500      	bpl.n	100128c4 <_vfiprintf_r+0x210>
100128c2:	e726      	b.n	10012712 <_vfiprintf_r+0x5e>
100128c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
100128c6:	b01f      	add	sp, #124	; 0x7c
100128c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100128ca:	46c0      	nop			; (mov r8, r8)
100128cc:	100140e8 	.word	0x100140e8
100128d0:	10014108 	.word	0x10014108
100128d4:	10014128 	.word	0x10014128
100128d8:	1001414e 	.word	0x1001414e
100128dc:	10014152 	.word	0x10014152
100128e0:	00000000 	.word	0x00000000
100128e4:	10014148 	.word	0x10014148
100128e8:	1001268f 	.word	0x1001268f

100128ec <_printf_common>:
100128ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100128ee:	0017      	movs	r7, r2
100128f0:	9301      	str	r3, [sp, #4]
100128f2:	688a      	ldr	r2, [r1, #8]
100128f4:	690b      	ldr	r3, [r1, #16]
100128f6:	9000      	str	r0, [sp, #0]
100128f8:	000c      	movs	r4, r1
100128fa:	4293      	cmp	r3, r2
100128fc:	da00      	bge.n	10012900 <_printf_common+0x14>
100128fe:	0013      	movs	r3, r2
10012900:	0022      	movs	r2, r4
10012902:	603b      	str	r3, [r7, #0]
10012904:	3243      	adds	r2, #67	; 0x43
10012906:	7812      	ldrb	r2, [r2, #0]
10012908:	2a00      	cmp	r2, #0
1001290a:	d001      	beq.n	10012910 <_printf_common+0x24>
1001290c:	3301      	adds	r3, #1
1001290e:	603b      	str	r3, [r7, #0]
10012910:	6823      	ldr	r3, [r4, #0]
10012912:	069b      	lsls	r3, r3, #26
10012914:	d502      	bpl.n	1001291c <_printf_common+0x30>
10012916:	683b      	ldr	r3, [r7, #0]
10012918:	3302      	adds	r3, #2
1001291a:	603b      	str	r3, [r7, #0]
1001291c:	2506      	movs	r5, #6
1001291e:	6823      	ldr	r3, [r4, #0]
10012920:	401d      	ands	r5, r3
10012922:	d01e      	beq.n	10012962 <_printf_common+0x76>
10012924:	0023      	movs	r3, r4
10012926:	3343      	adds	r3, #67	; 0x43
10012928:	781b      	ldrb	r3, [r3, #0]
1001292a:	1e5a      	subs	r2, r3, #1
1001292c:	4193      	sbcs	r3, r2
1001292e:	6822      	ldr	r2, [r4, #0]
10012930:	0692      	lsls	r2, r2, #26
10012932:	d51c      	bpl.n	1001296e <_printf_common+0x82>
10012934:	2030      	movs	r0, #48	; 0x30
10012936:	18e1      	adds	r1, r4, r3
10012938:	3143      	adds	r1, #67	; 0x43
1001293a:	7008      	strb	r0, [r1, #0]
1001293c:	0021      	movs	r1, r4
1001293e:	1c5a      	adds	r2, r3, #1
10012940:	3145      	adds	r1, #69	; 0x45
10012942:	7809      	ldrb	r1, [r1, #0]
10012944:	18a2      	adds	r2, r4, r2
10012946:	3243      	adds	r2, #67	; 0x43
10012948:	3302      	adds	r3, #2
1001294a:	7011      	strb	r1, [r2, #0]
1001294c:	e00f      	b.n	1001296e <_printf_common+0x82>
1001294e:	0022      	movs	r2, r4
10012950:	2301      	movs	r3, #1
10012952:	3219      	adds	r2, #25
10012954:	9901      	ldr	r1, [sp, #4]
10012956:	9800      	ldr	r0, [sp, #0]
10012958:	9e08      	ldr	r6, [sp, #32]
1001295a:	47b0      	blx	r6
1001295c:	1c43      	adds	r3, r0, #1
1001295e:	d00e      	beq.n	1001297e <_printf_common+0x92>
10012960:	3501      	adds	r5, #1
10012962:	68e3      	ldr	r3, [r4, #12]
10012964:	683a      	ldr	r2, [r7, #0]
10012966:	1a9b      	subs	r3, r3, r2
10012968:	429d      	cmp	r5, r3
1001296a:	dbf0      	blt.n	1001294e <_printf_common+0x62>
1001296c:	e7da      	b.n	10012924 <_printf_common+0x38>
1001296e:	0022      	movs	r2, r4
10012970:	9901      	ldr	r1, [sp, #4]
10012972:	3243      	adds	r2, #67	; 0x43
10012974:	9800      	ldr	r0, [sp, #0]
10012976:	9d08      	ldr	r5, [sp, #32]
10012978:	47a8      	blx	r5
1001297a:	1c43      	adds	r3, r0, #1
1001297c:	d102      	bne.n	10012984 <_printf_common+0x98>
1001297e:	2001      	movs	r0, #1
10012980:	4240      	negs	r0, r0
10012982:	e020      	b.n	100129c6 <_printf_common+0xda>
10012984:	2306      	movs	r3, #6
10012986:	6820      	ldr	r0, [r4, #0]
10012988:	68e1      	ldr	r1, [r4, #12]
1001298a:	683a      	ldr	r2, [r7, #0]
1001298c:	4003      	ands	r3, r0
1001298e:	2500      	movs	r5, #0
10012990:	2b04      	cmp	r3, #4
10012992:	d103      	bne.n	1001299c <_printf_common+0xb0>
10012994:	1a8d      	subs	r5, r1, r2
10012996:	43eb      	mvns	r3, r5
10012998:	17db      	asrs	r3, r3, #31
1001299a:	401d      	ands	r5, r3
1001299c:	68a3      	ldr	r3, [r4, #8]
1001299e:	6922      	ldr	r2, [r4, #16]
100129a0:	4293      	cmp	r3, r2
100129a2:	dd01      	ble.n	100129a8 <_printf_common+0xbc>
100129a4:	1a9b      	subs	r3, r3, r2
100129a6:	18ed      	adds	r5, r5, r3
100129a8:	2700      	movs	r7, #0
100129aa:	42bd      	cmp	r5, r7
100129ac:	d00a      	beq.n	100129c4 <_printf_common+0xd8>
100129ae:	0022      	movs	r2, r4
100129b0:	2301      	movs	r3, #1
100129b2:	321a      	adds	r2, #26
100129b4:	9901      	ldr	r1, [sp, #4]
100129b6:	9800      	ldr	r0, [sp, #0]
100129b8:	9e08      	ldr	r6, [sp, #32]
100129ba:	47b0      	blx	r6
100129bc:	1c43      	adds	r3, r0, #1
100129be:	d0de      	beq.n	1001297e <_printf_common+0x92>
100129c0:	3701      	adds	r7, #1
100129c2:	e7f2      	b.n	100129aa <_printf_common+0xbe>
100129c4:	2000      	movs	r0, #0
100129c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

100129c8 <_printf_i>:
100129c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100129ca:	b08b      	sub	sp, #44	; 0x2c
100129cc:	9206      	str	r2, [sp, #24]
100129ce:	000a      	movs	r2, r1
100129d0:	3243      	adds	r2, #67	; 0x43
100129d2:	9307      	str	r3, [sp, #28]
100129d4:	9005      	str	r0, [sp, #20]
100129d6:	9204      	str	r2, [sp, #16]
100129d8:	7e0a      	ldrb	r2, [r1, #24]
100129da:	000c      	movs	r4, r1
100129dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
100129de:	2a6e      	cmp	r2, #110	; 0x6e
100129e0:	d100      	bne.n	100129e4 <_printf_i+0x1c>
100129e2:	e0ab      	b.n	10012b3c <_printf_i+0x174>
100129e4:	d811      	bhi.n	10012a0a <_printf_i+0x42>
100129e6:	2a63      	cmp	r2, #99	; 0x63
100129e8:	d022      	beq.n	10012a30 <_printf_i+0x68>
100129ea:	d809      	bhi.n	10012a00 <_printf_i+0x38>
100129ec:	2a00      	cmp	r2, #0
100129ee:	d100      	bne.n	100129f2 <_printf_i+0x2a>
100129f0:	e0b5      	b.n	10012b5e <_printf_i+0x196>
100129f2:	2a58      	cmp	r2, #88	; 0x58
100129f4:	d000      	beq.n	100129f8 <_printf_i+0x30>
100129f6:	e0c5      	b.n	10012b84 <_printf_i+0x1bc>
100129f8:	3145      	adds	r1, #69	; 0x45
100129fa:	700a      	strb	r2, [r1, #0]
100129fc:	4a81      	ldr	r2, [pc, #516]	; (10012c04 <_printf_i+0x23c>)
100129fe:	e04f      	b.n	10012aa0 <_printf_i+0xd8>
10012a00:	2a64      	cmp	r2, #100	; 0x64
10012a02:	d01d      	beq.n	10012a40 <_printf_i+0x78>
10012a04:	2a69      	cmp	r2, #105	; 0x69
10012a06:	d01b      	beq.n	10012a40 <_printf_i+0x78>
10012a08:	e0bc      	b.n	10012b84 <_printf_i+0x1bc>
10012a0a:	2a73      	cmp	r2, #115	; 0x73
10012a0c:	d100      	bne.n	10012a10 <_printf_i+0x48>
10012a0e:	e0aa      	b.n	10012b66 <_printf_i+0x19e>
10012a10:	d809      	bhi.n	10012a26 <_printf_i+0x5e>
10012a12:	2a6f      	cmp	r2, #111	; 0x6f
10012a14:	d029      	beq.n	10012a6a <_printf_i+0xa2>
10012a16:	2a70      	cmp	r2, #112	; 0x70
10012a18:	d000      	beq.n	10012a1c <_printf_i+0x54>
10012a1a:	e0b3      	b.n	10012b84 <_printf_i+0x1bc>
10012a1c:	2220      	movs	r2, #32
10012a1e:	6809      	ldr	r1, [r1, #0]
10012a20:	430a      	orrs	r2, r1
10012a22:	6022      	str	r2, [r4, #0]
10012a24:	e037      	b.n	10012a96 <_printf_i+0xce>
10012a26:	2a75      	cmp	r2, #117	; 0x75
10012a28:	d01f      	beq.n	10012a6a <_printf_i+0xa2>
10012a2a:	2a78      	cmp	r2, #120	; 0x78
10012a2c:	d033      	beq.n	10012a96 <_printf_i+0xce>
10012a2e:	e0a9      	b.n	10012b84 <_printf_i+0x1bc>
10012a30:	000e      	movs	r6, r1
10012a32:	681a      	ldr	r2, [r3, #0]
10012a34:	3642      	adds	r6, #66	; 0x42
10012a36:	1d11      	adds	r1, r2, #4
10012a38:	6019      	str	r1, [r3, #0]
10012a3a:	6813      	ldr	r3, [r2, #0]
10012a3c:	7033      	strb	r3, [r6, #0]
10012a3e:	e0a4      	b.n	10012b8a <_printf_i+0x1c2>
10012a40:	6821      	ldr	r1, [r4, #0]
10012a42:	681a      	ldr	r2, [r3, #0]
10012a44:	0608      	lsls	r0, r1, #24
10012a46:	d406      	bmi.n	10012a56 <_printf_i+0x8e>
10012a48:	0649      	lsls	r1, r1, #25
10012a4a:	d504      	bpl.n	10012a56 <_printf_i+0x8e>
10012a4c:	1d11      	adds	r1, r2, #4
10012a4e:	6019      	str	r1, [r3, #0]
10012a50:	2300      	movs	r3, #0
10012a52:	5ed5      	ldrsh	r5, [r2, r3]
10012a54:	e002      	b.n	10012a5c <_printf_i+0x94>
10012a56:	1d11      	adds	r1, r2, #4
10012a58:	6019      	str	r1, [r3, #0]
10012a5a:	6815      	ldr	r5, [r2, #0]
10012a5c:	2d00      	cmp	r5, #0
10012a5e:	da3b      	bge.n	10012ad8 <_printf_i+0x110>
10012a60:	232d      	movs	r3, #45	; 0x2d
10012a62:	9a04      	ldr	r2, [sp, #16]
10012a64:	426d      	negs	r5, r5
10012a66:	7013      	strb	r3, [r2, #0]
10012a68:	e036      	b.n	10012ad8 <_printf_i+0x110>
10012a6a:	6821      	ldr	r1, [r4, #0]
10012a6c:	681a      	ldr	r2, [r3, #0]
10012a6e:	0608      	lsls	r0, r1, #24
10012a70:	d406      	bmi.n	10012a80 <_printf_i+0xb8>
10012a72:	0649      	lsls	r1, r1, #25
10012a74:	d504      	bpl.n	10012a80 <_printf_i+0xb8>
10012a76:	6815      	ldr	r5, [r2, #0]
10012a78:	1d11      	adds	r1, r2, #4
10012a7a:	6019      	str	r1, [r3, #0]
10012a7c:	b2ad      	uxth	r5, r5
10012a7e:	e002      	b.n	10012a86 <_printf_i+0xbe>
10012a80:	1d11      	adds	r1, r2, #4
10012a82:	6019      	str	r1, [r3, #0]
10012a84:	6815      	ldr	r5, [r2, #0]
10012a86:	4b5f      	ldr	r3, [pc, #380]	; (10012c04 <_printf_i+0x23c>)
10012a88:	7e22      	ldrb	r2, [r4, #24]
10012a8a:	9303      	str	r3, [sp, #12]
10012a8c:	2708      	movs	r7, #8
10012a8e:	2a6f      	cmp	r2, #111	; 0x6f
10012a90:	d01d      	beq.n	10012ace <_printf_i+0x106>
10012a92:	270a      	movs	r7, #10
10012a94:	e01b      	b.n	10012ace <_printf_i+0x106>
10012a96:	0022      	movs	r2, r4
10012a98:	2178      	movs	r1, #120	; 0x78
10012a9a:	3245      	adds	r2, #69	; 0x45
10012a9c:	7011      	strb	r1, [r2, #0]
10012a9e:	4a5a      	ldr	r2, [pc, #360]	; (10012c08 <_printf_i+0x240>)
10012aa0:	6819      	ldr	r1, [r3, #0]
10012aa2:	9203      	str	r2, [sp, #12]
10012aa4:	1d08      	adds	r0, r1, #4
10012aa6:	6822      	ldr	r2, [r4, #0]
10012aa8:	6018      	str	r0, [r3, #0]
10012aaa:	680d      	ldr	r5, [r1, #0]
10012aac:	0610      	lsls	r0, r2, #24
10012aae:	d402      	bmi.n	10012ab6 <_printf_i+0xee>
10012ab0:	0650      	lsls	r0, r2, #25
10012ab2:	d500      	bpl.n	10012ab6 <_printf_i+0xee>
10012ab4:	b2ad      	uxth	r5, r5
10012ab6:	07d3      	lsls	r3, r2, #31
10012ab8:	d502      	bpl.n	10012ac0 <_printf_i+0xf8>
10012aba:	2320      	movs	r3, #32
10012abc:	431a      	orrs	r2, r3
10012abe:	6022      	str	r2, [r4, #0]
10012ac0:	2710      	movs	r7, #16
10012ac2:	2d00      	cmp	r5, #0
10012ac4:	d103      	bne.n	10012ace <_printf_i+0x106>
10012ac6:	2320      	movs	r3, #32
10012ac8:	6822      	ldr	r2, [r4, #0]
10012aca:	439a      	bics	r2, r3
10012acc:	6022      	str	r2, [r4, #0]
10012ace:	0023      	movs	r3, r4
10012ad0:	2200      	movs	r2, #0
10012ad2:	3343      	adds	r3, #67	; 0x43
10012ad4:	701a      	strb	r2, [r3, #0]
10012ad6:	e002      	b.n	10012ade <_printf_i+0x116>
10012ad8:	270a      	movs	r7, #10
10012ada:	4b4a      	ldr	r3, [pc, #296]	; (10012c04 <_printf_i+0x23c>)
10012adc:	9303      	str	r3, [sp, #12]
10012ade:	6863      	ldr	r3, [r4, #4]
10012ae0:	60a3      	str	r3, [r4, #8]
10012ae2:	2b00      	cmp	r3, #0
10012ae4:	db09      	blt.n	10012afa <_printf_i+0x132>
10012ae6:	2204      	movs	r2, #4
10012ae8:	6821      	ldr	r1, [r4, #0]
10012aea:	4391      	bics	r1, r2
10012aec:	6021      	str	r1, [r4, #0]
10012aee:	2d00      	cmp	r5, #0
10012af0:	d105      	bne.n	10012afe <_printf_i+0x136>
10012af2:	9e04      	ldr	r6, [sp, #16]
10012af4:	2b00      	cmp	r3, #0
10012af6:	d011      	beq.n	10012b1c <_printf_i+0x154>
10012af8:	e07b      	b.n	10012bf2 <_printf_i+0x22a>
10012afa:	2d00      	cmp	r5, #0
10012afc:	d079      	beq.n	10012bf2 <_printf_i+0x22a>
10012afe:	9e04      	ldr	r6, [sp, #16]
10012b00:	0028      	movs	r0, r5
10012b02:	0039      	movs	r1, r7
10012b04:	f7fd fcf0 	bl	100104e8 <__aeabi_uidivmod>
10012b08:	9b03      	ldr	r3, [sp, #12]
10012b0a:	3e01      	subs	r6, #1
10012b0c:	5c5b      	ldrb	r3, [r3, r1]
10012b0e:	0028      	movs	r0, r5
10012b10:	7033      	strb	r3, [r6, #0]
10012b12:	0039      	movs	r1, r7
10012b14:	f7fd fc62 	bl	100103dc <__aeabi_uidiv>
10012b18:	1e05      	subs	r5, r0, #0
10012b1a:	d1f1      	bne.n	10012b00 <_printf_i+0x138>
10012b1c:	2f08      	cmp	r7, #8
10012b1e:	d109      	bne.n	10012b34 <_printf_i+0x16c>
10012b20:	6823      	ldr	r3, [r4, #0]
10012b22:	07db      	lsls	r3, r3, #31
10012b24:	d506      	bpl.n	10012b34 <_printf_i+0x16c>
10012b26:	6863      	ldr	r3, [r4, #4]
10012b28:	6922      	ldr	r2, [r4, #16]
10012b2a:	4293      	cmp	r3, r2
10012b2c:	dc02      	bgt.n	10012b34 <_printf_i+0x16c>
10012b2e:	2330      	movs	r3, #48	; 0x30
10012b30:	3e01      	subs	r6, #1
10012b32:	7033      	strb	r3, [r6, #0]
10012b34:	9b04      	ldr	r3, [sp, #16]
10012b36:	1b9b      	subs	r3, r3, r6
10012b38:	6123      	str	r3, [r4, #16]
10012b3a:	e02b      	b.n	10012b94 <_printf_i+0x1cc>
10012b3c:	6809      	ldr	r1, [r1, #0]
10012b3e:	681a      	ldr	r2, [r3, #0]
10012b40:	0608      	lsls	r0, r1, #24
10012b42:	d407      	bmi.n	10012b54 <_printf_i+0x18c>
10012b44:	0649      	lsls	r1, r1, #25
10012b46:	d505      	bpl.n	10012b54 <_printf_i+0x18c>
10012b48:	1d11      	adds	r1, r2, #4
10012b4a:	6019      	str	r1, [r3, #0]
10012b4c:	6813      	ldr	r3, [r2, #0]
10012b4e:	8aa2      	ldrh	r2, [r4, #20]
10012b50:	801a      	strh	r2, [r3, #0]
10012b52:	e004      	b.n	10012b5e <_printf_i+0x196>
10012b54:	1d11      	adds	r1, r2, #4
10012b56:	6019      	str	r1, [r3, #0]
10012b58:	6813      	ldr	r3, [r2, #0]
10012b5a:	6962      	ldr	r2, [r4, #20]
10012b5c:	601a      	str	r2, [r3, #0]
10012b5e:	2300      	movs	r3, #0
10012b60:	9e04      	ldr	r6, [sp, #16]
10012b62:	6123      	str	r3, [r4, #16]
10012b64:	e016      	b.n	10012b94 <_printf_i+0x1cc>
10012b66:	681a      	ldr	r2, [r3, #0]
10012b68:	1d11      	adds	r1, r2, #4
10012b6a:	6019      	str	r1, [r3, #0]
10012b6c:	6816      	ldr	r6, [r2, #0]
10012b6e:	2100      	movs	r1, #0
10012b70:	6862      	ldr	r2, [r4, #4]
10012b72:	0030      	movs	r0, r6
10012b74:	f000 f93c 	bl	10012df0 <memchr>
10012b78:	2800      	cmp	r0, #0
10012b7a:	d001      	beq.n	10012b80 <_printf_i+0x1b8>
10012b7c:	1b80      	subs	r0, r0, r6
10012b7e:	6060      	str	r0, [r4, #4]
10012b80:	6863      	ldr	r3, [r4, #4]
10012b82:	e003      	b.n	10012b8c <_printf_i+0x1c4>
10012b84:	0026      	movs	r6, r4
10012b86:	3642      	adds	r6, #66	; 0x42
10012b88:	7032      	strb	r2, [r6, #0]
10012b8a:	2301      	movs	r3, #1
10012b8c:	6123      	str	r3, [r4, #16]
10012b8e:	2300      	movs	r3, #0
10012b90:	9a04      	ldr	r2, [sp, #16]
10012b92:	7013      	strb	r3, [r2, #0]
10012b94:	9b07      	ldr	r3, [sp, #28]
10012b96:	aa09      	add	r2, sp, #36	; 0x24
10012b98:	9300      	str	r3, [sp, #0]
10012b9a:	0021      	movs	r1, r4
10012b9c:	9b06      	ldr	r3, [sp, #24]
10012b9e:	9805      	ldr	r0, [sp, #20]
10012ba0:	f7ff fea4 	bl	100128ec <_printf_common>
10012ba4:	1c43      	adds	r3, r0, #1
10012ba6:	d102      	bne.n	10012bae <_printf_i+0x1e6>
10012ba8:	2001      	movs	r0, #1
10012baa:	4240      	negs	r0, r0
10012bac:	e027      	b.n	10012bfe <_printf_i+0x236>
10012bae:	6923      	ldr	r3, [r4, #16]
10012bb0:	0032      	movs	r2, r6
10012bb2:	9906      	ldr	r1, [sp, #24]
10012bb4:	9805      	ldr	r0, [sp, #20]
10012bb6:	9d07      	ldr	r5, [sp, #28]
10012bb8:	47a8      	blx	r5
10012bba:	1c43      	adds	r3, r0, #1
10012bbc:	d0f4      	beq.n	10012ba8 <_printf_i+0x1e0>
10012bbe:	6823      	ldr	r3, [r4, #0]
10012bc0:	2500      	movs	r5, #0
10012bc2:	079b      	lsls	r3, r3, #30
10012bc4:	d40f      	bmi.n	10012be6 <_printf_i+0x21e>
10012bc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012bc8:	68e0      	ldr	r0, [r4, #12]
10012bca:	4298      	cmp	r0, r3
10012bcc:	da17      	bge.n	10012bfe <_printf_i+0x236>
10012bce:	0018      	movs	r0, r3
10012bd0:	e015      	b.n	10012bfe <_printf_i+0x236>
10012bd2:	0022      	movs	r2, r4
10012bd4:	2301      	movs	r3, #1
10012bd6:	3219      	adds	r2, #25
10012bd8:	9906      	ldr	r1, [sp, #24]
10012bda:	9805      	ldr	r0, [sp, #20]
10012bdc:	9e07      	ldr	r6, [sp, #28]
10012bde:	47b0      	blx	r6
10012be0:	1c43      	adds	r3, r0, #1
10012be2:	d0e1      	beq.n	10012ba8 <_printf_i+0x1e0>
10012be4:	3501      	adds	r5, #1
10012be6:	68e3      	ldr	r3, [r4, #12]
10012be8:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012bea:	1a9b      	subs	r3, r3, r2
10012bec:	429d      	cmp	r5, r3
10012bee:	dbf0      	blt.n	10012bd2 <_printf_i+0x20a>
10012bf0:	e7e9      	b.n	10012bc6 <_printf_i+0x1fe>
10012bf2:	0026      	movs	r6, r4
10012bf4:	9b03      	ldr	r3, [sp, #12]
10012bf6:	3642      	adds	r6, #66	; 0x42
10012bf8:	781b      	ldrb	r3, [r3, #0]
10012bfa:	7033      	strb	r3, [r6, #0]
10012bfc:	e78e      	b.n	10012b1c <_printf_i+0x154>
10012bfe:	b00b      	add	sp, #44	; 0x2c
10012c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012c02:	46c0      	nop			; (mov r8, r8)
10012c04:	10014159 	.word	0x10014159
10012c08:	1001416a 	.word	0x1001416a

10012c0c <_putc_r>:
10012c0c:	b570      	push	{r4, r5, r6, lr}
10012c0e:	0006      	movs	r6, r0
10012c10:	000d      	movs	r5, r1
10012c12:	0014      	movs	r4, r2
10012c14:	2800      	cmp	r0, #0
10012c16:	d004      	beq.n	10012c22 <_putc_r+0x16>
10012c18:	6983      	ldr	r3, [r0, #24]
10012c1a:	2b00      	cmp	r3, #0
10012c1c:	d101      	bne.n	10012c22 <_putc_r+0x16>
10012c1e:	f7ff fb83 	bl	10012328 <__sinit>
10012c22:	4b12      	ldr	r3, [pc, #72]	; (10012c6c <_putc_r+0x60>)
10012c24:	429c      	cmp	r4, r3
10012c26:	d101      	bne.n	10012c2c <_putc_r+0x20>
10012c28:	6874      	ldr	r4, [r6, #4]
10012c2a:	e008      	b.n	10012c3e <_putc_r+0x32>
10012c2c:	4b10      	ldr	r3, [pc, #64]	; (10012c70 <_putc_r+0x64>)
10012c2e:	429c      	cmp	r4, r3
10012c30:	d101      	bne.n	10012c36 <_putc_r+0x2a>
10012c32:	68b4      	ldr	r4, [r6, #8]
10012c34:	e003      	b.n	10012c3e <_putc_r+0x32>
10012c36:	4b0f      	ldr	r3, [pc, #60]	; (10012c74 <_putc_r+0x68>)
10012c38:	429c      	cmp	r4, r3
10012c3a:	d100      	bne.n	10012c3e <_putc_r+0x32>
10012c3c:	68f4      	ldr	r4, [r6, #12]
10012c3e:	68a3      	ldr	r3, [r4, #8]
10012c40:	3b01      	subs	r3, #1
10012c42:	60a3      	str	r3, [r4, #8]
10012c44:	2b00      	cmp	r3, #0
10012c46:	da05      	bge.n	10012c54 <_putc_r+0x48>
10012c48:	69a2      	ldr	r2, [r4, #24]
10012c4a:	4293      	cmp	r3, r2
10012c4c:	db08      	blt.n	10012c60 <_putc_r+0x54>
10012c4e:	b2eb      	uxtb	r3, r5
10012c50:	2b0a      	cmp	r3, #10
10012c52:	d005      	beq.n	10012c60 <_putc_r+0x54>
10012c54:	6823      	ldr	r3, [r4, #0]
10012c56:	b2e8      	uxtb	r0, r5
10012c58:	1c5a      	adds	r2, r3, #1
10012c5a:	6022      	str	r2, [r4, #0]
10012c5c:	701d      	strb	r5, [r3, #0]
10012c5e:	e004      	b.n	10012c6a <_putc_r+0x5e>
10012c60:	0022      	movs	r2, r4
10012c62:	0029      	movs	r1, r5
10012c64:	0030      	movs	r0, r6
10012c66:	f7ff f99d 	bl	10011fa4 <__swbuf_r>
10012c6a:	bd70      	pop	{r4, r5, r6, pc}
10012c6c:	100140e8 	.word	0x100140e8
10012c70:	10014108 	.word	0x10014108
10012c74:	10014128 	.word	0x10014128

10012c78 <_sbrk_r>:
10012c78:	2300      	movs	r3, #0
10012c7a:	b570      	push	{r4, r5, r6, lr}
10012c7c:	4c06      	ldr	r4, [pc, #24]	; (10012c98 <_sbrk_r+0x20>)
10012c7e:	0005      	movs	r5, r0
10012c80:	0008      	movs	r0, r1
10012c82:	6023      	str	r3, [r4, #0]
10012c84:	f7f6 ff6a 	bl	10009b5c <_sbrk>
10012c88:	1c43      	adds	r3, r0, #1
10012c8a:	d103      	bne.n	10012c94 <_sbrk_r+0x1c>
10012c8c:	6823      	ldr	r3, [r4, #0]
10012c8e:	2b00      	cmp	r3, #0
10012c90:	d000      	beq.n	10012c94 <_sbrk_r+0x1c>
10012c92:	602b      	str	r3, [r5, #0]
10012c94:	bd70      	pop	{r4, r5, r6, pc}
10012c96:	46c0      	nop			; (mov r8, r8)
10012c98:	1001734c 	.word	0x1001734c

10012c9c <__sread>:
10012c9c:	b570      	push	{r4, r5, r6, lr}
10012c9e:	000c      	movs	r4, r1
10012ca0:	250e      	movs	r5, #14
10012ca2:	5f49      	ldrsh	r1, [r1, r5]
10012ca4:	f000 f8b0 	bl	10012e08 <_read_r>
10012ca8:	2800      	cmp	r0, #0
10012caa:	db03      	blt.n	10012cb4 <__sread+0x18>
10012cac:	6d63      	ldr	r3, [r4, #84]	; 0x54
10012cae:	181b      	adds	r3, r3, r0
10012cb0:	6563      	str	r3, [r4, #84]	; 0x54
10012cb2:	e003      	b.n	10012cbc <__sread+0x20>
10012cb4:	89a2      	ldrh	r2, [r4, #12]
10012cb6:	4b02      	ldr	r3, [pc, #8]	; (10012cc0 <__sread+0x24>)
10012cb8:	4013      	ands	r3, r2
10012cba:	81a3      	strh	r3, [r4, #12]
10012cbc:	bd70      	pop	{r4, r5, r6, pc}
10012cbe:	46c0      	nop			; (mov r8, r8)
10012cc0:	ffffefff 	.word	0xffffefff

10012cc4 <__swrite>:
10012cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012cc6:	001f      	movs	r7, r3
10012cc8:	898b      	ldrh	r3, [r1, #12]
10012cca:	0005      	movs	r5, r0
10012ccc:	000c      	movs	r4, r1
10012cce:	0016      	movs	r6, r2
10012cd0:	05db      	lsls	r3, r3, #23
10012cd2:	d505      	bpl.n	10012ce0 <__swrite+0x1c>
10012cd4:	230e      	movs	r3, #14
10012cd6:	5ec9      	ldrsh	r1, [r1, r3]
10012cd8:	2200      	movs	r2, #0
10012cda:	2302      	movs	r3, #2
10012cdc:	f000 f874 	bl	10012dc8 <_lseek_r>
10012ce0:	89a2      	ldrh	r2, [r4, #12]
10012ce2:	4b05      	ldr	r3, [pc, #20]	; (10012cf8 <__swrite+0x34>)
10012ce4:	0028      	movs	r0, r5
10012ce6:	4013      	ands	r3, r2
10012ce8:	81a3      	strh	r3, [r4, #12]
10012cea:	0032      	movs	r2, r6
10012cec:	230e      	movs	r3, #14
10012cee:	5ee1      	ldrsh	r1, [r4, r3]
10012cf0:	003b      	movs	r3, r7
10012cf2:	f000 f81f 	bl	10012d34 <_write_r>
10012cf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012cf8:	ffffefff 	.word	0xffffefff

10012cfc <__sseek>:
10012cfc:	b570      	push	{r4, r5, r6, lr}
10012cfe:	000c      	movs	r4, r1
10012d00:	250e      	movs	r5, #14
10012d02:	5f49      	ldrsh	r1, [r1, r5]
10012d04:	f000 f860 	bl	10012dc8 <_lseek_r>
10012d08:	89a3      	ldrh	r3, [r4, #12]
10012d0a:	1c42      	adds	r2, r0, #1
10012d0c:	d103      	bne.n	10012d16 <__sseek+0x1a>
10012d0e:	4a05      	ldr	r2, [pc, #20]	; (10012d24 <__sseek+0x28>)
10012d10:	4013      	ands	r3, r2
10012d12:	81a3      	strh	r3, [r4, #12]
10012d14:	e004      	b.n	10012d20 <__sseek+0x24>
10012d16:	2280      	movs	r2, #128	; 0x80
10012d18:	0152      	lsls	r2, r2, #5
10012d1a:	4313      	orrs	r3, r2
10012d1c:	81a3      	strh	r3, [r4, #12]
10012d1e:	6560      	str	r0, [r4, #84]	; 0x54
10012d20:	bd70      	pop	{r4, r5, r6, pc}
10012d22:	46c0      	nop			; (mov r8, r8)
10012d24:	ffffefff 	.word	0xffffefff

10012d28 <__sclose>:
10012d28:	b510      	push	{r4, lr}
10012d2a:	230e      	movs	r3, #14
10012d2c:	5ec9      	ldrsh	r1, [r1, r3]
10012d2e:	f000 f815 	bl	10012d5c <_close_r>
10012d32:	bd10      	pop	{r4, pc}

10012d34 <_write_r>:
10012d34:	b570      	push	{r4, r5, r6, lr}
10012d36:	0005      	movs	r5, r0
10012d38:	0008      	movs	r0, r1
10012d3a:	0011      	movs	r1, r2
10012d3c:	2200      	movs	r2, #0
10012d3e:	4c06      	ldr	r4, [pc, #24]	; (10012d58 <_write_r+0x24>)
10012d40:	6022      	str	r2, [r4, #0]
10012d42:	001a      	movs	r2, r3
10012d44:	f7f6 fee2 	bl	10009b0c <_write>
10012d48:	1c43      	adds	r3, r0, #1
10012d4a:	d103      	bne.n	10012d54 <_write_r+0x20>
10012d4c:	6823      	ldr	r3, [r4, #0]
10012d4e:	2b00      	cmp	r3, #0
10012d50:	d000      	beq.n	10012d54 <_write_r+0x20>
10012d52:	602b      	str	r3, [r5, #0]
10012d54:	bd70      	pop	{r4, r5, r6, pc}
10012d56:	46c0      	nop			; (mov r8, r8)
10012d58:	1001734c 	.word	0x1001734c

10012d5c <_close_r>:
10012d5c:	2300      	movs	r3, #0
10012d5e:	b570      	push	{r4, r5, r6, lr}
10012d60:	4c06      	ldr	r4, [pc, #24]	; (10012d7c <_close_r+0x20>)
10012d62:	0005      	movs	r5, r0
10012d64:	0008      	movs	r0, r1
10012d66:	6023      	str	r3, [r4, #0]
10012d68:	f7f6 ff0a 	bl	10009b80 <_close>
10012d6c:	1c43      	adds	r3, r0, #1
10012d6e:	d103      	bne.n	10012d78 <_close_r+0x1c>
10012d70:	6823      	ldr	r3, [r4, #0]
10012d72:	2b00      	cmp	r3, #0
10012d74:	d000      	beq.n	10012d78 <_close_r+0x1c>
10012d76:	602b      	str	r3, [r5, #0]
10012d78:	bd70      	pop	{r4, r5, r6, pc}
10012d7a:	46c0      	nop			; (mov r8, r8)
10012d7c:	1001734c 	.word	0x1001734c

10012d80 <_fstat_r>:
10012d80:	2300      	movs	r3, #0
10012d82:	b570      	push	{r4, r5, r6, lr}
10012d84:	4c06      	ldr	r4, [pc, #24]	; (10012da0 <_fstat_r+0x20>)
10012d86:	0005      	movs	r5, r0
10012d88:	0008      	movs	r0, r1
10012d8a:	0011      	movs	r1, r2
10012d8c:	6023      	str	r3, [r4, #0]
10012d8e:	f7f6 fefb 	bl	10009b88 <_fstat>
10012d92:	1c43      	adds	r3, r0, #1
10012d94:	d103      	bne.n	10012d9e <_fstat_r+0x1e>
10012d96:	6823      	ldr	r3, [r4, #0]
10012d98:	2b00      	cmp	r3, #0
10012d9a:	d000      	beq.n	10012d9e <_fstat_r+0x1e>
10012d9c:	602b      	str	r3, [r5, #0]
10012d9e:	bd70      	pop	{r4, r5, r6, pc}
10012da0:	1001734c 	.word	0x1001734c

10012da4 <_isatty_r>:
10012da4:	2300      	movs	r3, #0
10012da6:	b570      	push	{r4, r5, r6, lr}
10012da8:	4c06      	ldr	r4, [pc, #24]	; (10012dc4 <_isatty_r+0x20>)
10012daa:	0005      	movs	r5, r0
10012dac:	0008      	movs	r0, r1
10012dae:	6023      	str	r3, [r4, #0]
10012db0:	f7f6 fef0 	bl	10009b94 <_isatty>
10012db4:	1c43      	adds	r3, r0, #1
10012db6:	d103      	bne.n	10012dc0 <_isatty_r+0x1c>
10012db8:	6823      	ldr	r3, [r4, #0]
10012dba:	2b00      	cmp	r3, #0
10012dbc:	d000      	beq.n	10012dc0 <_isatty_r+0x1c>
10012dbe:	602b      	str	r3, [r5, #0]
10012dc0:	bd70      	pop	{r4, r5, r6, pc}
10012dc2:	46c0      	nop			; (mov r8, r8)
10012dc4:	1001734c 	.word	0x1001734c

10012dc8 <_lseek_r>:
10012dc8:	b570      	push	{r4, r5, r6, lr}
10012dca:	0005      	movs	r5, r0
10012dcc:	0008      	movs	r0, r1
10012dce:	0011      	movs	r1, r2
10012dd0:	2200      	movs	r2, #0
10012dd2:	4c06      	ldr	r4, [pc, #24]	; (10012dec <_lseek_r+0x24>)
10012dd4:	6022      	str	r2, [r4, #0]
10012dd6:	001a      	movs	r2, r3
10012dd8:	f7f6 fede 	bl	10009b98 <_lseek>
10012ddc:	1c43      	adds	r3, r0, #1
10012dde:	d103      	bne.n	10012de8 <_lseek_r+0x20>
10012de0:	6823      	ldr	r3, [r4, #0]
10012de2:	2b00      	cmp	r3, #0
10012de4:	d000      	beq.n	10012de8 <_lseek_r+0x20>
10012de6:	602b      	str	r3, [r5, #0]
10012de8:	bd70      	pop	{r4, r5, r6, pc}
10012dea:	46c0      	nop			; (mov r8, r8)
10012dec:	1001734c 	.word	0x1001734c

10012df0 <memchr>:
10012df0:	b2c9      	uxtb	r1, r1
10012df2:	1882      	adds	r2, r0, r2
10012df4:	4290      	cmp	r0, r2
10012df6:	d004      	beq.n	10012e02 <memchr+0x12>
10012df8:	7803      	ldrb	r3, [r0, #0]
10012dfa:	428b      	cmp	r3, r1
10012dfc:	d002      	beq.n	10012e04 <memchr+0x14>
10012dfe:	3001      	adds	r0, #1
10012e00:	e7f8      	b.n	10012df4 <memchr+0x4>
10012e02:	2000      	movs	r0, #0
10012e04:	4770      	bx	lr
	...

10012e08 <_read_r>:
10012e08:	b570      	push	{r4, r5, r6, lr}
10012e0a:	0005      	movs	r5, r0
10012e0c:	0008      	movs	r0, r1
10012e0e:	0011      	movs	r1, r2
10012e10:	2200      	movs	r2, #0
10012e12:	4c06      	ldr	r4, [pc, #24]	; (10012e2c <_read_r+0x24>)
10012e14:	6022      	str	r2, [r4, #0]
10012e16:	001a      	movs	r2, r3
10012e18:	f7f6 fe58 	bl	10009acc <_read>
10012e1c:	1c43      	adds	r3, r0, #1
10012e1e:	d103      	bne.n	10012e28 <_read_r+0x20>
10012e20:	6823      	ldr	r3, [r4, #0]
10012e22:	2b00      	cmp	r3, #0
10012e24:	d000      	beq.n	10012e28 <_read_r+0x20>
10012e26:	602b      	str	r3, [r5, #0]
10012e28:	bd70      	pop	{r4, r5, r6, pc}
10012e2a:	46c0      	nop			; (mov r8, r8)
10012e2c:	1001734c 	.word	0x1001734c

10012e30 <__aeabi_lmul>:
10012e30:	b5f0      	push	{r4, r5, r6, r7, lr}
10012e32:	464f      	mov	r7, r9
10012e34:	4646      	mov	r6, r8
10012e36:	b4c0      	push	{r6, r7}
10012e38:	0416      	lsls	r6, r2, #16
10012e3a:	0c36      	lsrs	r6, r6, #16
10012e3c:	4699      	mov	r9, r3
10012e3e:	0033      	movs	r3, r6
10012e40:	0405      	lsls	r5, r0, #16
10012e42:	0c2c      	lsrs	r4, r5, #16
10012e44:	0c07      	lsrs	r7, r0, #16
10012e46:	0c15      	lsrs	r5, r2, #16
10012e48:	4363      	muls	r3, r4
10012e4a:	437e      	muls	r6, r7
10012e4c:	436f      	muls	r7, r5
10012e4e:	4365      	muls	r5, r4
10012e50:	0c1c      	lsrs	r4, r3, #16
10012e52:	19ad      	adds	r5, r5, r6
10012e54:	1964      	adds	r4, r4, r5
10012e56:	469c      	mov	ip, r3
10012e58:	42a6      	cmp	r6, r4
10012e5a:	d903      	bls.n	10012e64 <__aeabi_lmul+0x34>
10012e5c:	2380      	movs	r3, #128	; 0x80
10012e5e:	025b      	lsls	r3, r3, #9
10012e60:	4698      	mov	r8, r3
10012e62:	4447      	add	r7, r8
10012e64:	4663      	mov	r3, ip
10012e66:	0c25      	lsrs	r5, r4, #16
10012e68:	19ef      	adds	r7, r5, r7
10012e6a:	041d      	lsls	r5, r3, #16
10012e6c:	464b      	mov	r3, r9
10012e6e:	434a      	muls	r2, r1
10012e70:	4343      	muls	r3, r0
10012e72:	0c2d      	lsrs	r5, r5, #16
10012e74:	0424      	lsls	r4, r4, #16
10012e76:	1964      	adds	r4, r4, r5
10012e78:	1899      	adds	r1, r3, r2
10012e7a:	19c9      	adds	r1, r1, r7
10012e7c:	0020      	movs	r0, r4
10012e7e:	bc0c      	pop	{r2, r3}
10012e80:	4690      	mov	r8, r2
10012e82:	4699      	mov	r9, r3
10012e84:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e86:	46c0      	nop			; (mov r8, r8)
10012e88:	10008e20 	.word	0x10008e20
10012e8c:	10008e2e 	.word	0x10008e2e
10012e90:	10008e3c 	.word	0x10008e3c
10012e94:	10008e4a 	.word	0x10008e4a
10012e98:	10008e58 	.word	0x10008e58
10012e9c:	10008e66 	.word	0x10008e66
10012ea0:	10008e74 	.word	0x10008e74
10012ea4:	10008e84 	.word	0x10008e84
10012ea8:	10008e94 	.word	0x10008e94
10012eac:	10008ea4 	.word	0x10008ea4
10012eb0:	10008eb4 	.word	0x10008eb4
10012eb4:	10008ec4 	.word	0x10008ec4
10012eb8:	10008ed4 	.word	0x10008ed4
10012ebc:	10008ee4 	.word	0x10008ee4
10012ec0:	10008ef4 	.word	0x10008ef4
10012ec4:	10008f04 	.word	0x10008f04
10012ec8:	10008f14 	.word	0x10008f14
10012ecc:	10008f24 	.word	0x10008f24
10012ed0:	10008f34 	.word	0x10008f34
10012ed4:	10008f44 	.word	0x10008f44
10012ed8:	10008f54 	.word	0x10008f54
10012edc:	10008f64 	.word	0x10008f64
10012ee0:	10008f74 	.word	0x10008f74
10012ee4:	10008f84 	.word	0x10008f84
10012ee8:	10008f94 	.word	0x10008f94
10012eec:	10008fa4 	.word	0x10008fa4
10012ef0:	10008fb4 	.word	0x10008fb4
10012ef4:	10008fc4 	.word	0x10008fc4
10012ef8:	10008fd2 	.word	0x10008fd2
10012efc:	10008fe0 	.word	0x10008fe0
10012f00:	10008fee 	.word	0x10008fee
10012f04:	10008ffc 	.word	0x10008ffc
10012f08:	1000900a 	.word	0x1000900a
10012f0c:	10009018 	.word	0x10009018
10012f10:	10009026 	.word	0x10009026
10012f14:	10009034 	.word	0x10009034
10012f18:	10009044 	.word	0x10009044
10012f1c:	10009054 	.word	0x10009054
10012f20:	10009064 	.word	0x10009064
10012f24:	10009074 	.word	0x10009074
10012f28:	10009084 	.word	0x10009084
10012f2c:	10009094 	.word	0x10009094
10012f30:	100090a4 	.word	0x100090a4
10012f34:	100090b4 	.word	0x100090b4
10012f38:	100090c4 	.word	0x100090c4
10012f3c:	100090d4 	.word	0x100090d4
10012f40:	100090e4 	.word	0x100090e4
10012f44:	100090f4 	.word	0x100090f4
10012f48:	10009104 	.word	0x10009104
10012f4c:	10009114 	.word	0x10009114
10012f50:	10009124 	.word	0x10009124
10012f54:	10009134 	.word	0x10009134
10012f58:	10009142 	.word	0x10009142
10012f5c:	10009150 	.word	0x10009150
10012f60:	10009190 	.word	0x10009190
10012f64:	100091b8 	.word	0x100091b8
10012f68:	100091e0 	.word	0x100091e0
10012f6c:	10009208 	.word	0x10009208
10012f70:	10009448 	.word	0x10009448
10012f74:	10009238 	.word	0x10009238
10012f78:	10009250 	.word	0x10009250
10012f7c:	100092c8 	.word	0x100092c8
10012f80:	100092e0 	.word	0x100092e0
10012f84:	10009268 	.word	0x10009268
10012f88:	10009280 	.word	0x10009280
10012f8c:	10009298 	.word	0x10009298
10012f90:	100092b0 	.word	0x100092b0
10012f94:	100092f8 	.word	0x100092f8
10012f98:	100095bc 	.word	0x100095bc
10012f9c:	100095bc 	.word	0x100095bc
10012fa0:	100095bc 	.word	0x100095bc
10012fa4:	100095bc 	.word	0x100095bc
10012fa8:	100095bc 	.word	0x100095bc
10012fac:	100095bc 	.word	0x100095bc
10012fb0:	100095bc 	.word	0x100095bc
10012fb4:	100095bc 	.word	0x100095bc
10012fb8:	100093a0 	.word	0x100093a0
10012fbc:	100093b8 	.word	0x100093b8
10012fc0:	100093d0 	.word	0x100093d0
10012fc4:	1000945e 	.word	0x1000945e
10012fc8:	10009328 	.word	0x10009328
10012fcc:	100095bc 	.word	0x100095bc
10012fd0:	100095bc 	.word	0x100095bc
10012fd4:	100095bc 	.word	0x100095bc
10012fd8:	100095bc 	.word	0x100095bc
10012fdc:	100095bc 	.word	0x100095bc
10012fe0:	100095bc 	.word	0x100095bc
10012fe4:	100093e8 	.word	0x100093e8
10012fe8:	10009400 	.word	0x10009400
10012fec:	10009418 	.word	0x10009418
10012ff0:	10009430 	.word	0x10009430
10012ff4:	100095bc 	.word	0x100095bc
10012ff8:	10009574 	.word	0x10009574
10012ffc:	1000958c 	.word	0x1000958c
10013000:	100095bc 	.word	0x100095bc
10013004:	100095bc 	.word	0x100095bc
10013008:	1000948a 	.word	0x1000948a
1001300c:	100094a0 	.word	0x100094a0
10013010:	100094b6 	.word	0x100094b6
10013014:	100094cc 	.word	0x100094cc
10013018:	100095bc 	.word	0x100095bc
1001301c:	100095bc 	.word	0x100095bc
10013020:	100095bc 	.word	0x100095bc
10013024:	100095bc 	.word	0x100095bc
10013028:	100095bc 	.word	0x100095bc
1001302c:	100095bc 	.word	0x100095bc
10013030:	100095bc 	.word	0x100095bc
10013034:	100095bc 	.word	0x100095bc
10013038:	1000917c 	.word	0x1000917c
1001303c:	100091a4 	.word	0x100091a4
10013040:	100091cc 	.word	0x100091cc
10013044:	100091f4 	.word	0x100091f4
10013048:	10009220 	.word	0x10009220
1001304c:	10009310 	.word	0x10009310
10013050:	10009340 	.word	0x10009340
10013054:	10009358 	.word	0x10009358
10013058:	10009370 	.word	0x10009370
1001305c:	10009388 	.word	0x10009388
10013060:	10009474 	.word	0x10009474
10013064:	100094e2 	.word	0x100094e2
10013068:	1000955c 	.word	0x1000955c
1001306c:	100095a4 	.word	0x100095a4

10013070 <hr_sensor_gatt_server_handle>:
10013070:	10009ba1 00000000 10009c49 00000000     ........I.......
10013080:	00000000 10009bc9 00000000 00000000     ................
	...
10013098:	0000000d 625f7461 775f656c 65746972     ....at_ble_write
100130a8:	7475615f 69726f68 725f657a 796c7065     _authorize_reply
100130b8:	69616620 0064656c 74697257 61762065      failed.Write va
100130c8:	2065756c 20726f66 69746f6e 61636966     lue for notifica
100130d8:	6e6f6974 69616620 2c64656c 73616572     tion failed,reas
100130e8:	25206e6f 00000064 646e6553 746f6e20     on %d...Send not
100130f8:	63696669 6f697461 6166206e 64656c69     ification failed
10013108:	6165722c 206e6f73 00006425 6c696146     ,reason %d..Fail
10013118:	74206465 6964206f 6e6f6373 7463656e     ed to disconnect
10013128:	72202c20 6f736165 7825206e 00000000      , reason %x....
10013138:	63736944 656e6e6f 6f697463 6572206e     Disconnection re
10013148:	73657571 75732074 73656363 6c756673     quest successful
10013158:	0000006c 65756c42 746f6f74 65642068     l...Bluetooth de
10013168:	65636976 20736920 41206e69 72657664     vice is in Adver
10013178:	69736974 4d20676e 0065646f 65756c42     tising Mode.Blue
10013188:	746f6f74 454c2068 76644120 69747265     tooth LE Adverti
10013198:	656d6573 6620746e 656c6961 74732064     sement failed st
100131a8:	20747261 6c696146 722c6465 6f736165     art Failed,reaso
100131b8:	6425206e 00000000 72616548 61522074     n %d....Heart Ra
100131c8:	53206574 69767265 64206563 6e696665     te Service defin
100131d8:	6f697469 6146206e 64656c69 6165722c     ition Failed,rea
100131e8:	3a6e6f73 00782520 20736944 76726553     son: %x.Dis Serv
100131f8:	20656369 69666564 6974696e 66206e6f     ice definition f
10013208:	656c6961 65722c64 6e6f7361 7825203a     ailed,reason: %x
10013218:	00000000 65766441 73697472 6e656d65     ....Advertisemen
10013228:	61642074 73206174 66207465 656c6961     t data set faile
10013238:	65722064 6e6f7361 00642520              d reason %d.

10013244 <hr_sensor_gap_handle>:
	...
10013258:	10009ba5 10009b9d 00000000 00000000     ................
	...
10013290:	61647075 676e6974 65687420 61686320     updating the cha
100132a0:	74636172 73697265 20636974 6c696166     racteristic fail
100132b0:	64256465 00000000 646e6573 20676e69     ed%d....sending 
100132c0:	69746f6e 61636966 6e6f6974 69616620     notification fai
100132d0:	2564656c 00000064 1000a0fc 1000a0fe     led%d...........
100132e0:	1000a0e4 1000a0e4 1000a0e4 1000a0fc     ................
100132f0:	1000a0e4 1000a0e4 1000a94a 1000a9be     ........J.......
10013300:	1000a932 1000a9c4 1000a938 1000a93e     2.......8...>...
10013310:	1000a944 1000b01c 1000b01c 1000b01c     D...............
10013320:	1000b01c 1000b01c 1000b01c 1000b01c     ................
10013330:	1000b01c 1000b01c 1000b01c 1000b01c     ................
10013340:	1000b01c 1000b01c 1000b01c 1000b01c     ................
10013350:	1000b01c 1000b01c 1000b01c 1000b01c     ................
10013360:	1000b03a 1000b03a 1000b03a 1000b03a     :...:...:...:...
10013370:	1000b03a 1000b03a 1000b03a 1000b03a     :...:...:...:...
10013380:	1000b03a 1000b03a 1000b05c 1000b05c     :...:...\...\...
10013390:	1000b05c 1000b05c 1000b05c 1000b05c     \...\...\...\...
100133a0:	1000b05c 1000b05c 1000b05c 1000b05c     \...\...\...\...
100133b0:	1000b07e 1000b07e 1000b07e 1000b07e     ~...~...~...~...
100133c0:	1000b07e 1000b07e 1000b098 1000b098     ~...~...........
100133d0:	1000b098 1000b098 1000b098 1000b098     ................
100133e0:	1000b098 1000b098 1000b098 1000b0b2     ................
100133f0:	1000b0b2 1000b0d4 1000b0d4 1000b0ee     ................
10013400:	1000b0d4 34333231 00003635 efcdab00     ....123456......
10013410:	00efcdab b2d60600 f8f005f0 00000000     ................

10013420 <ble_mgr_gatt_server_handle>:
	...
10013438:	1000a041 1000a07d 1000a045 00000000     A...}...E.......
10013448:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10013458:	00000000 2055544d 6e616843 46206567     ....MTU Change F
10013468:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10013478:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10013488:	69746172 253a6e6f 00000064 69766544     ration:%d...Devi
10013498:	64206563 6f637369 63656e6e 20646574     ce disconnected 
100134a8:	73616552 303a6e6f 32302578 61482078     Reason:0x%02x Ha
100134b8:	656c646e 2578303d 00000078 72636e45     ndle=0x%x...Encr
100134c8:	69747079 66206e6f 656c6961 00000064     yption failed...
100134d8:	72636e45 69747079 63206e6f 6c706d6f     Encryption compl
100134e8:	64657465 63757320 73736563 6c6c7566     eted successfull
100134f8:	00000079 20454c42 69766544 6e206563     y...BLE Device n
10013508:	6620746f 646e756f 636e6520 74707972     ot found encrypt
10013518:	206e6f69 6f666e69 00000000 6f666e49     ion info....Info
10013528:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10013538:	206e6163 69766564 72206563 68636165     can device reach
10013548:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10013558:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10013568:	7320706f 6e6e6163 00676e69 72696150     op scanning.Pair
10013578:	20676e69 6c696166 2e2e6465 7369442e     ing failed...Dis
10013588:	6e6e6f63 69746365 0000676e 63736944     connecting..Disc
10013598:	656e6e6f 52207463 65757165 46207473     onnect Request F
100135a8:	656c6961 00000064 72696150 20676e69     ailed...Pairing 
100135b8:	636f7270 72756465 6f632065 656c706d     procedure comple
100135c8:	20646574 63637573 66737365 796c6c75     ted successfully
100135d8:	00000000 20454c42 69766544 6e206563     ....BLE Device n
100135e8:	6620746f 646e756f 206f7420 726f7473     ot found to stor
100135f8:	68742065 61702065 6e697269 6e692067     e the pairing in
10013608:	00006f66 72636e45 69747079 4e206e6f     fo..Encryption N
10013618:	7320746f 74726174 00006465 76616c53     ot started..Slav
10013628:	65532065 69727563 52207974 2d207165     e Security Req -
10013638:	74754120 746e6568 74616369 206e6f69      Authentication 
10013648:	6c696146 00006465 72696150 71655220     Failed..Pair Req
10013658:	74736575 41202d20 65687475 6369746e     uest - Authentic
10013668:	6f697461 6146206e 64656c69 00000000     ation Failed....
10013678:	65746e45 68742072 61502065 656b7373     Enter the Passke
10013688:	2d362879 69676944 69202974 6554206e     y(6-Digit) in Te
10013698:	6e696d72 003a6c61 206e6950 656d6954     rminal:.Pin Time
100136a8:	0074756f 63736944 656e6e6f 6e697463     out.Disconnectin
100136b8:	2e2e2067 0000002e 61656c50 45206573     g ......Please E
100136c8:	7265746e 65687420 6c6f6620 69776f6c     nter the followi
100136d8:	5020676e 2d737361 65646f63 206e6f28     ng Pass-code(on 
100136e8:	6568746f 65442072 65636976 00003a29     other Device):..
100136f8:	72696150 79656b2d 70657220 6620796c     Pair-key reply f
10013708:	656c6961 00000064 20424f4f 74616546     ailed...OOB Feat
10013718:	20657275 20746f4e 70707573 6574726f     ure Not supporte
10013728:	00000064 65746e45 20646572 73736150     d...Entered Pass
10013738:	646f632d 00003a65 72696150 20676e69     -code:..Pairing 
10013748:	6f666e69 74616d72 206e6f69 7020666f     information of p
10013758:	20726565 69766564 69206563 6f6e2073     eer device is no
10013768:	76612074 616c6961 2e656c62 00000000     t available.....
10013778:	61656c50 75206573 6961706e 68742072     Please unpair th
10013788:	65642065 65636976 6f726620 6570206d     e device from pe
10013798:	64207265 63697665 6f6d2865 656c6962     er device(mobile
100137a8:	65732029 6e697474 6d207367 20756e65     ) settings menu 
100137b8:	20646e61 72617473 61702074 6e697269     and start pairin
100137c8:	67612067 006e6961 72636e45 69747079     g again.Encrypti
100137d8:	52206e6f 65757165 52207473 796c7065     on Request Reply
100137e8:	69614620 0064656c 74696e49 696c6169      Failed.Initiali
100137f8:	676e697a 4d415320 00313142 424d4153     zing SAMB11.SAMB
10013808:	49203131 6974696e 7a696c61 6f697461     11 Initializatio
10013818:	6166206e 64656c69 00000000 61656c50     n failed....Plea
10013828:	63206573 6b636568 65687420 776f7020     se check the pow
10013838:	61207265 6320646e 656e6e6f 6f697463     er and connectio
10013848:	202f206e 64726168 65726177 6e6f6320     n / hardware con
10013858:	7463656e 0000726f 48474152 00005641     nector..RAGHAV..
10013868:	69766544 6e206563 20656d61 20746573     Device name set 
10013878:	6c696166 00006465 61204442 65726464     failed..BD addre
10013888:	67207373 66207465 656c6961 00000064     ss get failed...
10013898:	41204442 65726464 303a7373 32302578     BD Address:0x%02
100138a8:	32302558 32302558 32302558 32302558     X%02X%02X%02X%02
100138b8:	32302558 41202c58 65726464 54207373     X%02X, Address T
100138c8:	3a657079 00006425 20746553 20454c42     ype:%d..Set BLE 
100138d8:	69766544 63206563 69666e6f 61727567     Device configura
100138e8:	6e6f6974 69616620 0064656c 20746553     tion failed.Set 
100138f8:	20454c42 69766544 41206563 65726464     BLE Device Addre
10013908:	66207373 656c6961 00000064 6e616353     ss failed...Scan
10013918:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10013928:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10013938:	69727563 72207974 65757165 66207473     curity request f
10013948:	656c6961 00000064 6e6e6f43 65746365     ailed...Connecte
10013958:	6f742064 65657020 65642072 65636976     d to peer device
10013968:	74697720 64612068 73657264 78302073      with address 0x
10013978:	78323025 78323025 78323025 78323025     %02x%02x%02x%02x
10013988:	78323025 78323025 00000000 6e6e6f43     %02x%02x....Conn
10013998:	69746365 48206e6f 6c646e61 64252065     ection Handle %d
100139a8:	00000000 6f736552 6e69766c 61522067     ....Resolving Ra
100139b8:	6d6f646e 64646120 73736572 69616620     ndom address fai
100139c8:	2a64656c 0000002a 2078614d 626d756e     led**...Max numb
100139d8:	6f207265 6f632066 63656e6e 6e6f6974     er of connection
100139e8:	61657220 64656863 6425203a 3d3d3d20      reached: %d ===
100139f8:	7369443e 6e6e6f63 69746365 2e2e676e     >Disconnecting..
10013a08:	0000002e 69766544 43206563 656e6e6f     ....Device Conne
10013a18:	6f697463 6146206e 64656c69 53202d20     ction Failed - S
10013a28:	75746174 25203a73 00000064 20454c42     tatus: %d...BLE 
10013a38:	65766441 73697472 6e656d65 61642074     Advertisement da
10013a48:	73206174 66207465 656c6961 00000064     ta set failed...

10013a58 <ble_mgr_gap_handle>:
10013a58:	1000a03d 1000a1f9 1000a055 00000000     =.......U.......
10013a68:	00000000 1000ace5 1000a0ad 1000a051     ............Q...
10013a78:	1000a399 1000a279 1000a59d 1000a3b1     ....y...........
10013a88:	1000a6f1 1000a835 1000a135 1000af21     ....5...5...!...
	...
10013aac:	00250400 454d5441 0000004c 20454c42     ..%.ATMEL...BLE 
10013abc:	49564544 00004543 434c5442 30303031     DEVICE..BTLC1000
10013acc:	4d41532f 00313142 20766552 00000041     /SAMB11.Rev A...
10013adc:	425f5746 00415445 425f5753 00415445     FW_BETA.SW_BETA.
10013aec:	61766e69 2064696c 676e656c 70206874     invalid length p
10013afc:	6d617261 72657465 00000000 61647075     arameter....upda
10013b0c:	676e6974 65687420 61686320 74636172     ting the charact
10013b1c:	73697265 20636974 6c696166 000d6465     eristic failed..
10013b2c:	1000c4e8 1000c502 1000c51a 1000c532     ............2...
10013b3c:	1000c54a 1000cad4 1000cadc 1000cae4     J...............
10013b4c:	1000caec 1000caf4                       ........

10013b54 <app_htpt_handle>:
	...
10013b68:	1000c3d1 00000000 00000000 00000000     ................

10013b78 <app_gap_cb>:
	...
10013b90:	1000c7a9 00000000 00000000 1000c629     ............)...
	...

10013bc4 <battery_app_gatt_server_cb>:
10013bc4:	1000c391 00000000 1000c409 00000000     ................
	...
10013bec:	72656e45 45207967 6e657078 20646564     Energy Expended 
10013bfc:	6d207369 20656461 6f273027 7375206e     is made '0'on us
10013c0c:	52207265 74657365 00000000 72617453     er Reset....Star
10013c1c:	20646574 20505448 706d6554 74617265     ted HTP Temperat
10013c2c:	20657275 69746f4e 61636966 6e6f6974     ure Notification
10013c3c:	00000000 20505448 706d6554 74617265     ....HTP Temperat
10013c4c:	20657275 69746f4e 61636966 6e6f6974     ure Notification
10013c5c:	6f745320 64657070 00000000 69746f4e      Stopped....Noti
10013c6c:	61636966 6e6f6974 616e4520 64656c62     fication Enabled
10013c7c:	00000000 69746f4e 61636966 6e6f6974     ....Notification
10013c8c:	73694420 656c6261 00000064 7373410a      Disabled....Ass
10013c9c:	6d6e6769 20746e65 3a322e33 70704120     ignment 3.2: App
10013cac:	6163696c 6e6f6974 69617020 20646572     lication paired 
10013cbc:	00000000 7373410a 6d6e6769 20746e65     .....Assignment 
10013ccc:	3a312e34 616e6520 20656c62 6c616568     4.1: enable heal
10013cdc:	74206874 65706d65 75746172 73206572     th temperature s
10013cec:	69767265 00206563 202a2a2a 6c696146     ervice .*** Fail
10013cfc:	20657275 48206e69 50205054 69666f72     ure in HTP Profi
10013d0c:	4520656c 6c62616e 00000065 65766461     le Enable...adve
10013d1c:	73697472 6e656d65 61642074 73206174     rtisement data s
10013d2c:	66207465 656c6961 65722064 6e6f7361     et failed reason
10013d3c:	64253a20 00000000 20454c42 72617453      :%d....BLE Star
10013d4c:	20646574 00766441 20454c42 20766441     ted Adv.BLE Adv 
10013d5c:	72617473 61462074 64656c69 61657220     start Failed rea
10013d6c:	206e6f73 0064253a 7373410a 6d6e6769     son :%d..Assignm
10013d7c:	20746e65 20312e32 7453203a 20747261     ent 2.1 : Start 
10013d8c:	65766441 73697472 00676e69 23230d0a     Advertising...##
10013d9c:	76644120 69747265 656d6573 6420746e      Advertisement d
10013dac:	20617461 20746573 6c696166 3a206465     ata set failed :
10013dbc:	72726520 2520726f 00000078 7373410a      error %x....Ass
10013dcc:	6d6e6769 20746e65 3a322e33 70704120     ignment 3.2: App
10013ddc:	6163696c 6e6f6974 73696420 6e6e6f63     lication disconn
10013dec:	65746365 00002064 7373410a 6d6e6769     ected ...Assignm
10013dfc:	20746e65 3a312e34 696e4920 65482074     ent 4.1: Init He
10013e0c:	68746c61 6d657420 61726570 65727574     alth temperature
10013e1c:	72657320 65636976 00000020 20505448      service ...HTP 
10013e2c:	61746144 73614220 72632065 69746165     Data Base creati
10013e3c:	66206e6f 656c6961 00000064 7373410a     on failed....Ass
10013e4c:	6d6e6769 20746e65 3a322e33 67655220     ignment 3.2: Reg
10013e5c:	65747369 6c622072 6f746575 2068746f     ister bluetooth 
10013e6c:	6e657665 63207374 626c6c61 736b6361     events callbacks
10013e7c:	00000000 4523230a 726f7272 65687720     .....##Error whe
10013e8c:	6552206e 74736967 6e697265 53202067     n Registering  S
10013e9c:	31424d41 61672031 61632070 61626c6c     AMB11 gap callba
10013eac:	00736b63 4523230a 726f7272 65687720     cks..##Error whe
10013ebc:	6552206e 74736967 6e697265 53202067     n Registering  S
10013ecc:	31424d41 74682031 63207470 626c6c61     AMB11 htpt callb
10013edc:	736b6361 00000000 69666564 676e696e     acks....defining
10013eec:	74616220 79726574 72657320 65636976      battery service
10013efc:	69616620 2064656c 00006425 72616548      failed %d..Hear
10013f0c:	61522074 203a6574 62206425 00006d70     t Rate: %d bpm..
10013f1c:	20525209 756c6156 283a7365 252c6425     .RR Values:(%d,%
10013f2c:	736d2964 00006365 65735520 74532072     d)msec.. User St
10013f3c:	73757461 6c64493a 00000065 65735520     atus:Idle... Use
10013f4c:	74532072 73757461 6c61573a 676e696b     r Status:Walking
10013f5c:	00000000 65735520 74732072 73757461     .... User status
10013f6c:	6972423a 77206b73 696b6c61 0000676e     :Brisk walking..
10013f7c:	65735520 74732072 73757461 6e75523a      User status:Run
10013f8c:	676e696e 00000000 65735520 74532072     ning.... User St
10013f9c:	73757461 7361463a 75522074 6e696e6e     atus:Fast Runnin
10013fac:	00000067 72656e45 45207967 6e657078     g...Energy Expen
10013fbc:	20646564 2064253a 000a4a4b 76657250     ded :%d KJ..Prev
10013fcc:	73756f69 746f6e20 63696669 6f697461     ious notificatio
10013fdc:	6f6e206e 65732074 0000746e              n not sent..

10013fe8 <battery_app_gap_cb>:
	...
10013ffc:	1000c381 1000c70d 00000000 00000000     ................
1001400c:	1000c371 00000000 00000000 00000000     q...............
1001401c:	00000000 1000c371 00000000 00000000     ....q...........
	...
10014034:	656d7441 6f43206c 022e7072                       Atmel Corp.

1001403f <CSWTCH.45>:
1001403f:	00100402                                         ...

10014042 <CSWTCH.47>:
10014042:	03010300 03030303 03030303 02020303              ...............

10014051 <client_conf_uuid>:
10014051:	29042902                                         .)

10014053 <presentation_format_uuid>:
10014053:	29012904                                         .)

10014055 <user_desc_uuid>:
10014055:	29032901                                         .)

10014057 <server_conf_uuid>:
10014057:	29002903                                         .)

10014059 <extended_props_uuid>:
10014059:	28022900                                         .)

1001405b <include_uuid>:
1001405b:	28032802                                         .(

1001405d <char_uuid>:
1001405d:	7c002803 da100106 da100105 d8100105     .(.|............
1001406d:	6e100105 6e100106 64100106 d8100106     ...n...n...d....
1001407d:	6e100105 64100106 6e100106 d8100106     ...n...d...n....
1001408d:	74100105 74100106 74100106 fe100106     ...t...t...t....
1001409d:	c8100106 8810010c 8810010b 8610010b     ................
100140ad:	a010010b a010010c 9210010c 8610010c     ................
100140bd:	a010010b 9210010c a010010c 8610010c     ................
100140cd:	a810010b a810010c a810010c a810010c     ................
100140dd:	4310010e bc000000                                ...C...

100140e4 <_global_impure_ptr>:
100140e4:	100141bc                                .A..

100140e8 <__sf_fake_stdin>:
	...

10014108 <__sf_fake_stdout>:
	...

10014128 <__sf_fake_stderr>:
	...
10014148:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10014158:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10014168:	31300046 35343332 39383736 64636261     F.0123456789abcd
10014178:	00006665                                ef..

1001417c <_init>:
1001417c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001417e:	46c0      	nop			; (mov r8, r8)
10014180:	bcf8      	pop	{r3, r4, r5, r6, r7}
10014182:	bc08      	pop	{r3}
10014184:	469e      	mov	lr, r3
10014186:	4770      	bx	lr

10014188 <__init_array_start>:
10014188:	100080b1 	.word	0x100080b1

1001418c <_fini>:
1001418c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001418e:	46c0      	nop			; (mov r8, r8)
10014190:	bcf8      	pop	{r3, r4, r5, r6, r7}
10014192:	bc08      	pop	{r3}
10014194:	469e      	mov	lr, r3
10014196:	4770      	bx	lr

10014198 <__fini_array_start>:
10014198:	10008089 	.word	0x10008089
